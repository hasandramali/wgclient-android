function: LookupSequence
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/animation.cpp
size: 0 != 103

function: IsSoundEvent
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/animation.cpp
size: 0 != 28

function: LookupAnimation
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/animation.cpp
size: 0 != 75

function: StudioCalcBoneAdj
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/animation.cpp
size: 0 != 628

function: StudioCalcRotations
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/animation.cpp
size: 0 != 193

function: VecBModelOrigin
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bmodels.cpp
size: 0 != 69

function: ButtonSound
first: ../cstrike/dlls/buttons.cpp
current: ../cstrike/dlls/buttons.cpp
size: 0 != 22

function: DispatchTouch
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 99

function: DispatchKeyValue
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 108

function: AddEntityHashValue
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 491

function: CaseInsensitiveHash
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 67

function: EmptyEntityHashTable
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 136

function: AddEntityHashValue
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 475

function: RemoveEntityHashValue
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 374

function: CREATE_NAMED_ENTITY
first: ../cstrike/dlls/cbase.cpp
current: ../cstrike/dlls/cbase.cpp
size: 0 != 68

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/client.cpp
nr_parms: 2 != 1

function: Radio1
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 409

function: Radio2
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 409

function: Radio3
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 647

function: ShowMenu
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 106

function: FStrEq
first: ../cstrike/dlls/airtank.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 35

function: ShowMenu
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 142

function: ShowVGUIMenu
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 238

function: CheckStartMoney
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 89

function: Q_strlen
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 24

function: DropPrimary
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 94

function: BuyItem
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 2094

function: BuyItem
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 108

function: Radio1
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 49

function: Radio2
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 49

function: Radio3
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 49

function: BuyAmmo
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 180

function: ResetPlayerPVS
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 388

function: CheckPlayerPVSLeafChanged
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 116

function: MarkEntityInPVS
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 32

function: CheckEntityRecentlyInPVS
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 55

function: Entity_FieldInit
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 151

function: Player_FieldInit
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 82

function: CountTeamPlayers
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/client.cpp
size: 0 != 140

function: RadiusDamage
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 766

function: RadiusDamage2
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 1006

function: RadiusDamage
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 782

function: RadiusDamage2
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 1046

function: RadiusDamage
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 242
nr_parms: 7 != 6

function: RadiusDamage
first: ../cstrike/dlls/combat.cpp
current: ../cstrike/dlls/combat.cpp
size: 0 != 242

function: PlayLockSounds
first: ../cstrike/dlls/doors.cpp
current: ../cstrike/dlls/doors.cpp
size: 0 != 778

function: PlayLockSounds
first: ../cstrike/dlls/doors.cpp
current: ../cstrike/dlls/doors.cpp
size: 0 != 778

function: IsPointEntity
first: ../cstrike/dlls/effects.cpp
current: ../cstrike/dlls/effects.cpp
size: 0 != 118

function: IsPointEntity
first: ../cstrike/dlls/effects.cpp
current: ../cstrike/dlls/effects.cpp
size: 0 != 38

function: GetGameDescription
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/gamerules.cpp
size: 36 != 6
nr_parms: 0 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/gamerules.cpp
size: 9414 != 3
nr_parms: 1 != 3

function: ClientUserInfoChanged
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/gamerules.cpp
size: 677 != 1
nr_parms: 2 != 3

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/gamerules.cpp
size: 78 != 1
nr_parms: 0 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 9414 != 0
nr_parms: 1 != 3

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 78 != 0
nr_parms: 0 != 1

function: GetGameDescription
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 36 != 6
nr_parms: 0 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 9414 != 3
nr_parms: 1 != 3

function: ClientUserInfoChanged
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 677 != 62
nr_parms: 2 != 3

function: SV_CareerAddTask_f
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 307

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 78 != 83
nr_parms: 0 != 1

function: SV_CareerMatchLimit_f
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 181

function: SV_Career_EndRound_f
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 339

function: SV_Continue_f
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 200

function: Broadcast
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 142

function: GetTeam
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 23

function: DestroyMapCycle
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 78

function: MP_COM_TokenWaiting
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 91

function: CountPlayers
first: ../cstrike/dlls/multiplay_gamerules.cpp
current: ../cstrike/dlls/multiplay_gamerules.cpp
size: 0 != 68

function: GetForceCamera
first: ../cstrike/dlls/observer.cpp
current: ../cstrike/dlls/observer.cpp
size: 0 != 86

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/player.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/player.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/player.cpp
nr_parms: 2 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/player.cpp
size: 9414 != 0
nr_parms: 1 != 5

function: LogAttack
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 318

function: SendItemStatus
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 87

function: TrainSpeed
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 86

function: LogAttack
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 180

function: IsSpawnPointValid
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 170

function: FindZombieSpawn
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 3

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/player.cpp
size: 9414 != 78
nr_parms: 1 != 5

function: GetBuyStringForWeaponClass
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 134

function: IsPrimaryWeaponClass
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 14

function: IsPrimaryWeaponId
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 44

function: IsSecondaryWeaponClass
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 9

function: IsSecondaryWeaponId
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 41

function: GetWeaponAliasFromName
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 53

function: CurrentWeaponSatisfies
first: ../cstrike/dlls/player.cpp
current: ../cstrike/dlls/player.cpp
size: 0 != 163

function: UpdateClientData
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/player.cpp
size: 1272 != 3541
nr_parms: 3 != 1

function: GetGameDescription
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/singleplay_gamerules.cpp
size: 36 != 6
nr_parms: 0 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/singleplay_gamerules.cpp
size: 9414 != 3
nr_parms: 1 != 3

function: ClientUserInfoChanged
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/singleplay_gamerules.cpp
size: 677 != 1
nr_parms: 2 != 3

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/singleplay_gamerules.cpp
size: 78 != 1
nr_parms: 0 != 1

function: USENTENCEG_InitLRU
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 478

function: USENTENCEG_PickSequential
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 165

function: SENTENCEG_GetIndex
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 118

function: SENTENCEG_PlayRndI
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 351

function: SENTENCEG_PlayRndSz
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 435

function: SENTENCEG_Lookup
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 143

function: EMIT_SOUND_DYN
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 305

function: TEXTURETYPE_Find
first: ../cstrike/dlls/sound.cpp
current: ../cstrike/dlls/sound.cpp
size: 0 != 105

function: SpectatorConnect
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/spectator.cpp
size: 33 != 51

function: SpectatorDisconnect
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/spectator.cpp
size: 33 != 1

function: SpectatorThink
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/spectator.cpp
size: 33 != 81

function: GetGameDescription
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/training_gamerules.cpp
size: 36 != 6
nr_parms: 0 != 1

function: PlayCDTrack
first: ../cstrike/dlls/triggers.cpp
current: ../cstrike/dlls/triggers.cpp
size: 0 != 174

function: UTIL_ScreenFadeWrite
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 148

function: U_Random
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 39

function: U_Srand
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 18

function: UTIL_AngleMod
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 124

function: UTIL_FindEntityByClassname
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 36

function: UTIL_FindEntityByTargetname
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 36

function: UTIL_PlayerByIndex
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 57

function: UTIL_MakeVectors
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 7

function: UTIL_ScreenShake
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 464

function: UTIL_ScreenFadeBuild
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 148

function: UTIL_ScreenFadeWrite
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 205

function: UTIL_ShowMessage
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 148

function: UTIL_TraceLine
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 56
nr_parms: 5 != 6

function: UTIL_TraceLine
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 21

function: UTIL_ShouldShowBlood
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 73

function: UTIL_PointContents
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 7

function: UTIL_StringToVector
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 275

function: _rotr
first: ../cstrike/dlls/util.cpp
current: ../cstrike/dlls/util.cpp
size: 0 != 44

function: UpdateClientData
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/weapons.cpp
size: 1272 != 3
nr_parms: 3 != 2

function: UpdateClientData
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/weapons.cpp
size: 1272 != 337
nr_parms: 3 != 2

function: MaxAmmoCarry
first: ../cstrike/dlls/weapons.cpp
current: ../cstrike/dlls/weapons.cpp
size: 0 != 172

function: ApplyMultiDamage
first: ../cstrike/dlls/weapons.cpp
current: ../cstrike/dlls/weapons.cpp
size: 0 != 60

function: EjectBrass
first: ../cstrike/dlls/weapons.cpp
current: ../cstrike/dlls/weapons.cpp
size: 0 != 388

function: AddAmmoNameToAmmoRegistry
first: ../cstrike/dlls/weapons.cpp
current: ../cstrike/dlls/weapons.cpp
size: 0 != 109

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/career_tasks.cpp
nr_parms: 2 != 1

function: StartFrame
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/tutor_base_tutor.cpp
size: 175 != 11
nr_parms: 0 != 2

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/tutor_cs_tutor.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/tutor_cs_tutor.cpp
nr_parms: 2 != 1

function: WeaponIDToAlias
first: ../cstrike/dlls/weapontype.cpp
current: ../cstrike/dlls/weapontype.cpp
size: 0 != 46

function: AliasToWeaponClass
first: ../cstrike/dlls/weapontype.cpp
current: ../cstrike/dlls/weapontype.cpp
size: 0 != 73

function: UTIL_DPrintf
first: ../cstrike/dlls/debug.cpp
current: ../cstrike/dlls/debug.cpp
size: 93 != 71
nr_parms: 2 != 1

function: FindHullIntersection
first: ../cstrike/dlls/wpn_shared/wpn_knife.cpp
current: ../cstrike/dlls/wpn_shared/wpn_knife.cpp
size: 0 != 1910

function: FindHullIntersection
first: ../cstrike/dlls/wpn_shared/wpn_knife.cpp
current: ../cstrike/dlls/wpn_shared/wpn_knife.cpp
size: 0 != 1947

function: PM_PlayStepSound
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 3380

function: PM_SwapTextures
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 154

function: PM_FindTextureType
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 143

function: PM_PlayStepSound
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 58

function: PM_MapTextureTypeStepType
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 26

function: PM_Jump
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 983

function: PM_AddCorrectGravity
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 126

function: PM_FixupGravityVelocity
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 94

function: PM_InWater
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 19

function: PM_GetRandomStuckOffsets
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 100

function: PM_ResetStuckOffsets
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 21

function: PM_SplineFraction
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 29

function: PM_FixPlayerCrouchStuck
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 145

function: PM_AddGravity
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 67

function: PM_PreventMegaBunnyJumping
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 109

function: PM_Jump
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 123

function: PM_CalcRoll
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 127

function: PM_DropPunchAngle
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 79

function: PM_ShouldDoSpectMode
first: ../cstrike/pm_shared/pm_shared.c
current: ../cstrike/pm_shared/pm_shared.c
size: 0 != 34

function: NormalizeAngles
first: ../cstrike/pm_shared/pm_math.c
current: ../cstrike/pm_shared/pm_math.c
size: 0 != 214

function: CrossProduct
first: ../cstrike/dlls/vehicle.cpp
current: ../cstrike/pm_shared/pm_math.c
nr_parms: 2 != 3

function: CrossProduct
first: ../cstrike/dlls/vehicle.cpp
current: ../cstrike/pm_shared/pm_math.c
size: 0 != 59
nr_parms: 2 != 3

function: Length
first: ../cstrike/pm_shared/pm_math.c
current: ../cstrike/pm_shared/pm_math.c
size: 0 != 57

function: VectorNormalize
first: ../cstrike/pm_shared/pm_math.c
current: ../cstrike/pm_shared/pm_math.c
size: 0 != 107

function: PM_ParticleLine
first: ../cstrike/pm_shared/pm_debug.c
current: ../cstrike/pm_shared/pm_debug.c
size: 0 != 200

function: PM_ParticleLine
first: ../cstrike/pm_shared/pm_debug.c
current: ../cstrike/pm_shared/pm_debug.c
size: 0 != 232

function: PM_DrawRectangle
first: ../cstrike/pm_shared/pm_debug.c
current: ../cstrike/pm_shared/pm_debug.c
size: 0 != 135

function: PM_DrawPhysEntBBox
first: ../cstrike/pm_shared/pm_debug.c
current: ../cstrike/pm_shared/pm_debug.c
size: 0 != 2270

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../game_shared/voice_gamemgr.cpp
size: 9414 != 501
nr_parms: 1 != 3

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_chatter.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_learn.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_learn.cpp
nr_parms: 2 != 1

function: GetEyePosition
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/bot/cs_bot_listen.cpp
size: 57 != 0
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_listen.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_listen.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
nr_parms: 2 != 1

function: StartFrame
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 175 != 0
nr_parms: 0 != 1

function: ClientDisconnect
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 412 != 0
nr_parms: 1 != 2

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
nr_parms: 2 != 1

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 78 != 12
nr_parms: 0 != 1

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 9414 != 31
nr_parms: 1 != 3

function: FStrEq
first: ../cstrike/dlls/airtank.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 0 != 35

function: UTIL_DrawBox
first: ../cstrike/dlls/bot/cs_bot_manager.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 0 != 612

function: PrintAllEntities
first: ../cstrike/dlls/bot/cs_bot_manager.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 0 != 118

function: ServerActivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 304 != 98
nr_parms: 3 != 1

function: ClientDisconnect
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 412 != 189
nr_parms: 1 != 2

function: StartFrame
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/bot/cs_bot_manager.cpp
size: 175 != 792
nr_parms: 0 != 1

function: GetEyePosition
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/bot/cs_bot_pathfind.cpp
size: 57 != 0
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_pathfind.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_pathfind.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_radio.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_radio.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_update.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_update.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_update.cpp
nr_parms: 2 != 1

function: GetEyePosition
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/bot/cs_bot_update.cpp
size: 57 != 0
nr_parms: 2 != 1

function: NavAreaBuildPath<PathCost>
first: ../cstrike/dlls/bot/cs_bot_chatter.cpp
current: ../cstrike/dlls/bot/cs_bot_update.cpp
size: 0 != 2200

function: GetEyePosition
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/bot/cs_bot_vision.cpp
size: 57 != 0
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_vision.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_bot_vision.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_gamestate.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/cs_gamestate.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/hostage/states/hostage_escape.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/hostage/states/hostage_escape.cpp
nr_parms: 2 != 1

function: ServerDeactivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/hostage/hostage.cpp
size: 78 != 1
nr_parms: 0 != 1

function: ServerActivate
first: ../cstrike/dlls/client.cpp
current: ../cstrike/dlls/hostage/hostage.cpp
size: 304 != 3494
nr_parms: 3 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/hostage/hostage_improv.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/hostage/hostage_improv.cpp
nr_parms: 2 != 1

function: NavAreaTravelDistance<ShortestPathCost>
first: ../cstrike/dlls/bot/cs_gamestate.cpp
current: ../cstrike/dlls/hostage/hostage_improv.cpp
nr_parms: 3 != 4

function: ClientCommand
first: ../cstrike/dlls/client.cpp
current: ../game_shared/bot/bot.cpp
size: 9414 != 78
nr_parms: 1 != 5

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/bot_manager.cpp
nr_parms: 2 != 1

function: StartFrame
first: ../cstrike/dlls/client.cpp
current: ../game_shared/bot/bot_manager.cpp
size: 175 != 3618
nr_parms: 0 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/bot_profile.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/bot_profile.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/bot_profile.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/bot_profile.cpp
nr_parms: 2 != 1

function: UTIL_GetClosestPlayer
first: ../game_shared/bot/bot_util.cpp
current: ../game_shared/bot/bot_util.cpp
nr_parms: 2 != 3

function: UTIL_GetBotPrefix
first: ../game_shared/bot/bot_util.cpp
current: ../game_shared/bot/bot_util.cpp
size: 0 != 6

function: UTIL_ComputeOrigin
first: ../game_shared/bot/bot_util.cpp
current: ../game_shared/bot/bot_util.cpp
size: 0 != 164

function: UTIL_ComputeOrigin
first: ../game_shared/bot/bot_util.cpp
current: ../game_shared/bot/bot_util.cpp
size: 0 != 164

function: UTIL_ComputeOrigin
first: ../game_shared/bot/bot_util.cpp
current: ../game_shared/bot/bot_util.cpp
size: 0 != 186

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_area.cpp
nr_parms: 2 != 1

function: IsHidingSpotInCover
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 1926

function: GetGroundHeight
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 710

function: NavAreaBuildPath<ApproachAreaCost>
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 1711

function: DestroyLadders
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 79

function: AddAreaToOpenList
first: ../cstrike/dlls/bot/cs_bot.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 502

function: IsHidingSpotInCover
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 1926

function: IsCrossingLineOfFire
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 725

function: EditNavAreasReset
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 41

function: GetGroundHeight
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 750

function: ForAllAreas<CollectHidingSpotsFunctor>
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 320

function: SearchSurroundingAreas<CollectHidingSpotsFunctor>
first: ../game_shared/bot/nav_area.cpp
current: ../game_shared/bot/nav_area.cpp
size: 0 != 2935

function: FindNearbyRetreatSpot
first: ../cstrike/dlls/bot/cs_bot.cpp
current: ../game_shared/bot/nav_area.cpp
size: 2098 != 1518
nr_parms: 2 != 6

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_file.cpp
nr_parms: 2 != 1

function: GetBspFilename
first: ../game_shared/bot/nav_file.cpp
current: ../game_shared/bot/nav_file.cpp
size: 0 != 139

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../game_shared/bot/nav_path.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp
nr_parms: 2 != 1

function: FindMinimumCostArea<FarAwayFromPositionFunctor>
first: ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp
current: ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp
size: 0 != 415

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_follow.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_follow.cpp
nr_parms: 2 != 1

function: GetEyePosition
first: ../cstrike/dlls/animation.cpp
current: ../cstrike/dlls/bot/states/cs_bot_hide.cpp
size: 57 != 0
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_hunt.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_idle.cpp
nr_parms: 2 != 1

function: operator*
first: ../cstrike/dlls/bmodels.cpp
current: ../cstrike/dlls/bot/states/cs_bot_idle.cpp
nr_parms: 2 != 1

function: NavAreaBuildPath<PathCost>
first: ../cstrike/dlls/bot/cs_bot_chatter.cpp
current: ../cstrike/dlls/bot/states/cs_bot_idle.cpp
size: 0 != 1955

function: NavAreaBuildPath<ShortestPathCost>
first: ../cstrike/dlls/bot/cs_gamestate.cpp
current: ../cstrike/dlls/bot/states/cs_bot_idle.cpp
size: 0 != 1252

function: Q_IsValidUChar32
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 49

function: Q_UChar32ToUTF8Len
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 47

function: Q_UChar32ToUTF16Len
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 15

function: Q_UChar32ToUTF16
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 73

function: Q_UChar32ToUTF8
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 164

function: Q_UTF16ToUChar32
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 253

function: Q_UTF32ToUTF8
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 25

function: Q_UTF8ToUTF32
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 25

function: Q_IsMeanSpaceW
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 116

function: Q_IsDeprecatedW
first: ../engine/unicode_strtools.cpp
current: ../engine/unicode_strtools.cpp
size: 0 != 45

/* <5e568c> ../engine/unicode_strtools.cpp:724 */
int Q_UnicodeRepair(char *pUTF8)
{
//	Q_UnicodeConvertT<char, char, true, (* Q_UTF8ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const char *pIn,
//														int nInChars,
//														char *pOut,
//														int nOutBytes,
//														enum EStringConvertErrorPolicy ePolicy);  //   726
}

/* <5e5636> ../engine/unicode_strtools.cpp:717 */
qboolean V_UTF8ToUChar32(const char *pUTF8_, uchar32 *uValueOut)
{
//	{
//		bool bError;                                          //   719
//	}
}

/* <5e5429> ../engine/unicode_strtools.cpp:691 */
qboolean Q_StripUnprintableAndSpace(char *pch)
{
//	{
//		int cch;                                              //   694
//		int cubDest;                                          //   695
//		wchar_t *pwch;                                       //   696
//		wchar_t *pwch_alloced;                               //   697
//		bool bStrippedAny;                                    //   699
//		bool bStrippedWhitespace;                             //   700
//		int cwch;                                             //   702
//		Q_UTF8ToUTF32(const char *pUTF8,
//				uchar32 *pUTF32,
//				int cubDestSizeInBytes,
//				enum EStringConvertErrorPolicy ePolicy);  //   702
//		StripUnprintableWorker(wchar_t *pwch,
//					bool *pbStrippedAny);  //   704
//		StripWhitespaceWorker(wchar_t *pwch,
//					int cchLength,
//					bool *pbStrippedWhitespace);  //   705
//		Q_UTF32ToUTF8(const uchar32 *pUTF32,
//				char *pUTF8,
//				int cubDestSizeInBytes,
//				enum EStringConvertErrorPolicy ePolicy);  //   710
//	}
}

/* <5e53e5> ../engine/unicode_strtools.cpp:600 */
wchar_t *StripWhitespaceWorker(wchar_t *pwch, int cchLength, bool *pbStrippedWhitespace)
{
//	{
//		wchar_t *pwchEnd;                                    //   624
//	}
}

/* <5e5360> ../engine/unicode_strtools.cpp:479 */
qboolean Q_IsMeanSpaceW(wchar_t wch)
{
//	{
//		qboolean bIsMean;                                     //   481
//	}
}

/* <5e52fa> ../engine/unicode_strtools.cpp:459 */
char *Q_UnicodeAdvance(char *pUTF8, int nChars)
{
//	{
//		uchar32 uVal;                                         //   463
//		bool bError;                                          //   464
//	}
}

/* <5e528e> ../engine/unicode_strtools.cpp:442 */
int Q_UnicodeLength(const char *pUTF8)
{
//	{
//		int nChars;                                           //   444
//		{
//			bool bError;                                  //   447
//			uchar32 uVal;                                 //   448
//		}
//	}
}

/* <5e5226> ../engine/unicode_strtools.cpp:423 */
qboolean Q_UnicodeValidate(const char *pUTF8)
{
//	{
//		bool bError;                                          //   425
//		{
//			uchar32 uVal;                                 //   428
//			int nCharSize;                                //   431
//		}
//	}
}

/* <5e5091> ../engine/unicode_strtools.cpp:246 */
/* linkage=_Z13Q_UTF8ToUTF16PKcPti25EStringConvertErrorPolicy */
int Q_UTF8ToUTF16(const char *pUTF8, uchar16 *pUTF16, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
//	Q_UnicodeConvertT<char, short unsigned int, true, (* Q_UTF8ToUChar32), (* Q_UChar32ToUTF16Len), (* Q_UChar32ToUTF16)>(const char *pIn,
//																int nInChars,
//																short unsigned int *pOut,
//																int nOutBytes,
//																enum EStringConvertErrorPolicy ePolicy);  //   248
}

/* <5e4f6d> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<char, wchar_t, true, (* Q_UTF8ToUChar32), (* {anonymous}::Q_UChar32ToUTF32Len), (* {anonymous}::Q_UChar32ToUTF32)>(const char *pIn, wchar_t *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//				Q_UChar32ToUTF32(uchar32 uVal,
//						uchar32 *pUTF32);  //   112
//			}
//		}
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//	}
}

/* <5e4e7a> ../engine/unicode_strtools.cpp:346 */
/* linkage=_Z15Q_UTF8ToUChar32PKcRwRb */
int Q_UTF8ToUChar32(const char *pUTF8_, uchar32 &uValueOut, bool &bErrorOut)
{
//	
//decodeFinishedMaybeCESU8:                                             //   405
//	
//decodeFinished:                                                       //   392
//	
//decodeError:                                                          //   400
//	
//decodeFinishedNoCheck:                                                //   395
//	{
//		const uint8 *pUTF8;                                 //   348
//		int nBytes;                                           //   350
//		uint32 uValue;                                        //   351
//		uint32 uMinValue;                                     //   352
//		Q_IsValidUChar32(uchar32 uVal);  //   393
//	}
}

/* <5e4c73> ../engine/unicode_strtools.cpp:286 */
/* linkage=_Z14Q_UTF32ToUTF16PKwPti25EStringConvertErrorPolicy */
int Q_UTF32ToUTF16(const uchar32 *pUTF32, uchar16 *pUTF16, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
//	Q_UnicodeConvertT<wchar_t, short unsigned int, true, (* {anonymous}::Q_UTF32ToUChar32), (* Q_UChar32ToUTF16Len), (* Q_UChar32ToUTF16)>(const wchar_t *pIn,
//																int nInChars,
//																short unsigned int *pOut,
//																int nOutBytes,
//																enum EStringConvertErrorPolicy ePolicy);  //   288
}

/* <5e4b36> ../engine/unicode_strtools.cpp:270 */
/* linkage=_Z14Q_UTF16ToUTF32PKtPwi25EStringConvertErrorPolicy */
int Q_UTF16ToUTF32(const uchar16 *pUTF16, uchar32 *pUTF32, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
//	Q_UnicodeConvertT<short unsigned int, wchar_t, true, (* Q_UTF16ToUChar32), (* {anonymous}::Q_UChar32ToUTF32Len), (* {anonymous}::Q_UChar32ToUTF32)>(const short unsigned int *pIn,
//																int nInChars,
//																wchar_t *pOut,
//																int nOutBytes,
//																enum EStringConvertErrorPolicy ePolicy);  //   272
}

/* <5e4932> ../engine/unicode_strtools.cpp:262 */
/* linkage=_Z13Q_UTF16ToUTF8PKtPci25EStringConvertErrorPolicy */
int Q_UTF16ToUTF8(const uchar16 *pUTF16, char *pUTF8, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
//	Q_UnicodeConvertT<short unsigned int, char, true, (* Q_UTF16ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const short unsigned int *pIn,
//																int nInChars,
//																char *pOut,
//																int nOutBytes,
//																enum EStringConvertErrorPolicy ePolicy);  //   264
}

/* <5e4557> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<wchar_t, char, true, (* {anonymous}::Q_UTF32ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const wchar_t *pIn, char *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//				Q_UChar32ToUTF8Len(uchar32 uVal);  //   117
//				Q_UTF32ToUChar32(const uchar32 *pUTF32,
//						uchar32 &uVal,
//						bool &bErr);  //   109
//				Q_UChar32ToUTF8Len(uchar32 uVal);  //   110
//				Q_UChar32ToUTF8(uchar32 uVal,
//						char *pUTF8Out);  //   112
//			}
//		}
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//			Q_UChar32ToUTF8Len(uchar32 uVal);  //    82
//			Q_UTF32ToUChar32(const uchar32 *pUTF32,
//					uchar32 &uVal,
//					bool &bErr);  //    81
//		}
//	}
}

/* <5e4521> ../engine/unicode_strtools.cpp:50 */
void Q_UTF32ToUChar32(const uchar32 *pUTF32, uchar32 &uVal, bool &bErr)
{
}

/* <5e44d3> ../engine/unicode_strtools.cpp:278 */
int Q_UTF32ToUTF8(const uchar32 *pUTF32, char *pUTF8, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
}

/* <5e4489> ../engine/unicode_strtools.cpp:653 */
wchar_t *StripUnprintableWorker(wchar_t *pwch, bool *pbStrippedAny)
{
//	{
//		wchar_t *pwchSource;                                 //   655
//		wchar_t *pwchDest;                                   //   656
//	}
}

/* <5e444b> ../engine/unicode_strtools.cpp:254 */
int Q_UTF8ToUTF32(const char *pUTF8, uchar32 *pUTF32, int cubDestSizeInBytes, EStringConvertErrorPolicy ePolicy)
{
}

/* <5e441e> ../engine/unicode_strtools.cpp:566 */
qboolean Q_IsDeprecatedW(wchar_t wch)
{
//	{
//		qboolean bIsDeprecated;                               //   568
//	}
}

/* <5e4337> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<char, short unsigned int, true, (* Q_UTF8ToUChar32), (* Q_UChar32ToUTF16Len), (* Q_UChar32ToUTF16)>(const char *pIn, int nInChars, short unsigned int *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e425e> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<char, wchar_t, true, (* Q_UTF8ToUChar32), (* {anonymous}::Q_UChar32ToUTF32Len), (* {anonymous}::Q_UChar32ToUTF32)>(const char *pIn, int nInChars, wchar_t *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e4177> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<char, char, true, (* Q_UTF8ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const char *pIn, int nInChars, char *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e4071> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<short unsigned int, char, true, (* Q_UTF16ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const short unsigned int *pIn, int nInChars, char *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e3f98> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<short unsigned int, wchar_t, true, (* Q_UTF16ToUChar32), (* {anonymous}::Q_UChar32ToUTF32Len), (* {anonymous}::Q_UChar32ToUTF32)>(const short unsigned int *pIn, int nInChars, wchar_t *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e3f38> ../engine/unicode_strtools.cpp:62 */
void Q_UChar32ToUTF32(uchar32 uVal, uchar32 *pUTF32)
{
}

/* <5e3edd> ../engine/unicode_strtools.cpp:209 */
int Q_UTF16ToUChar32(const uchar16 *pUTF16, uchar32 &uValueOut, bool &bErrorOut)
{
//	{
//		uchar32 uVal;                                         //   220
//	}
}

/* <5e3dfd> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<wchar_t, char, true, (* {anonymous}::Q_UTF32ToUChar32), (* Q_UChar32ToUTF8Len), (* Q_UChar32ToUTF8)>(const wchar_t *pIn, int nInChars, char *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e3dbb> ../engine/unicode_strtools.cpp:180 */
int Q_UChar32ToUTF8(uchar32 uVal, char *pUTF8Out)
{
}

/* <5e3cdb> ../engine/unicode_strtools.cpp:70 */
void Q_UnicodeConvertT<wchar_t, short unsigned int, true, (* {anonymous}::Q_UTF32ToUChar32), (* Q_UChar32ToUTF16Len), (* Q_UChar32ToUTF16)>(const wchar_t *pIn, int nInChars, short unsigned int *pOut, int nOutBytes, EStringConvertErrorPolicy ePolicy)
{
//	{
//		int nOut;                                             //    72
//		{
//			uchar32 uVal;                                 //    78
//			bool bErr;                                    //    80
//		}
//		{
//			int nOutElems;                                //    99
//			int nMaxOut;                                  //   103
//			{
//				uchar32 uVal;                         //   106
//				bool bErr;                            //   108
//			}
//		}
//	}
}

/* <5e3c59> ../engine/unicode_strtools.cpp:152 */
int Q_UChar32ToUTF16Len(uchar32 uVal)
{
}

/* <5e3c2b> ../engine/unicode_strtools.cpp:163 */
int Q_UChar32ToUTF16(uchar32 uVal, uchar16 *pUTF16Out)
{
}

/* <5e3c0e> ../engine/unicode_strtools.cpp:137 */
int Q_UChar32ToUTF8Len(uchar32 uVal)
{
}

/* <5e3bea> ../engine/unicode_strtools.cpp:23 */
bool Q_IsValidUChar32(uchar32 uVal)
{
}

/* <5e3bd4> ../engine/unicode_strtools.cpp:57 */
void Q_UChar32ToUTF32Len(uchar32 uVal)
{
}

/* <5e308c> ../cstrike/dlls/bot/states/cs_bot_use_entity.cpp:21 */
void UseEntityState::OnUpdate(CCSBot *me)
{
//	{
//		float const useTimeout;                                //    25
//		Vector pos;                                     //    33
//	}
//	OnUpdate(UseEntityState *const this,
//		class CCSBot *me);  //    21
}

/* <5e304a> ../cstrike/dlls/bot/states/cs_bot_use_entity.cpp:54 */
void UseEntityState::OnExit(CCSBot *me)
{
//	ClearLookAt(CCSBot *const this);  //    56
}

/* <5e3017> ../cstrike/dlls/bot/states/cs_bot_use_entity.cpp:17 */
void UseEntityState::OnEnter(CCSBot *me)
{
}

/* <5e2fec> ../cstrike/dlls/bot/cs_bot.h:288 */
void UseEntityState::GetName(void)
{
}

/* <5e2f99> ../cstrike/dlls/bot/states/cs_bot_use_entity.cpp:21 */
void UseEntityState::OnUpdate(CCSBot *me)
{
//	{
//		float const useTimeout;                                //    25
//		Vector pos;                                     //    33
//		{
//			class CCSBotManager *ctrl;                   //    39
//		}
//	}
}

/* <5e2f80> ../cstrike/dlls/bot/cs_bot.h:699 */
inline void CCSBot::IncreaseHostageEscortCount(void)
{
}

/* <5e2f62> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <5e2f49> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5e2f30> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <5e2f12> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <5e2ee9> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <5e2eb8> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5e2e91> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5e2e6a> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5e2e51> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5e2e33> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5e2de4> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5e2d9a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5e2d5f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5e2d10> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5e2c96> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5e2c6a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5d4160> ../cstrike/dlls/bot/states/cs_bot_plant_bomb.cpp:17 */
void PlantBombState::OnEnter(CCSBot *me)
{
//	{
//		float yaw;                                            //    25
//		class Vector2D dir;                                   //    26
//		Vector down;                                    //    28
//		GetFeetZ(const class CCSBot *const this);  //    28
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //    28
//	}
}

/* <5d40d0> ../cstrike/dlls/bot/states/cs_bot_plant_bomb.cpp:36 */
void PlantBombState::OnUpdate(CCSBot *me)
{
//	{
//		class CBasePlayerWeapon *gun;                        //    38
//		bool holdingC4;                                       //    39
//		float const timeout;                                   //    59
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //    54
//	}
}

/* <5d4088> ../cstrike/dlls/bot/states/cs_bot_plant_bomb.cpp:65 */
void PlantBombState::OnExit(CCSBot *me)
{
//	ClearLookAt(CCSBot *const this);  //    72
}

/* <5d405d> ../cstrike/dlls/bot/cs_bot.h:185 */
void PlantBombState::GetName(void)
{
}

/* <5d402a> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <5d3ffa> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <5d3fe1> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <5d3fc8> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5d3f92> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <5d3f6e> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <5d3f3d> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5d3f16> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5d3eef> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5d3ed6> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <5d3eb1> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5d3e93> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <5d3e6a> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5d3e1b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5d3dd1> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5d3d96> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5d3d47> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5d3ccd> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5d3ca1> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5c4edf> ../cstrike/dlls/bot/states/cs_bot_move_to.cpp:55 */
void MoveToState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    76
//		{
//			class CBasePlayer *victim;                   //    61
//			GetTaskEntity(CCSBot *const this);  //    61
//		}
//		{
//			float const nearPlantSite;                     //   161
//			{
//				float const radioTime;                 //   173
//			}
//		}
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //   140
//		{
//			class CHostage *hostage;                     //   197
//			float const repathToleranceSq;                 //   205
//			float error;                                  //   206
//			GetGoalEntity(CCSBot *const this);  //   197
//			IsValid(CHostage *const this);  //   198
//			IsFollowingSomeone(CHostage *const this);  //   198
//			operator-(const Vector *const this,
//					const Vector &v);  //   206
//			LengthSquared(const Vector *const this);  //   206
//			{
//				Vector pos;                     //   216
//				Vector to;                      //   217
//				float const watchHostageRange;         //   220
//				operator+(const Vector *const this,
//						const Vector &v);  //   216
//				operator-(const Vector *const this,
//						const Vector &v);  //   217
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   221
//				{
//					enum NavRelativeDirType dir;  //   226
//					float const useRange;          //   236
//					GetGoalEntity(CCSBot *const this);  //   239
//				}
//			}
//		}
//		{
//			int z;                                        //   100
//			Contains(const class Extent *const this,
//				const Vector *pos);  //   106
//		}
//		{
//			const Vector *bombPos;                //   284
//			IsActiveWeaponReloading(const class CBot *const this);  //   278
//			{
//				Vector toBomb;                  //   287
//				float const defuseRange;               //   291
//				GetFeetZ(const class CCSBot *const this);  //   290
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   292
//			}
//		}
//		{
//			class CBasePlayer *victim;                   //   303
//			GetTaskEntity(CCSBot *const this);  //   303
//			Say(BotChatterInterface *const this,
//				const char *phraseName,
//				float lifetime,
//				float delay);  //   307
//		}
//	}
}

/* <5c4e91> ../cstrike/dlls/bot/states/cs_bot_move_to.cpp:21 */
void MoveToState::OnEnter(CCSBot *me)
{
//	{
//		enum RouteType route;                                 //    30
//	}
}

/* <5c4e54> ../cstrike/dlls/bot/states/cs_bot_move_to.cpp:320 */
void MoveToState::OnExit(CCSBot *me)
{
}

/* <5c4e27> ../cstrike/dlls/bot/cs_bot.h:160 */
void MoveToState::GetName(void)
{
}

/* <5c4dcf> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <5c4d99> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <5c4d70> ../game_shared/bot/bot.h:287 */
inline void CBot::IsActiveWeaponReloading(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   289
//	}
}

/* <5c4d4c> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <5c4d33> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <5c4d1a> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <5c4d01> ../cstrike/dlls/bot/cs_bot.h:581 */
inline void CCSBot::GetGoalEntity(void)
{
}

/* <5c4ce8> ../cstrike/dlls/bot/cs_bot.h:397 */
inline void CCSBot::IsAtBombsite(void)
{
}

/* <5c4ccf> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <5c4ca6> ../game_shared/bot/nav.h:114 */
inline void Extent::Contains(const Vector *pos)
{
}

/* <5c4c84> ../cstrike/dlls/bot/cs_bot_manager.h:106 */
inline void CCSBotManager::GetZone(int i)
{
}

/* <5c4c60> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <5c4c42> ../cstrike/dlls/bot/cs_bot.h:428 */
inline void CCSBot::GetTaskEntity(void)
{
}

/* <5c4c13> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <5c4bdf> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <5c4bab> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <5c4b92> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <5c4b79> ../cstrike/dlls/bot/cs_bot.h:577 */
inline void CCSBot::IsUsingLadder(void)
{
}

/* <5c4b60> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5c4b47> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <5c4b2e> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <5c4b10> ../cstrike/dlls/bot/cs_bot.h:355 */
inline void CCSBot::IsCarryingBomb(void)
{
}

/* <5c4ada> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <5c4abc> ../cstrike/dlls/bot/cs_gamestate.h:47 */
inline void CSGameState::IsBombPlanted(void)
{
}

/* <5c4aa3> ../cstrike/dlls/bot/cs_bot_manager.h:162 */
inline void CCSBotManager::GetBombDefuser(void)
{
}

/* <5c4a8a> ../cstrike/dlls/bot/cs_bot_manager.h:110 */
inline void CCSBotManager::GetZoneCount(void)
{
}

/* <5c4a6c> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <5c4a39> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5c4a12> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5c49eb> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5c49d2> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <5c49ad> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5c498f> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <5c4966> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <5c4948> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <5c4924> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <5c48fb> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <5c48d3> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <5c48a9> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <5c4879> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <5c4800> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <5c47a7> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <5c474e> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <5c470f> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <5c46e5> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <5c468c> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <5c463f> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <5c4621> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <5c4602> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <5c45e4> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5c4595> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5c454b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5c4510> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5c44c1> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5c444c> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5c4420> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5c4402> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <5c43da> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <5c43b0> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <5c4388> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <5b3114> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:17 */
void InvestigateNoiseState::AttendCurrentNoise(CCSBot *me)
{
//	IsNoiseHeard(const class CCSBot *const this);  //    19
}

/* <5b2fa2> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:47 */
void InvestigateNoiseState::OnUpdate(CCSBot *me)
{
//	{
//		float newNoiseDist;                                   //    50
//		float noiseDist;                                      //    74
//		float const nearDist;                                  //   111
//		{
//			Vector toOldNoise;                      //    54
//			float const muchCloserDist;                    //    56
//			operator-(const Vector *const this,
//					const Vector &v);  //    54
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //    57
//			AttendCurrentNoise(InvestigateNoiseState *const this,
//						class CCSBot *me);  //    60
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //    74
//		Length(const Vector *const this);  //    74
//		{
//			float const closeToNoiseRange;                 //    85
//		}
//	}
}

/* <5b2f37> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:38 */
void InvestigateNoiseState::OnEnter(CCSBot *me)
{
//	AttendCurrentNoise(InvestigateNoiseState *const this,
//				class CCSBot *me);  //    40
}

/* <5b2ec8> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:17 */
void InvestigateNoiseState::AttendCurrentNoise(CCSBot *me)
{
//	GetNoisePosition(const class CCSBot *const this);  //    23
//	ForgetNoise(CCSBot *const this);  //    34
//	GetNoisePosition(const class CCSBot *const this);  //    27
}

/* <5b2e95> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:129 */
void InvestigateNoiseState::OnExit(CCSBot *me)
{
}

/* <5b2e6a> ../cstrike/dlls/bot/cs_bot.h:126 */
void InvestigateNoiseState::GetName(void)
{
}

/* <5b2e2d> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <5b2e05> ../cstrike/dlls/bot/states/cs_bot_investigate_noise.cpp:17 */
void InvestigateNoiseState::AttendCurrentNoise(CCSBot *me)
{
}

/* <5b2dec> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <5b2dd3> ../cstrike/dlls/bot/cs_bot.h:1063 */
inline void CCSBot::GetNoisePosition(void)
{
}

/* <5b2dba> ../cstrike/dlls/bot/cs_bot.h:459 */
inline void CCSBot::IsNoiseHeard(void)
{
}

/* <5b2da1> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <5b2d88> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5b2d6f> ../cstrike/dlls/bot/cs_bot.h:487 */
inline void CCSBot::GetNoisePriority(void)
{
}

/* <5b2d51> ../cstrike/dlls/bot/cs_bot.h:475 */
inline void CCSBot::ForgetNoise(void)
{
}

/* <5b2d33> ../cstrike/dlls/bot/cs_bot.h:474 */
inline void CCSBot::GetNoiseArea(void)
{
}

/* <5b2d0a> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <5b2ce4> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5b2cbd> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5b2c96> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5b2c7d> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5b2c5f> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <5b2c36> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5b2be7> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5b2b9d> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5b2b62> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5b2b13> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5b2ab2> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5b2a86> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5a1ebe> ../cstrike/dlls/bot/states/cs_bot_idle.cpp:46 */
void IdleState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    59
//		float const defenseSniperCampChance;                   //    95
//		float const offenseSniperCampChance;                   //    96
//	}
//	OnUpdate(IdleState *const this,
//		class CCSBot *me);  //    46
}

/* <5a1483> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <5a136f> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <5a12ee> ../cstrike/dlls/bot/states/cs_bot_idle.cpp:26 */
void IdleState::OnEnter(CCSBot *me)
{
//	DestroyPath(CCSBot *const this);  //    28
//	SetTask(CCSBot *const this,
//		enum TaskType task,
//		class CBaseEntity *entity);  //    38
}

/* <5a12b8> ../cstrike/dlls/bot/cs_bot.h:426 */
void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <5a128b> ../cstrike/dlls/bot/cs_bot.h:58 */
void IdleState::GetName(void)
{
}

/* <5a124f> ../cstrike/dlls/bot/cs_bot.h:49 */
void BotState::OnExit(CCSBot *bot)
{
}

/* <5a121c> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <5a1189> ../cstrike/dlls/bot/cs_bot_manager.h:120 */
inline void CCSBotManager::GetClosestZone<PathCost>(CNavArea *startArea, class PathCost costFunc, float *travelDistance)
{
//	{
//		const class Zone *closeZone;                        //   122
//		float closeDist;                                      //   123
//		{
//			int i;                                        //   128
//			{
//				float dist;                           //   134
//			}
//		}
//	}
}

/* <5a0c66> ../cstrike/dlls/bot/states/cs_bot_idle.cpp:46 */
void IdleState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    59
//		float const defenseSniperCampChance;                   //    95
//		float const offenseSniperCampChance;                   //    96
//		{
//			const class Zone *zone;                     //    81
//		}
//		{
//			const class Zone *zone;                     //   121
//			{
//				Place place;                          //   126
//				{
//					const Vector *spot;   //   130
//				}
//			}
//		}
//		{
//			int zoneIndex;                                //   149
//			const Vector *pos;                    //   152
//		}
//		{
//			const class Zone *zone;                     //   178
//			{
//				const Vector *pos;            //   182
//			}
//		}
//		{
//			const Vector *bombPos;                //   228
//			{
//				const class Zone *zone;             //   261
//			}
//			{
//				const class Zone *zone;             //   286
//				float travelDistance;                 //   287
//				{
//					int z;                        //   289
//					{
//						class ShortestPathCost pathCost;          //   299
//						float dist;           //   300
//					}
//				}
//				{
//					float const farAwayRange;      //   314
//				}
//				{
//					int zoneIndex;                //   324
//				}
//				{
//					const Vector *pos;    //   331
//				}
//			}
//		}
//		{
//			class CNavArea *snipingArea;                 //   368
//			{
//				const class Zone *zone;             //   379
//			}
//		}
//		{
//			float guardBombsiteChance;                    //   410
//			{
//				class CNavArea *area;                //   414
//				float guardRange;                     //   415
//				const class Zone *zone;             //   418
//				{
//					class CNavArea *area;        //   421
//				}
//			}
//		}
//		{
//			float guardEscapeZoneChance;                  //   472
//			{
//				const class Zone *zone;             //   450
//				{
//					class CNavArea *area;        //   453
//				}
//			}
//			{
//				const class Zone *zone;             //   477
//				{
//					class CNavArea *area;        //   480
//					{
//						float escapeGuardRange; //   487
//					}
//				}
//			}
//		}
//		{
//			float const earlyTime;                         //   501
//			const class Zone *zone;                     //   502
//			{
//				const Vector *pos;            //   518
//				{
//					float const repeatTime;        //   527
//				}
//			}
//		}
//		{
//			bool campHostages;                            //   556
//			float const huntChance;                        //   625
//			const Vector *hostagePos;             //   639
//			{
//				float const campZoneChance;            //   570
//			}
//			{
//				const Vector *hostagePos;     //   581
//			}
//			{
//				class CBaseEntity *hostage;          //   607
//				{
//					class CNavArea *area;        //   611
//				}
//			}
//			{
//				class CNavArea *area;                //   642
//				{
//					float hostageGuardRange;      //   649
//				}
//			}
//		}
//		{
//			class CHostage *hostage;                     //   699
//			bool fetchHostages;                           //   721
//			bool rescueHostages;                          //   722
//			const class Zone *zone;                     //   723
//			{
//				float const huntChance;                //   689
//			}
//			{
//				class CNavArea *area;                //   706
//			}
//			{
//				class PathCost pathCost;              //   736
//				float toZone;                         //   737
//				float toHostage;                      //   738
//			}
//			{
//				enum RouteType route;                 //   772
//			}
//		}
//	}
}

/* <5a0c4d> ../cstrike/dlls/bot/cs_bot.h:701 */
inline void CCSBot::ResetWaitForHostagePatience(void)
{
}

/* <5a0c27> ../cstrike/dlls/bot/cs_bot.h:580 */
inline void CCSBot::SetGoalEntity( CBaseEntity *entity)
{
}

/* <5a0c08> ../cstrike/dlls/bot/cs_bot_manager.h:150 */
inline void CCSBotManager::GetRandomZone(void)
{
}

/* <5a0b71> ../cstrike/dlls/bot/cs_bot.h:397 */
inline void CCSBot::IsAtBombsite(void)
{
}

/* <5a0b58> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <5a0b36> ../cstrike/dlls/bot/cs_bot_manager.h:106 */
inline void CCSBotManager::GetZone(int i)
{
}

/* <5a0af3> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <5a0ada> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <5a0a62> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <5a0a46> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <5a0a2a> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <5a0a11> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <5a09c8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <5a09af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <5a0996> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <5a0959> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <5a0929> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <5a0910> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <5a08f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <5a08d3> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <5a08b5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <5a088c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <5a086e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <5a0845> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <5a082c> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <5a0813> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <5a07f5> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <5a07dc> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5a07c3> ../cstrike/dlls/bot/cs_bot.h:453 */
inline void CCSBot::GetMorale(void)
{
}

/* <5a07aa> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <5a0791> ../cstrike/dlls/bot/cs_bot.h:355 */
inline void CCSBot::IsCarryingBomb(void)
{
}

/* <5a0773> ../cstrike/dlls/bot/cs_bot.h:326 */
inline void CCSBot::GetSafeTime(void)
{
}

/* <5a074f> ../cstrike/dlls/bot/cs_gamestate.h:78 */
inline void CSGameState::HaveSomeHostagesBeenTaken(void)
{
}

/* <5a0731> ../cstrike/dlls/bot/cs_gamestate.h:47 */
inline void CSGameState::IsBombPlanted(void)
{
}

/* <5a0718> ../cstrike/dlls/bot/cs_bot_manager.h:253 */
inline void CCSBotManager::IsTimeToPlantBomb(void)
{
}

/* <5a06ff> ../cstrike/dlls/bot/cs_bot_manager.h:194 */
inline void CCSBotManager::IsDefenseRushing(void)
{
}

/* <5a06e6> ../cstrike/dlls/bot/cs_bot_manager.h:178 */
inline void CCSBotManager::GetElapsedRoundTime(void)
{
}

/* <5a06cd> ../cstrike/dlls/bot/cs_bot_manager.h:162 */
inline void CCSBotManager::GetBombDefuser(void)
{
}

/* <5a06b4> ../cstrike/dlls/bot/cs_bot_manager.h:110 */
inline void CCSBotManager::GetZoneCount(void)
{
}

/* <5a0696> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <5a0672> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <5a0654> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <5a062c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5a0605> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5a05ec> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5a05ce> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <5a05a5> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <5a0581> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <5a0558> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <5a0530> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <5a0506> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <5a04d6> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <5a047d> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <5a0424> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <5a03cb> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <5a038c> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <5a0362> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <5a0309> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <5a0254> ../game_shared/bot/nav_area.h:629 */
inline void ShortestPathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float dist;                                           //   639
//		float cost;                                           //   646
//		{
//			float const crouchPenalty;                     //   651
//		}
//		{
//			float const jumpPenalty;                       //   658
//		}
//	}
}

/* <5a022d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5a0214> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <5a01f8> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <5a01dc> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <5a01c3> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <5a019d> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <5a0184> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <5a015e> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <5a0145> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <5a0112> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <5a00f9> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <5a00e0> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <5a00c7> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <5a00ae> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <5a0095> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <5a0077> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <5a0059> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <5a003b> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <5a001c> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <59fffe> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <59ffaf> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <59ff65> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <59ff2a> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <59fedb> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <59fe7a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <59fe4e> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <59fe26> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <59fdfc> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <59fdd4> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <58e6e0> ../cstrike/dlls/bot/states/cs_bot_hunt.cpp:18 */
void HuntState::OnEnter(CCSBot *me)
{
//	SetTask(CCSBot *const this,
//		enum TaskType task,
//		class CBaseEntity *entity);  //    29
//	DestroyPath(CCSBot *const this);  //    31
}

/* <58e452> ../cstrike/dlls/bot/states/cs_bot_hunt.cpp:38 */
void HuntState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    40
//		float const huntingTooLongTime;                        //    44
//		{
//			class CHostage *hostage;                     //   129
//			{
//				class CNavArea *area;                //   132
//				SetTask(CCSBot *const this,
//					enum TaskType task,
//					class CBaseEntity *entity);  //   136
//			}
//		}
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //   118
//		{
//			float const safeTime;                          //    62
//		}
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //    82
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //    92
//		{
//			float oldest;                                 //   163
//			int areaCount;                                //   165
//			float const minSize;                           //   166
//			iterator iter;                                //   167
//			int which;                                    //   189
//			{
//				class CNavArea *area;                //   170
//				const class Extent *extent;         //   175
//				float age;                            //   180
//				GetClearedTimestamp(CNavArea *const this,
//							int teamID);  //   180
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //   168
//			operator++(_List_iterator<CNavArea*> *const this);  //   192
//		}
//		SetRogue(CCSBot *const this,
//			bool rogue);  //    49
//	}
}

/* <58e418> ../cstrike/dlls/bot/states/cs_bot_hunt.cpp:211 */
void HuntState::OnExit(CCSBot *me)
{
}

/* <58e3ec> ../cstrike/dlls/bot/cs_bot.h:67 */
void HuntState::GetName(void)
{
}

/* <58e3c3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <58e3aa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <58e391> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <58e36d> ../game_shared/bot/nav_area.h:252 */
inline void CNavArea::GetClearedTimestamp( int teamID)
{
}

/* <58e354> ../game_shared/bot/nav_area.h:268 */
inline void CNavArea::GetExtent(void)
{
}

/* <58e31d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <58e304> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <58e2eb> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <58e2d2> ../cstrike/dlls/bot/cs_bot.h:397 */
inline void CCSBot::IsAtBombsite(void)
{
}

/* <58e2b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <58e28b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <58e26d> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <58e249> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <58e220> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <58e1f8> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <58e1ce> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <58e19e> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <58e145> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <58e0ec> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <58e093> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <58e054> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <58e02a> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <58dfd1> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <58df89> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <58df58> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <58df39> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <58df20> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <58df07> ../cstrike/dlls/bot/cs_bot.h:538 */
inline void CCSBot::GetLastSawEnemyTimestamp(void)
{
}

/* <58deee> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <58ded0> ../cstrike/dlls/bot/cs_bot.h:355 */
inline void CCSBot::IsCarryingBomb(void)
{
}

/* <58de9b> ../cstrike/dlls/bot/cs_bot.h:318 */
inline void CCSBot::SetRogue( bool rogue)
{
}

/* <58de7d> ../cstrike/dlls/bot/cs_gamestate.h:47 */
inline void CSGameState::IsBombPlanted(void)
{
}

/* <58de64> ../cstrike/dlls/bot/cs_bot_manager.h:253 */
inline void CCSBotManager::IsTimeToPlantBomb(void)
{
}

/* <58de4b> ../cstrike/dlls/bot/cs_bot_manager.h:165 */
inline void CCSBotManager::GetLooseBombArea(void)
{
}

/* <58de32> ../cstrike/dlls/bot/cs_bot_manager.h:162 */
inline void CCSBotManager::GetBombDefuser(void)
{
}

/* <58de19> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <58ddfb> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <58ddd2> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <58ddac> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <58dd85> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <58dd5e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <58dd45> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <58dd27> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <58dd09> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <58dcea> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <58dccc> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <58dc7d> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <58dc33> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <58dbf8> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <58dba9> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <58db2f> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <58db03> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <58dadb> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <58dab1> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <58da89> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <57c35e> ../cstrike/dlls/bot/states/cs_bot_hide.cpp:59 */
void HideState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    61
//		IsActiveWeaponReloading(const class CBot *const this);  //    64
//		{
//			bool isSettledInSniper;                       //   241
//			SetTask(CCSBot *const this,
//				enum TaskType task,
//				class CBaseEntity *entity);  //    94
//			{
//				const class Zone *zone;             //    78
//				{
//					class CNavArea *area;        //    81
//				}
//			}
//			{
//				class CBasePlayer *leader;           //   109
//				float runThreshold;                   //   111
//				float const followRange;               //   120
//				GetFollowLeader(CCSBot *const this);  //   109
//				IsLengthGreaterThan(const Vector *const this,
//							float length);  //   112
//				operator-(const Vector *const this,
//						const Vector &v);  //   121
//				IsLengthGreaterThan(const Vector *const this,
//							float length);  //   121
//			}
//			{
//				Vector toDefuser;               //   184
//				float const hearDefuseRange;           //   186
//				operator-(const Vector *const this,
//						const Vector &v);  //   184
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   187
//			}
//			GetLooseBomb(CCSBotManager *const this);  //   157
//			{
//				class CBaseEntity *hostage;          //   222
//				{
//					class CNavArea *area;        //   226
//					SetTask(CCSBot *const this,
//						enum TaskType task,
//						class CBaseEntity *entity);  //   229
//				}
//			}
//			IsActiveWeaponReloading(const class CBot *const this);  //   245
//		}
//		{
//			float range;                                  //   343
//			class CBasePlayer *camper;                   //   344
//			float const closeRange;                        //   346
//			Vector toSpot;                          //   367
//			float dist;                                   //   371
//			float const crouchDist;                        //   373
//			float const atDist;                            //   377
//			{
//				const Vector *pos;            //   422
//				GetFeetZ(const class CCSBot *const this);  //   431
//			}
//			{
//				int const maxRetries;                  //   352
//			}
//			GetFeetZ(const class CCSBot *const this);  //   370
//			Length(const Vector *const this);  //   371
//			{
//				TraceResult result;                   //   397
//				float outAngle;                       //   398
//				float outAngleRange;                  //   399
//				SetTask(CCSBot *const this,
//					enum TaskType task,
//					class CBaseEntity *entity);  //   394
//				{
//					float angle;                  //   400
//					GetEyePosition(const class CCSBot *const this);  //   402
//					operator*(float fl,
//							const Vector &v);  //   402
//					operator+(const Vector *const this,
//							const Vector &v);  //   402
//					GetEyePosition(const class CCSBot *const this);  //   402
//				}
//				SetLookAheadAngle(CCSBot *const this,
//							float angle);  //   411
//			}
//		}
//		{
//			float const hurtRecentlyTime;                  //   294
//			GetNearbyEnemyCount(const class CCSBot *const this);  //   310
//			{
//				float const someTime;                  //   312
//				float const littleTime;                //   313
//			}
//			GetNearbyEnemyCount(const class CCSBot *const this);  //   326
//			{
//				class CHostage *hostage;             //   328
//			}
//			GetTimeSinceAttacked(const class CCSBot *const this);  //   295
//			IsProtectedByShield(CBasePlayer *const this);  //   290
//		}
//	}
}

/* <57c2c8> ../cstrike/dlls/bot/states/cs_bot_hide.cpp:450 */
void HideState::OnExit(CCSBot *me)
{
//	ClearLookAt(CCSBot *const this);  //   456
//	ClearApproachPoints(CCSBot *const this);  //   457
//	IsProtectedByShield(CBasePlayer *const this);  //   460
//	OnExit(HideState *const this,
//		class CCSBot *me);  //   450
}

/* <57c261> ../cstrike/dlls/bot/states/cs_bot_hide.cpp:22 */
void HideState::OnEnter(CCSBot *me)
{
//	GetFollowLeader(CCSBot *const this);  //    50
}

/* <57c234> ../cstrike/dlls/bot/cs_bot.h:203 */
void HideState::GetName(void)
{
}

/* <57c1a2> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <57c17e> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <57c165> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <57c147> ../cstrike/dlls/bot/cs_bot_manager.h:164 */
inline void CCSBotManager::GetLooseBomb(void)
{
}

/* <57c11d> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <57c104> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <57c0d1> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <57c0a8> ../game_shared/bot/bot.h:287 */
inline void CBot::IsActiveWeaponReloading(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   289
//	}
}

/* <57c07e> ../cstrike/dlls/bot/states/cs_bot_hide.cpp:450 */
void HideState::OnExit(CCSBot *me)
{
}

/* <57c060> ../cstrike/dlls/player.h:660 */
inline void CBasePlayer::IsProtectedByShield(void)
{
}

/* <57c047> ../cstrike/dlls/bot/cs_bot.h:651 */
inline void CCSBot::ClearApproachPoints(void)
{
}

/* <57c02e> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <57c008> ../cstrike/dlls/bot/cs_bot.h:609 */
inline void CCSBot::SetLookAheadAngle( float angle)
{
}

/* <57bfef> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <57bfd6> ../cstrike/dlls/bot/cs_bot.h:536 */
inline void CCSBot::GetTimeSinceAttacked(void)
{
}

/* <57bfbd> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <57bfa4> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <57bf8b> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <57bf57> ../cstrike/dlls/bot/cs_bot.h:370 */
inline void CCSBot::GetFollowLeader(void)
{
//	{
//		class CBaseEntity *entity;                           //   372
//	}
}

/* <57bf33> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <57bf0f> ../cstrike/dlls/bot/cs_bot_manager.h:165 */
inline void CCSBotManager::GetLooseBombArea(void)
{
}

/* <57bef6> ../cstrike/dlls/bot/cs_bot_manager.h:162 */
inline void CCSBotManager::GetBombDefuser(void)
{
}

/* <57bedd> ../cstrike/dlls/bot/cs_bot_manager.h:160 */
inline void CCSBotManager::GetBombPlantTimestamp(void)
{
}

/* <57bec4> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <57bea6> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <57be73> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <57be4c> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <57be25> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <57be0c> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <57bde7> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <57bdc9> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <57bda0> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <57bd7c> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <57bd53> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <57bd2b> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <57bd01> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <57bcd1> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <57bc78> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <57bc1f> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <57bbc6> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <57bb87> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <57bb5d> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <57bb04> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <57bab7> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <57ba99> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <57ba7b> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <57ba2b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <57ba04> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <57b9c9> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <57b97a> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <57b8fb> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <57b8cf> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <57b8af> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <57b891> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <57b869> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <57b83f> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <57b817> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <569368> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:164 */
void FollowState::OnUpdate(CCSBot *me)
{
//	{
//		float leaderSpeed;                                    //   194
//		bool isLeaderVisible;                                 //   200
//		float const farAwayRange;                              //   213
//		float const longTime;                                  //   231
//		bool repath;                                          //   241
//		float const nearLeaderRange;                           //   244
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //   177
//		IsNotMoving(const class CCSBot *const this);  //   190
//		Length(const class Vector2D *const this);  //   194
//		operator-(const Vector *const this,
//				const Vector &v);  //   214
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //   214
//		GetElapsedTime(const class IntervalTimer *const this);  //   245
//		operator-(const Vector *const this,
//				const Vector &v);  //   251
//		IsLengthLessThan(const Vector *const this,
//				float length);  //   251
//		{
//			float const hideRange;                         //   253
//		}
//		IsElapsed(const class CountdownTimer *const this);  //   263
//		DestroyPath(CCSBot *const this);  //   280
//		IsElapsed(const class CountdownTimer *const this);  //   284
//		{
//			float const runSpeed;                          //   291
//			float const collectRange;                      //   293
//			class FollowTargetCollector collector;        //   294
//			FollowTargetCollector(FollowTargetCollector *const this,
//						class CBasePlayer *player);  //   294
//			SearchSurroundingAreas<FollowTargetCollector>(CNavArea *startArea,
//									const Vector *startPos,
//									class FollowTargetCollector &func,
//									float maxRange);  //   295
//			{
//				int i;                                //   299
//			}
//			{
//				class CNavArea *target;              //   306
//				Vector targetPos;               //   307
//				IsElapsed(const class CountdownTimer *const this);  //   310
//				{
//					class CNavArea *area;        //   321
//					float closeRangeSq;           //   322
//					Vector close;           //   323
//					{
//						int a;                //   325
//						{
//							float rangeSq;//   331
//							operator-(const Vector *const this,
//									const Vector &v);  //   331
//							LengthSquared(const Vector *const this);  //   331
//						}
//					}
//				}
//				Start(CountdownTimer *const this,
//					float duration);  //   345
//				Reset(CountdownTimer *const this);  //   347
//			}
//		}
//		Start(CountdownTimer *const this,
//			float duration);  //   191
//	}
}

/* <569268> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:48 */
void FollowState::ComputeLeaderMotionState(float leaderSpeed)
{
//	{
//		float const runWalkThreshold;                          //    51
//		float const walkStopThreshold;                         //    52
//		enum LeaderMotionStateType prevState;                 //    53
//		{
//			float const minWalkTime;                       //    68
//			GetElapsedTime(const class IntervalTimer *const this);  //    69
//			Start(IntervalTimer *const this);  //    64
//		}
//		Start(IntervalTimer *const this);  //    83
//	}
}

/* <569231> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:353 */
void FollowState::OnExit(CCSBot *me)
{
}

/* <56918b> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:16 */
void FollowState::OnEnter(CCSBot *me)
{
//	DestroyPath(CCSBot *const this);  //    20
//	Invalidate(CountdownTimer *const this);  //    33
//	Invalidate(IntervalTimer *const this);  //    37
//	Start(CountdownTimer *const this,
//		float duration);  //    41
}

/* <56915e> ../cstrike/dlls/bot/cs_bot.h:249 */
void FollowState::GetName(void)
{
}

/* <56911f> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <56903e> ../game_shared/bot/nav_area.h:1028 */
void SearchSurroundingAreas<FollowTargetCollector>(CNavArea *startArea, const Vector *startPos, class FollowTargetCollector &func, float maxRange)
{
//	{
//		class CNavArea *area;                                //  1045
//		{
//			const_iterator ladderIt;                      //  1064
//			const NavLadderList *ladderList;            //  1067
//			{
//				int dir;                              //  1051
//				{
//					int count;                    //  1053
//					{
//						int i;                //  1054
//						{
//							class CNavArea *adjArea;           //  1056
//						}
//					}
//				}
//			}
//			{
//				const class CNavLadder *ladder;     //  1072
//			}
//			{
//				const class CNavLadder *ladder;     //  1093
//			}
//		}
//	}
}

/* <569025> ../game_shared/bot/bot_util.h:189 */
inline void CountdownTimer::Reset(void)
{
}

/* <56900c> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <568fae> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:95 */
inline void FollowTargetCollector::FollowTargetCollector(CBasePlayer *player)
{
//	{
//		float speed;                                          //   101
//		float const walkSpeed;                                 //   103
//		{
//			float const k;                                 //   113
//			float trimSpeed;                              //   114
//		}
//	}
}

/* <568f8a> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <568f71> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <568f40> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <568f21> ../cstrike/dlls/bot/cs_bot.h:397 */
inline void CCSBot::IsAtBombsite(void)
{
}

/* <568f18> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <568eed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <568ed4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <568ebb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <568e79> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <568e60> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <568e1d> ../game_shared/bot/nav_area.h:422 */
inline void CNavArea::GetAdjacentArea(NavDirType dir, int i)
{
//	{
//		const_iterator iter;                                  //   424
//	}
}

/* <568df9> ../game_shared/bot/nav_area.h:236 */
inline void CNavArea::GetAdjacentCount(NavDirType dir)
{
}

/* <568dc3> ../cstrike/dlls/bot/states/cs_bot_follow.cpp:124 */
inline void FollowTargetCollector::operator()(CNavArea *area)
{
//	{
//		class Vector2D to;                                    //   139
//	}
}

/* <568da6> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <568d9f> ../game_shared/bot/nav_area.h:286 */
inline void MakeNewMarker(void)
{
}

/* <568d81> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <568d58> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <568d3f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<NavConnect, std::allocator<NavConnect>>::size(void)
{
}

/* <568d14> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last)
{
}

/* <568cd6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <568cb7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<NavConnect>>(const class _List_const_iterator<NavConnect> &const)
{
}

/* <568c86> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <568c6d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <568c54> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <568c1d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(void)
{
}

/* <568bff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <568bd6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <568b77> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <568b53> ../cstrike/dlls/vector.h:82 */
inline void Vector2D::IsZero(float tolerance)
{
}

/* <568b3a> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <568b12> ../cstrike/dlls/bot/cs_bot.h:1085 */
inline void CCSBot::IsNotMoving(void)
{
//	{
//		float const stillSpeed;                                //  1087
//	}
}

/* <568aee> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <568aca> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <568aac> ../game_shared/bot/bot_util.h:146 */
inline void IntervalTimer::Invalidate(void)
{
}

/* <568a8e> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <568a75> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <568a5c> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <568a3e> ../cstrike/dlls/bot/cs_bot.h:355 */
inline void CCSBot::IsCarryingBomb(void)
{
}

/* <5689bc> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <568998> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <56897f> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <56895a> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <568935> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <56891c> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <5688ea> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <5688cc> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <5688b3> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <56888d> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <568866> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <56883f> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <568826> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <568808> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <5687ea> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <5687d1> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <5687b3> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <568794> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <568776> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <568727> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5686dd> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5686a2> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <568653> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <568605> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <5685d1> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5685a5> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <568587> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <56854b> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <5587fa> ../cstrike/dlls/bot/states/cs_bot_fetch_bomb.cpp:26 */
void FetchBombState::OnUpdate(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    28
//		class CBaseEntity *bomb;                             //    30
//		GetLooseBomb(CCSBotManager *const this);  //    30
//	}
}

/* <5587b3> ../cstrike/dlls/bot/states/cs_bot_fetch_bomb.cpp:17 */
void FetchBombState::OnEnter(CCSBot *me)
{
//	DestroyPath(CCSBot *const this);  //    19
}

/* <558788> ../cstrike/dlls/bot/cs_bot.h:176 */
void FetchBombState::GetName(void)
{
}

/* <55874f> ../cstrike/dlls/bot/cs_bot.h:49 */
void BotState::OnExit(CCSBot *bot)
{
}

/* <558731> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <558713> ../cstrike/dlls/bot/cs_bot_manager.h:164 */
inline void CCSBotManager::GetLooseBomb(void)
{
}

/* <5586f4> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <5586d6> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5586a5> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <55867e> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <558657> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <55863e> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <558620> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5585d1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <558587> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <55854c> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5584fd> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <558483> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <558457> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <549be9> ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp:28 */
void EscapeFromBombState::OnUpdate(CCSBot *me)
{
//	{
//		const Vector *bombPos;                        //    30
//		{
//			class FarAwayFromPositionFunctor func;        //    48
//			class CNavArea *goalArea;                    //    49
//			FarAwayFromPositionFunctor(FarAwayFromPositionFunctor *const this,
//							const Vector *pos);  //    48
//		}
//	}
}

/* <5499ae> ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp:16 */
void EscapeFromBombState::OnEnter(CCSBot *me)
{
//	DestroyPath(CCSBot *const this);  //    20
}

/* <549976> ../cstrike/dlls/bot/states/cs_bot_escape_from_bomb.cpp:60 */
void EscapeFromBombState::OnExit(CCSBot *me)
{
}

/* <54994b> ../cstrike/dlls/bot/cs_bot.h:240 */
void EscapeFromBombState::GetName(void)
{
}

/* <549838> ../game_shared/bot/nav_area.h:1162 */
CNavArea *FindMinimumCostArea<FarAwayFromPositionFunctor>(CNavArea *startArea, class FarAwayFromPositionFunctor &costFunc)
{
//	{
//		float const minSize;                                   //  1164
//		class  cheapAreaSet;                                  //  1173
//		int cheapAreaSetCount;                                //  1174
//		iterator iter;                                        //  1176
//		{
//			class CNavArea *area;                        //  1179
//			const class Extent *extent;                 //  1182
//			float cost;                                   //  1187
//			{
//				int expensive;                        //  1197
//				{
//					int i;                        //  1198
//				}
//			}
//		}
//		{
//			int numAreas;                                 //  1218
//			int which;                                    //  1219
//			iterator iter;                                //  1221
//		}
//	}
}

/* <5497fa> ../game_shared/bot/nav_area.h:1143 */
inline void FarAwayFromPositionFunctor::FarAwayFromPositionFunctor(Vector *pos)
{
}

/* <5497e1> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <5497c8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::size(void)
{
}

/* <54979f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <549786> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <54976d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <549754> ../game_shared/bot/nav_area.h:268 */
inline void CNavArea::GetExtent(void)
{
}

/* <54971d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <5496f3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last)
{
}

/* <5496da> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <54969e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <54966f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <549656> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavArea*>::operator++(void)
{
}

/* <549638> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<CNavArea*>>(const class _List_const_iterator<CNavArea*> &const)
{
}

/* <549614> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <5495eb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavArea*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <5495cd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <5495a4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <54958b> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <54956d> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <54954f> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <549502> ../game_shared/bot/nav_area.h:1148 */
inline void FarAwayFromPositionFunctor::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
}

/* <5494e4> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <5494be> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <549497> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <549470> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <549457> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <549439> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5493ea> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5493a0> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <549365> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <549316> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5492b5> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <549289> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <539f0e> ../cstrike/dlls/bot/states/cs_bot_defuse_bomb.cpp:16 */
void DefuseBombState::OnEnter(CCSBot *me)
{
//	Say(BotChatterInterface *const this,
//		const char *phraseName,
//		float lifetime,
//		float delay);  //    20
}

/* <539eac> ../cstrike/dlls/bot/states/cs_bot_defuse_bomb.cpp:27 */
void DefuseBombState::OnUpdate(CCSBot *me)
{
//	{
//		const Vector *bombPos;                        //    29
//		class CCSBotManager *ctrl;                           //    44
//	}
}

/* <539e36> ../cstrike/dlls/bot/states/cs_bot_defuse_bomb.cpp:73 */
void DefuseBombState::OnExit(CCSBot *me)
{
//	SetTask(CCSBot *const this,
//		enum TaskType task,
//		class CBaseEntity *entity);  //    77
//	ClearLookAt(CCSBot *const this);  //    79
}

/* <539e0b> ../cstrike/dlls/bot/cs_bot.h:194 */
void DefuseBombState::GetName(void)
{
}

/* <539dda> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <539dbb> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <539da2> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <539d50> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <539d37> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <539d19> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <539cfb> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <539cc6> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <539cad> ../cstrike/dlls/bot/cs_bot_manager.h:162 */
inline void CCSBotManager::GetBombDefuser(void)
{
}

/* <539c8f> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <539c5e> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <539c37> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <539c10> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <539bf7> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <539bd9> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <539b8a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <539b40> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <539b05> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <539ab6> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <539a3c> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <539a10> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5299e4> ../cstrike/dlls/bot/states/cs_bot_buy.cpp:37 */
void BuyState::OnEnter(CCSBot *me)
{
//	{
//		class CCSBotManager *ctrl;                           //    48
//		{
//			float const buyDefuseKitChance;                //    60
//		}
//		HasDefaultPistol(CCSBot *me);  //    93
//		AllowShotguns(const class CCSBotManager *const this);  //    96
//	}
}

/* <529753> ../cstrike/dlls/bot/states/cs_bot_buy.cpp:241 */
void BuyState::OnUpdate(CCSBot *me)
{
//	{
//		bool inBuyZone;                                       //   273
//		class CCSBotManager *ctrl;                           //   288
//		{
//			float const waitToBuyTime;                     //   257
//		}
//		{
//			bool isPreferredAllDisallowed;                //   295
//			{
//				int const maxPrefRetries;              //   301
//				int weaponPreference;                 //   310
//				class CBasePlayerWeapon *weapon;     //   313
//				const char *buyAlias;               //   328
//				{
//					enum WeaponType type;         //   338
//					GetWeaponType(const char *alias);  //   338
//				}
//				GetWeaponPreference(const class BotProfile *const this,
//							int i);  //   310
//			}
//			{
//				class BuyInfo *masterPrimary;        //   400
//				class BuyInfo *stockPrimary;         //   401
//				int stockPrimaryCount;                //   402
//				float const sniperRifleChance;         //   405
//				bool wantSniper;                      //   406
//				{
//					int i;                        //   408
//					AllowShotguns(const class CCSBotManager *const this);  //   410
//					AllowSubMachineGuns(const class CCSBotManager *const this);  //   411
//					AllowRifles(const class CCSBotManager *const this);  //   412
//					AllowSnipers(const class CCSBotManager *const this);  //   413
//				}
//				{
//					int which;                    //   423
//					GetDifficultyLevel(void);  //   426
//					{
//						int prefCount;        //   429
//						{
//							int whichPref;//   436
//						}
//					}
//				}
//			}
//			{
//				int which;                            //   479
//			}
//			{
//				float rnd;                            //   500
//			}
//		}
//	}
}

/* <52972b> ../cstrike/dlls/bot/states/cs_bot_buy.cpp:212 */
inline WeaponType GetWeaponType(const char *alias)
{
//	{
//		int i;                                                //   214
//	}
}

/* <5296f1> ../cstrike/dlls/bot/states/cs_bot_buy.cpp:529 */
void BuyState::OnExit(CCSBot *me)
{
}

/* <5296c6> ../cstrike/dlls/bot/cs_bot.h:139 */
void BuyState::GetName(void)
{
}

/* <5296c0> ../cstrike/dlls/bot/cs_bot_manager.h:68 */
inline void GetDifficultyLevel(void)
{
}

/* <52969e> ../game_shared/bot/bot_profile.h:69 */
inline void BotProfile::GetWeaponPreference(int i)
{
}

/* <529680> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <529667> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <529649> ../cstrike/dlls/bot/cs_bot.h:389 */
inline void CCSBot::GetStateTimestamp(void)
{
}

/* <529617> ../cstrike/dlls/bot/cs_bot_manager.h:188 */
inline void CCSBotManager::AllowTacticalShield(void)
{
}

/* <5295fe> ../cstrike/dlls/bot/cs_bot_manager.h:187 */
inline void CCSBotManager::AllowSnipers(void)
{
}

/* <5295e5> ../cstrike/dlls/bot/cs_bot_manager.h:186 */
inline void CCSBotManager::AllowGrenades(void)
{
}

/* <5295cc> ../cstrike/dlls/bot/cs_bot_manager.h:185 */
inline void CCSBotManager::AllowMachineGuns(void)
{
}

/* <5295b3> ../cstrike/dlls/bot/cs_bot_manager.h:184 */
inline void CCSBotManager::AllowRifles(void)
{
}

/* <52959a> ../cstrike/dlls/bot/cs_bot_manager.h:183 */
inline void CCSBotManager::AllowSubMachineGuns(void)
{
}

/* <529581> ../cstrike/dlls/bot/cs_bot_manager.h:182 */
inline void CCSBotManager::AllowShotguns(void)
{
}

/* <529568> ../cstrike/dlls/bot/cs_bot_manager.h:181 */
inline void CCSBotManager::AllowPistols(void)
{
}

/* <52954a> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <529521> ../game_shared/bot/bot_profile.h:71 */
inline void BotProfile::GetWeaponPreferenceCount(void)
{
}

/* <5294fb> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5294d4> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5294ad> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <529494> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <52946f> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <529451> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <529427> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <529409> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5293ba> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <529370> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <529335> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5292e6> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <52926c> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <529240> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <529218> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <5291fd> ../cstrike/dlls/bot/states/cs_bot_buy.cpp:18 */
bool HasDefaultPistol(CCSBot *me)
{
}

/* <51a140> ../cstrike/dlls/bot/states/cs_bot_attack.cpp:135 */
void AttackState::StopAttacking(CCSBot *me)
{
//	StopAttacking(AttackState *const this,
//			class CCSBot *me);  //   135
}

/* <51997e> ../cstrike/dlls/bot/states/cs_bot_attack.cpp:152 */
void AttackState::OnUpdate(CCSBot *me)
{
//	{
//		class CBasePlayerWeapon *weapon;                     //   161
//		class CBasePlayer *enemy;                            //   173
//		float notSeenEnemyTime;                               //   368
//		float chaseTime;                                      //   444
//		float const hurtRecentlyTime;                          //   474
//		StopRapidFire(CCSBot *const this);  //   158
//		GetEnemy(CCSBot *const this);  //   173
//		IsElapsed(const class CountdownTimer *const this);  //   189
//		{
//			bool isPinnedDown;                            //   198
//			Start(CountdownTimer *const this,
//				float duration);  //   210
//		}
//		{
//			bool repath;                                  //   252
//			ForceRun(CCSBot *const this,
//				float duration);  //   240
//			Hurry(CCSBot *const this,
//				float duration);  //   241
//			{
//				float const repathRange;               //   255
//				operator-(const Vector *const this,
//						const Vector &v);  //   256
//				IsLengthGreaterThan(const Vector *const this,
//							float length);  //   256
//			}
//			IsElapsed(const class CountdownTimer *const this);  //   264
//			DestroyPath(CCSBot *const this);  //   272
//			Start(CountdownTimer *const this,
//				float duration);  //   267
//		}
//		IsReloading(CBasePlayer *const this);  //   286
//		IsProtectedByShield(CBasePlayer *const this);  //   289
//		{
//			float const sniperMinRange;                    //   320
//			operator-(const Vector *const this,
//					const Vector &v);  //   321
//			IsLengthLessThan(const Vector *const this,
//					float length);  //   321
//		}
//		{
//			float const shotgunMaxRange;                   //   327
//			operator-(const Vector *const this,
//					const Vector &v);  //   328
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //   328
//		}
//		{
//			Vector toAimSpot3D;                     //   342
//			float targetRange;                            //   343
//			float const waitScopeTime;                     //   349
//			operator-(const Vector *const this,
//					const Vector &v);  //   342
//			Length(const Vector *const this);  //   343
//			GetZoomLevel(const class CCSBot *const this);  //   346
//		}
//		IsProtectedByShield(CBasePlayer *const this);  //   295
//		IsProtectedByShield(CBasePlayer *const this);  //   302
//		IsAwareOfEnemyDeath(const class CCSBot *const this);  //   358
//		{
//			float hideChance;                             //   397
//			{
//				float ambushTime;                     //   401
//				const Vector *spot;           //   405
//			}
//		}
//		StopAttacking(AttackState *const this,
//				class CCSBot *me);  //   424
//		StopAttacking(AttackState *const this,
//				class CCSBot *me);  //   377
//		GetNoisePosition(const class CCSBot *const this);  //   378
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //   465
//		entindex(CBaseEntity *const this);  //   361
//		{
//			Vector toEnemy;                         //   508
//			float range;                                  //   509
//			float const hysterisRange;                     //   511
//			float minRange;                               //   513
//			float maxRange;                               //   514
//			float const dodgeRange;                        //   526
//			operator-(const Vector *const this,
//					const Vector &v);  //   508
//			Length2D(const Vector *const this);  //   509
//			{
//				int next;                             //   534
//				{
//					float const jumpChance;        //   540
//					IsNotMoving(const class CCSBot *const this);  //   541
//				}
//			}
//		}
//		GetTimeSinceAttacked(const class CCSBot *const this);  //   476
//		GetEnemy(CCSBot *const this);  //   478
//		StopAttacking(AttackState *const this,
//				class CCSBot *me);  //   459
//		GetNearbyEnemyCount(const class CCSBot *const this);  //   361
//		entindex(CBaseEntity *const this);  //   362
//	}
}

/* <5198d4> ../cstrike/dlls/bot/states/cs_bot_attack.cpp:578 */
void AttackState::OnExit(CCSBot *me)
{
//	ForgetNoise(CCSBot *const this);  //   585
//	PopPostureContext(CBot *const this);  //   589
//	IsProtectedByShield(CBasePlayer *const this);  //   592
//	StopRapidFire(CCSBot *const this);  //   597
//	ClearSurpriseDelay(CCSBot *const this);  //   598
}

/* <5198bb> ../cstrike/dlls/player.h:660 */
inline void CBasePlayer::IsProtectedByShield(void)
{
}

/* <519735> ../cstrike/dlls/bot/states/cs_bot_attack.cpp:16 */
void AttackState::OnEnter(CCSBot *me)
{
//	{
//		class CBasePlayer *enemy;                            //    18
//		float skill;                                          //   105
//		float dodgeChance;                                    //   108
//		GetEnemy(CCSBot *const this);  //    18
//		PushPostureContext(CBot *const this);  //    21
//		DestroyPath(CCSBot *const this);  //    23
//		Invalidate(CountdownTimer *const this);  //    34
//		{
//			float const crouchFarRange;                    //    63
//			float crouchChance;                           //    64
//			operator-(const Vector *const this,
//					const Vector &v);  //    69
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //    69
//			{
//				TraceResult result;                   //    77
//				Vector origin;                  //    79
//				Vector(Vector *const this,
//					const Vector &v);  //    79
//			}
//		}
//	}
}

/* <519709> ../cstrike/dlls/bot/cs_bot.h:81 */
void AttackState::GetName(void)
{
}

/* <5196d7> ../cstrike/dlls/bot/cs_bot.h:542 */
inline void CCSBot::GetLastKnownEnemyPosition(void)
{
}

/* <5196a6> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <519687> ../cstrike/dlls/bot/cs_bot.h:1063 */
inline void CCSBot::GetNoisePosition(void)
{
}

/* <51966e> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <519655> ../cstrike/dlls/bot/cs_bot.h:1071 */
inline void CCSBot::IsAwareOfEnemyDeath(void)
{
}

/* <51963c> ../cstrike/dlls/bot/cs_bot.h:568 */
inline void CCSBot::GetPathEndpoint(void)
{
}

/* <519617> ../cstrike/dlls/bot/cs_bot.h:320 */
inline void CCSBot::Hurry( float duration)
{
}

/* <5195f2> ../cstrike/dlls/bot/cs_bot.h:586 */
inline void CCSBot::ForceRun( float duration)
{
}

/* <5195d9> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <5195b1> ../cstrike/dlls/bot/states/cs_bot_attack.cpp:135 */
void AttackState::StopAttacking(CCSBot *me)
{
}

/* <51958a> ../cstrike/dlls/bot/cs_bot.h:1085 */
inline void CCSBot::IsNotMoving(void)
{
//	{
//		float const stillSpeed;                                //  1087
//	}
}

/* <519566> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <51954d> ../cstrike/dlls/bot/cs_bot.h:684 */
inline void CCSBot::GetZoomLevel(void)
{
}

/* <519534> ../game_shared/bot/bot.h:323 */
inline void CBot::PopPostureContext(void)
{
}

/* <51951b> ../cstrike/dlls/bot/cs_bot.h:680 */
inline void CCSBot::StopRapidFire(void)
{
}

/* <519502> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <5194d0> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <5194b2> ../game_shared/bot/bot.h:308 */
inline void CBot::PushPostureContext(void)
{
}

/* <519493> ../cstrike/dlls/bot/cs_bot.h:513 */
inline void CCSBot::GetEnemy(void)
{
}

/* <519474> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <51945b> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <519442> ../cstrike/dlls/bot/cs_bot.h:547 */
inline void CCSBot::GetLastVictimID(void)
{
}

/* <519429> ../cstrike/dlls/bot/cs_bot.h:544 */
inline void CCSBot::GetEnemyDeathTimestamp(void)
{
}

/* <519410> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5193f7> ../cstrike/dlls/bot/cs_bot.h:538 */
inline void CCSBot::GetLastSawEnemyTimestamp(void)
{
}

/* <5193de> ../cstrike/dlls/bot/cs_bot.h:536 */
inline void CCSBot::GetTimeSinceAttacked(void)
{
}

/* <5193c5> ../cstrike/dlls/bot/cs_bot.h:475 */
inline void CCSBot::ForgetNoise(void)
{
}

/* <5193ac> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <51938e> ../cstrike/dlls/bot/cs_bot.h:387 */
inline void CCSBot::ClearSurpriseDelay(void)
{
}

/* <51936a> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <51934c> ../cstrike/dlls/bot/cs_bot.h:316 */
inline void CCSBot::GetCombatRange(void)
{
}

/* <519328> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <51930f> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <5192f1> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <5192cb> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5192a4> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <51927d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <519264> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <51923f> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <519226> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <519208> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <5191df> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <5191c1> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <5191a3> ../cstrike/dlls/player.h:673 */
inline void CBasePlayer::IsReloading(void)
{
}

/* <519185> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <519136> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5190ec> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5190b1> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <519062> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <519021> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <518fed> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <518fc1> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <518fa1> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <518f83> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <507c31> ../game_shared/bot/nav_path.cpp:459 */
void CNavPathFollower::Update(float deltaT, bool avoidObstacles)
{
//	{
//		const class PathSegment *node;                      //   464
//		float const closeRange;                                //   507
//		float const aheadRange;                                //   523
//		bool isApproachingJumpArea;                           //   529
//		float const giveUpTime;                                //   596
//		operator[](CNavPath *const this,
//				int i);  //   464
//		Invalidate(CNavPath *const this);  //   600
//		{
//			const Vector *approachPos;            //   476
//			const Vector *departPos;              //   477
//			operator[](CNavPath *const this,
//					int i);  //   480
//			operator[](CNavPath *const this,
//					int i);  //   483
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   508
//		IsLengthLessThan(const Vector *const this,
//				float length);  //   508
//		FindPathPoint(CNavPathFollower *const this,
//				float aheadRange,
//				Vector *point,
//				int *prevIndex);  //   524
//		{
//			float const crouchRange;                       //   547
//			bool didCrouch;                               //   548
//			{
//				int i;                                //   549
//				{
//					const class CNavArea *to;   //   551
//					Vector close;           //   560
//					operator-(const Vector *const this,
//							const Vector &v);  //   563
//					IsLengthGreaterThan(const class Vector2D *const this,
//								float length);  //   563
//					operator[](CNavPath *const this,
//							int i);  //   551
//				}
//			}
//		}
//		GetDuration(const class CStuckMonitor *const this);  //   597
//		GetEndpoint(const class CNavPath *const this);  //   599
//		{
//			float const closeRange;                        //   608
//			class Vector2D to;                            //   609
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   610
//			{
//				const class PathSegment *nextNode;  //   614
//				operator[](CNavPath *const this,
//						int i);  //   614
//				GetEndpoint(const class CNavPath *const this);  //   620
//				Invalidate(CNavPath *const this);  //   621
//				Invalidate(CNavPath *const this);  //   629
//			}
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   587
//		Vector(Vector *const this,
//			const Vector &v);  //   587
//		operator+(const Vector *const this,
//				const Vector &v);  //   588
//		Vector(Vector *const this,
//			const Vector &v);  //   588
//		Invalidate(CNavPath *const this);  //   515
//	}
}

/* <507a96> ../game_shared/bot/nav_path.cpp:1119 */
void CStuckMonitor::Update(CImprov *improv)
{
//	{
//		float const unstuckRange;                              //  1124
//		operator-(const Vector *const this,
//				const Vector &v);  //  1125
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //  1125
//		Reset(CStuckMonitor *const this);  //  1128
//	}
//	{
//		Vector vel;                                     //  1137
//		float moveDist;                                       //  1148
//		float deltaT;                                         //  1150
//		operator-(const Vector *const this,
//				const Vector &v);  //  1137
//		Length(const Vector *const this);  //  1148
//		{
//			float avgVel;                                 //  1170
//			float stuckVel;                               //  1177
//			{
//				int t;                                //  1171
//			}
//			Start(IntervalTimer *const this);  //  1182
//		}
//	}
}

/* <507a73> ../game_shared/bot/nav_path.cpp:1108 */
void CStuckMonitor::Reset(void)
{
}

/* <507a31> ../game_shared/bot/nav_path.cpp:1098 */
void CStuckMonitor::CStuckMonitor(void)
{
//	IntervalTimer(IntervalTimer *const this);  //  1098
}

/* <507004> ../game_shared/bot/nav_path.cpp:1000 */
void CNavPathFollower::FeelerReflexAdjustment(Vector *goalPosition, float height)
{
//	{
//		Vector dir;                                     //  1006
//		Vector lat;                                     //  1010
//		float const feelerOffset;                              //  1012
//		float const feelerLengthRun;                           //  1013
//		float const feelerLengthWalk;                          //  1014
//		float const feelerHeight;                              //  1016
//		float feelerLength;                                   //  1018
//		float ground;                                         //  1025
//		Vector normal;                                  //  1026
//		Vector feet;                                    //  1037
//		Vector from;                                    //  1040
//		Vector to;                                      //  1041
//		bool leftClear;                                       //  1043
//		bool rightClear;                                      //  1057
//		float const avoidRange;                                //  1070
//		NormalizeInPlace(Vector *const this);  //  1008
//		CrossProduct(Vector &a,
//				const Vector &b);  //  1031
//		IsWalkableTraceLineClear(Vector &from,
//					Vector &to,
//					unsigned int flags);  //  1043
//		CrossProduct(Vector &a,
//				const Vector &b);  //  1034
//		Vector(Vector *const this,
//			const Vector &v);  //  1037
//		operator*(float fl,
//				const Vector &v);  //  1040
//		operator+(const Vector *const this,
//				const Vector &v);  //  1040
//		operator*(float fl,
//				const Vector &v);  //  1041
//		operator+(const Vector *const this,
//				const Vector &v);  //  1041
//		Vector(Vector *const this,
//			const Vector &v);  //  1049
//		Vector(Vector *const this,
//			const Vector &v);  //  1049
//		operator-(const Vector *const this,
//				const Vector &v);  //  1054
//		IsWalkableTraceLineClear(Vector &from,
//					Vector &to,
//					unsigned int flags);  //  1057
//		operator+(const Vector *const this,
//				const Vector &v);  //  1055
//		Vector(Vector *const this,
//			const Vector &v);  //  1063
//		Vector(Vector *const this,
//			const Vector &v);  //  1063
//		operator*(float fl,
//				const Vector &v);  //  1077
//		operator+(const Vector *const this,
//				const Vector &v);  //  1077
//		operator*(float fl,
//				const Vector &v);  //  1086
//		operator-(const Vector *const this,
//				const Vector &v);  //  1086
//		Vector(Vector *const this,
//			const Vector &v);  //  1065
//		Vector(Vector *const this,
//			const Vector &v);  //  1065
//		Vector(Vector *const this,
//			const Vector &v);  //  1051
//		Vector(Vector *const this,
//			const Vector &v);  //  1051
//	}
}

/* <506248> ../game_shared/bot/nav_path.cpp:750 */
void CNavPathFollower::FindPathPoint(float aheadRange, Vector *point, int *prevIndex)
{
//	{
//		int afterIndex;                                       //   753
//		Vector close;                                   //   756
//		int startIndex;                                       //   757
//		Vector initDir;                                 //   838
//		Vector feet;                                    //   841
//		Vector eyes;                                    //   842
//		float rangeSoFar;                                     //   843
//		bool visible;                                         //   846
//		Vector prevDir;                                 //   848
//		bool isCorner;                                        //   851
//		int i;                                                //   852
//		{
//			int index;                                    //   774
//			float const closeEpsilon;                      //   782
//			operator[](CNavPath *const this,
//					int i);  //   778
//			operator-(const Vector *const this,
//					const Vector &v);  //   783
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   783
//			operator[](CNavPath *const this,
//					int i);  //   793
//		}
//		{
//			Vector pos;                             //   802
//			float const closeEpsilon;                      //   805
//			operator-(const Vector *const this,
//					const Vector &v);  //   806
//			operator[](CNavPath *const this,
//					int i);  //   802
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   806
//		}
//		operator[](CNavPath *const this,
//				int i);  //   818
//		operator[](CNavPath *const this,
//				int i);  //   820
//		operator[](CNavPath *const this,
//				int i);  //   818
//		operator[](CNavPath *const this,
//				int i);  //   831
//		operator[](CNavPath *const this,
//				int i);  //   833
//		operator[](CNavPath *const this,
//				int i);  //   831
//		operator[](CNavPath *const this,
//				int i);  //   838
//		operator[](CNavPath *const this,
//				int i);  //   838
//		operator-(const Vector *const this,
//				const Vector &v);  //   838
//		NormalizeInPlace(Vector *const this);  //   839
//		Vector(Vector *const this,
//			const Vector &v);  //   841
//		{
//			Vector pos;                             //   855
//			Vector to;                              //   856
//			Vector dir;                             //   857
//			Vector probe;                           //   876
//			Vector along;                           //   897
//			operator[](CNavPath *const this,
//					int i);  //   855
//			Vector(Vector *const this,
//				const Vector &v);  //   855
//			operator[](CNavPath *const this,
//					int i);  //   856
//			operator-(const Vector *const this,
//					const Vector &v);  //   856
//			Normalize(const Vector *const this);  //   857
//			DotProduct(Vector &a,
//					const Vector &b);  //   860
//			DotProduct(Vector &a,
//					const Vector &b);  //   867
//			operator+(const Vector *const this,
//					const Vector &v);  //   876
//			IsWalkableTraceLineClear(Vector &from,
//						Vector &to,
//						unsigned int flags);  //   877
//			operator[](CNavPath *const this,
//					int i);  //   886
//			operator[](CNavPath *const this,
//					int i);  //   886
//			operator[](CNavPath *const this,
//					int i);  //   897
//			operator-(const Vector *const this,
//					const Vector &v);  //   897
//			Length2D(const Vector *const this);  //   898
//			operator-(const Vector *const this,
//					const Vector &v);  //   897
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //   842
//		operator[](CNavPath *const this,
//				int i);  //   916
//		{
//			const Vector *afterPoint;             //   921
//			const Vector *beforePoint;            //   922
//			Vector to;                              //   924
//			float length;                                 //   925
//			float t;                                      //   927
//			operator[](CNavPath *const this,
//					int i);  //   921
//			operator[](CNavPath *const this,
//					int i);  //   922
//			operator-(const Vector *const this,
//					const Vector &v);  //   924
//			Length2D(const Vector *const this);  //   925
//			operator*(float fl,
//					const Vector &v);  //   934
//			{
//				float const sightStepSize;             //   939
//				float dt;                             //   940
//				Vector probe;                   //   942
//				operator+(const Vector *const this,
//						const Vector &v);  //   942
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   943
//				operator+(const Vector *const this,
//						const Vector &v);  //   946
//				operator*(float fl,
//						const Vector &v);  //   946
//			}
//			operator+(const Vector *const this,
//					const Vector &v);  //   934
//		}
//		{
//			float const epsilon;                           //   957
//			class Vector2D toPoint;                       //   958
//			class Vector2D centroid;                      //   959
//			DotProduct(const class Vector2D &a,
//					const class Vector2D &b);  //   964
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   964
//			{
//				int i;                                //   966
//				operator[](CNavPath *const this,
//						int i);  //   969
//				operator[](CNavPath *const this,
//						int i);  //   973
//				operator[](CNavPath *const this,
//						int i);  //   971
//				IsLengthGreaterThan(const class Vector2D *const this,
//							float length);  //   971
//			}
//		}
//	}
}

/* <505d18> ../game_shared/bot/nav_path.cpp:662 */
void CNavPathFollower::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   667
//		Vector toFeet;                                  //   667
//		Vector feet;                                    //   668
//		Vector eyes;                                    //   669
//		Vector pos;                                     //   670
//		const Vector *from;                           //   671
//		const Vector *to;                             //   671
//		float length;                                         //   672
//		float closeLength;                                    //   673
//		float closeDistSq;                                    //   674
//		int closeIndex;                                       //   675
//		float distSq;                                         //   676
//		int start;                                            //   678
//		int end;                                              //   678
//		Vector(Vector *const this,
//			const Vector &v);  //   668
//		Vector(Vector *const this,
//			const Vector &v);  //   669
//		{
//			int i;                                        //   696
//			NormalizeInPlace(Vector *const this);  //   705
//			operator-(const Vector *const this,
//					const Vector &v);  //   708
//			DotProduct(Vector &a,
//					const Vector &b);  //   711
//			operator-(const Vector *const this,
//					const Vector &v);  //   721
//			LengthSquared(const Vector *const this);  //   721
//			{
//				Vector probe;                   //   727
//				operator+(const Vector *const this,
//						const Vector &v);  //   727
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   728
//			}
//			operator[](CNavPath *const this,
//					int i);  //   698
//			operator[](CNavPath *const this,
//					int i);  //   699
//			operator-(const Vector *const this,
//					const Vector &v);  //   702
//			operator*(float fl,
//					const Vector &v);  //   719
//			operator+(const Vector *const this,
//					const Vector &v);  //   719
//		}
//	}
}

/* <505cce> ../game_shared/bot/nav_path.cpp:447 */
void CNavPathFollower::Reset(void)
{
//	Reset(CStuckMonitor *const this);  //   452
}

/* <505c6d> ../game_shared/bot/nav_path.cpp:436 */
void CNavPathFollower::CNavPathFollower(void)
{
//	CStuckMonitor(CStuckMonitor *const this);  //   436
}

/* <505c51> ../game_shared/bot/nav_path.cpp:436 */
void CNavPathFollower::CNavPathFollower(void)
{
}

/* <505c26> ../game_shared/bot/nav_path.cpp:396 */
void CNavPath::Optimize(void)
{
}

/* <505931> ../game_shared/bot/nav_path.cpp:357 */
void CNavPath::FindNextOccludedNode(int anchor)
{
//	{
//		int lastVisible;                                      //   359
//		{
//			int i;                                        //   360
//			{
//				Vector anchorPlusHalf;          //   372
//				Vector iPlusHalf;               //   373
//				Vector anchorPlusFull;          //   380
//				Vector iPlusFull;               //   381
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   366
//				operator+(const Vector *const this,
//						const Vector &v);  //   372
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   374
//				operator+(const Vector *const this,
//						const Vector &v);  //   373
//				operator+(const Vector *const this,
//						const Vector &v);  //   380
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   382
//				operator+(const Vector *const this,
//						const Vector &v);  //   381
//			}
//		}
//	}
}

/* <505853> ../game_shared/bot/nav_path.cpp:340 */
void CNavPath::Draw(void)
{
//	{
//		int i;                                                //   345
//		operator+(const Vector *const this,
//				const Vector &v);  //   347
//		operator+(const Vector *const this,
//				const Vector &v);  //   347
//	}
}

/* <5057df> ../game_shared/bot/nav_path.cpp:305 */
void CNavPath::BuildTrivialPath(const Vector *start, const Vector *goal)
{
//	{
//		class CNavArea *startArea;                           //   309
//		class CNavArea *goalArea;                            //   313
//	}
}

/* <50557e> ../game_shared/bot/nav_path.cpp:250 */
void CNavPath::FindClosestPointOnPath(Vector *worldPos, int startIndex, int endIndex, Vector *close)
{
//	{
//		Vector along;                                   //   255
//		Vector toWorldPos;                              //   255
//		Vector pos;                                     //   256
//		const Vector *from;                           //   257
//		const Vector *to;                             //   257
//		float length;                                         //   258
//		float closeLength;                                    //   259
//		float closeDistSq;                                    //   260
//		float distSq;                                         //   261
//		{
//			int i;                                        //   263
//			NormalizeInPlace(Vector *const this);  //   272
//			operator-(const Vector *const this,
//					const Vector &v);  //   275
//			DotProduct(Vector &a,
//					const Vector &b);  //   278
//			operator-(const Vector *const this,
//					const Vector &v);  //   288
//			LengthSquared(const Vector *const this);  //   288
//			operator-(const Vector *const this,
//					const Vector &v);  //   269
//			operator*(float fl,
//					const Vector &v);  //   286
//			operator+(const Vector *const this,
//					const Vector &v);  //   286
//		}
//	}
}

/* <5054da> ../game_shared/bot/nav_path.cpp:218 */
void CNavPath::GetSegmentIndexAlongPath( float distAlong)
{
//	{
//		float lengthSoFar;                                    //   228
//		Vector dir;                                     //   229
//		{
//			int i;                                        //   230
//			operator-(const Vector *const this,
//					const Vector &v);  //   232
//			Length(const Vector *const this);  //   232
//		}
//	}
}

/* <50537f> ../game_shared/bot/nav_path.cpp:177 */
void CNavPath::GetPointAlongPath(float distAlong, Vector *pointOnPath)
{
//	{
//		float lengthSoFar;                                    //   188
//		float segmentLength;                                  //   189
//		Vector dir;                                     //   190
//		{
//			int i;                                        //   191
//			operator-(const Vector *const this,
//					const Vector &v);  //   193
//			Length(const Vector *const this);  //   194
//			{
//				float delta;                          //   199
//				float t;                              //   200
//				operator*(float fl,
//						const Vector &v);  //   202
//				operator+(const Vector *const this,
//						const Vector &v);  //   202
//			}
//		}
//	}
}

/* <5052f6> ../game_shared/bot/nav_path.cpp:161 */
void CNavPath::GetLength(void)
{
//	{
//		float length;                                         //   163
//		{
//			int i;                                        //   164
//			operator-(const Vector *const this,
//					const Vector &v);  //   166
//			Length(const Vector *const this);  //   166
//		}
//	}
}

/* <50525f> ../game_shared/bot/nav_path.cpp:148 */
void CNavPath::IsAtEnd(Vector &pos)
{
//	{
//		float const epsilon;                                   //   153
//		operator-(const Vector *const this,
//				const Vector &v);  //   154
//		IsLengthLessThan(const Vector *const this,
//				float length);  //   154
//	}
}

/* <505025> ../game_shared/bot/nav_path.cpp:24 */
void CNavPath::ComputePathPositions(void)
{
//	{
//		int i;                                                //    34
//		{
//			const class PathSegment *from;              //    36
//			class PathSegment *to;                       //    37
//			{
//				const NavLadderList *list;          //   118
//				const_iterator iter;                  //   119
//				{
//					class CNavLadder *ladder;    //   122
//					AddDirectionVector(Vector *v,
//								enum NavDirType dir,
//								float amount);  //   128
//				}
//				end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   120
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //   120
//			}
//			{
//				const NavLadderList *list;          //    91
//				const_iterator iter;                  //    92
//				end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //    93
//				{
//					class CNavLadder *ladder;    //    95
//					AddDirectionVector(Vector *v,
//								enum NavDirType dir,
//								float amount);  //   104
//				}
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //    93
//			}
//			{
//				float const stepInDist;                //    47
//				AddDirectionVector(Vector *v,
//							enum NavDirType dir,
//							float amount);  //    48
//				{
//					class Vector2D dir;           //    59
//					float const pushDist;          //    63
//					DirectionToVector2D(NavDirType dir,
//								class Vector2D *v);  //    60
//					{
//						int j;                //    71
//					}
//				}
//			}
//		}
//	}
}

/* <504b17> ../game_shared/bot/nav_path.cpp:662 */
void CNavPathFollower::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   667
//		Vector eyes;                                    //   669
//		const Vector *from;                           //   671
//		float length;                                         //   672
//		float closeLength;                                    //   673
//		float closeDistSq;                                    //   674
//		int closeIndex;                                       //   675
//		float distSq;                                         //   676
//		int start;                                            //   678
//		int end;                                              //   678
//		Vector toFeet;                                  //   667
//		Vector feet;                                    //   668
//		Vector pos;                                     //   670
//		const Vector *to;                             //   671
//		Vector(Vector *const this,
//			const Vector &v);  //   668
//		Vector(Vector *const this,
//			const Vector &v);  //   669
//		{
//			int i;                                        //   696
//			NormalizeInPlace(Vector *const this);  //   705
//			operator-(const Vector *const this,
//					const Vector &v);  //   708
//			DotProduct(Vector &a,
//					const Vector &b);  //   711
//			operator-(const Vector *const this,
//					const Vector &v);  //   721
//			LengthSquared(const Vector *const this);  //   721
//			{
//				Vector probe;                   //   727
//				operator+(const Vector *const this,
//						const Vector &v);  //   727
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   728
//			}
//			operator[](CNavPath *const this,
//					int i);  //   698
//			operator[](CNavPath *const this,
//					int i);  //   699
//			operator-(const Vector *const this,
//					const Vector &v);  //   702
//			operator*(float fl,
//					const Vector &v);  //   719
//			operator+(const Vector *const this,
//					const Vector &v);  //   719
//		}
//	}
}

/* <504a5e> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <504962> ../game_shared/bot/nav_path.cpp:662 */
void CNavPathFollower::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   667
//		Vector toFeet;                                  //   667
//		Vector feet;                                    //   668
//		Vector eyes;                                    //   669
//		Vector pos;                                     //   670
//		const Vector *from;                           //   671
//		const Vector *to;                             //   671
//		float length;                                         //   672
//		float closeLength;                                    //   673
//		float closeDistSq;                                    //   674
//		int closeIndex;                                       //   675
//		float distSq;                                         //   676
//		int start;                                            //   678
//		int end;                                              //   678
//		{
//			int i;                                        //   696
//			{
//				Vector probe;                   //   727
//			}
//		}
//	}
}

/* <504786> ../game_shared/bot/nav_path.cpp:750 */
void CNavPathFollower::FindPathPoint(float aheadRange, Vector *point, int *prevIndex)
{
//	{
//		int afterIndex;                                       //   753
//		Vector close;                                   //   756
//		int startIndex;                                       //   757
//		Vector initDir;                                 //   838
//		Vector feet;                                    //   841
//		Vector eyes;                                    //   842
//		float rangeSoFar;                                     //   843
//		bool visible;                                         //   846
//		Vector prevDir;                                 //   848
//		bool isCorner;                                        //   851
//		int i;                                                //   852
//		{
//			int index;                                    //   774
//			float const closeEpsilon;                      //   782
//		}
//		{
//			Vector pos;                             //   802
//			float const closeEpsilon;                      //   805
//		}
//		{
//			Vector pos;                             //   855
//			Vector to;                              //   856
//			Vector dir;                             //   857
//			Vector probe;                           //   876
//			Vector along;                           //   897
//		}
//		{
//			const Vector *afterPoint;             //   921
//			const Vector *beforePoint;            //   922
//			Vector to;                              //   924
//			float length;                                 //   925
//			float t;                                      //   927
//			{
//				float const sightStepSize;             //   939
//				float dt;                             //   940
//				Vector probe;                   //   942
//			}
//		}
//		{
//			float const epsilon;                           //   957
//			class Vector2D toPoint;                       //   958
//			class Vector2D centroid;                      //   959
//			{
//				int i;                                //   966
//			}
//		}
//	}
}

/* <50473f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <504715> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <5046fc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <5046e3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <5046ac> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <504688> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <50464d> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <50462f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <504606> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <5045e8> ../game_shared/bot/nav_path.h:169 */
inline void CStuckMonitor::GetDuration(void)
{
}

/* <5045cf> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <5045ab> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <50458f> ../game_shared/bot/nav_path.cpp:1108 */
void CStuckMonitor::Reset(void)
{
}

/* <50456e> ../game_shared/bot/nav_path.cpp:1098 */
void CStuckMonitor::CStuckMonitor(void)
{
}

/* <504550> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <5044fe> ../cstrike/dlls/vector.h:58 */
inline void Vector2D::IsLengthGreaterThan(float length)
{
}

/* <50449f> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <504479> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <504450> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <50442e> ../game_shared/bot/nav_path.h:35 */
inline void CNavPath::operator[]( int i)
{
}

/* <504415> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <5043c3> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <5043aa> ../game_shared/bot/nav_path.h:37 */
inline void CNavPath::GetEndpoint(void)
{
}

/* <504391> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <504373> ../game_shared/bot/nav_path.h:47 */
inline void CNavPath::Invalidate(void)
{
}

/* <50435a> ../game_shared/bot/nav_path.h:46 */
inline void CNavPath::IsValid(void)
{
}

/* <50433c> ../game_shared/bot/nav_path.h:36 */
inline void CNavPath::GetSegmentCount(void)
{
}

/* <50431e> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <504300> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <5042af> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <504240> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5041f5> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5041a1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <50417a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <504153> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <50409f> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <504079> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <504045> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <504019> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <503ff9> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <503fdb> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <503fbd> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <503f95> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <503f6d> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <4f7b1c> ../game_shared/bot/nav_node.cpp:100 */
void CNavNode::IsClosedCell(void)
{
//	IsBiLinked(const class CNavNode *const this,
//			enum NavDirType dir);  //   102
//	IsBiLinked(const class CNavNode *const this,
//			enum NavDirType dir);  //   103
//	IsBiLinked(const class CNavNode *const this,
//			enum NavDirType dir);  //   104
//	IsBiLinked(const class CNavNode *const this,
//			enum NavDirType dir);  //   105
}

/* <4f7af2> ../game_shared/bot/nav_node.cpp:86 */
void CNavNode::IsBiLinked(NavDirType dir)
{
}

/* <4f7a75> ../game_shared/bot/nav_node.cpp:64 */
void GetNode(const Vector *pos)
{
//	{
//		float const tolerance;                                 //    66
//		{
//			const class CNavNode *node;                 //    68
//			{
//				float dx;                             //    70
//				float dy;                             //    71
//				float dz;                             //    72
//			}
//		}
//	}
}

/* <4f7a31> ../game_shared/bot/nav_node.cpp:54 */
void CNavNode::ConnectTo(CNavNode *node, NavDirType dir)
{
}

/* <4f79dc> ../game_shared/bot/nav_node.cpp:23 */
void CNavNode::CNavNode(const Vector *pos, const Vector *normal, class CNavNode *parent)
{
//	{
//		unsigned int nextID;                                  //    28
//		{
//			int i;                                        //    31
//		}
//	}
}

/* <4f797d> ../game_shared/bot/nav_node.cpp:23 */
void CNavNode::CNavNode(const Vector *pos, const Vector *normal, class CNavNode *parent)
{
//	{
//		unsigned int nextID;                                  //    28
//		{
//			int i;                                        //    31
//		}
//	}
}

/* <4f7952> ../game_shared/bot/nav_node.cpp:86 */
void CNavNode::IsBiLinked(NavDirType dir)
{
}

/* <4f7930> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <4f7910> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(void)
{
}

/* <4f78ec> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4f7898> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4f784e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4f77ff> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4f77a3> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4f7777> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4f7759> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <4f424e> (null):27581 */
void _GLOBAL__sub_I__Z14GetBspFilenamePKc(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  1080
}

/* <4f3e47> ../game_shared/bot/nav_file.cpp:702 */
/* linkage=_Z17SaveNavigationMapPKc */
bool SaveNavigationMap(const char *filename)
{
//	{
//		int fd;                                               //   716
//		unsigned int magic;                                   //   723
//		unsigned int version;                                 //   733
//		char *bspFilename;                                   //   739
//		unsigned int bspSize;                                 //   743
//		iterator it;                                          //   754
//		unsigned int count;                                   //   775
//		COM_FixSlashes(char *pname);  //   710
//		GetBspFilename(const char *navFilename);  //   739
//		Reset(PlaceDirectory *const this);  //   752
//		{
//			class CNavArea *area;                        //   757
//			Place place;                                  //   759
//			AddPlace(PlaceDirectory *const this,
//				Place place);  //   763
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //   755
//		Save(PlaceDirectory *const this,
//			int fd);  //   767
//		size(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   775
//		{
//			class CNavArea *area;                        //   781
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //   779
//	}
}

/* <4f19c7> ../game_shared/bot/nav_file.cpp:947 */
/* linkage=_Z17LoadNavigationMapv */
NavErrorType LoadNavigationMap(void)
{
//	{
//		char filename;                                        //   955
//		class SteamFile navFile;                              //   965
//		bool result;                                          //   971
//		unsigned int magic;                                   //   972
//		unsigned int version;                                 //   981
//		unsigned int count;                                   //  1020
//		class Extent extent;                                  //  1023
//		iterator iter;                                        //  1056
//		Reset(PlaceDirectory *const this);  //   961
//		SteamFile(SteamFile *const this,
//				const char *filename);  //   965
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   973
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   982
//		{
//			unsigned int saveBspSize;                     //   992
//			char *bspFilename;                           //   996
//			unsigned int bspSize;                         //  1000
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   993
//			{
//				char *msg;                           //  1005
//			}
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //  1021
//		{
//			unsigned int i;                               //  1030
//			{
//				class CNavArea *area;                //  1032
//				const class Extent *areaExtent;     //  1036
//				Load(CNavArea *const this,
//					class SteamFile *file,
//					unsigned int version);  //  1033
//				push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//						const value_type &__x);  //  1034
//			}
//		}
//		~SteamFile(SteamFile *const this,
//				int const __in_chrg);  //   965
//		operator++(_List_iterator<CNavArea*> *const this);  //  1057
//		{
//			class CNavArea *area;                        //  1064
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  1062
//		Load(PlaceDirectory *const this,
//			class SteamFile *file);  //  1016
//	}
}

/* <4f169d> ../game_shared/bot/nav_file.cpp:811 */
/* linkage=_Z16LoadLocationFilePKc */
void LoadLocationFile(const char *filename)
{
//	{
//		char locFilename;                                     //   813
//		char *dot;                                           //   816
//		strchr(char *__s,
//			int __c);  //   816
//		{
//			int locDataLength;                            //   821
//			char *locDataFile;                           //   822
//			char *locData;                               //   823
//			{
//				int dirSize;                          //   831
//				atoi(const char *__nptr);  //   831
//				{
//					class vector<unsigned int, std::allocator<unsigned int>> directory;                                      //   835
//					unsigned int areaID;          //   846
//					unsigned int locDirIndex;     //   846
//					vector(vector<unsigned int, std::allocator<unsigned int>> *const this);  //   835
//					reserve(vector<unsigned int, std::allocator<unsigned int>> *const this,
//						size_type __n);  //   837
//					{
//						int i;                //   839
//						push_back(vector<unsigned int, std::allocator<unsigned int>> *const this,
//								const value_type &__x);  //   842
//					}
//					{
//						class CNavArea *area;//   858
//						unsigned int place;   //   859
//						atoi(const char *__nptr);  //   853
//						atoi(const char *__nptr);  //   856
//						SetPlace(CNavArea *const this,
//							Place place);  //   862
//					}
//					~vector(vector<unsigned int, std::allocator<unsigned int>> *const this,
//						int const __in_chrg);  //   835
//				}
//			}
//		}
//	}
}

/* <4f1066> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<unsigned int, std::allocator<unsigned int>>::_M_insert_aux(iterator __position, const unsigned int &__x)
{
//	{
//		unsigned int __x_copy;                                //   308
//		construct(new_allocator<unsigned int> *const this,
//				pointer __p,
//				const unsigned int &__val);  //   303
//		copy_backward<unsigned int*, unsigned int*>(unsigned int *__first,
//								unsigned int *__last,
//								unsigned int *__result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<unsigned int, std::allocator<unsigned int>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs,
//									const class __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<unsigned int, std::allocator<unsigned int>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<unsigned int> *const this,
//				pointer __p,
//				const unsigned int &__val);  //   332
//		__uninitialized_move_a<unsigned int*, unsigned int*, std::allocator<unsigned int>>(unsigned int *__first,
//													unsigned int *__last,
//													unsigned int *__result,
//													class allocator<unsigned int> &__alloc);  //   340
//		__uninitialized_move_a<unsigned int*, unsigned int*, std::allocator<unsigned int>>(unsigned int *__first,
//													unsigned int *__last,
//													unsigned int *__result,
//													class allocator<unsigned int> &__alloc);  //   346
//		_M_deallocate(_Vector_base<unsigned int, std::allocator<unsigned int>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <4f09b8> ../game_shared/bot/nav_file.cpp:212 */
void CNavArea::Save(int fd, unsigned int version)
{
//	{
//		unsigned char count;                                  //   246
//		unsigned int saveCount;                               //   259
//		unsigned char type;                                   //   281
//		unsigned int zero;                                    //   282
//		EntryType entry;                                      //   370
//		{
//			int d;                                        //   229
//			{
//				unsigned int count;                   //   232
//				const_iterator iter;                  //   235
//				size(const class list<NavConnect, std::allocator<NavConnect>> *const this);  //   232
//				{
//					union NavConnect connect;     //   238
//				}
//				operator++(_List_const_iterator<NavConnect> *const this);  //   236
//			}
//		}
//		size(const class list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   247
//		size(const class list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   254
//		{
//			iterator iter;                                //   260
//			operator++(_List_iterator<HidingSpot*> *const this);  //   260
//			{
//				class HidingSpot *spot;              //   262
//			}
//		}
//		{
//			int a;                                        //   283
//		}
//		{
//			unsigned int count;                           //   310
//			class SpotEncounter *e;                      //   316
//			size(const class list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   310
//			{
//				iterator iter;                        //   317
//				{
//					unsigned char dir;            //   326
//					unsigned char spotCount;      //   338
//					size(const class list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   339
//					size(const class list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   346
//					{
//						iterator oiter;       //   351
//						operator++(_List_iterator<SpotOrder> *const this);  //   351
//						{
//							class SpotOrder *order;          //   353
//							unsigned int id;  //   356
//							unsigned char t;  //   359
//						}
//					}
//				}
//				operator++(_List_iterator<SpotEncounter> *const this);  //   317
//			}
//		}
//		GetEntry(const class PlaceDirectory *const this,
//			Place place);  //   370
//	}
}

/* <4f0876> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algo.h:154 */
void __find<__gnu_cxx::__normal_iterator<const unsigned int*, std::vector<unsigned int>>, unsigned int>(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > __first, class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > __last, const unsigned int &__val, class random_access_iterator_tag)
{
//	{
//		difference_type __trip_count;                         //   158
//		operator-<const unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs,
//										const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs);  //   158
//		operator++(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > *const this);  //   172
//		operator++(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > *const this);  //   188
//		operator++(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > *const this);  //   184
//		operator++(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > *const this);  //   168
//		operator++(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > *const this);  //   164
//	}
}

/* <4f05c5> ../game_shared/bot/nav_file.cpp:876 */
/* linkage=_Z24SanityCheckNavigationMapPKc */
void SanityCheckNavigationMap(const char *mapName)
{
//	{
//		int const BufLen;                                      //   885
//		char bspFilename;                                     //   886
//		char navFilename;                                     //   887
//		class SteamFile navFile;                              //   891
//		bool result;                                          //   900
//		unsigned int magic;                                   //   901
//		unsigned int version;                                 //   910
//		SteamFile(SteamFile *const this,
//				const char *filename);  //   891
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   902
//		~SteamFile(SteamFile *const this,
//				int const __in_chrg);  //   891
//		~SteamFile(SteamFile *const this,
//				int const __in_chrg);  //   891
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   911
//		{
//			unsigned int saveBspSize;                     //   921
//			unsigned int bspSize;                         //   931
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   922
//		}
//	}
}

/* <4f029e> ../game_shared/bot/nav_file.cpp:562 */
void CNavArea::PostLoad(void)
{
//	{
//		enum NavErrorType error;                              //   564
//		class SpotEncounter *e;                              //   610
//		{
//			int d;                                        //   567
//			{
//				iterator iter;                        //   569
//				{
//					union NavConnect *connect;   //   572
//					unsigned int id;              //   574
//				}
//				operator++(_List_iterator<NavConnect> *const this);  //   570
//			}
//		}
//		{
//			int a;                                        //   585
//		}
//		{
//			iterator iter;                                //   611
//			end(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   611
//			{
//				float halfWidth;                      //   632
//				float const eyeHeight;                 //   636
//			}
//			{
//				iterator oiter;                       //   642
//				end(list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   642
//				{
//					class SpotOrder *order;      //   644
//				}
//				operator++(_List_iterator<SpotOrder> *const this);  //   642
//			}
//			operator++(_List_iterator<SpotEncounter> *const this);  //   611
//		}
//		{
//			iterator oiter;                               //   657
//			{
//				class CNavArea *area;                //   659
//				push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//						const value_type &__x);  //   665
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //   657
//		}
//	}
}

/* <4f0273> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::push_back(const value_type &__x)
{
}

/* <4ee669> ../game_shared/bot/nav_file.cpp:379 */
void CNavArea::Load(SteamFile *file, unsigned int version)
{
//	{
//		unsigned char hidingSpotCount;                        //   424
//		unsigned char type;                                   //   461
//		unsigned int count;                                   //   479
//		EntryType entry;                                      //   550
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   382
//		{
//			unsigned int e;                               //   485
//			{
//				class SpotEncounter encounter;        //   487
//				unsigned char spotCount;              //   496
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   493
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   489
//				SpotEncounter(SpotEncounter *const this);  //   487
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   490
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   492
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   497
//				{
//					int s;                        //   499
//					{
//						Vector pos;     //   501
//						Read(SteamFile *const this,
//							void *data,
//							int length);  //   502
//						Read(SteamFile *const this,
//							void *data,
//							int length);  //   503
//					}
//				}
//				~SpotEncounter(SpotEncounter *const this,
//						int const __in_chrg);  //   487
//			}
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   389
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   392
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   399
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   400
//		{
//			int d;                                        //   404
//			{
//				unsigned int count;                   //   407
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   408
//				{
//					unsigned int i;               //   410
//					{
//						union NavConnect connect;   //   412
//						Read(SteamFile *const this,
//							void *data,
//							int length);  //   413
//						push_back(list<NavConnect, std::allocator<NavConnect>> *const this,
//								const value_type &__x);  //   415
//					}
//				}
//			}
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   425
//		{
//			int h;                                        //   444
//			{
//				class HidingSpot *spot;              //   447
//				push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//						const value_type &__x);  //   451
//			}
//		}
//		{
//			Vector pos;                             //   430
//			{
//				int h;                                //   431
//				{
//					class HidingSpot *spot;      //   436
//					Read(SteamFile *const this,
//						void *data,
//						int length);  //   433
//					push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//							const value_type &__x);  //   438
//				}
//			}
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   458
//		{
//			int a;                                        //   462
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   464
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   466
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   467
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   470
//			Read(SteamFile *const this,
//				void *data,
//				int length);  //   471
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   480
//		{
//			unsigned int e;                               //   509
//			{
//				class SpotEncounter encounter;        //   511
//				unsigned char dir;                    //   515
//				unsigned char spotCount;              //   525
//				class SpotOrder order;                //   528
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   513
//				SpotEncounter(SpotEncounter *const this);  //   511
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   516
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   519
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   521
//				Read(SteamFile *const this,
//					void *data,
//					int length);  //   526
//				{
//					int s;                        //   529
//					{
//						unsigned char t;      //   533
//						Read(SteamFile *const this,
//							void *data,
//							int length);  //   531
//						Read(SteamFile *const this,
//							void *data,
//							int length);  //   534
//						push_back(list<SpotOrder, std::allocator<SpotOrder>> *const this,
//								const value_type &__x);  //   538
//					}
//				}
//				push_back(list<SpotEncounter, std::allocator<SpotEncounter>> *const this,
//						const value_type &__x);  //   541
//				~SpotEncounter(SpotEncounter *const this,
//						int const __in_chrg);  //   511
//			}
//		}
//		Read(SteamFile *const this,
//			void *data,
//			int length);  //   551
//		EntryToPlace(const class PlaceDirectory *const this,
//				EntryType entry);  //   554
//		SetPlace(CNavArea *const this,
//			Place place);  //   554
//	}
}

/* <4ee63e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::push_back(const value_type &__x)
{
}

/* <4ee613> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::push_back(const value_type &__x)
{
}

/* <4ee5c1> ../game_shared/bot/nav_file.cpp:191 */
void CNavArea::Save(FILE *fp)
{
//	{
//		int base;                                             //   198
//	}
}

/* <4ee54b> ../game_shared/bot/nav_file.cpp:173 */
char *GetBspFilename(const char *navFilename)
{
//	{
//		char bspFilename;                                     //   175
//		int len;                                              //   179
//	}
}

/* <4ee2cf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:66 */
void vector<unsigned int, std::allocator<unsigned int>>::reserve(size_type __n)
{
//	{
//		size_typeconst __old_size;                            //    73
//		pointer __tmp;                                        //    74
//		_M_allocate_and_copy<unsigned int*>(vector<unsigned int, std::allocator<unsigned int>> *const this,
//							size_type __n,
//							unsigned int *__first,
//							unsigned int *__last);  //    76
//		size(const class vector<unsigned int, std::allocator<unsigned int>> *const this);  //    73
//		_M_deallocate(_Vector_base<unsigned int, std::allocator<unsigned int>> *const this,
//				pointer __p,
//				size_t __n);  //    79
//	}
}

/* <4ee24a> ../game_shared/bot/nav_file.cpp:54 */
void PlaceDirectory::~PlaceDirectory(void)
{
//	~vector(vector<unsigned int, std::allocator<unsigned int>>::~PlaceDirectory(//		int const __in_chrg);  //    54
}

/* <4ee224> ../game_shared/bot/nav_file.cpp:54 */
inline void PlaceDirectory::~PlaceDirectory( int const __in_chrg)
{
}

/* <4ee200> ../game_shared/bot/nav_file.cpp:91 */
inline void PlaceDirectory::AddPlace( Place place)
{
}

/* <4ee04e> ../game_shared/bot/nav_file.cpp:379 */
void CNavArea::Load(SteamFile *file, unsigned int version)
{
//	{
//		unsigned char hidingSpotCount;                        //   424
//		unsigned char type;                                   //   461
//		unsigned int count;                                   //   479
//		EntryType entry;                                      //   550
//		{
//			int d;                                        //   404
//			{
//				unsigned int count;                   //   407
//				{
//					unsigned int i;               //   410
//					{
//						union NavConnect connect;   //   412
//					}
//				}
//			}
//		}
//		{
//			Vector pos;                             //   430
//			{
//				int h;                                //   431
//				{
//					class HidingSpot *spot;      //   436
//				}
//			}
//		}
//		{
//			int h;                                        //   444
//			{
//				class HidingSpot *spot;              //   447
//			}
//		}
//		{
//			int a;                                        //   462
//		}
//		{
//			unsigned int e;                               //   485
//			{
//				class SpotEncounter encounter;        //   487
//				unsigned char spotCount;              //   496
//				{
//					int s;                        //   499
//					{
//						Vector pos;     //   501
//					}
//				}
//			}
//		}
//		{
//			unsigned int e;                               //   509
//			{
//				class SpotEncounter encounter;        //   511
//				unsigned char dir;                    //   515
//				unsigned char spotCount;              //   525
//				class SpotOrder order;                //   528
//				{
//					int s;                        //   529
//					{
//						unsigned char t;      //   533
//					}
//				}
//			}
//		}
//	}
}

/* <4ee029> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <4ee010> ../game_shared/bot/nav_area.h:268 */
inline void CNavArea::GetExtent(void)
{
}

/* <4edfaa> ../game_shared/bot/nav_file.cpp:142 */
inline void PlaceDirectory::Load(SteamFile *file)
{
//	{
//		EntryType count;                                      //   145
//		char placeName;                                       //   151
//		short unsigned int len;                               //   152
//		{
//			int i;                                        //   153
//		}
//	}
}

/* <4edf91> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <4edf61> ../game_shared/bot/nav_file.cpp:105 */
inline void PlaceDirectory::EntryToPlace(EntryType entry)
{
//	{
//		int i;                                                //   110
//	}
}

/* <4edf36> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::push_back(const value_type &__x)
{
}

/* <4edf10> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::~SpotEncounter( int const __in_chrg)
{
}

/* <4edef4> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::SpotEncounter(void)
{
}

/* <4edec9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<NavConnect, std::allocator<NavConnect>>::push_back(const value_type &__x)
{
}

/* <4ede83> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4ede49> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4ede24> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<SpotEncounter>(SpotEncounter &__r)
{
}

/* <4eddf0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<SpotEncounter>::construct( pointer __p, const SpotEncounter &__val)
{
}

/* <4eddc5> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::SpotEncounter(SpotEncounter &const)
{
}

/* <4edd9a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:571 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::list(list<SpotOrder, std::allocator<SpotOrder>> &__x)
{
}

/* <4edd74> ../game_shared/bot/nav.h:122 */
inline void Ray::Ray(Ray &const)
{
}

/* <4edd3e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:356 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_List_base(const allocator_type &__a)
{
}

/* <4edd13> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:318 */
inline void _List_impl::_List_impl(const _Node_alloc_type &__a)
{
}

/* <4edcea> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:109 */
inline void allocator<std::_List_node<SpotOrder>>::allocator(allocator<std::_List_node<SpotOrder>> &__a)
{
}

/* <4edcc7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:71 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(new_allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <4edc84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::size(void)
{
}

/* <4edc2e> ../game_shared/bot/nav_file.cpp:122 */
inline void PlaceDirectory::Save( int fd)
{
//	{
//		EntryType count;                                      //   125
//		iterator it;                                          //   129
//		{
//			const char *placeName;                      //   132
//			short unsigned int len;                       //   135
//		}
//	}
}

/* <4edc15> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <4edbfc> ../game_shared/bot/nav_file.cpp:60 */
inline void PlaceDirectory::Reset(void)
{
}

/* <4edbe0> ../game_shared/bot/nav_file.cpp:680 */
inline void COM_FixSlashes(char *pname)
{
}

/* <4edbaf> ../game_shared/bot/nav_file.cpp:66 */
inline void PlaceDirectory::IsKnown(Place place)
{
//	{
//		const_iterator it;                                    //    68
//	}
}

/* <4edb84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<unsigned int, std::allocator<unsigned int>>::push_back(const value_type &__x)
{
}

/* <4edb44> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs, const __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs)
{
}

/* <4edb02> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<unsigned int, std::allocator<unsigned int>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <4edac0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
}

/* <4eda64> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<unsigned int*, unsigned int*, std::allocator<unsigned int>>(unsigned int *__first, unsigned int *__last, unsigned int *__result, class allocator<unsigned int> &__alloc)
{
}

/* <4eda21> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:66 */
void vector<unsigned int, std::allocator<unsigned int>>::reserve(size_type __n)
{
//	{
//		size_typeconst __old_size;                            //    73
//		pointer __tmp;                                        //    74
//	}
}

/* <4ed9cb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1049 */
inline void vector<unsigned int, std::allocator<unsigned int>>::_M_allocate_and_copy<unsigned int*>( size_type __n, unsigned int *__first, unsigned int *__last)
{
//	{
//		pointer __result;                                     //  1052
//	}
}

/* <4ed976> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<unsigned int*, unsigned int*, unsigned int>(unsigned int *__first, unsigned int *__last, unsigned int *__result, class allocator<unsigned int> &const)
{
}

/* <4ed935> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
//	{
//	}
}

/* <4ed8f6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
}

/* <4ed8b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
}

/* <4ed868> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
}

/* <4ed80d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <4ed7c5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<unsigned int>(const unsigned int *__first, const unsigned int *__last, unsigned int *__result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <4ed786> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1452 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_initialize_dispatch<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last, class __false_type)
{
}

/* <4ed741> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<std::_List_node<SpotOrder>>::allocator<SpotOrder>(allocator<SpotOrder> &const)
{
}

/* <4ed70d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <4ed6f4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <4ed6ad> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <4ed694> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<NavConnect>::operator++(void)
{
}

/* <4ed65d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<NavConnect>::_List_iterator(void)
{
}

/* <4ed644> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <4ed5fe> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4ed5c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4ed59f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<CNavArea*>(CNavArea *&const __r)
{
}

/* <4ed586> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_Tp_allocator(void)
{
}

/* <4ed568> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_Node_allocator(void)
{
}

/* <4ed53c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<CNavArea*>::allocator<std::_List_node<CNavArea*>>(allocator<std::_List_node<CNavArea*>> &const)
{
}

/* <4ed518> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<CNavArea*>::new_allocator(void)
{
}

/* <4ed4fa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_node(void)
{
}

/* <4ed4cc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<CNavArea*>>::allocate( size_type __n, const void *)
{
}

/* <4ed4ae> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<CNavArea*>>::max_size(void)
{
}

/* <4ed495> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_Tp_allocator(void)
{
}

/* <4ed477> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_Node_allocator(void)
{
}

/* <4ed44b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<SpotEncounter>::allocator<std::_List_node<SpotEncounter>>(allocator<std::_List_node<SpotEncounter>> &const)
{
}

/* <4ed427> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<SpotEncounter>::new_allocator(void)
{
}

/* <4ed409> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_node(void)
{
}

/* <4ed3db> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<SpotEncounter>>::allocate( size_type __n, const void *)
{
}

/* <4ed3bd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<SpotEncounter>>::max_size(void)
{
}

/* <4ed377> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4ed33d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4ed324> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_node(void)
{
}

/* <4ed2fb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<SpotOrder>>::allocate( size_type __n, const void *)
{
}

/* <4ed2dd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<SpotOrder>>::max_size(void)
{
}

/* <4ed297> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4ed25d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4ed238> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<HidingSpot*>(HidingSpot *&const __r)
{
}

/* <4ed21f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_Tp_allocator(void)
{
}

/* <4ed201> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_Node_allocator(void)
{
}

/* <4ed1d5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<HidingSpot*>::allocator<std::_List_node<HidingSpot*>>(allocator<std::_List_node<HidingSpot*>> &const)
{
}

/* <4ed1b1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<HidingSpot*>::new_allocator(void)
{
}

/* <4ed193> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_node(void)
{
}

/* <4ed165> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<HidingSpot*>>::allocate( size_type __n, const void *)
{
}

/* <4ed147> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<HidingSpot*>>::max_size(void)
{
}

/* <4ed101> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<NavConnect, std::allocator<NavConnect>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4ed0c7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<NavConnect, std::allocator<NavConnect>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4ed0a2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<NavConnect>(union NavConnect &__r)
{
}

/* <4ed089> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_Tp_allocator(void)
{
}

/* <4ed06b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_Node_allocator(void)
{
}

/* <4ed03f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<NavConnect>::allocator<std::_List_node<NavConnect>>(allocator<std::_List_node<NavConnect>> &const)
{
}

/* <4ed01b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<NavConnect>::new_allocator(void)
{
}

/* <4ecffd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_node(void)
{
}

/* <4ecfcf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<NavConnect>>::allocate( size_type __n, const void *)
{
}

/* <4ecfb1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<NavConnect>>::max_size(void)
{
}

/* <4ecf65> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
}

/* <4ecf44> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<unsigned int*>(unsigned int *__it)
{
}

/* <4ecee9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, unsigned int*, unsigned int*>(unsigned int *__first, unsigned int *__last, unsigned int *__result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <4ecec8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<unsigned int*>(unsigned int *__it)
{
}

/* <4ece7b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<unsigned int>(const unsigned int *__first, const unsigned int *__last, unsigned int *__result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <4ece53> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<CNavArea*>::~allocator( int const __in_chrg)
{
}

/* <4ece30> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<CNavArea*>::~new_allocator( int const __in_chrg)
{
}

/* <4ece08> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<SpotEncounter>::~allocator( int const __in_chrg)
{
}

/* <4ecde0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<SpotEncounter>::~new_allocator( int const __in_chrg)
{
}

/* <4ecdb9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::~list( int const __in_chrg)
{
}

/* <4ecd96> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::~_List_base( int const __in_chrg)
{
}

/* <4ecd50> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4ecd2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<SpotOrder>(SpotOrder &__r)
{
}

/* <4ecd12> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Tp_allocator(void)
{
}

/* <4eccf4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Node_allocator(void)
{
}

/* <4eccc8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<SpotOrder>::allocator<std::_List_node<SpotOrder>>(allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <4ecca4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<SpotOrder>::new_allocator(void)
{
}

/* <4ecc8b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::list(void)
{
}

/* <4ecc72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_List_base(void)
{
}

/* <4ecc59> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_init(void)
{
}

/* <4ecc40> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4ecc27> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<SpotOrder>>::allocator(void)
{
}

/* <4ecc0e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(void)
{
}

/* <4ecbe6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<HidingSpot*>::~allocator( int const __in_chrg)
{
}

/* <4ecbc3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<HidingSpot*>::~new_allocator( int const __in_chrg)
{
}

/* <4ecb9b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<NavConnect>::~allocator( int const __in_chrg)
{
}

/* <4ecb78> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<NavConnect>::~new_allocator( int const __in_chrg)
{
}

/* <4ecb57> ../game_shared/bot/nav_file.cpp:54 */
inline void PlaceDirectory::PlaceDirectory(void)
{
}

/* <4ecb3e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<unsigned int, std::allocator<unsigned int>>::vector(void)
{
}

/* <4ecb25> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::_Vector_base(void)
{
}

/* <4ecb0c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <4ecaf3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<unsigned int>::allocator(void)
{
}

/* <4ecada> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<unsigned int>::new_allocator(void)
{
}

/* <4ecac3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(unsigned int *__it)
{
}

/* <4eca98> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last)
{
}

/* <4eca7f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <4eca41> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4eca11> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <4ec9f8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavArea*>::operator++(void)
{
}

/* <4ec9bf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<CNavArea*>::construct( pointer __p, const CNavArea * &__val)
{
}

/* <4ec98b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<SpotOrder>::construct( pointer __p, const SpotOrder &__val)
{
}

/* <4ec960> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_put_node(_List_node<SpotOrder> *__p)
{
}

/* <4ec937> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<SpotOrder>>::deallocate( pointer __p, size_type)
{
}

/* <4ec90f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<SpotOrder>::~allocator( int const __in_chrg)
{
}

/* <4ec8ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<SpotOrder>::~new_allocator( int const __in_chrg)
{
}

/* <4ec8b3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<HidingSpot*>::construct( pointer __p, const HidingSpot * &__val)
{
}

/* <4ec87a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<NavConnect>::construct( pointer __p, const union NavConnect &__val)
{
}

/* <4ec844> ../game_shared/bot/nav_file.cpp:74 */
inline void PlaceDirectory::GetEntry(Place place)
{
//	{
//		const_iterator it;                                    //    79
//	}
}

/* <4ec81b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<SpotEncounter>::operator!=(const _Self &__x)
{
}

/* <4ec802> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::end(void)
{
}

/* <4ec7e9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<SpotEncounter>::operator++(void)
{
}

/* <4ec7c0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <4ec7a7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <4ec78e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<SpotOrder>::operator++(void)
{
}

/* <4ec757> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::size(void)
{
}

/* <4ec720> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::size(void)
{
}

/* <4ec6f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <4ec6de> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <4ec6c5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<HidingSpot*>::operator++(void)
{
}

/* <4ec68e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::size(void)
{
}

/* <4ec675> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <4ec633> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:218 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(const iterator &__x)
{
}

/* <4ec61a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(void)
{
}

/* <4ec601> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<NavConnect, std::allocator<NavConnect>>::size(void)
{
}

/* <4ec5d6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last)
{
}

/* <4ec5bd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <4ec57f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4ec54f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <4ec536> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotOrder>::operator++(void)
{
}

/* <4ec50b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<SpotEncounter>>(_List_const_iterator<SpotEncounter> __first, class _List_const_iterator<SpotEncounter> __last)
{
}

/* <4ec4f2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::end(void)
{
}

/* <4ec4b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<SpotEncounter>>(_List_const_iterator<SpotEncounter> __first, class _List_const_iterator<SpotEncounter> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4ec484> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotEncounter>::operator!=(const _Self &__x)
{
}

/* <4ec46b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotEncounter>::operator++(void)
{
}

/* <4ec440> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<HidingSpot*>>(_List_const_iterator<HidingSpot*> __first, class _List_const_iterator<HidingSpot*> __last)
{
}

/* <4ec427> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <4ec3e9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<HidingSpot*>>(_List_const_iterator<HidingSpot*> __first, class _List_const_iterator<HidingSpot*> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4ec3b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <4ec3a0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<HidingSpot*>::operator++(void)
{
}

/* <4ec37d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<unsigned int, std::allocator<unsigned int>>::~vector( int const __in_chrg)
{
}

/* <4ec35a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::~_Vector_base( int const __in_chrg)
{
}

/* <4ec32f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <4ec307> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<unsigned int>::~allocator( int const __in_chrg)
{
}

/* <4ec2e4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<unsigned int>::~new_allocator( int const __in_chrg)
{
}

/* <4ec2cb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1039 */
inline void vector<unsigned int, std::allocator<unsigned int>>::clear(void)
{
}

/* <4ec2a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1253 */
inline void vector<unsigned int, std::allocator<unsigned int>>::_M_erase_at_end( pointer __pos)
{
}

/* <4ec28d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::_M_get_Tp_allocator(void)
{
}

/* <4ec24f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<unsigned int*, unsigned int>(unsigned int *__first, unsigned int *__last, class allocator<unsigned int> &const)
{
}

/* <4ec21e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<unsigned int*>(unsigned int *__first, unsigned int *__last)
{
}

/* <4ec1ff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<unsigned int*>(unsigned int *, unsigned int *)
{
}

/* <4ec1db> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::_M_allocate( size_t __n)
{
}

/* <4ec1b2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<unsigned int>::allocate( size_type __n, const void *)
{
}

/* <4ec17d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:210 */
inline void max<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <4ec15e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<CNavArea*>>(const class _List_const_iterator<CNavArea*> &const)
{
}

/* <4ec13a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <4ec111> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavArea*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4ec0e8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<SpotOrder>::destroy( pointer __p)
{
}

/* <4ec0bd> ../game_shared/bot/nav_area.h:164 */
inline void SpotOrder::~SpotOrder( int const __in_chrg)
{
}

/* <4ec091> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4ec069> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<SpotOrder>>::~allocator( int const __in_chrg)
{
}

/* <4ec041> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<SpotOrder>>::~new_allocator( int const __in_chrg)
{
}

/* <4ec022> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<SpotOrder>>(const class _List_const_iterator<SpotOrder> &const)
{
}

/* <4ebffe> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <4ebfd5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<SpotOrder>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4ebfb6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<SpotEncounter>>(const class _List_const_iterator<SpotEncounter> &const)
{
}

/* <4ebf92> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::begin(void)
{
}

/* <4ebf69> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<SpotEncounter>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4ebf4a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<HidingSpot*>>(const class _List_const_iterator<HidingSpot*> &const)
{
}

/* <4ebf26> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <4ebefd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<HidingSpot*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4ebec9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <4ebea0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<unsigned int>::deallocate( pointer __p, size_type)
{
}

/* <4ebe87> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<unsigned int, std::allocator<unsigned int>>::max_size(void)
{
}

/* <4ebe69> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<unsigned int, std::allocator<unsigned int>>::_M_get_Tp_allocator(void)
{
}

/* <4ebe4b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<unsigned int>::max_size(void)
{
}

/* <4ebe0b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:805 */
inline void operator==<const unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs, const __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs)
{
}

/* <4ebdcb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:817 */
inline void operator!=<const unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs, const __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs)
{
}

/* <4ebd84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algo.h:4318 */
inline void find<__gnu_cxx::__normal_iterator<const unsigned int*, std::vector<unsigned int>>, unsigned int>(__normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > __first, class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > __last, const unsigned int &__val)
{
}

/* <4ebd6b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:740 */
inline void __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::operator++(void)
{
}

/* <4ebd12> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<const unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs, const __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs)
{
}

/* <4ebce7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last)
{
}

/* <4ebcce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <4ebc90> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4ebc60> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <4ebc47> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <4ebc28> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<NavConnect>>(const class _List_const_iterator<NavConnect> &const)
{
}

/* <4ebc04> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <4ebbdb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <4ebbbd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <4ebb94> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotOrder>::_List_iterator(_List_node_base *__x)
{
}

/* <4ebb76> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::begin(void)
{
}

/* <4ebb4d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotEncounter>::_List_iterator(_List_node_base *__x)
{
}

/* <4ebb2f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <4ebb06> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<HidingSpot*>::_List_iterator(_List_node_base *__x)
{
}

/* <4ebae8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <4ebabf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<NavConnect>::_List_iterator(_List_node_base *__x)
{
}

/* <4ebaa6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:650 */
inline void vector<unsigned int, std::allocator<unsigned int>>::capacity(void)
{
}

/* <4eba66> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:817 */
inline void operator!=<unsigned int*, std::vector<unsigned int>>(const class __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__lhs, const __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &__rhs)
{
}

/* <4eba47> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<unsigned int, std::allocator<unsigned int>>::end(void)
{
}

/* <4eba2e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:740 */
inline void __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::operator++(void)
{
}

/* <4eb9fc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<unsigned int, std::allocator<unsigned int>>::begin(void)
{
}

/* <4eb9e3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:717 */
inline void __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::__normal_iterator(void)
{
}

/* <4eb9c5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::base(void)
{
}

/* <4eb995> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::__normal_iterator(const unsigned int * &__i)
{
}

/* <4eb95c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<unsigned int>::construct( pointer __p, const unsigned int &__val)
{
}

/* <4eb93e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::base(void)
{
}

/* <4eb91f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<__gnu_cxx::__normal_iterator<const unsigned int*, std::vector<unsigned int>> >(const class __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> > &const)
{
}

/* <4eb900> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:490 */
inline void vector<unsigned int, std::allocator<unsigned int>>::end(void)
{
}

/* <4eb8e7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:472 */
inline void vector<unsigned int, std::allocator<unsigned int>>::begin(void)
{
}

/* <4eb8b7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<const unsigned int*, std::vector<unsigned int, std::allocator<unsigned int>> >::__normal_iterator(const const unsigned int *&const __i)
{
}

/* <4eb899> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <4eb870> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4eb845> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:695 */
inline void vector<unsigned int, std::allocator<unsigned int>>::operator[]( size_type __n)
{
}

/* <4eb81f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:710 */
inline void vector<unsigned int, std::allocator<unsigned int>>::operator[](size_type __n)
{
}

/* <4eb801> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<unsigned int, std::allocator<unsigned int>>::size(void)
{
}

/* <4eb7e0> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(void)
{
}

/* <4eb7b4> ../game_shared/steam_util.h:29 */
inline void SteamFile::SteamFile(const char *filename)
{
}

/* <4eb793> ../game_shared/bot/nav.h:122 */
inline void Ray::Ray(void)
{
}

/* <4eb76f> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <4eb74b> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <4eb727> ../game_shared/bot/nav_area.h:218 */
inline void CNavArea::SetPlace( Place place)
{
}

/* <4eb70e> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <4eb6f0> ../game_shared/bot/nav_area.h:213 */
inline void CNavArea::GetID(void)
{
}

/* <4eb6d2> ../game_shared/bot/nav_area.h:137 */
inline void HidingSpot::GetID(void)
{
}

/* <4eb687> ../game_shared/steam_util.h:42 */
inline void SteamFile::Read( void *data, int length)
{
//	{
//		byte *readCursor;                                    //    47
//		{
//			int i;                                        //    49
//		}
//	}
}

/* <4eb65d> ../game_shared/steam_util.h:36 */
inline void SteamFile::~SteamFile( int const __in_chrg)
{
}

/* <4eb63f> ../game_shared/steam_util.h:18 */
inline void SteamFile::IsValid(void)
{
}

/* <4eb618> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <4eb5f1> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <4eb5ca> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <4eb5b1> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <4eb593> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4eb544> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4eb4fa> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4eb4bf> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <4eb470> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4eb3fb> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4eb3cf> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4eb3b1> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <4eb367> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <4d9604> (null):27581 */
void _GLOBAL__sub_I__ZN8CNavArea8m_nextIDE(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  5217
}

/* <4d943a> ../game_shared/bot/nav_area.cpp:1899 */
/* linkage=_Z26GenerateNavigationAreaMeshv */
void GenerateNavigationAreaMesh(void)
{
//	{
//		int tryWidth;                                         //  1902
//		int tryHeight;                                        //  1903
//		int uncoveredNodes;                                   //  1904
//		class Extent extent;                                  //  1935
//		iterator iter;                                        //  1942
//		{
//			class CNavNode *node;                        //  1908
//			GetFirst(void);  //  1908
//			{
//				int covered;                          //  1915
//			}
//		}
//		{
//			class CNavArea *area;                        //  1945
//			const class Extent *areaExtent;             //  1946
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  1943
//		Initialize(CNavAreaGrid *const this,
//				float minX,
//				float maxX,
//				float minY,
//				float maxY);  //  1959
//		operator++(_List_iterator<CNavArea*> *const this);  //  1961
//	}
}

/* <4d922b> ../game_shared/bot/nav_area.cpp:1259 */
/* linkage=_Z19MergeGeneratedAreasv */
void MergeGeneratedAreas(void)
{
//	{
//		bool merged;                                          //  1263
//		{
//			iterator iter;                                //  1269
//			{
//				class CNavArea *area;                //  1271
//				iterator citer;                       //  1274
//				end(list<NavConnect, std::allocator<NavConnect>> *const this);  //  1275
//				operator++(_List_iterator<NavConnect> *const this);  //  1275
//				{
//					class CNavArea *adjArea;     //  1277
//				}
//				end(list<NavConnect, std::allocator<NavConnect>> *const this);  //  1302
//				operator++(_List_iterator<NavConnect> *const this);  //  1302
//				{
//					class CNavArea *adjArea;     //  1304
//				}
//				{
//					class CNavArea *adjArea;     //  1361
//				}
//				end(list<NavConnect, std::allocator<NavConnect>> *const this);  //  1359
//				operator++(_List_iterator<NavConnect> *const this);  //  1359
//				end(list<NavConnect, std::allocator<NavConnect>> *const this);  //  1331
//				operator++(_List_iterator<NavConnect> *const this);  //  1331
//				{
//					class CNavArea *adjArea;     //  1333
//				}
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //  1269
//		}
//	}
}

/* <4d8fa5> ../game_shared/bot/nav_area.cpp:380 */
void CNavArea::FinishMerge(CNavArea *adjArea)
{
//	AssignNodes(CNavArea *const this,
//			class CNavArea *area);  //   394
//	remove(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//		const value_type &__value);  //   400
}

/* <4d76ef> ../game_shared/bot/nav_area.cpp:4002 */
/* linkage=_Z12EditNavAreas14NavEditCmdType */
void EditNavAreas(NavEditCmdType cmd)
{
//	{
//		class CCSBotManager *ctrl;                           //  4004
//		class CBasePlayer *player;                           //  4006
//		float drawTimestamp;                                  //  4011
//		float const maxDrawRate;                               //  4012
//		bool doDraw;                                          //  4014
//		float const maxRange;                                  //  4026
//		int beamTime;                                         //  4028
//		Vector dir;                                     //  4098
//		Vector from;                                    //  4101
//		Vector to;                                      //  4102
//		TraceResult result;                                   //  4104
//		{
//			iterator iter;                                //  4033
//			{
//				class CNavLadder *ladder;            //  4035
//				float dx;                             //  4037
//				float dy;                             //  4038
//				Vector bottom;                  //  4045
//				Vector top;                     //  4046
//				Vector(Vector *const this,
//					const Vector &v);  //  4043
//				Vector(Vector *const this,
//					const Vector &v);  //  4043
//				AddDirectionVector(Vector *v,
//							enum NavDirType dir,
//							float amount);  //  4048
//				Vector(Vector *const this,
//					const Vector &v);  //  4046
//				Vector(Vector *const this,
//					const Vector &v);  //  4045
//				AddDirectionVector(Vector *v,
//							enum NavDirType dir,
//							float amount);  //  4049
//				Vector(Vector *const this,
//					const Vector &v);  //  4051
//				Vector(Vector *const this,
//					const Vector &v);  //  4051
//				operator+(const Vector *const this,
//						const Vector &v);  //  4054
//				Vector(Vector *const this,
//					const Vector &v);  //  4054
//				Vector(Vector *const this,
//					const Vector &v);  //  4057
//				Vector(Vector *const this,
//					const Vector &v);  //  4057
//				Vector(Vector *const this,
//					const Vector &v);  //  4060
//				Vector(Vector *const this,
//					const Vector &v);  //  4060
//				Vector(Vector *const this,
//					const Vector &v);  //  4063
//				Vector(Vector *const this,
//					const Vector &v);  //  4063
//				Vector(Vector *const this,
//					const Vector &v);  //  4066
//				Vector(Vector *const this,
//					const Vector &v);  //  4066
//			}
//			operator++(_List_iterator<CNavLadder*> *const this);  //  4033
//		}
//		{
//			Vector ap;                              //  4072
//			float halfWidth;                              //  4073
//			{
//				int i;                                //  4074
//				{
//					const class ApproachInfo *info;   //  4076
//					operator+(const Vector *const this,
//							const Vector &v);  //  4090
//					operator+(const Vector *const this,
//							const Vector &v);  //  4090
//					operator+(const Vector *const this,
//							const Vector &v);  //  4091
//					operator+(const Vector *const this,
//							const Vector &v);  //  4091
//					operator+(const Vector *const this,
//							const Vector &v);  //  4092
//					operator+(const Vector *const this,
//							const Vector &v);  //  4092
//					operator+(const Vector *const this,
//							const Vector &v);  //  4093
//					operator+(const Vector *const this,
//							const Vector &v);  //  4093
//				}
//				GetApproachInfoCount(const class CNavArea *const this);  //  4074
//			}
//		}
//		UTIL_MakeVectorsPrivate(Vector &vecAngles,
//					float *p_vForward,
//					float *p_vRight,
//					float *p_vUp);  //  4099
//		operator+(const Vector *const this,
//				const Vector &v);  //  4101
//		operator*(float fl,
//				const Vector &v);  //  4102
//		operator+(const Vector *const this,
//				const Vector &v);  //  4102
//		{
//			Vector cursor;                          //  4110
//			float cursorSize;                             //  4111
//			class CNavArea *area;                        //  4147
//			Vector(Vector *const this,
//				const Vector &v);  //  4110
//			{
//				float z;                              //  4131
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4132
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4132
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4133
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4133
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4134
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4134
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4135
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //  4135
//			}
//			{
//				char buffer;                          //  4156
//				char attrib;                          //  4157
//				char locName;                         //  4158
//				{
//					const char *name;           //  4162
//				}
//				SetPlace(CNavArea *const this,
//					Place place);  //  4195
//			}
//			{
//				const class Extent *extent;         //  4260
//				float yaw;                            //  4262
//				float splitEdge;                      //  4269
//				bool splitAlongX;                     //  4270
//				{
//					int corner;                   //  4506
//				}
//				{
//					class CBasePlayer *pLocalPlayer;   //  4440
//					{
//						Vector origin;  //  4443
//						operator+(const Vector *const this,
//								const Vector &v);  //  4443
//					}
//				}
//				{
//					iterator iter;                //  4397
//					operator++(_List_iterator<CNavArea*> *const this);  //  4397
//					{
//						class CNavArea *area;//  4399
//					}
//				}
//				{
//					int connected;                //  4414
//					int totalUnnamedAreas;        //  4420
//					char buffer;                  //  4430
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4415
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4416
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4417
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4418
//					{
//						iterator iter;        //  4421
//						{
//							class CNavArea *area;        //  4423
//						}
//						operator++(_List_iterator<CNavArea*> *const this);  //  4421
//					}
//				}
//				{
//					enum NavDirType dir;          //  4456
//				}
//				{
//					int connected;                //  4376
//					char buffer;                  //  4382
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4377
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4378
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4379
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  4380
//				}
//				Vector(Vector *const this,
//					const Vector &v);  //  4302
//				Vector(Vector *const this,
//					const Vector &v);  //  4302
//			}
//			{
//				class PlaceFloodFillFunctor pff;      //  4237
//				SetNavPlace(CCSBotManager *const this,
//						unsigned int place);  //  4233
//				PlaceFloodFillFunctor(PlaceFloodFillFunctor *const this,
//							class CNavArea *area);  //  4237
//				SetPlace(CNavArea *const this,
//					Place place);  //  4226
//			}
//			{
//				class CNavArea *newArea;             //  4567
//				push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//						const value_type &__x);  //  4568
//				{
//					const class Extent *extent; //  4575
//				}
//			}
//			Vector(Vector *const this,
//				const Vector &v);  //  4115
//			operator+(const Vector *const this,
//					const Vector &v);  //  4115
//			operator+(const Vector *const this,
//					const Vector &v);  //  4116
//			operator+(const Vector *const this,
//					const Vector &v);  //  4116
//			operator+(const Vector *const this,
//					const Vector &v);  //  4117
//			operator+(const Vector *const this,
//					const Vector &v);  //  4117
//		}
//	}
}

/* <4d72dd> ../game_shared/bot/nav_area.cpp:911 */
void CNavArea::MergeEdit(CNavArea *adj)
{
//	{
//		float const tolerance;                                 //   917
//		bool merge;                                           //   918
//		class Extent origExtent;                              //   930
//		Extent(Extent *const this,
//			const class Extent &const);  //   930
//		GetZ(const class CNavArea *const this,
//			float x,
//			float y);  //   944
//		GetZ(const class CNavArea *const this,
//			float x,
//			float y);  //   949
//		remove(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//			const value_type &__value);  //   957
//		GetZ(const class CNavArea *const this,
//			float x,
//			float y);  //   946
//		GetZ(const class CNavArea *const this,
//			float x,
//			float y);  //   951
//	}
}

/* <4d7207> ../game_shared/bot/nav_area.cpp:1474 */
/* linkage=_Z13SquareUpAreasv */
void SquareUpAreas(void)
{
//	{
//		iterator iter;                                        //  1476
//		{
//			class CNavArea *area;                        //  1480
//			operator++(_List_iterator<CNavArea*> *const this);  //  1481
//			IsAreaRoughlySquare(const class CNavArea *area);  //  1483
//		}
//	}
}

/* <4d70f4> ../game_shared/bot/nav_area.cpp:1410 */
/* linkage=_Z6SplitXP8CNavArea */
void SplitX(CNavArea *area)
{
//	{
//		float split;                                          //  1415
//		float const epsilon;                                   //  1421
//		class CNavArea *alpha;                               //  1429
//		class CNavArea *beta;                                //  1429
//		IsAreaRoughlySquare(const class CNavArea *area);  //  1412
//		SnapToGrid(float *value);  //  1419
//	}
}

/* <4d6fe1> ../game_shared/bot/nav_area.cpp:1442 */
/* linkage=_Z6SplitYP8CNavArea */
void SplitY(CNavArea *area)
{
//	{
//		float split;                                          //  1447
//		float const epsilon;                                   //  1453
//		class CNavArea *alpha;                               //  1461
//		class CNavArea *beta;                                //  1461
//		IsAreaRoughlySquare(const class CNavArea *area);  //  1444
//		SnapToGrid(float *value);  //  1451
//	}
}

/* <4d690e> ../game_shared/bot/nav_area.cpp:507 */
void CNavArea::SplitEdit(bool splitAlongX, float splitEdge, class CNavArea ** outAlpha, class CNavArea ** outBeta)
{
//	{
//		class CNavArea *alpha;                               //   509
//		class CNavArea *beta;                                //   510
//		ConnectTo(CNavArea *const this,
//				class CNavArea *area,
//				enum NavDirType dir);  //   580
//		SetAttributes(CNavArea *const this,
//				unsigned char bits);  //   588
//		SetAttributes(CNavArea *const this,
//				unsigned char bits);  //   589
//		SetPlace(CNavArea *const this,
//			Place place);  //   592
//		SetPlace(CNavArea *const this,
//			Place place);  //   593
//		remove(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//			const value_type &__value);  //   603
//		ConnectTo(CNavArea *const this,
//				class CNavArea *area,
//				enum NavDirType dir);  //   543
//		ConnectTo(CNavArea *const this,
//				class CNavArea *area,
//				enum NavDirType dir);  //   544
//	}
}

/* <4d6733> ../game_shared/bot/nav_area.cpp:994 */
/* linkage=_Z20DestroyNavigationMapv */
void DestroyNavigationMap(void)
{
//	{
//		class CNavNode *node;                                //  1015
//		class CNavNode *next;                                //  1015
//		empty(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   999
//		{
//			class CNavArea *area;                        //  1001
//			pop_front(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //  1002
//		}
//		DestroyLadders(void);  //  1009
//	}
}

/* <4d58d7> ../game_shared/bot/nav_area.cpp:295 */
void CNavArea::~CNavArea(void)
{
//	{
//		iterator iter;                                        //   302
//		{
//			class CNavArea *area;                        //   305
//			OnDestroyNotify(CNavArea *const this,
//					class CNavArea *dead);  //   310
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //   303
//		{
//			int i;                                        //   314
//			{ /* ~CNavArea+0x18e */
//				iterator liter;                       //   316
//				{
//					class CNavLadder *ladder;    //   318
//					OnDestroyNotify(CNavLadder *const this,
//							class CNavArea *dead);  //   320
//				}
//				operator++(_List_iterator<CNavLadder*> *const this);  //   316
//			}
//		}
//		RemoveNavArea(CNavAreaGrid *const this,
//				class CNavArea *area);  //   325
//	}
//	~list(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<NavConnect, std::allocator<NavConnect>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<NavConnect, std::allocator<NavConnect>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this,
//		int const __in_chrg);  //   295
//	~list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//		int const __in_chrg);  //   295
}

/* <4d585c> ../game_shared/bot/nav_area.cpp:295 */
void CNavArea::~CNavArea(int const __in_chrg)
{
//	{
//		iterator iter;                                        //   302
//		{
//			class CNavArea *area;                        //   305
//		}
//		{
//			int i;                                        //   314
//			{
//				iterator liter;                       //   316
//				{
//					class CNavLadder *ladder;    //   318
//				}
//			}
//		}
//	}
}

/* <4d56ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//			destroy(new_allocator<SpotEncounter> *const this,
//				pointer __p);  //    78
//			_M_put_node(_List_base<SpotEncounter, std::allocator<SpotEncounter>> *const this,
//					class _List_node<SpotEncounter> *__p);  //    80
//		}
//	}
}

/* <4d49ae> ../game_shared/bot/nav_area.h:1028 */
/* linkage=_Z22SearchSurroundingAreasI21PlaceFloodFillFunctorEvP8CNavAreaPK6VectorRT_f */
void SearchSurroundingAreas<PlaceFloodFillFunctor>(CNavArea *startArea, const Vector *startPos, class PlaceFloodFillFunctor &func, float maxRange)
{
//	MakeNewMarker(void);  //  1033
//	ClearSearchLists(void);  //  1034
//	SetTotalCost(CNavArea *const this,
//			float value);  //  1037
//	AddToOpenList(CNavArea *const this);  //  1036
//	SetParent(CNavArea *const this,
//			class CNavArea *parent,
//			enum NavTraverseType how);  //  1039
//	SetCostSoFar(CNavArea *const this,
//			float value);  //  1038
//	{
//		class CNavArea *area;                                //  1045
//		{
//			const_iterator ladderIt;                      //  1064
//			const NavLadderList *ladderList;            //  1067
//			{
//				int dir;                              //  1051
//				{
//					int count;                    //  1053
//					{
//						int i;                //  1054
//						{
//							class CNavArea *adjArea;           //  1056
//							AddAreaToOpenList(CNavArea *area,
//										class CNavArea *parent,
//										const Vector *startPos,
//										float maxRange);  //  1058
//							GetAdjacentArea(const class CNavArea *const this,
//									enum NavDirType dir,
//									int i);  //  1056
//						}
//					}
//					GetAdjacentCount(const class CNavArea *const this,
//							enum NavDirType dir);  //  1053
//				}
//			}
//			end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //  1070
//			operator++(_List_const_iterator<CNavLadder*> *const this);  //  1070
//			{
//				const class CNavLadder *ladder;     //  1072
//				AddAreaToOpenList(CNavArea *area,
//							class CNavArea *parent,
//							const Vector *startPos,
//							float maxRange);  //  1081
//				AddAreaToOpenList(CNavArea *area,
//							class CNavArea *parent,
//							const Vector *startPos,
//							float maxRange);  //  1082
//				AddAreaToOpenList(CNavArea *area,
//							class CNavArea *parent,
//							const Vector *startPos,
//							float maxRange);  //  1083
//			}
//			end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //  1091
//			{ /* SearchSurroundingAreas<PlaceFloodFillFunctor>+0x9ff */
//				const class CNavLadder *ladder;     //  1093
//			}
//			operator++(_List_const_iterator<CNavLadder*> *const this);  //  1091
//		}
//		operator()(PlaceFloodFillFunctor *const this,
//				class CNavArea *area);  //  1048
//		PopOpenList(void);  //  1045
//	}
//	Mark(CNavArea *const this);  //  1040
}

/* <4d485a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:239 */
void list<CNavArea*, std::allocator<CNavArea*>>::remove(const value_type &__value)
{
//	{
//		iterator __first;                                     //   242
//		iterator __last;                                      //   243
//		iterator __extra;                                     //   244
//		{
//			iterator __next;                              //   247
//			operator++(_List_iterator<CNavArea*> *const this);  //   248
//			_M_erase(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//				iterator __position);  //   255
//		}
//		_M_erase(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//			iterator __position);  //   262
//	}
}

/* <4d4802> ../game_shared/bot/nav_area.cpp:5209 */
void CNavAreaGrid::GetPlace(Vector *pos)
{
//	{
//		class CNavArea *area;                                //  5211
//	}
}

/* <4d4778> ../game_shared/bot/nav_area.cpp:5191 */
void CNavAreaGrid::GetNavAreaByID(unsigned int id)
{
//	{
//		int key;                                              //  5196
//		{
//			class CNavArea *area;                        //  5198
//		}
//		ComputeHashKey(const class CNavAreaGrid *const this,
//				unsigned int id);  //  5196
//	}
}

/* <4d3581> ../game_shared/bot/nav_area.cpp:1645 */
/* linkage=_Z12BuildLaddersv */
void BuildLadders(void)
{
//	{
//		TraceResult result;                                   //  1650
//		class CBaseEntity *entity;                           //  1651
//		DestroyLadders(void);  //  1648
//		edict(CBaseEntity *const this);  //  1652
//		FNullEnt(const edict_t *pent);  //  1652
//		{
//			class CNavLadder *ladder;                    //  1654
//			float xSize;                                  //  1666
//			float ySize;                                  //  1667
//			Vector along;                           //  1698
//			float length;                                 //  1699
//			Vector on;                              //  1700
//			Vector out;                             //  1700
//			float const minLadderClearance;                //  1701
//			float const inc;                               //  1704
//			float t;                                      //  1705
//			float const nearLadderRange;                   //  1746
//			Vector center;                          //  1753
//			float topZ;                                   //  1813
//			bool topAdjusted;                             //  1814
//			class CNavArea *topAreaList;                 //  1815
//			{
//				Vector from;                    //  1685
//				Vector to;                      //  1686
//				operator+(const Vector *const this,
//						const Vector &v);  //  1685
//				operator+(const Vector *const this,
//						const Vector &v);  //  1686
//			}
//			{
//				Vector from;                    //  1672
//				Vector to;                      //  1673
//				operator+(const Vector *const this,
//						const Vector &v);  //  1672
//				operator+(const Vector *const this,
//						const Vector &v);  //  1673
//			}
//			CNavLadder(CNavLadder *const this);  //  1654
//			operator-(const Vector *const this,
//					const Vector &v);  //  1698
//			NormalizeInPlace(Vector *const this);  //  1699
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //  1711
//			operator*(float fl,
//					const Vector &v);  //  1708
//			operator+(const Vector *const this,
//					const Vector &v);  //  1708
//			operator-(const Vector *const this,
//					const Vector &v);  //  1741
//			Length(const Vector *const this);  //  1741
//			DirectionToVector2D(NavDirType dir,
//						class Vector2D *v);  //  1743
//			operator+(const Vector *const this,
//					const Vector &v);  //  1753
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //  1754
//			AddLadderUp(CNavArea *const this,
//					class CNavLadder *ladder);  //  1764
//			operator+(const Vector *const this,
//					const Vector &v);  //  1772
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //  1773
//			FindFirstAreaInDirection(const Vector *start,
//						enum NavDirType dir,
//						float range,
//						float beneathLimit,
//						class CBaseEntity *traceIgnore,
//						Vector *closePos);  //  1776
//			FindFirstAreaInDirection(const Vector *start,
//						enum NavDirType dir,
//						float range,
//						float beneathLimit,
//						class CBaseEntity *traceIgnore,
//						Vector *closePos);  //  1781
//			FindFirstAreaInDirection(const Vector *start,
//						enum NavDirType dir,
//						float range,
//						float beneathLimit,
//						class CBaseEntity *traceIgnore,
//						Vector *closePos);  //  1786
//			FindFirstAreaInDirection(const Vector *start,
//						enum NavDirType dir,
//						float range,
//						float beneathLimit,
//						class CBaseEntity *traceIgnore,
//						Vector *closePos);  //  1791
//			AddLadderDown(CNavArea *const this,
//					class CNavLadder *ladder);  //  1801
//			AddLadderDown(CNavArea *const this,
//					class CNavLadder *ladder);  //  1804
//			AddLadderDown(CNavArea *const this,
//					class CNavLadder *ladder);  //  1807
//			AddLadderDown(CNavArea *const this,
//					class CNavLadder *ladder);  //  1810
//			{
//				int a;                                //  1821
//				{
//					class CNavArea *topArea;     //  1823
//					Vector close;           //  1827
//				}
//			}
//			{
//				Vector bottomSpot;              //  1846
//			}
//			push_back(list<CNavLadder*, std::allocator<CNavLadder*>> *const this,
//					const value_type &__x);  //  1853
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //  1729
//			operator*(float fl,
//					const Vector &v);  //  1726
//			operator-(const Vector *const this,
//					const Vector &v);  //  1726
//		}
//	}
}

/* <4d3554> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::push_back(const value_type &__x)
{
}

/* <4d33b4> ../game_shared/bot/nav_area.cpp:5133 */
void CNavAreaGrid::GetNearestNavArea(Vector *pos, bool anyZ)
{
//	{
//		class CNavArea *close;                               //  5138
//		float closeDistSq;                                    //  5139
//		Vector source;                                  //  5147
//		{
//			iterator iter;                                //  5158
//			{
//				class CNavArea *area;                //  5160
//				Vector areaPos;                 //  5162
//				float distSq;                         //  5165
//				operator-(const Vector *const this,
//						const Vector &v);  //  5165
//				LengthSquared(const Vector *const this);  //  5165
//				{
//					TraceResult result;           //  5173
//					operator+(const Vector *const this,
//							const Vector &v);  //  5174
//				}
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //  5158
//		}
//	}
}

/* <4d1c46> ../game_shared/bot/nav_area.cpp:1157 */
/* linkage=_Z21ConnectGeneratedAreasv */
void ConnectGeneratedAreas(void)
{
//	{
//		iterator iter;                                        //  1161
//		{
//			class CNavArea *area;                        //  1163
//			class CNavNode *node;                        //  1169
//			{
//				class CNavNode *adj;                 //  1172
//				{
//					class CNavArea *downArea;    //  1180
//					findJumpDownArea(const Vector *fromPos,
//							enum NavDirType dir);  //  1180
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //  1182
//				}
//				ConnectTo(CNavArea *const this,
//						class CNavArea *area,
//						enum NavDirType dir);  //  1176
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1172
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1170
//			{
//				class CNavNode *adj;                 //  1189
//				ConnectTo(CNavArea *const this,
//						class CNavArea *area,
//						enum NavDirType dir);  //  1193
//				{
//					class CNavArea *downArea;    //  1197
//					findJumpDownArea(const Vector *fromPos,
//							enum NavDirType dir);  //  1197
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //  1199
//				}
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1189
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1187
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1207
//			{
//				class CNavNode *end;                 //  1210
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1210
//				{
//					class CNavNode *adj;         //  1214
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //  1218
//					{
//						class CNavArea *downArea;    //  1222
//						findJumpDownArea(const Vector *fromPos,
//								enum NavDirType dir);  //  1222
//						ConnectTo(CNavArea *const this,
//								class CNavArea *area,
//								enum NavDirType dir);  //  1224
//					}
//					GetConnectedNode(const class CNavNode *const this,
//							enum NavDirType dir);  //  1214
//				}
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1212
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1231
//			{
//				class CNavNode *end;                 //  1234
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1234
//				{
//					class CNavNode *adj;         //  1237
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //  1241
//					{
//						class CNavArea *downArea;    //  1245
//						findJumpDownArea(const Vector *fromPos,
//								enum NavDirType dir);  //  1245
//						ConnectTo(CNavArea *const this,
//								class CNavArea *area,
//								enum NavDirType dir);  //  1247
//					}
//					GetConnectedNode(const class CNavNode *const this,
//							enum NavDirType dir);  //  1237
//				}
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1235
//			}
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  1161
//	}
}

/* <4d1b9c> ../game_shared/bot/nav_area.cpp:1057 */
inline class CNavArea *FindFirstAreaInDirection(const Vector *start, NavDirType dir, float range, float beneathLimit, CBaseEntity *traceIgnore, Vector *closePos)
{
//	{
//		class CNavArea *area;                                //  1059
//		Vector pos;                                     //  1061
//		int end;                                              //  1063
//		{
//			int i;                                        //  1065
//			{
//				TraceResult result;                   //  1070
//			}
//		}
//	}
}

/* <4d1b44> ../game_shared/bot/nav_area.cpp:1138 */
inline class CNavArea *findJumpDownArea(const Vector *fromPos, NavDirType dir)
{
//	{
//		Vector start;                                   //  1140
//		Vector toPos;                                   //  1143
//		class CNavArea *downArea;                            //  1144
//	}
}

/* <4d1806> ../game_shared/bot/nav_area.cpp:3477 */
/* linkage=_Z20FindNearbyHidingSpotP11CBaseEntityPK6VectorP8CNavAreafbb */
const Vector *FindNearbyHidingSpot(CBaseEntity *me, const Vector *pos, class CNavArea *startArea, float maxRange, bool isSniper, bool useNearest)
{
//	{
//		class CollectHidingSpotsFunctor collector;            //  3510
//		int which;                                            //  3535
//		{
//			class CollectHidingSpotsFunctor collector;    //  3485
//			CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//							class CBaseEntity *me,
//							const Vector *origin,
//							float range,
//							unsigned char flags,
//							Place place,
//							bool useCrouchAreas);  //  3485
//			SearchSurroundingAreas<CollectHidingSpotsFunctor>(CNavArea *startArea,
//										const Vector *startPos,
//										class CollectHidingSpotsFunctor &func,
//										float maxRange);  //  3486
//			{
//				int which;                            //  3490
//			}
//			{
//				class CollectHidingSpotsFunctor collector;    //  3496
//				CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//								class CBaseEntity *me,
//								const Vector *origin,
//								float range,
//								unsigned char flags,
//								Place place,
//								bool useCrouchAreas);  //  3496
//				{
//					int which;                    //  3501
//				}
//			}
//		}
//		CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//						class CBaseEntity *me,
//						const Vector *origin,
//						float range,
//						unsigned char flags,
//						Place place,
//						bool useCrouchAreas);  //  3510
//		SearchSurroundingAreas<CollectHidingSpotsFunctor>(CNavArea *startArea,
//									const Vector *startPos,
//									class CollectHidingSpotsFunctor &func,
//									float maxRange);  //  3511
//		{
//			const Vector *closest;                //  3519
//			float closeRangeSq;                           //  3520
//			{
//				int i;                                //  3521
//				{
//					float rangeSq;                //  3523
//					operator-(const Vector *const this,
//							const Vector &v);  //  3523
//					LengthSquared(const Vector *const this);  //  3523
//				}
//			}
//		}
//	}
}

/* <4d031a> ../game_shared/bot/nav_area.cpp:3544 */
/* linkage=_Z20FindRandomHidingSpotP11CBaseEntityjb */
const Vector *FindRandomHidingSpot(CBaseEntity *me, Place place, bool isSniper)
{
//	{
//		class CollectHidingSpotsFunctor collector;            //  3574
//		int which;                                            //  3581
//		{
//			class CollectHidingSpotsFunctor collector;    //  3549
//			CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//							class CBaseEntity *me,
//							const Vector *origin,
//							float range,
//							unsigned char flags,
//							Place place,
//							bool useCrouchAreas);  //  3549
//			{
//				class CollectHidingSpotsFunctor collector;    //  3560
//				CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//								class CBaseEntity *me,
//								const Vector *origin,
//								float range,
//								unsigned char flags,
//								Place place,
//								bool useCrouchAreas);  //  3560
//				{
//					int which;                    //  3565
//				}
//			}
//			{
//				int which;                            //  3554
//			}
//		}
//		CollectHidingSpotsFunctor(CollectHidingSpotsFunctor *const this,
//						class CBaseEntity *me,
//						const Vector *origin,
//						float range,
//						unsigned char flags,
//						Place place,
//						bool useCrouchAreas);  //  3574
//	}
}

/* <4cff5e> ../game_shared/bot/nav_area.cpp:5080 */
void CNavAreaGrid::GetNavArea(Vector *pos, float beneathLimit)
{
//	{
//		int x;                                                //  5086
//		int y;                                                //  5087
//		NavAreaList *list;                                   //  5088
//		class CNavArea *use;                                 //  5092
//		float useZ;                                           //  5093
//		Vector testPos;                                 //  5094
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5086
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5087
//		operator+(const Vector *const this,
//				const Vector &v);  //  5094
//		{
//			iterator iter;                                //  5096
//			{
//				class CNavArea *area;                //  5098
//				IsOverlapping(const class CNavArea *const this,
//						const Vector *pos);  //  5101
//				{
//					float z;                      //  5104
//				}
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //  5096
//		}
//	}
}

/* <4cfc86> ../game_shared/bot/nav_area.cpp:5039 */
void CNavAreaGrid::RemoveNavArea(CNavArea *area)
{
//	{
//		const class Extent *extent;                         //  5042
//		int loX;                                              //  5044
//		int loY;                                              //  5045
//		int hiX;                                              //  5046
//		int hiY;                                              //  5047
//		int key;                                              //  5054
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5044
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5045
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5046
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5047
//		{
//			int y;                                        //  5049
//			{
//				int x;                                //  5050
//				remove(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//					const value_type &__value);  //  5051
//			}
//		}
//		ComputeHashKey(const class CNavAreaGrid *const this,
//				unsigned int id);  //  5054
//	}
}

/* <4cfa20> ../game_shared/bot/nav_area.cpp:5000 */
void CNavAreaGrid::AddNavArea(CNavArea *area)
{
//	{
//		const class Extent *extent;                         //  5003
//		int loX;                                              //  5005
//		int loY;                                              //  5006
//		int hiX;                                              //  5007
//		int hiY;                                              //  5008
//		int key;                                              //  5015
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5005
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5006
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5007
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5008
//		{
//			int y;                                        //  5010
//			{
//				int x;                                //  5011
//				push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//						const value_type &__x);  //  5012
//			}
//		}
//		ComputeHashKey(const class CNavAreaGrid *const this,
//				unsigned int id);  //  5015
//	}
}

/* <4cf984> ../game_shared/bot/nav_area.cpp:4983 */
void CNavAreaGrid::Initialize(float minX, float maxX, float minY, float maxY)
{
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //  4994
}

/* <4cf961> ../game_shared/bot/nav_area.cpp:4947 */
void CNavAreaGrid::CNavAreaGrid(void)
{
}

/* <4cf943> ../game_shared/bot/nav_area.cpp:4947 */
void CNavAreaGrid::CNavAreaGrid(void)
{
}

/* <4cf837> ../game_shared/bot/nav_area.cpp:4962 */
void CNavAreaGrid::Reset(void)
{
//	~list(list<CNavArea*, std::allocator<CNavArea*>>::Reset(//		int const __in_chrg);  //  4965
//	{
//		int i;                                                //  4972
//	}
//	EditNavAreasReset(void);  //  4977
}

/* <4cf54c> ../game_shared/bot/nav_area.cpp:4817 */
void CNavArea::ComputeApproachAreas(void)
{
//	{
//		Vector eye;                                     //  4825
//		class CNavArea *path;                                //  4836
//		iterator iter;                                        //  4843
//		Vector(Vector *const this,
//			const Vector &v);  //  4825
//		{
//			class CNavArea *farArea;                     //  4846
//			class ApproachAreaCost cost;                  //  4855
//			IsAreaVisible(const Vector *pos,
//					const class CNavArea *area);  //  4851
//			{
//				int count;                            //  4867
//				class CNavArea *area;                //  4868
//				int i;                                //  4876
//				class ApproachAreaCost cost;          //  4928
//				{
//					int block;                    //  4897
//					int a;                        //  4905
//					IsAreaVisible(const Vector *pos,
//							const class CNavArea *area);  //  4884
//				}
//			}
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  4844
//	}
}

/* <4cf4d2> ../game_shared/bot/nav_area.cpp:4724 */
/* linkage=_Z21GetSimpleGroundHeightPK6VectorPfPS_ */
bool GetSimpleGroundHeight(const Vector *pos, float *height, Vector *normal)
{
//	{
//		Vector to;                                      //  4726
//		TraceResult result;                                   //  4731
//	}
}

/* <4cf2ee> ../game_shared/bot/nav_area.cpp:3937 */
void CNavArea::RaiseCorner(NavCornerType corner, int amount)
{
}

/* <4cebe7> ../game_shared/bot/nav_area.cpp:3802 */
void CNavArea::DrawConnectedAreas(void)
{
//	{
//		class CBasePlayer *player;                           //  3804
//		class CCSBotManager *ctrl;                           //  3808
//		float const maxRange;                                  //  3809
//		int dirSet;                                           //  3829
//		int i;                                                //  3830
//		{
//			int swapCount;                                //  3835
//			{
//				int swapI;                            //  3837
//				int nextI;                            //  3838
//				int tmp;                              //  3842
//			}
//		}
//		{
//			enum NavDirType dir;                          //  3850
//			int count;                                    //  3852
//			GetAdjacentCount(const class CNavArea *const this,
//					enum NavDirType dir);  //  3852
//			{
//				int a;                                //  3854
//				{
//					class CNavArea *adj;         //  3856
//					GetAdjacentArea(const class CNavArea *const this,
//							enum NavDirType dir,
//							int i);  //  3856
//					{
//						Vector from;    //  3892
//						Vector to;      //  3892
//						Vector hookPos; //  3893
//						float halfWidth;      //  3894
//						float size;           //  3895
//						Vector drawTo;  //  3921
//						IsDegenerate(const class CNavArea *const this);  //  3869
//						{
//							class IntervalTimer blink;            //  3871
//							bool blinkOn; //  3872
//							GetElapsedTime(const class IntervalTimer *const this);  //  3874
//							Reset(IntervalTimer *const this);  //  3876
//							IntervalTimer(IntervalTimer *const this);  //  3871
//						}
//						operator+(const Vector *const this,
//								const Vector &v);  //  3913
//						operator+(const Vector *const this,
//								const Vector &v);  //  3914
//						OppositeDirection(NavDirType dir);  //  3924
//						IsConnected(const class CNavArea *const this,
//								const class CNavArea *area,
//								enum NavDirType dir);  //  3924
//						Vector(Vector *const this,
//							const Vector &v);  //  3925
//						Vector(Vector *const this,
//							const Vector &v);  //  3925
//						Vector(Vector *const this,
//							const Vector &v);  //  3927
//						Vector(Vector *const this,
//							const Vector &v);  //  3927
//						operator+(const Vector *const this,
//								const Vector &v);  //  3909
//						operator+(const Vector *const this,
//								const Vector &v);  //  3910
//						operator+(const Vector *const this,
//								const Vector &v);  //  3905
//						operator+(const Vector *const this,
//								const Vector &v);  //  3906
//						operator+(const Vector *const this,
//								const Vector &v);  //  3901
//						operator+(const Vector *const this,
//								const Vector &v);  //  3902
//					}
//				}
//			}
//		}
//	}
}

/* <4cea61> ../game_shared/bot/nav_area.cpp:3767 */
/* linkage=_Z15DrawHidingSpotsPK8CNavArea */
void DrawHidingSpots(const class CNavArea *area)
{
//	{
//		const HidingSpotList *list;                         //  3769
//		{
//			const_iterator iter;                          //  3770
//			{
//				const class HidingSpot *spot;       //  3772
//				int r;                                //  3774
//				int g;                                //  3774
//				int b;                                //  3774
//				HasGoodCover(const class HidingSpot *const this);  //  3784
//				operator+(const Vector *const this,
//						const Vector &v);  //  3793
//				Vector(Vector *const this,
//					const Vector &v);  //  3793
//				IsIdealSniperSpot(const class HidingSpot *const this);  //  3776
//			}
//			end(const class list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //  3770
//			operator++(_List_const_iterator<HidingSpot*> *const this);  //  3770
//		}
//	}
}

/* <4cea33> ../game_shared/bot/nav_area.cpp:3749 */
/* linkage=_Z13GetMarkedAreav */
CNavArea *GetMarkedArea(void)
{
}

/* <4ce934> ../game_shared/bot/nav_area.cpp:3707 */
void CNavArea::GetPlayerCount( int teamID, CBasePlayer *ignore)
{
//	{
//		int count;                                            //  3709
//		{
//			int i;                                        //  3711
//			{
//				class CBasePlayer *player;           //  3713
//				IsEntityValid(CBaseEntity *entity);  //  3718
//			}
//		}
//	}
}

/* <4ce523> ../game_shared/bot/nav_area.cpp:3356 */
/* linkage=_Z14IsSpotOccupiedP11CBaseEntityPK6Vector */
bool IsSpotOccupied(CBaseEntity *me, const Vector *pos)
{
//	{
//		float const closeRange;                                //  3358
//		float range;                                          //  3361
//		class CBasePlayer *player;                           //  3362
//		{
//			class CHostage *hostage;                     //  3373
//			GetClosestHostage(CHostageManager *const this,
//						const Vector &pos,
//						float *resultRange);  //  3373
//		}
//	}
}

/* <4ce2c4> ../game_shared/bot/nav_area.cpp:3321 */
/* linkage=_Z10DrawDangerv */
void DrawDanger(void)
{
//	{
//		iterator iter;                                        //  3323
//		{
//			class CNavArea *area;                        //  3325
//			Vector center;                          //  3327
//			Vector top;                             //  3328
//			float danger;                                 //  3331
//			GetDanger(CNavArea *const this,
//					int teamID);  //  3331
//			GetDanger(CNavArea *const this,
//					int teamID);  //  3340
//			Vector(Vector *const this,
//				const Vector &v);  //  3346
//			Vector(Vector *const this,
//				const Vector &v);  //  3346
//			Vector(Vector *const this,
//				const Vector &v);  //  3327
//			Vector(Vector *const this,
//				const Vector &v);  //  3337
//			Vector(Vector *const this,
//				const Vector &v);  //  3337
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  3323
//	}
}

/* <4cde4b> ../game_shared/bot/nav_area.cpp:3274 */
/* linkage=_Z20IncreaseDangerNearbyifP8CNavAreaPK6Vectorf */
void IncreaseDangerNearby(int teamID, float amount, class CNavArea *startArea, const Vector *pos, float maxRadius)
{
//	MakeNewMarker(void);  //  3279
//	ClearSearchLists(void);  //  3280
//	AddToOpenList(CNavArea *const this);  //  3282
//	SetTotalCost(CNavArea *const this,
//			float value);  //  3283
//	IncreaseDanger(CNavArea *const this,
//			int teamID,
//			float amount);  //  3285
//	Mark(CNavArea *const this);  //  3284
//	{
//		class CNavArea *area;                                //  3290
//		PopOpenList(void);  //  3290
//		{
//			int dir;                                      //  3293
//			{
//				int count;                            //  3295
//				GetAdjacentCount(const class CNavArea *const this,
//						enum NavDirType dir);  //  3295
//				{
//					int i;                        //  3296
//					{
//						class CNavArea *adjArea;   //  3298
//						GetAdjacentArea(const class CNavArea *const this,
//								enum NavDirType dir,
//								int i);  //  3298
//						{
//							float cost;   //  3303
//							operator-(const Vector *const this,
//									const Vector &v);  //  3303
//							Length(const Vector *const this);  //  3303
//							AddToOpenList(CNavArea *const this);  //  3306
//							SetTotalCost(CNavArea *const this,
//									float value);  //  3307
//							Mark(CNavArea *const this);  //  3308
//							IncreaseDanger(CNavArea *const this,
//									int teamID,
//									float amount);  //  3309
//						}
//					}
//				}
//			}
//		}
//	}
}

/* <4cddc7> ../game_shared/bot/nav_area.cpp:3264 */
void CNavArea::GetDanger(int teamID)
{
//	DecayDanger(CNavArea *const this);  //  3266
}

/* <4cdd46> ../game_shared/bot/nav_area.cpp:3251 */
void CNavArea::IncreaseDanger(int teamID, float amount)
{
//	DecayDanger(CNavArea *const this);  //  3254
}

/* <4cdd0e> ../game_shared/bot/nav_area.cpp:3251 */
void CNavArea::IncreaseDanger(int teamID, float amount)
{
}

/* <4cdca9> ../game_shared/bot/nav_area.cpp:3228 */
void CNavArea::DecayDanger(void)
{
//	{
//		float const decayRate;                                 //  3231
//		{
//			int i;                                        //  3233
//			{
//				float deltaT;                         //  3235
//				float decayAmount;                    //  3236
//			}
//		}
//	}
}

/* <4cdc50> ../game_shared/bot/nav_area.cpp:3228 */
void CNavArea::DecayDanger(void)
{
//	{
//		float const decayRate;                                 //  3231
//		{
//			int i;                                        //  3233
//			{
//				float deltaT;                         //  3235
//				float decayAmount;                    //  3236
//			}
//		}
//	}
}

/* <4cd99c> ../game_shared/bot/nav_area.cpp:3192 */
void CNavArea::ComputeSpotEncounters(void)
{
//	clear(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //  3194
//	{
//		int fromDir;                                          //  3200
//		{
//			iterator fromIter;                            //  3202
//			{
//				union NavConnect *fromCon;           //  3204
//				{
//					int toDir;                    //  3207
//					{
//						iterator toIter;      //  3209
//						{
//							union NavConnect *toCon;           //  3211
//						}
//						operator++(_List_iterator<NavConnect> *const this);  //  3209
//					}
//				}
//			}
//			operator++(_List_iterator<NavConnect> *const this);  //  3202
//		}
//	}
}

/* <4cd0a5> ../game_shared/bot/nav_area.cpp:3088 */
void CNavArea::AddSpotEncounters(const class CNavArea *from, NavDirType fromDir, const CNavArea *to, NavDirType toDir)
{
//	{
//		class SpotEncounter e;                                //  3090
//		float halfWidth;                                      //  3098
//		float const eyeHeight;                                 //  3102
//		Vector dir;                                     //  3107
//		float length;                                         //  3108
//		float const stepSize;                                  //  3113
//		float const seeSpotRange;                              //  3114
//		TraceResult result;                                   //  3115
//		Vector eye;                                     //  3117
//		Vector delta;                                   //  3117
//		class HidingSpot *spot;                              //  3118
//		class SpotOrder spotOrder;                            //  3119
//		bool done;                                            //  3122
//		SpotEncounter(SpotEncounter *const this);  //  3090
//		operator-(const Vector *const this,
//				const Vector &v);  //  3107
//		NormalizeInPlace(Vector *const this);  //  3108
//		ChangeMasterMarker(void);  //  3111
//		{
//			float along;                                  //  3123
//			{
//				iterator iter;                        //  3136
//				{
//					const Vector *spotPos;//  3147
//					float dot;                    //  3164
//					IsLengthGreaterThan(const Vector *const this,
//								float length);  //  3154
//					Vector(Vector *const this,
//						float X,
//						float Y,
//						float Z);  //  3158
//					NormalizeInPlace(Vector *const this);  //  3163
//					DotProduct(Vector &a,
//							const Vector &b);  //  3164
//					Mark(HidingSpot *const this);  //  3179
//					push_back(list<SpotOrder, std::allocator<SpotOrder>> *const this,
//							const value_type &__x);  //  3174
//				}
//				operator++(_List_iterator<HidingSpot*> *const this);  //  3136
//			}
//			operator*(float fl,
//					const Vector &v);  //  3133
//			operator+(const Vector *const this,
//					const Vector &v);  //  3133
//		}
//		push_back(list<SpotEncounter, std::allocator<SpotEncounter>> *const this,
//				const value_type &__x);  //  3184
//		~SpotEncounter(SpotEncounter *const this,
//				int const __in_chrg);  //  3090
//	}
}

/* <4cd078> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::push_back(const value_type &__x)
{
}

/* <4ccfbd> ../game_shared/bot/nav_area.cpp:3066 */
void CNavArea::GetSpotEncounter(const class CNavArea *from, const CNavArea *to)
{
//	{
//		class SpotEncounter *e;                              //  3070
//		{
//			iterator iter;                                //  3072
//			end(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //  3072
//			operator++(_List_iterator<SpotEncounter> *const this);  //  3072
//		}
//	}
}

/* <4ccf19> ../game_shared/bot/nav_area.cpp:3049 */
void CNavArea::ComputeSniperSpots(void)
{
//	{
//		iterator iter;                                        //  3054
//		end(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //  3054
//		{
//			class HidingSpot *spot;                      //  3056
//		}
//		operator++(_List_iterator<HidingSpot*> *const this);  //  3054
//	}
}

/* <4cccaf> ../game_shared/bot/nav_area.cpp:2963 */
/* linkage=_Z18ClassifySniperSpotP10HidingSpot */
void ClassifySniperSpot(HidingSpot *spot)
{
//	{
//		Vector eye;                                     //  2965
//		Vector walkable;                                //  2966
//		TraceResult result;                                   //  2967
//		class Extent sniperExtent;                            //  2969
//		float farthestRangeSq;                                //  2970
//		float const minSniperRangeSq;                          //  2971
//		bool found;                                           //  2972
//		operator+(const Vector *const this,
//				const Vector &v);  //  2965
//		{
//			iterator iter;                                //  2974
//			{
//				class CNavArea *area;                //  2976
//				const class Extent *extent;         //  2978
//				{
//					float rangeSq;                //  2995
//					operator-(const Vector *const this,
//							const Vector &v);  //  2995
//					LengthSquared(const Vector *const this);  //  2995
//				}
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //  2974
//		}
//		{
//			float snipableArea;                           //  3032
//			float const minIdealSniperArea;                //  3034
//			float const longSniperRangeSq;                 //  3035
//			Area(const class Extent *const this);  //  3032
//			SetFlags(HidingSpot *const this,
//				unsigned char flags);  //  3038
//			SetFlags(HidingSpot *const this,
//				unsigned char flags);  //  3040
//		}
//	}
}

/* <4cc054> ../game_shared/bot/nav_area.cpp:2834 */
void CNavArea::ComputeHidingSpots(void)
{
//	{
//		class  extent;                                        //  2840
//		int cornerCount;                                      //  2846
//		float const cornerSize;                                //  2850
//		float offset;                                         //  2928
//		{
//			int d;                                        //  2853
//			{
//				bool isHoriz;                         //  2858
//				{
//					iterator iter;                //  2860
//					{
//						union NavConnect connect;   //  2862
//						IsConnected(const class CNavArea *const this,
//								const class CNavArea *area,
//								enum NavDirType dir);  //  2866
//					}
//					operator++(_List_iterator<NavConnect> *const this);  //  2860
//				}
//			}
//		}
//		{
//			Vector pos;                             //  2932
//			GetCorner(const class CNavArea *const this,
//					enum NavCornerType corner);  //  2932
//			operator+(const Vector *const this,
//					const Vector &v);  //  2932
//			HidingSpot(HidingSpot *const this,
//					const Vector *pos,
//					unsigned char flags);  //  2934
//			push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//					const value_type &__x);  //  2934
//		}
//		{
//			Vector pos;                             //  2939
//			GetCorner(const class CNavArea *const this,
//					enum NavCornerType corner);  //  2939
//			operator+(const Vector *const this,
//					const Vector &v);  //  2939
//			push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//					const value_type &__x);  //  2941
//		}
//		{
//			Vector pos;                             //  2946
//			GetCorner(const class CNavArea *const this,
//					enum NavCornerType corner);  //  2946
//			operator+(const Vector *const this,
//					const Vector &v);  //  2946
//			push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//					const value_type &__x);  //  2948
//		}
//		{
//			Vector pos;                             //  2953
//			GetCorner(const class CNavArea *const this,
//					enum NavCornerType corner);  //  2953
//			operator+(const Vector *const this,
//					const Vector &v);  //  2953
//			IsHidingSpotCollision(const class CNavArea *const this,
//						const Vector *pos);  //  2954
//			HidingSpot(HidingSpot *const this,
//					const Vector *pos,
//					unsigned char flags);  //  2955
//			push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//					const value_type &__x);  //  2955
//		}
//	}
}

/* <4cbe86> ../game_shared/bot/nav_area.cpp:2776 */
void CNavArea::IsHidingSpotCollision(Vector *pos)
{
//	{
//		float const collisionRange;                            //  2778
//		{
//			const_iterator iter;                          //  2780
//			end(const class list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //  2780
//			{
//				const class HidingSpot *spot;       //  2782
//				operator-(const Vector *const this,
//						const Vector &v);  //  2784
//				IsLengthLessThan(const Vector *const this,
//						float length);  //  2784
//			}
//			operator++(_List_const_iterator<HidingSpot*> *const this);  //  2780
//		}
//	}
}

/* <4cbe06> ../game_shared/bot/nav_area.cpp:2744 */
void CNavArea::GetCorner(NavCornerType corner)
{
//	{
//		Vector pos;                                     //  2746
//	}
//	GetCorner(const class CNavArea *const this,
//			enum NavCornerType corner);  //  2744
}

/* <4cbddf> ../game_shared/bot/nav_area.cpp:2731 */
void ClearSearchLists(void)
{
//	MakeNewMarker(void);  //  2734
}

/* <4cbdbc> ../game_shared/bot/nav_area.cpp:2713 */
void CNavArea::RemoveFromOpenList(void)
{
}

/* <4cbd73> ../game_shared/bot/nav_area.cpp:2685 */
void CNavArea::UpdateOnOpenList(void)
{
//	{
//		class CNavArea *other;                               //  2692
//		class CNavArea *before;                              //  2693
//		class CNavArea *after;                               //  2694
//	}
}

/* <4cbb32> ../game_shared/bot/nav_area.cpp:2634 */
void CNavArea::AddToOpenList(void)
{
//	{
//		class CNavArea *area;                                //  2649
//		class CNavArea *last;                                //  2649
//	}
}

/* <4cb855> ../game_shared/bot/nav_area.cpp:2585 */
void CNavArea::DrawMarkedCorner(NavCornerType corner, byte red, byte green, byte blue, int duration)
{
//	{
//		Vector nw;                                      //  2587
//		Vector ne;                                      //  2587
//		Vector sw;                                      //  2587
//		Vector se;                                      //  2587
//		float border;                                         //  2603
//		Vector(Vector *const this,
//			const Vector &v);  //  2625
//		operator+(const Vector *const this,
//				const Vector &v);  //  2625
//		Vector(Vector *const this,
//			const Vector &v);  //  2622
//		operator+(const Vector *const this,
//				const Vector &v);  //  2622
//		Vector(Vector *const this,
//			const Vector &v);  //  2619
//		operator+(const Vector *const this,
//				const Vector &v);  //  2619
//		Vector(Vector *const this,
//			const Vector &v);  //  2616
//		operator+(const Vector *const this,
//				const Vector &v);  //  2616
//	}
}

/* <4cb26d> ../game_shared/bot/nav_area.cpp:2513 */
void CNavArea::Draw(byte red, byte green, byte blue, int duration)
{
//	{
//		Vector nw;                                      //  2515
//		Vector ne;                                      //  2515
//		Vector sw;                                      //  2515
//		Vector se;                                      //  2515
//		float border;                                         //  2531
//		Vector(Vector *const this,
//			const Vector &v);  //  2541
//		Vector(Vector *const this,
//			const Vector &v);  //  2541
//		Vector(Vector *const this,
//			const Vector &v);  //  2542
//		Vector(Vector *const this,
//			const Vector &v);  //  2542
//		Vector(Vector *const this,
//			const Vector &v);  //  2543
//		Vector(Vector *const this,
//			const Vector &v);  //  2543
//		Vector(Vector *const this,
//			const Vector &v);  //  2544
//		Vector(Vector *const this,
//			const Vector &v);  //  2544
//		{
//			float size;                                   //  2557
//			Vector up;                              //  2558
//			Vector down;                            //  2559
//			Vector left;                            //  2562
//			Vector right;                           //  2563
//			Vector(Vector *const this,
//				const Vector &v);  //  2560
//			Vector(Vector *const this,
//				const Vector &v);  //  2560
//			Vector(Vector *const this,
//				const Vector &v);  //  2564
//			Vector(Vector *const this,
//				const Vector &v);  //  2564
//		}
//		{
//			float size;                                   //  2569
//			Vector up;                              //  2570
//			Vector down;                            //  2571
//			Vector left;                            //  2572
//			Vector right;                           //  2573
//			Vector(Vector *const this,
//				const Vector &v);  //  2574
//			Vector(Vector *const this,
//				const Vector &v);  //  2574
//			Vector(Vector *const this,
//				const Vector &v);  //  2575
//			Vector(Vector *const this,
//				const Vector &v);  //  2575
//			Vector(Vector *const this,
//				const Vector &v);  //  2576
//			Vector(Vector *const this,
//				const Vector &v);  //  2576
//			Vector(Vector *const this,
//				const Vector &v);  //  2577
//			Vector(Vector *const this,
//				const Vector &v);  //  2577
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //  2551
//		Vector(Vector *const this,
//			const Vector &v);  //  2551
//		Vector(Vector *const this,
//			const Vector &v);  //  2552
//		Vector(Vector *const this,
//			const Vector &v);  //  2552
//		Vector(Vector *const this,
//			const Vector &v);  //  2547
//		Vector(Vector *const this,
//			const Vector &v);  //  2547
//	}
}

/* <4cb1f5> ../game_shared/bot/nav_area.cpp:2473 */
void CNavArea::ComputeDirection(Vector *point)
{
//	{
//		Vector to;                                      //  2491
//		operator-(const Vector *const this,
//				const Vector &v);  //  2491
//	}
}

/* <4cb0d7> ../game_shared/bot/nav_area.cpp:2378 */
void CNavArea::ComputeClosestPointInPortal(CNavArea *to, NavDirType dir, const Vector *fromPos, Vector *closePos)
{
//	{
//		float const margin;                                    //  2380
//		{
//			float left;                                   //  2389
//			float right;                                  //  2390
//			float const leftMargin;                        //  2404
//			float const rightMargin;                       //  2405
//		}
//		{
//			float top;                                    //  2423
//			float bottom;                                 //  2424
//			float const topMargin;                         //  2438
//			float const bottomMargin;                      //  2439
//		}
//	}
}

/* <4cae93> ../game_shared/bot/nav_area.cpp:2455 */
void CNavArea::IsEdge(NavDirType dir)
{
//	{
//		const_iterator it;                                    //  2457
//		{
//			union NavConnectconst connect;                //  2459
//			OppositeDirection(NavDirType dir);  //  2461
//			IsConnected(const class CNavArea *const this,
//					const class CNavArea *area,
//					enum NavDirType dir);  //  2461
//		}
//		operator++(_List_const_iterator<NavConnect> *const this);  //  2457
//	}
}

/* <4cadd2> ../game_shared/bot/nav_area.cpp:2322 */
void CNavArea::ComputePortal(CNavArea *to, NavDirType dir, Vector *center, float *halfWidth)
{
//	{
//		float left;                                           //  2331
//		float right;                                          //  2332
//	}
//	{
//		float top;                                            //  2355
//		float bottom;                                         //  2356
//	}
}

/* <4cacac> ../game_shared/bot/nav_area.cpp:2298 */
void CNavArea::GetRandomAdjacentArea(NavDirType dir)
{
//	{
//		int count;                                            //  2300
//		int which;                                            //  2301
//		int i;                                                //  2303
//		const_iterator iter;                                  //  2304
//		size(const class list<NavConnect, std::allocator<NavConnect>> *const this);  //  2300
//		operator++(_List_const_iterator<NavConnect> *const this);  //  2305
//	}
}

/* <4cab19> ../game_shared/bot/nav_area.cpp:2224 */
void CNavArea::GetDistanceSquaredToPoint(Vector *pos)
{
//	{
//		const class Extent *extent;                         //  2226
//		{
//			Vector d;                               //  2238
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //  2233
//		{
//			Vector d;                               //  2256
//			LengthSquared(const Vector *const this);  //  2260
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //  2265
//		LengthSquared(const Vector *const this);  //  2265
//		{
//			float d;                                      //  2270
//		}
//		{
//			float z;                                      //  2289
//			float d;                                      //  2290
//		}
//		{
//			float d;                                      //  2283
//		}
//		{
//			float d;                                      //  2277
//		}
//	}
}

/* <4caab9> ../game_shared/bot/nav_area.cpp:2155 */
void CNavArea::GetClosestPointOnArea(Vector *pos, Vector *close)
{
//	{
//		const class Extent *extent;                         //  2157
//	}
}

/* <4caa36> ../game_shared/bot/nav_area.cpp:2143 */
void CNavArea::GetZ( float x, float y)
{
//	{
//		Vector pos;                                     //  2145
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  2145
//	}
}

/* <4c9e37> ../game_shared/bot/nav_area.cpp:687 */
void CNavArea::FinishSplitEdit(CNavArea *newArea, NavDirType ignoreEdge)
{
//	GetZ(const class CNavArea *const this,
//		float x,
//		float y);  //   693
//	GetZ(const class CNavArea *const this,
//		float x,
//		float y);  //   694
//	{
//		int d;                                                //   697
//		{
//			int count;                                    //   702
//			GetAdjacentCount(const class CNavArea *const this,
//					enum NavDirType dir);  //   702
//			{
//				int a;                                //   704
//				{
//					class CNavArea *adj;         //   706
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //   726
//					GetAdjacentArea(const class CNavArea *const this,
//							enum NavDirType dir,
//							int i);  //   706
//					IsOverlappingY(const class CNavArea *const this,
//							const class CNavArea *area);  //   724
//					OppositeDirection(NavDirType dir);  //   729
//					IsConnected(const class CNavArea *const this,
//							const class CNavArea *area,
//							enum NavDirType dir);  //   729
//					OppositeDirection(NavDirType dir);  //   730
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //   730
//					IsOverlappingX(const class CNavArea *const this,
//							const class CNavArea *area);  //   712
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //   714
//					OppositeDirection(NavDirType dir);  //   717
//					IsConnected(const class CNavArea *const this,
//							const class CNavArea *area,
//							enum NavDirType dir);  //   717
//					OppositeDirection(NavDirType dir);  //   718
//					ConnectTo(CNavArea *const this,
//							class CNavArea *area,
//							enum NavDirType dir);  //   718
//				}
//			}
//		}
//	}
//	push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//			const value_type &__x);  //   737
}

/* <4c9df3> ../game_shared/bot/nav_area.cpp:2143 */
void CNavArea::GetZ( float x, float y)
{
//	{
//		Vector pos;                                     //  2145
//	}
}

/* <4c8b85> ../game_shared/bot/nav_area.cpp:745 */
void CNavArea::SpliceEdit(CNavArea *other)
{
//	{
//		class CNavArea *newArea;                             //   747
//		Vector nw;                                      //   748
//		Vector ne;                                      //   748
//		Vector se;                                      //   748
//		Vector sw;                                      //   748
//		{
//			float top;                                    //   753
//			float bottom;                                 //   754
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   774
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   775
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   777
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   778
//		}
//		{
//			float left;                                   //   815
//			float right;                                  //   816
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   840
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   836
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   837
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   839
//		}
//		{
//			float left;                                   //   845
//			float right;                                  //   846
//		}
//		{
//			float top;                                    //   783
//			float bottom;                                 //   784
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   804
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   805
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   807
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   808
//		}
//		SetPlace(CNavArea *const this,
//			Place place);  //   886
//		SetPlace(CNavArea *const this,
//			Place place);  //   898
//		push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//				const value_type &__x);  //   901
//		SetPlace(CNavArea *const this,
//			Place place);  //   896
//	}
}

/* <4c8a66> ../game_shared/bot/nav_area.cpp:2025 */
void CNavArea::Contains(Vector *pos)
{
//	{
//		float ourZ;                                           //  2032
//		IsOverlapping(const class CNavArea *const this,
//				const Vector *pos);  //  2028
//		{
//			const_iterator iter;                          //  2038
//			{
//				const class CNavArea *area;         //  2040
//				float theirZ;                         //  2050
//				IsOverlapping(const class CNavArea *const this,
//						const Vector *pos);  //  2047
//			}
//			end(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //  2038
//			operator++(_List_const_iterator<CNavArea*> *const this);  //  2038
//		}
//	}
}

/* <4c89fd> ../game_shared/bot/nav_area.cpp:674 */
void CNavArea::ComputeHeightChange(const class CNavArea *area)
{
//	{
//		float ourZ;                                           //   676
//		float areaZ;                                          //   677
//	}
}

/* <4c8963> ../game_shared/bot/nav_area.cpp:2114 */
void CNavArea::GetZ(Vector *pos)
{
//	{
//		float dx;                                             //  2116
//		float dy;                                             //  2117
//		float u;                                              //  2123
//		float v;                                              //  2124
//		float northZ;                                         //  2137
//		float southZ;                                         //  2138
//	}
}

/* <4c87b9> ../game_shared/bot/nav_area.cpp:2071 */
void CNavArea::IsCoplanar(CNavArea *area)
{
//	{
//		Vector u;                                       //  2073
//		Vector v;                                       //  2073
//		Vector normal;                                  //  2084
//		Vector otherNormal;                             //  2097
//		float const tolerance;                                 //  2101
//		CrossProduct(Vector &a,
//				const Vector &b);  //  2084
//		NormalizeInPlace(Vector *const this);  //  2085
//		CrossProduct(Vector &a,
//				const Vector &b);  //  2097
//		NormalizeInPlace(Vector *const this);  //  2098
//		DotProduct(Vector &a,
//				const Vector &b);  //  2102
//	}
}

/* <4c878d> ../game_shared/bot/nav_area.cpp:2013 */
void CNavArea::IsOverlappingY(CNavArea *area)
{
}

/* <4c8761> ../game_shared/bot/nav_area.cpp:2001 */
void CNavArea::IsOverlappingX(CNavArea *area)
{
}

/* <4c8726> ../game_shared/bot/nav_area.cpp:1988 */
void CNavArea::IsOverlapping(CNavArea *area)
{
}

/* <4c86fa> ../game_shared/bot/nav_area.cpp:1975 */
void CNavArea::IsOverlapping(Vector *pos)
{
}

/* <4c86cf> ../game_shared/bot/nav_area.cpp:1975 */
void CNavArea::IsOverlapping(Vector *pos)
{
}

/* <4c85c3> ../game_shared/bot/nav_area.cpp:1864 */
/* linkage=_Z13MarkJumpAreasv */
void MarkJumpAreas(void)
{
//	{
//		iterator iter;                                        //  1866
//		operator++(_List_iterator<CNavArea*> *const this);  //  1866
//		{
//			class CNavArea *area;                        //  1868
//			Vector u;                               //  1869
//			Vector v;                               //  1869
//			Vector normal;                          //  1880
//			CrossProduct(Vector &a,
//					const Vector &b);  //  1880
//			NormalizeInPlace(Vector *const this);  //  1881
//		}
//	}
}

/* <4c8599> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <4c82ea> ../game_shared/bot/nav_area.cpp:1582 */
/* linkage=_Z9BuildAreaP8CNavNodeii */
int BuildArea(CNavNode *node, int width, int height)
{
//	{
//		class CNavNode *nwNode;                              //  1586
//		class CNavNode *neNode;                              //  1587
//		class CNavNode *swNode;                              //  1588
//		class CNavNode *seNode;                              //  1589
//		class CNavNode *vertNode;                            //  1591
//		class CNavNode *horizNode;                           //  1592
//		int coveredNodes;                                     //  1594
//		class CNavArea *area;                                //  1629
//		{
//			int y;                                        //  1596
//			{
//				int x;                                //  1600
//				Cover(CNavNode *const this);  //  1602
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1605
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1611
//		}
//		{
//			int x;                                        //  1617
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1619
//		}
//		push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//				const value_type &__x);  //  1630
//		SetAttributes(CNavArea *const this,
//				unsigned char bits);  //  1633
//	}
}

/* <4c8066> ../game_shared/bot/nav_area.cpp:1503 */
/* linkage=_Z8TestAreaP8CNavNodeii */
bool TestArea(CNavNode *node, int width, int height)
{
//	{
//		Vector normal;                                  //  1505
//		float d;                                              //  1506
//		float const offPlaneTolerance;                         //  1508
//		class CNavNode *vertNode;                            //  1510
//		class CNavNode *horizNode;                           //  1510
//		{
//			int y;                                        //  1513
//			{
//				int x;                                //  1517
//				{
//					float dist;                   //  1536
//					DotProduct(Vector &a,
//							const Vector &b);  //  1536
//				}
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1529
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //  1542
//			{
//				float dist;                           //  1549
//				DotProduct(Vector &a,
//						const Vector &b);  //  1549
//			}
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //  1505
//		DotProduct(Vector &a,
//				const Vector &b);  //  1506
//		{
//			int x;                                        //  1560
//			{
//				float dist;                           //  1567
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //  1562
//				DotProduct(Vector &a,
//						const Vector &b);  //  1567
//			}
//		}
//	}
}

/* <4c7e9a> ../game_shared/bot/nav_area.cpp:1046 */
void CNavArea::Strip(void)
{
//	clear(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //  1049
}

/* <4c7c70> ../game_shared/bot/nav_area.cpp:1031 */
/* linkage=_Z20StripNavigationAreasv */
void StripNavigationAreas(void)
{
//	{
//		iterator iter;                                        //  1033
//		{
//			class CNavArea *area;                        //  1036
//			Strip(CNavArea *const this);  //  1038
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //  1034
//	}
}

/* <4c7c26> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c7c08> ../game_shared/bot/nav_area.cpp:1046 */
void CNavArea::Strip(void)
{
}

/* <4c7b18> ../game_shared/bot/nav_area.cpp:980 */
void DestroyLadders(void)
{
//	{
//		class CNavLadder *ladder;                            //   984
//	}
}

/* <4c7a37> ../game_shared/bot/nav_area.cpp:971 */
/* linkage=_Z31CleanupApproachAreaAnalysisPrepv */
void CleanupApproachAreaAnalysisPrep(void)
{
//	clear(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   973
}

/* <4c78a9> ../game_shared/bot/nav_area.cpp:964 */
/* linkage=_Z24ApproachAreaAnalysisPrepv */
void ApproachAreaAnalysisPrep(void)
{
//	buildGoodSizedList(void);  //   967
}

/* <4c7708> ../game_shared/bot/nav_area.cpp:615 */
void CNavArea::IsConnected(CNavArea *area, NavDirType dir)
{
//	{
//		const_iterator iter;                                  //   621
//		operator++(_List_const_iterator<NavConnect> *const this);  //   659
//		{
//			const_iterator liter;                         //   636
//			{
//				int d;                                //   626
//				operator++(_List_const_iterator<NavConnect> *const this);  //   628
//			}
//		}
//	}
//	IsConnected(const class CNavArea *const this,
//			const class CNavArea *area,
//			enum NavDirType dir);  //   615
}

/* <4c760a> ../game_shared/bot/nav_area.cpp:486 */
void CNavArea::AssignNodes(CNavArea *area)
{
//	{
//		class CNavNode *horizLast;                           //   488
//		{
//			class CNavNode *vertNode;                    //   490
//			{
//				class CNavNode *horizNode;           //   492
//				AssignArea(CNavNode *const this,
//						class CNavArea *area);  //   494
//				GetConnectedNode(const class CNavNode *const this,
//						enum NavDirType dir);  //   492
//			}
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //   490
//			GetConnectedNode(const class CNavNode *const this,
//					enum NavDirType dir);  //   497
//		}
//	}
}

/* <4c6e85> ../game_shared/bot/nav_area.cpp:408 */
void CNavArea::MergeAdjacentConnections(CNavArea *adjArea)
{
//	{
//		iterator iter;                                        //   411
//		int dir;                                              //   412
//		{
//			union NavConnect connect;                     //   417
//			ConnectTo(CNavArea *const this,
//					class CNavArea *area,
//					enum NavDirType dir);  //   420
//		}
//		operator++(_List_iterator<NavConnect> *const this);  //   415
//		{
//			union NavConnect connect;                     //   427
//			remove(list<NavConnect, std::allocator<NavConnect>> *const this,
//				const value_type &__value);  //   430
//		}
//		{
//			iterator areaIter;                            //   439
//			{
//				class CNavArea *area;                //   441
//				{
//					bool connected;               //   449
//					{
//						union NavConnect connect;   //   464
//						remove(list<NavConnect, std::allocator<NavConnect>> *const this,
//							const value_type &__value);  //   470
//						remove(list<NavConnect, std::allocator<NavConnect>> *const this,
//							const value_type &__value);  //   466
//						push_back(list<NavConnect, std::allocator<NavConnect>> *const this,
//								const value_type &__x);  //   474
//					}
//					operator++(_List_iterator<NavConnect> *const this);  //   450
//					{
//						union NavConnect connect;   //   452
//					}
//				}
//			}
//			operator++(_List_iterator<CNavArea*> *const this);  //   439
//		}
//	}
}

/* <4c6cd3> ../game_shared/bot/nav_area.cpp:366 */
void CNavArea::Disconnect(CNavArea *area)
{
//	{
//		union NavConnect connect;                             //   368
//		{
//			int dir;                                      //   371
//			remove(list<NavConnect, std::allocator<NavConnect>> *const this,
//				const value_type &__value);  //   372
//		}
//	}
}

/* <4c6b75> ../game_shared/bot/nav_area.cpp:347 */
void CNavArea::ConnectTo(CNavArea *area, NavDirType dir)
{
//	{
//		union NavConnect con;                                 //   354
//		{
//			iterator iter;                                //   350
//			operator++(_List_iterator<NavConnect> *const this);  //   350
//		}
//		push_back(list<NavConnect, std::allocator<NavConnect>> *const this,
//				const value_type &__x);  //   356
//	}
}

/* <4c6b48> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<NavConnect, std::allocator<NavConnect>>::push_back(const value_type &__x)
{
}

/* <4c6af0> ../game_shared/bot/nav_area.cpp:347 */
void CNavArea::ConnectTo(CNavArea *area, NavDirType dir)
{
//	{
//		union NavConnect con;                                 //   354
//		{
//			iterator iter;                                //   350
//		}
//	}
}

/* <4c67f0> ../game_shared/bot/nav_area.cpp:333 */
void CNavArea::OnDestroyNotify(CNavArea *dead)
{
//	{
//		union NavConnect con;                                 //   335
//		{
//			int d;                                        //   337
//			remove(list<NavConnect, std::allocator<NavConnect>> *const this,
//				const value_type &__value);  //   338
//		}
//		remove(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//			const value_type &__value);  //   340
//	}
}

/* <4c678e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:239 */
void list<CNavArea*, std::allocator<CNavArea*>>::remove(const value_type &__value)
{
//	{
//		iterator __first;                                     //   242
//		iterator __last;                                      //   243
//		iterator __extra;                                     //   244
//		{
//			iterator __next;                              //   247
//		}
//	}
}

/* <4c672c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:239 */
void list<NavConnect, std::allocator<NavConnect>>::remove(const value_type &__value)
{
//	{
//		iterator __first;                                     //   242
//		iterator __last;                                      //   243
//		iterator __extra;                                     //   244
//		{
//			iterator __next;                              //   247
//		}
//	}
}

/* <4c66e3> ../game_shared/bot/nav_area.cpp:333 */
void CNavArea::OnDestroyNotify(CNavArea *dead)
{
//	{
//		union NavConnect con;                                 //   335
//		{
//			int d;                                        //   337
//		}
//	}
}

/* <4c63a4> ../game_shared/bot/nav_area.cpp:268 */
void CNavArea::CNavArea(CNavNode *nwNode, class CNavNode *neNode, class CNavNode *seNode, class CNavNode *swNode)
{
//	list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   268
//	list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   268
//	list(list<NavConnect, std::allocator<NavConnect>> *const this);  //   268
//	list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   268
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   268
//	Initialize(CNavArea *const this);  //   270
//	AssignNodes(CNavArea *const this,
//			class CNavArea *area);  //   288
}

/* <4c6352> ../game_shared/bot/nav_area.cpp:268 */
void CNavArea::CNavArea(CNavNode *nwNode, class CNavNode *neNode, class CNavNode *seNode, class CNavNode *swNode)
{
}

/* <4c610d> ../game_shared/bot/nav_area.cpp:248 */
void CNavArea::CNavArea(const Vector *nwCorner, const Vector *neCorner, const Vector *seCorner, const Vector *swCorner)
{
//	list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   248
//	list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   248
//	list(list<NavConnect, std::allocator<NavConnect>> *const this);  //   248
//	list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   248
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   248
//	Initialize(CNavArea *const this);  //   250
}

/* <4c5ed7> ../game_shared/bot/nav_area.cpp:207 */
void CNavArea::CNavArea(const Vector *corner, const Vector *otherCorner)
{
//	list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   207
//	list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   207
//	list(list<NavConnect, std::allocator<NavConnect>> *const this);  //   207
//	list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   207
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   207
//	Initialize(CNavArea *const this);  //   209
}

/* <4c5ea2> ../game_shared/bot/nav_area.cpp:207 */
void CNavArea::CNavArea(const Vector *corner, const Vector *otherCorner)
{
}

/* <4c5c82> ../game_shared/bot/nav_area.cpp:198 */
void CNavArea::CNavArea(void)
{
//	Initialize(CNavArea *const this);  //   200
//	list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   198
//	list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   198
//	list(list<NavConnect, std::allocator<NavConnect>> *const this);  //   198
//	list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   198
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   198
}

/* <4c5c65> ../game_shared/bot/nav_area.cpp:198 */
void CNavArea::CNavArea(void)
{
}

/* <4c5c30> ../game_shared/bot/nav_area.cpp:169 */
void CNavArea::Initialize(void)
{
//	{
//		int i;                                                //   177
//	}
}

/* <4c5bb0> ../game_shared/bot/nav_area.cpp:151 */
/* linkage=_Z17GetHidingSpotByIDj */
HidingSpot *GetHidingSpotByID(unsigned int id)
{
//	{
//		iterator iter;                                        //   153
//		{
//			class HidingSpot *spot;                      //   155
//		}
//		operator++(_List_iterator<HidingSpot*> *const this);  //   153
//	}
}

/* <4c59dc> ../game_shared/bot/nav_area.cpp:137 */
void HidingSpot::Load(SteamFile *file, unsigned int version)
{
//	Read(SteamFile *const this,
//		void *data,
//		int length);  //   139
//	Read(SteamFile *const this,
//		void *data,
//		int length);  //   140
//	Read(SteamFile *const this,
//		void *data,
//		int length);  //   141
}

/* <4c5994> ../game_shared/bot/nav_area.cpp:130 */
void HidingSpot::Save( int fd, unsigned int version)
{
}

/* <4c588a> ../game_shared/bot/nav_area.cpp:121 */
void HidingSpot::HidingSpot(const Vector *pos, unsigned char flags)
{
//	push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//			const value_type &__x);  //   127
}

/* <4c578e> ../game_shared/bot/nav_area.cpp:109 */
void HidingSpot::HidingSpot(void)
{
//	push_back(list<HidingSpot*, std::allocator<HidingSpot*>>::HidingSpot(//			const value_type &__x);  //   115
}

/* <4c5771> ../game_shared/bot/nav_area.cpp:109 */
void HidingSpot::HidingSpot(void)
{
}

/* <4c5551> ../game_shared/bot/nav_area.cpp:87 */
/* linkage=_Z18DestroyHidingSpotsv */
void DestroyHidingSpots(void)
{
//	clear(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   103
//	{
//		iterator areaIter;                                    //    90
//		{
//			class CNavArea *area;                        //    92
//			clear(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //    94
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //    90
//	}
//	{
//		iterator iter;                                        //   100
//		operator++(_List_iterator<HidingSpot*> *const this);  //   100
//	}
}

/* <4c5536> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::clear(void)
{
}

/* <4c4f85> ../game_shared/bot/nav_area.cpp:2685 */
void CNavArea::UpdateOnOpenList(void)
{
//	{
//		class CNavArea *other;                               //  2692
//		class CNavArea *before;                              //  2693
//		class CNavArea *after;                               //  2694
//	}
}

/* <4c4f67> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <4c4f2c> ../game_shared/bot/nav_area.cpp:2634 */
void CNavArea::AddToOpenList(void)
{
//	{
//		class CNavArea *area;                                //  2649
//		class CNavArea *last;                                //  2649
//	}
}

/* <4c4e08> ../game_shared/bot/nav_area.cpp:121 */
void HidingSpot::HidingSpot(const Vector *pos, unsigned char flags)
{
//	push_back(list<HidingSpot*, std::allocator<HidingSpot*>> *const this,
//			const value_type &__x);  //   127
}

/* <4c4ddb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::push_back(const value_type &__x)
{
}

/* <4c4b76> ../game_shared/bot/nav_area.cpp:5000 */
void CNavAreaGrid::AddNavArea(CNavArea *area)
{
//	{
//		const class Extent *extent;                         //  5003
//		int loX;                                              //  5005
//		int loY;                                              //  5006
//		int hiX;                                              //  5007
//		int hiY;                                              //  5008
//		int key;                                              //  5015
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5005
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5006
//		WorldToGridX(const class CNavAreaGrid *const this,
//				float wx);  //  5007
//		WorldToGridY(const class CNavAreaGrid *const this,
//				float wy);  //  5008
//		{
//			int y;                                        //  5010
//			{
//				int x;                                //  5011
//				push_back(list<CNavArea*, std::allocator<CNavArea*>> *const this,
//						const value_type &__x);  //  5012
//			}
//		}
//		ComputeHashKey(const class CNavAreaGrid *const this,
//				unsigned int id);  //  5015
//	}
}

/* <4c4b49> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::push_back(const value_type &__x)
{
}

/* <4c4a70> ../game_shared/bot/nav_area.cpp:4953 */
void CNavAreaGrid::~CNavAreaGrid(void)
{
//	~list(list<CNavArea*, std::allocator<CNavArea*>>::~CNavAreaGrid(//		int const __in_chrg);  //  4955
}

/* <4c4599> ../game_shared/bot/nav_area.cpp:248 */
void CNavArea::CNavArea(const Vector *nwCorner, const Vector *neCorner, const Vector *seCorner, const Vector *swCorner)
{
//	list(list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //   248
//	list(list<SpotEncounter, std::allocator<SpotEncounter>> *const this);  //   248
//	list(list<NavConnect, std::allocator<NavConnect>> *const this);  //   248
//	list(list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   248
//	list(list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   248
//	Initialize(CNavArea *const this);  //   250
}

/* <4c44ae> ../game_shared/bot/nav_area.cpp:2776 */
void CNavArea::IsHidingSpotCollision(Vector *pos)
{
//	{
//		float const collisionRange;                            //  2778
//		{
//			const_iterator iter;                          //  2780
//			end(const class list<HidingSpot*, std::allocator<HidingSpot*>> *const this);  //  2780
//			{
//				const class HidingSpot *spot;       //  2782
//				operator-(const Vector *const this,
//						const Vector &v);  //  2784
//				IsLengthLessThan(const Vector *const this,
//						float length);  //  2784
//			}
//			operator++(_List_const_iterator<HidingSpot*> *const this);  //  2780
//		}
//	}
}

/* <4c43f3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
void list<CNavArea*, std::allocator<CNavArea*>> *const this)
{
//	~_List_base(_List_base<CNavArea*, std::allocator<CNavArea*>>::~list(//			int const __in_chrg);  //   429
}

/* <4c43ca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::~list( int const __in_chrg)
{
}

/* <4c430f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
void list<CNavLadder*, std::allocator<CNavLadder*>> *const this)
{
//	~_List_base(_List_base<CNavLadder*, std::allocator<CNavLadder*>>::~list(//			int const __in_chrg);  //   429
}

/* <4c42e6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::~list( int const __in_chrg)
{
}

/* <4c422b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
void list<HidingSpot*, std::allocator<HidingSpot*>> *const this)
{
//	~_List_base(_List_base<HidingSpot*, std::allocator<HidingSpot*>>::~list(//			int const __in_chrg);  //   429
}

/* <4c4202> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::~list( int const __in_chrg)
{
}

/* <4c41db> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <4c4182> ../game_shared/bot/nav_area.cpp:4791 */
inline bool IsAreaVisible(const Vector *pos, const CNavArea *area)
{
//	{
//		Vector corner;                                  //  4793
//		TraceResult result;                                   //  4794
//		{
//			int c;                                        //  4796
//		}
//	}
}

/* <4c4137> ../game_shared/bot/nav_area.h:1109 */
void ForAllAreas<CollectHidingSpotsFunctor>(CollectHidingSpotsFunctor &func)
{
//	{
//		iterator iter;                                        //  1111
//		{
//			class CNavArea *area;                        //  1114
//		}
//	}
}

/* <4c409f> ../game_shared/bot/nav_area.cpp:5000 */
void CNavAreaGrid::AddNavArea(CNavArea *area)
{
//	{
//		const class Extent *extent;                         //  5003
//		int loX;                                              //  5005
//		int loY;                                              //  5006
//		int hiX;                                              //  5007
//		int hiY;                                              //  5008
//		int key;                                              //  5015
//		{
//			int y;                                        //  5010
//			{
//				int x;                                //  5011
//			}
//		}
//	}
}

/* <4c3feb> ../game_shared/bot/nav_area.cpp:3591 */
bool IsCrossingLineOfFire(Vector &start, Vector &finish, CBaseEntity *ignore, int ignoreTeam)
{
//	{
//		int p;                                                //  3593
//		{
//			class CBasePlayer *player;                   //  3595
//			float const longRange;                         //  3612
//			Vector playerTarget;                    //  3613
//			Vector result;                          //  3615
//			{
//				float loZ;                            //  3619
//				float hiZ;                            //  3619
//			}
//		}
//	}
}

/* <4c3e99> ../game_shared/bot/nav_area.h:679 */
bool NavAreaBuildPath<ApproachAreaCost>(CNavArea *startArea, class CNavArea *goalArea, const Vector *goalPos, class ApproachAreaCost &costFunc, class CNavArea ** closestArea)
{
//	{
//		Vector actualGoalPos;                           //   710
//		float initCost;                                       //   719
//		float closestAreaDist;                                //   729
//		{
//			class CNavArea *area;                        //   735
//			bool searchFloor;                             //   747
//			int dir;                                      //   748
//			const NavConnectList *floorList;            //   749
//			const_iterator floorIter;                     //   750
//			bool ladderUp;                                //   752
//			const NavLadderList *ladderList;            //   753
//			const_iterator ladderIter;                    //   754
//			int ladderTopDir;                             //   756
//			{
//				class CNavArea *newArea;             //   760
//				enum NavTraverseType how;             //   761
//				const class CNavLadder *ladder;     //   762
//				float newCostSoFar;                   //   859
//				{
//					float newCostRemaining;       //   873
//				}
//			}
//		}
//	}
}

/* <4c3e47> ../game_shared/bot/nav_area.cpp:4983 */
void CNavAreaGrid::Initialize(float minX, float maxX, float minY, float maxY)
{
}

/* <4c3de4> ../game_shared/bot/nav_area.cpp:1102 */
inline bool testJumpDown(const Vector *fromPos, const Vector *toPos)
{
//	{
//		float dz;                                             //  1104
//		Vector from;                                    //  1120
//		Vector to;                                      //  1121
//		TraceResult result;                                   //  1123
//	}
}

/* <4c3d89> ../game_shared/bot/nav_area.cpp:2776 */
void CNavArea::IsHidingSpotCollision(Vector *pos)
{
//	{
//		float const collisionRange;                            //  2778
//		{
//			const_iterator iter;                          //  2780
//			{
//				const class HidingSpot *spot;       //  2782
//			}
//		}
//	}
}

/* <4c3d54> ../game_shared/bot/nav_area.cpp:121 */
void HidingSpot::HidingSpot(const Vector *pos, unsigned char flags)
{
}

/* <4c3d07> ../game_shared/bot/nav_area.cpp:248 */
void CNavArea::CNavArea(const Vector *nwCorner, const Vector *neCorner, const Vector *seCorner, const Vector *swCorner)
{
}

/* <4c3c6a> ../game_shared/bot/nav_area.cpp:5039 */
void CNavAreaGrid::RemoveNavArea(CNavArea *area)
{
//	{
//		const class Extent *extent;                         //  5042
//		int loX;                                              //  5044
//		int loY;                                              //  5045
//		int hiX;                                              //  5046
//		int hiY;                                              //  5047
//		int key;                                              //  5054
//		{
//			int y;                                        //  5049
//			{
//				int x;                                //  5050
//			}
//		}
//	}
}

/* <4c3b30> ../game_shared/bot/nav_area.cpp:4635 */
bool GetGroundHeight(const Vector *pos, float *height, Vector *normal)
{
//	{
//		Vector to;                                      //  4637
//		float offset;                                         //  4642
//		Vector from;                                    //  4643
//		TraceResult result;                                   //  4644
//		edict_t *ignore;                                     //  4645
//		float ground;                                         //  4646
//		float const maxOffset;                                 //  4648
//		float const inc;                                       //  4649
//		class GroundLayerInfo layer;                          //  4657
//		int layerCount;                                       //  4658
//		int i;                                                //  4703
//	}
}

/* <4c3aa2> ../game_shared/bot/nav_area.cpp:2792 */
bool IsHidingSpotInCover(const Vector *spot)
{
//	{
//		int coverCount;                                       //  2794
//		TraceResult result;                                   //  2795
//		Vector from;                                    //  2797
//		Vector to;                                      //  2800
//		float const coverRange;                                //  2808
//		float const inc;                                       //  2809
//		int const halfCover;                                   //  2823
//		{
//			float angle;                                  //  2811
//		}
//	}
}

/* <4c3a75> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::push_back(const value_type &__x)
{
}

/* <4c3a6e> ../game_shared/bot/nav_area.h:141 */
inline void ChangeMasterMarker(void)
{
}

/* <4c3a51> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::SpotEncounter(void)
{
}

/* <4c3a07> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c39ca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c3992> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<SpotEncounter>::construct( pointer __p, const SpotEncounter &__val)
{
}

/* <4c396b> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::SpotEncounter(SpotEncounter &const)
{
}

/* <4c393e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:571 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::list(list<SpotOrder, std::allocator<SpotOrder>> &__x)
{
}

/* <4c3917> ../game_shared/bot/nav.h:122 */
inline void Ray::Ray(Ray &const)
{
}

/* <4c38f1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <4c38c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:356 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_List_base(const allocator_type &__a)
{
}

/* <4c3897> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:318 */
inline void _List_impl::_List_impl(const _Node_alloc_type &__a)
{
}

/* <4c386b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:109 */
inline void allocator<std::_List_node<SpotOrder>>::allocator(allocator<std::_List_node<SpotOrder>> &__a)
{
}

/* <4c3846> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:71 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(new_allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <4c3803> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1452 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_initialize_dispatch<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last, class __false_type)
{
}

/* <4c37d6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <4c37bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotOrder>::operator++(void)
{
}

/* <4c377b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <4c374f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<SpotOrder>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4c3721> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<std::_List_node<SpotOrder>>::allocator<SpotOrder>(allocator<SpotOrder> &const)
{
}

/* <4c36fb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_node(void)
{
}

/* <4c36cf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<SpotEncounter>>::allocate( size_type __n, const void *)
{
}

/* <4c36af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<SpotEncounter>>::max_size(void)
{
}

/* <4c3694> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <4c364a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c360d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c35f2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_node(void)
{
}

/* <4c35c6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<SpotOrder>>::allocate( size_type __n, const void *)
{
}

/* <4c35a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<SpotOrder>>::max_size(void)
{
}

/* <4c359f> ../game_shared/bot/nav_node.h:28 */
inline void GetFirst(void)
{
}

/* <4c3598> ../game_shared/bot/nav_node.h:29 */
inline void GetListLength(void)
{
}

/* <4c3570> ../game_shared/bot/nav_area.cpp:3976 */
inline void PlaceFloodFillFunctor::PlaceFloodFillFunctor(CNavArea *area)
{
}

/* <4c350c> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <4c34e6> ../game_shared/bot/nav_area.h:281 */
inline void CNavArea::GetApproachInfo(int i)
{
}

/* <4c34bf> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(Extent &const)
{
}

/* <4c349e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<NavConnect>::_List_iterator(void)
{
}

/* <4c342b> ../game_shared/bot/nav_area.cpp:1394 */
inline bool IsAreaRoughlySquare(const class CNavArea *area)
{
//	{
//		float aspect;                                         //  1396
//		float const maxAspect;                                 //  1398
//		float const minAspect;                                 //  1399
//	}
}

/* <4c3400> ../game_shared/bot/nav_area.cpp:2013 */
void CNavArea::IsOverlappingY(CNavArea *area)
{
}

/* <4c33d5> ../game_shared/bot/nav_area.cpp:2001 */
void CNavArea::IsOverlappingX(CNavArea *area)
{
}

/* <4c338b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<NavConnect, std::allocator<NavConnect>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c334e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<NavConnect, std::allocator<NavConnect>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c3333> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_node(void)
{
}

/* <4c3307> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<NavConnect>>::allocate( size_type __n, const void *)
{
}

/* <4c32e7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<NavConnect>>::max_size(void)
{
}

/* <4c329d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c3260> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c3245> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_node(void)
{
}

/* <4c3219> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<HidingSpot*>>::allocate( size_type __n, const void *)
{
}

/* <4c31f9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<HidingSpot*>>::max_size(void)
{
}

/* <4c31b5> ../game_shared/bot/nav_area.cpp:63 */
void buildGoodSizedList(void)
{
//	{
//		float const minSize;                                   //    65
//		iterator iter;                                        //    67
//		{
//			class CNavArea *area;                        //    70
//			const class Extent *extent;                 //    73
//		}
//	}
}

/* <4c316b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c312e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c3113> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_node(void)
{
}

/* <4c30e7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<CNavArea*>>::allocate( size_type __n, const void *)
{
}

/* <4c30c7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<CNavArea*>>::max_size(void)
{
}

/* <4c3080> ../game_shared/bot/nav_area.h:324 */
inline void CNavArea::AddLadderDown(CNavLadder *ladder)
{
}

/* <4c3061> ../game_shared/bot/nav.h:162 */
inline NavDirType DirectionRight(NavDirType dir)
{
}

/* <4c3042> ../game_shared/bot/nav.h:148 */
inline NavDirType DirectionLeft(NavDirType dir)
{
}

/* <4c301a> ../game_shared/bot/nav_area.h:323 */
inline void CNavArea::AddLadderUp(CNavLadder *ladder)
{
}

/* <4c2fda> ../game_shared/bot/nav_area.h:63 */
inline void CNavLadder::CNavLadder(void)
{
}

/* <4c2f90> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4c2f53> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4c2f38> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_get_node(void)
{
}

/* <4c2f0c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<CNavLadder*>>::allocate( size_type __n, const void *)
{
}

/* <4c2eec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<CNavLadder*>>::max_size(void)
{
}

/* <4c2ed1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <4c2eb6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:973 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::pop_front(void)
{
}

/* <4c2e9b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:899 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::front(void)
{
}

/* <4c2e72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::~list( int const __in_chrg)
{
}

/* <4c2e49> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<NavConnect, std::allocator<NavConnect>>::~list( int const __in_chrg)
{
}

/* <4c2e1d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <4c2e02> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <4c2de7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavLadder*>::operator++(void)
{
}

/* <4c2dc0> ../game_shared/bot/nav_area.h:88 */
inline void CNavLadder::OnDestroyNotify(CNavArea *dead)
{
}

/* <4c2d9a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::~_List_base( int const __in_chrg)
{
}

/* <4c2d7f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::clear(void)
{
}

/* <4c2d59> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<SpotEncounter>(SpotEncounter &__r)
{
}

/* <4c2d32> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<SpotEncounter>::destroy( pointer __p)
{
}

/* <4c2d05> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::~SpotEncounter( int const __in_chrg)
{
}

/* <4c2cdc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::~list( int const __in_chrg)
{
}

/* <4c2cb6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::~_List_base( int const __in_chrg)
{
}

/* <4c2c6c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c2c46> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<SpotOrder>(SpotOrder &__r)
{
}

/* <4c2c2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Tp_allocator(void)
{
}

/* <4c2c0b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Node_allocator(void)
{
}

/* <4c2bdd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<SpotOrder>::allocator<std::_List_node<SpotOrder>>(allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <4c2bb7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<SpotOrder>::new_allocator(void)
{
}

/* <4c2b97> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::list(void)
{
}

/* <4c2b7c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_List_base(void)
{
}

/* <4c2b61> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_init(void)
{
}

/* <4c2b46> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c2b2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<SpotOrder>>::allocator(void)
{
}

/* <4c2b10> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(void)
{
}

/* <4c2aea> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<CNavArea* const>(const class CNavArea * &__r)
{
}

/* <4c2ab2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1530 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::_M_erase( iterator __position)
{
//	{
//		_Node *__n;                                          //  1533
//	}
}

/* <4c2a97> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::clear(void)
{
}

/* <4c2a8c> ../game_shared/bot/nav_area.cpp:3757 */
void EditNavAreasReset(void)
{
}

/* <4c2a66> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::~_List_base( int const __in_chrg)
{
}

/* <4c2a1c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c29f6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<CNavArea*>(CNavArea *&const __r)
{
}

/* <4c29db> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_Tp_allocator(void)
{
}

/* <4c29bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_get_Node_allocator(void)
{
}

/* <4c298d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<CNavArea*>::allocator<std::_List_node<CNavArea*>>(allocator<std::_List_node<CNavArea*>> &const)
{
}

/* <4c2967> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<CNavArea*>::new_allocator(void)
{
}

/* <4c294c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::empty(void)
{
}

/* <4c2931> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:973 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::pop_front(void)
{
}

/* <4c2916> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:899 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::front(void)
{
}

/* <4c28de> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1530 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::_M_erase( iterator __position)
{
//	{
//		_Node *__n;                                          //  1533
//	}
}

/* <4c28b8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::~_List_base( int const __in_chrg)
{
}

/* <4c286e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c2848> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<CNavLadder*>(CNavLadder *&const __r)
{
}

/* <4c282d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_get_Tp_allocator(void)
{
}

/* <4c280d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_get_Node_allocator(void)
{
}

/* <4c27df> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<CNavLadder*>::allocator<std::_List_node<CNavLadder*>>(allocator<std::_List_node<CNavLadder*>> &const)
{
}

/* <4c27b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<CNavLadder*>::new_allocator(void)
{
}

/* <4c2793> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::~_List_base( int const __in_chrg)
{
}

/* <4c2749> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<NavConnect, std::allocator<NavConnect>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c271d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <4c26f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<const NavConnect>(const union NavConnect &__r)
{
}

/* <4c26c6> ../game_shared/bot/nav_area.h:40 */
inline void operator==(const union NavConnect *const this, const union NavConnect &other)
{
}

/* <4c268b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<NavConnect>::operator++(void)
{
}

/* <4c2670> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <4c2638> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1530 */
inline void list<NavConnect, std::allocator<NavConnect>>::_M_erase( iterator __position)
{
//	{
//		_Node *__n;                                          //  1533
//	}
}

/* <4c2612> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<NavConnect>(union NavConnect &__r)
{
}

/* <4c25f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_Tp_allocator(void)
{
}

/* <4c25d7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_get_Node_allocator(void)
{
}

/* <4c25a9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<NavConnect>::allocator<std::_List_node<NavConnect>>(allocator<std::_List_node<NavConnect>> &const)
{
}

/* <4c2583> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<NavConnect>::new_allocator(void)
{
}

/* <4c2528> ../game_shared/bot/nav_area.cpp:486 */
void CNavArea::AssignNodes(CNavArea *area)
{
//	{
//		class CNavNode *horizLast;                           //   488
//		{
//			class CNavNode *vertNode;                    //   490
//			{
//				class CNavNode *horizNode;           //   492
//			}
//		}
//	}
}

/* <4c24fe> ../game_shared/bot/nav_area.cpp:169 */
void CNavArea::Initialize(void)
{
//	{
//		int i;                                                //   177
//	}
}

/* <4c24e3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::list(void)
{
}

/* <4c24c8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::list(void)
{
}

/* <4c24ad> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<NavConnect, std::allocator<NavConnect>>::list(void)
{
}

/* <4c2492> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::list(void)
{
}

/* <4c2477> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::list(void)
{
}

/* <4c245c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_List_base(void)
{
}

/* <4c2441> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_init(void)
{
}

/* <4c2426> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c240b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<NavConnect>>::allocator(void)
{
}

/* <4c23f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<NavConnect>>::new_allocator(void)
{
}

/* <4c23d5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_Tp_allocator(void)
{
}

/* <4c23b5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_get_Node_allocator(void)
{
}

/* <4c2387> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<SpotEncounter>::allocator<std::_List_node<SpotEncounter>>(allocator<std::_List_node<SpotEncounter>> &const)
{
}

/* <4c2361> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<SpotEncounter>::new_allocator(void)
{
}

/* <4c2346> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_List_base(void)
{
}

/* <4c232b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_init(void)
{
}

/* <4c2310> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c22f5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<SpotEncounter>>::allocator(void)
{
}

/* <4c22da> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<SpotEncounter>>::new_allocator(void)
{
}

/* <4c22b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::~_List_base( int const __in_chrg)
{
}

/* <4c226a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4c2244> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<HidingSpot*>(HidingSpot *&const __r)
{
}

/* <4c2229> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_Tp_allocator(void)
{
}

/* <4c2209> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_get_Node_allocator(void)
{
}

/* <4c21db> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<HidingSpot*>::allocator<std::_List_node<HidingSpot*>>(allocator<std::_List_node<HidingSpot*>> &const)
{
}

/* <4c21b5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<HidingSpot*>::new_allocator(void)
{
}

/* <4c219a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_List_base(void)
{
}

/* <4c217f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_init(void)
{
}

/* <4c2164> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c2149> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<HidingSpot*>>::allocator(void)
{
}

/* <4c212e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<HidingSpot*>>::new_allocator(void)
{
}

/* <4c2113> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_List_base(void)
{
}

/* <4c20f8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_init(void)
{
}

/* <4c20dd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c20c2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<CNavLadder*>>::allocator(void)
{
}

/* <4c20a7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<CNavLadder*>>::new_allocator(void)
{
}

/* <4c208c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_List_base(void)
{
}

/* <4c2071> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_init(void)
{
}

/* <4c2056> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4c203b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<CNavArea*>>::allocator(void)
{
}

/* <4c2020> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<CNavArea*>>::new_allocator(void)
{
}

/* <4c1fe8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<SpotOrder>::construct( pointer __p, const SpotOrder &__val)
{
}

/* <4c1fbb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_put_node(_List_node<SpotOrder> *__p)
{
}

/* <4c1f8f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<SpotOrder>>::deallocate( pointer __p, size_type)
{
}

/* <4c1f64> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<SpotOrder>::~allocator( int const __in_chrg)
{
}

/* <4c1f3e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<SpotOrder>::~new_allocator( int const __in_chrg)
{
}

/* <4c1f06> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<NavConnect>::construct( pointer __p, const union NavConnect &__val)
{
}

/* <4c1ed9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<CNavArea*, std::allocator<CNavArea*>>::_M_put_node(_List_node<CNavArea*> *__p)
{
}

/* <4c1ead> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<CNavArea*>>::deallocate( pointer __p, size_type)
{
}

/* <4c1e82> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<CNavArea*>::~allocator( int const __in_chrg)
{
}

/* <4c1e5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<CNavArea*>::~new_allocator( int const __in_chrg)
{
}

/* <4c1e2f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<CNavLadder*, std::allocator<CNavLadder*>>::_M_put_node(_List_node<CNavLadder*> *__p)
{
}

/* <4c1e03> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<CNavLadder*>>::deallocate( pointer __p, size_type)
{
}

/* <4c1dd8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<CNavLadder*>::~allocator( int const __in_chrg)
{
}

/* <4c1db2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<CNavLadder*>::~new_allocator( int const __in_chrg)
{
}

/* <4c1d85> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<NavConnect, std::allocator<NavConnect>>::_M_put_node(_List_node<NavConnect> *__p)
{
}

/* <4c1d59> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<NavConnect>>::deallocate( pointer __p, size_type)
{
}

/* <4c1d2e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<NavConnect>::~allocator( int const __in_chrg)
{
}

/* <4c1d08> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<NavConnect>::~new_allocator( int const __in_chrg)
{
}

/* <4c1cdb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<SpotEncounter, std::allocator<SpotEncounter>>::_M_put_node(_List_node<SpotEncounter> *__p)
{
}

/* <4c1caf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<SpotEncounter>>::deallocate( pointer __p, size_type)
{
}

/* <4c1c84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<SpotEncounter>::~allocator( int const __in_chrg)
{
}

/* <4c1c59> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<SpotEncounter>::~new_allocator( int const __in_chrg)
{
}

/* <4c1c21> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<HidingSpot*>::construct( pointer __p, const HidingSpot * &__val)
{
}

/* <4c1bf4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<HidingSpot*, std::allocator<HidingSpot*>>::_M_put_node(_List_node<HidingSpot*> *__p)
{
}

/* <4c1bc8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<HidingSpot*>>::deallocate( pointer __p, size_type)
{
}

/* <4c1b9d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<HidingSpot*>::~allocator( int const __in_chrg)
{
}

/* <4c1b77> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<HidingSpot*>::~new_allocator( int const __in_chrg)
{
}

/* <4c1b3f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<CNavArea*>::construct( pointer __p, const CNavArea * &__val)
{
}

/* <4c1b07> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<CNavLadder*>::construct( pointer __p, const CNavLadder * &__val)
{
}

/* <4c1adb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotOrder>::_List_iterator(_List_node_base *__x)
{
}

/* <4c1aaf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<SpotOrder>::destroy( pointer __p)
{
}

/* <4c1a82> ../game_shared/bot/nav_area.h:164 */
inline void SpotOrder::~SpotOrder( int const __in_chrg)
{
}

/* <4c1a54> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c1a29> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<SpotOrder>>::~allocator( int const __in_chrg)
{
}

/* <4c19fe> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<SpotOrder>>::~new_allocator( int const __in_chrg)
{
}

/* <4c19d2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<CNavArea*>::destroy( pointer __p)
{
}

/* <4c19a4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c1979> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<CNavArea*>>::~allocator( int const __in_chrg)
{
}

/* <4c194e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<CNavArea*>>::~new_allocator( int const __in_chrg)
{
}

/* <4c1922> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<CNavLadder*>::destroy( pointer __p)
{
}

/* <4c18f4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c18c9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<CNavLadder*>>::~allocator( int const __in_chrg)
{
}

/* <4c189e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<CNavLadder*>>::~new_allocator( int const __in_chrg)
{
}

/* <4c1872> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<NavConnect>::destroy( pointer __p)
{
}

/* <4c1845> ../game_shared/bot/nav_area.h:35 */
inline void ~NavConnect(union NavConnect *const this, int const __in_chrg)
{
}

/* <4c1817> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c17ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<NavConnect>>::~allocator( int const __in_chrg)
{
}

/* <4c17c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<NavConnect>>::~new_allocator( int const __in_chrg)
{
}

/* <4c1793> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c1768> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<SpotEncounter>>::~allocator( int const __in_chrg)
{
}

/* <4c173d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<SpotEncounter>>::~new_allocator( int const __in_chrg)
{
}

/* <4c170f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4c16e4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<HidingSpot*>>::~allocator( int const __in_chrg)
{
}

/* <4c16b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<HidingSpot*>>::~new_allocator( int const __in_chrg)
{
}

/* <4c168d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<HidingSpot*>::destroy( pointer __p)
{
}

/* <4c15a2> ../game_shared/bot/nav_area.h:1028 */
void SearchSurroundingAreas<CollectHidingSpotsFunctor>(CNavArea *startArea, const Vector *startPos, class CollectHidingSpotsFunctor &func, float maxRange)
{
//	{
//		class CNavArea *area;                                //  1045
//		{
//			const_iterator ladderIt;                      //  1064
//			const NavLadderList *ladderList;            //  1067
//			{
//				int dir;                              //  1051
//				{
//					int count;                    //  1053
//					{
//						int i;                //  1054
//						{
//							class CNavArea *adjArea;           //  1056
//						}
//					}
//				}
//			}
//			{
//				const class CNavLadder *ladder;     //  1072
//			}
//			{
//				const class CNavLadder *ladder;     //  1093
//			}
//		}
//	}
}

/* <4c1587> ../game_shared/bot/bot_util.h:136 */
inline void IntervalTimer::Reset(void)
{
}

/* <4c156c> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <4c1551> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <4c1534> ../game_shared/bot/nav_area.h:417 */
inline void CNavArea::IsDegenerate(void)
{
}

/* <4c14ef> ../game_shared/bot/nav_area.h:422 */
inline void CNavArea::GetAdjacentArea(NavDirType dir, int i)
{
//	{
//		const_iterator iter;                                  //   424
//	}
}

/* <4c14c8> ../game_shared/bot/nav_area.h:236 */
inline void CNavArea::GetAdjacentCount(NavDirType dir)
{
}

/* <4c148b> ../game_shared/bot/nav_area.cpp:3981 */
inline void PlaceFloodFillFunctor::operator()(CNavArea *area)
{
//	{
//		class CCSBotManager *ctrl;                           //  3983
//	}
}

/* <4c1470> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<NavConnect, std::allocator<NavConnect>>::size(void)
{
}

/* <4c1443> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last)
{
}

/* <4c1402> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <4c13e3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<NavConnect>>(const class _List_const_iterator<NavConnect> &const)
{
}

/* <4c13d4> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <4c13b7> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <4c139a> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <4c136d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <4c1346> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <4c1319> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <4c12f2> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <4c12e8> ../game_shared/bot/nav_area.cpp:2731 */
void ClearSearchLists(void)
{
}

/* <4c12bc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<SpotEncounter>::operator!=(const _Self &__x)
{
}

/* <4c12a1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::end(void)
{
}

/* <4c1286> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<SpotEncounter>::operator++(void)
{
}

/* <4c1246> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::begin(void)
{
}

/* <4c121a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotEncounter>::_List_iterator(_List_node_base *__x)
{
}

/* <4c11f3> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <4c118b> ../game_shared/bot/nav_area.cpp:3385 */
inline void CollectHidingSpotsFunctor::CollectHidingSpotsFunctor( CBaseEntity *me, const Vector *origin, float range, unsigned char flags, Place place, bool useCrouchAreas)
{
}

/* <4c1170> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <4c1108> ../game_shared/bot/nav_area.cpp:3398 */
inline void CollectHidingSpotsFunctor::operator()(CNavArea *area)
{
//	{
//		const HidingSpotList *list;                         //  3405
//		{
//			const_iterator iter;                          //  3407
//			{
//				const class HidingSpot *spot;       //  3409
//				{
//					class CNavArea *area;        //  3413
//				}
//			}
//		}
//	}
}

/* <4c10e1> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <4c10b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <4c1099> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <4c107e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<HidingSpot*>::operator++(void)
{
}

/* <4c1043> ../game_shared/bot/nav_area.h:255 */
inline void CNavArea::GetHidingSpotList(void)
{
}

/* <4c1023> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <4c0ff7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<HidingSpot*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4c0fca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <4c0faf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <4c0f94> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavArea*>::operator++(void)
{
}

/* <4c0f54> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <4c0f28> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavArea*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4c0e7b> ../game_shared/bot/nav_area.cpp:615 */
void CNavArea::IsConnected(CNavArea *area, NavDirType dir)
{
//	{
//		const_iterator iter;                                  //   621
//		{
//			const_iterator liter;                         //   636
//			{
//				int d;                                //   626
//			}
//			{
//				class CNavLadder *ladder;            //   639
//			}
//			{
//				class CNavLadder *ladder;            //   650
//			}
//		}
//	}
}

/* <4c0e4e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <4c0e33> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <4c0e18> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <4c0ddd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <4c0dbd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <4c0d91> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4c0d71> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <4c0d45> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<NavConnect>::_List_iterator(_List_node_base *__x)
{
}

/* <4c0d05> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <4c0cd9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavLadder*>::_List_iterator(_List_node_base *__x)
{
}

/* <4c0cad> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <4c0c92> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <4c0c77> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<HidingSpot*>::operator++(void)
{
}

/* <4c0c37> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <4c0c0b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<HidingSpot*>::_List_iterator(_List_node_base *__x)
{
}

/* <4c0bf0> ../game_shared/bot/nav.h:111 */
inline void Extent::Area(void)
{
}

/* <4c0bd5> ../game_shared/bot/nav_area.h:136 */
inline void HidingSpot::GetPosition(void)
{
}

/* <4c0baa> ../game_shared/bot/nav_area.cpp:3264 */
void CNavArea::GetDanger(int teamID)
{
}

/* <4c0b7e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <4c0b63> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <4c0b48> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <4c0b13> ../game_shared/bot/nav_area.h:531 */
inline void CNavAreaGrid::WorldToGridY(float wy)
{
//	{
//		int y;                                                //   533
//	}
}

/* <4c0ade> ../game_shared/bot/nav_area.h:520 */
inline void CNavAreaGrid::WorldToGridX(float wx)
{
//	{
//		int x;                                                //   522
//	}
}

/* <4c0a9e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <4c0a72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <4c0a45> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <4c0a2a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <4c0a0f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <4c09d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(void)
{
}

/* <4c09b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <4c0988> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4c0912> ../game_shared/bot/nav_area.cpp:4757 */
inline void ApproachAreaCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		int i;                                                //  4760
//	}
//	{
//		float dist;                                           //  4772
//		float cost;                                           //  4779
//	}
}

/* <4c0851> ../game_shared/bot/bot_util.h:247 */
inline bool IsIntersecting2D(Vector &startA, Vector &endA, Vector &startB, Vector &endB, Vector *result)
{
//	{
//		float denom;                                          //   251
//		float numS;                                           //   258
//		float numT;                                           //   265
//		float s;                                              //   267
//		float t;                                              //   274
//	}
}

/* <4c0818> ../game_shared/bot/nav_area.cpp:3448 */
inline void CollectHidingSpotsFunctor::RemoveSpot( int i)
{
//	{
//		int j;                                                //  3453
//	}
}

/* <4c07a1> ../cstrike/dlls/hostage/hostage.h:265 */
inline void CHostageManager::GetClosestHostage(Vector &pos, float *resultRange)
{
//	{
//		float closeRange;                                     //   267
//		float range;                                          //   267
//		class CHostage *close;                               //   268
//		{
//			int i;                                        //   270
//		}
//	}
}

/* <4c077f> ../game_shared/bot/nav.h:122 */
inline void Ray::Ray(void)
{
}

/* <4c073e> ../game_shared/bot/nav_area.cpp:2744 */
void CNavArea::GetCorner(NavCornerType corner)
{
//	{
//		Vector pos;                                     //  2746
//	}
}

/* <4c0737> ../game_shared/bot/nav_area.h:286 */
inline void MakeNewMarker(void)
{
}

/* <4c0719> ../game_shared/bot/nav_area.cpp:2713 */
void CNavArea::RemoveFromOpenList(void)
{
}

/* <4c0689> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <4c066e> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <4c0653> ../game_shared/bot/nav_area.h:268 */
inline void CNavArea::GetExtent(void)
{
}

/* <4c0638> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <4c05ba> ../game_shared/bot/nav_node.h:79 */
inline void CNavNode::GetPosition(void)
{
}

/* <4c059f> ../game_shared/bot/nav_node.h:25 */
inline void CNavNode::GetNormal(void)
{
}

/* <4c0577> ../game_shared/bot/nav_node.h:74 */
inline void CNavNode::GetConnectedNode(NavDirType dir)
{
}

/* <4c0555> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(void)
{
}

/* <4c052f> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <4c0508> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <4c04dc> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <4c04b1> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <4c0484> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <4c0451> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <4c03f5> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <4c0399> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <4c033d> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <4c02fa> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <4c02cd> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <4c0271> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <4c0222> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <4c01eb> ../cstrike/dlls/bot/cs_bot_manager.h:201 */
inline void CCSBotManager::SetNavPlace( unsigned int place)
{
}

/* <4c01c5> ../cstrike/dlls/bot/cs_bot_manager.h:200 */
inline void CCSBotManager::GetNavPlace(void)
{
}

/* <4c018e> ../game_shared/bot/nav_area.h:514 */
inline void CNavAreaGrid::ComputeHashKey(unsigned int id)
{
}

/* <4c0171> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <4c0154> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <4c0139> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <4c0111> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <4c00f6> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <4c00ce> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <4c00b3> ../game_shared/bot/nav_area.h:292 */
inline void CNavArea::GetParentHow(void)
{
}

/* <4c0098> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <4c0063> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <4c0048> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <4c002d> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <4c0012> ../game_shared/bot/nav_area.h:282 */
inline void CNavArea::GetApproachInfoCount(void)
{
}

/* <4bfff7> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <4bffdc> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <4bffc1> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <4bff9a> ../game_shared/bot/nav_area.h:218 */
inline void CNavArea::SetPlace( Place place)
{
}

/* <4bff7f> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <4bff58> ../game_shared/bot/nav_area.h:215 */
inline void CNavArea::SetAttributes( unsigned char bits)
{
}

/* <4bff38> ../game_shared/bot/nav_area.h:213 */
inline void CNavArea::GetID(void)
{
}

/* <4bff1d> ../game_shared/bot/nav_area.h:140 */
inline void HidingSpot::IsMarked(void)
{
}

/* <4bff02> ../game_shared/bot/nav_area.h:139 */
inline void HidingSpot::Mark(void)
{
}

/* <4bfee7> ../game_shared/bot/nav_area.h:137 */
inline void HidingSpot::GetID(void)
{
}

/* <4bfecc> ../game_shared/bot/nav_area.h:131 */
inline void HidingSpot::GetFlags(void)
{
}

/* <4bfea5> ../game_shared/bot/nav_area.h:130 */
inline void HidingSpot::SetFlags( unsigned char flags)
{
}

/* <4bfe8a> ../game_shared/bot/nav_area.h:128 */
inline void HidingSpot::IsIdealSniperSpot(void)
{
}

/* <4bfe6f> ../game_shared/bot/nav_area.h:127 */
inline void HidingSpot::IsGoodSniperSpot(void)
{
}

/* <4bfe4f> ../game_shared/bot/nav_area.h:126 */
inline void HidingSpot::HasGoodCover(void)
{
}

/* <4bfdfa> ../game_shared/steam_util.h:42 */
inline void SteamFile::Read( void *data, int length)
{
//	{
//		byte *readCursor;                                    //    47
//		{
//			int i;                                        //    49
//		}
//	}
}

/* <4bfdde> ../game_shared/bot/nav_node.h:107 */
inline void CNavNode::GetArea(void)
{
}

/* <4bfdb6> ../game_shared/bot/nav_node.h:102 */
inline void CNavNode::AssignArea(CNavArea *area)
{
}

/* <4bfd9b> ../game_shared/bot/nav_node.h:47 */
inline void CNavNode::GetAttributes(void)
{
}

/* <4bfd7b> ../game_shared/bot/nav_node.h:41 */
inline void CNavNode::IsCovered(void)
{
}

/* <4bfd60> ../game_shared/bot/nav_node.h:40 */
inline void CNavNode::Cover(void)
{
}

/* <4bfd40> ../game_shared/bot/nav_node.h:30 */
inline void CNavNode::GetNext(void)
{
}

/* <4bfcf4> ../game_shared/bot/nav.h:109 */
inline void Extent::SizeY(void)
{
}

/* <4bfcd4> ../game_shared/bot/nav.h:108 */
inline void Extent::SizeX(void)
{
}

/* <4bfcaa> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <4bfc8f> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <4bfc38> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <4bfbda> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <4bfbba> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <4bfb9a> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <4bfb7a> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4bfb28> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4bfafe> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4bfabf> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <4bfa95> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4bfa7a> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <4bf94d> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <4bf914> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4bf8e5> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4bf8ad> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <4bf88d> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <4bf86d> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <4bf81e> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <4bf7f3> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <4bf7c6> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <4bf79b> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <4ae3c1> ../game_shared/bot/bot_util.cpp:838 */
/* linkage=_Z23HintMessageToAllPlayersPKc */
void HintMessageToAllPlayers(const char *message)
{
//	{
//		hudtextparms_t textParms;                             //   840
//	}
}

/* <4ae2c5> ../game_shared/bot/bot_util.cpp:694 */
/* linkage=_Z18IsGameEventAudible13GameEventTypeP11CBaseEntityS1_PfP12PriorityTypePb */
bool IsGameEventAudible(GameEventType event, CBaseEntity *entity, CBaseEntity *other, float *range, PriorityType *priority, bool *isHostile)
{
//	{
//		class CBasePlayer *player;                           //   696
//		float const ShortRange;                                //   700
//		float const NormalRange;                               //   701
//		{
//			class CBasePlayerWeapon *pWeapon;            //   730
//		}
//		{
//			class CBasePlayerWeapon *pWeapon;            //   745
//		}
//	}
}

/* <4ae261> ../game_shared/bot/bot_util.cpp:682 */
/* linkage=_Z6BotSINf */
float BotSIN(float angle)
{
//	{
//		int i;                                                //   685
//		NormalizeAnglePositive(float angle);  //   684
//	}
}

/* <4ae1fd> ../game_shared/bot/bot_util.cpp:675 */
/* linkage=_Z6BotCOSf */
float BotCOS(float angle)
{
//	{
//		int i;                                                //   678
//		NormalizeAnglePositive(float angle);  //   677
//	}
}

/* <4ae1b1> ../game_shared/bot/bot_util.cpp:666 */
/* linkage=_Z11InitBotTrigv */
void InitBotTrig(void)
{
//	{
//		int i;                                                //   668
//		{
//			float angle;                                  //   670
//		}
//	}
}

/* <4ae198> ../game_shared/bot/bot_util.cpp:592 */
/* linkage=_Z11BotPrecachev */
void BotPrecache(void)
{
}

/* <4ae13e> ../game_shared/bot/bot_util.cpp:577 */
/* linkage=_Z19CONSOLE_ECHO_LOGGEDPcz */
void CONSOLE_ECHO_LOGGED(char *pszMsg, ...)
{
//	{
//		va_list argptr;                                       //   579
//		char szStr;                                           //   580
//	}
}

/* <4ae0d3> ../game_shared/bot/bot_util.cpp:563 */
/* linkage=_Z12CONSOLE_ECHOPcz */
void CONSOLE_ECHO(char *pszMsg, ...)
{
//	{
//		va_list argptr;                                       //   565
//		char szStr;                                           //   566
//	}
}

/* <4ae02e> ../game_shared/bot/bot_util.cpp:537 */
/* linkage=_Z19UTIL_DrawBeamPoints6VectorS_ihhh */
void UTIL_DrawBeamPoints(Vector vecStart, Vector vecEnd, int iLifetime, byte bRed, byte bGreen, byte bBlue)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   539
}

/* <4adf8a> ../game_shared/bot/bot_util.cpp:513 */
/* linkage=_Z20UTIL_DrawBeamFromEnti6Vectorihhh */
void UTIL_DrawBeamFromEnt(int iIndex, Vector vecEnd, int iLifetime, byte bRed, byte bGreen, byte bBlue)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   515
}

/* <4adcab> ../game_shared/bot/bot_util.cpp:491 */
Vector UTIL_ComputeOrigin(entvars_t *pevVars)
{
}

/* <4adc8e> ../game_shared/bot/bot_util.cpp:479 */
/* linkage=_Z19UTIL_GetLocalPlayerv */
CBasePlayer *UTIL_GetLocalPlayer(void)
{
}

/* <4adb6c> ../game_shared/bot/bot_util.cpp:440 */
/* linkage=_Z20UTIL_IsVisibleToTeamRK6Vectorif */
bool UTIL_IsVisibleToTeam(Vector &spot, int team, float maxRange)
{
//	{
//		int i;                                                //   442
//		{
//			class CBasePlayer *player;                   //   444
//			TraceResult result;                           //   464
//			FNullEnt(entvars_t *pev);  //   449
//			operator-(const Vector *const this,
//					const Vector &v);  //   461
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //   461
//		}
//	}
}

/* <4adb11> ../game_shared/bot/bot_util.cpp:418 */
/* linkage=_Z24UTIL_ConstructBotNetNamePciPK10BotProfile */
void UTIL_ConstructBotNetName(char *name, int nameLength, const BotProfile *profile)
{
//	UTIL_GetBotPrefix(void);  //   427
}

/* <4ad86a> ../game_shared/bot/bot_util.cpp:343 */
/* linkage=_Z21UTIL_GetClosestPlayerPK6VectorPf */
CBasePlayer *UTIL_GetClosestPlayer(const Vector *pos, float *distance)
{
//	{
//		class CBasePlayer *closePlayer;                      //   345
//		float closeDistSq;                                    //   346
//		{
//			int i;                                        //   348
//			{
//				class CBasePlayer *player;           //   350
//				float distSq;                         //   358
//				IsEntityValid(CBaseEntity *entity);  //   352
//				operator-(const Vector *const this,
//						const Vector &v);  //   358
//				LengthSquared(const Vector *const this);  //   358
//			}
//		}
//	}
}

/* <4ad7ad> ../game_shared/bot/bot_util.cpp:305 */
/* linkage=_Z18UTIL_IsTeamAllBotsi */
bool UTIL_IsTeamAllBots(int team)
{
//	{
//		int botCount;                                         //   307
//		{
//			int i;                                        //   309
//			{
//				class CBasePlayer *player;           //   311
//				FNullEnt(entvars_t *pev);  //   320
//			}
//		}
//	}
}

/* <4ad686> ../game_shared/bot/bot_util.cpp:240 */
/* linkage=_Z20UTIL_KickBotFromTeam8TeamName */
bool UTIL_KickBotFromTeam(TeamName kickTeam)
{
//	{
//		int i;                                                //   242
//		{
//			class CBasePlayer *player;                   //   247
//			const char *name;                           //   255
//			FNullEnt(entvars_t *pev);  //   252
//		}
//		{
//			class CBasePlayer *player;                   //   274
//			const char *name;                           //   282
//			FNullEnt(entvars_t *pev);  //   279
//		}
//	}
}

/* <4ad5db> ../game_shared/bot/bot_util.cpp:210 */
/* linkage=_Z15UTIL_BotsInGamev */
int UTIL_BotsInGame(void)
{
//	{
//		int iCount;                                           //   212
//		{
//			int iIndex;                                   //   214
//			{
//				class CBasePlayer *pPlayer;          //   216
//				FNullEnt(entvars_t *pev);  //   221
//			}
//		}
//	}
}

/* <4ad507> ../game_shared/bot/bot_util.cpp:174 */
/* linkage=_Z17UTIL_HumansOnTeamib */
int UTIL_HumansOnTeam(int teamID, bool isAlive)
{
//	{
//		int iCount;                                           //   176
//		{
//			int iIndex;                                   //   178
//			{
//				class CBaseEntity *entity;           //   180
//				class CBasePlayer *player;           //   191
//				FNullEnt(entvars_t *pev);  //   185
//			}
//		}
//	}
}

/* <4ad43f> ../game_shared/bot/bot_util.cpp:128 */
/* linkage=_Z17UTIL_HumansInGameb */
int UTIL_HumansInGame(bool ignoreSpectators)
{
//	{
//		int iCount;                                           //   130
//		{
//			int iIndex;                                   //   132
//			{
//				class CBaseEntity *entity;           //   134
//				class CBasePlayer *player;           //   145
//				FNullEnt(entvars_t *pev);  //   139
//			}
//		}
//	}
}

/* <4ad385> ../game_shared/bot/bot_util.cpp:93 */
/* linkage=_Z24UTIL_ActivePlayersInGamev */
int UTIL_ActivePlayersInGame(void)
{
//	{
//		int iCount;                                           //    95
//		{
//			int iIndex;                                   //    97
//			{
//				class CBaseEntity *entity;           //    99
//				class CBasePlayer *player;           //   110
//				FNullEnt(entvars_t *pev);  //   104
//			}
//		}
//	}
}

/* <4ad2da> ../game_shared/bot/bot_util.cpp:66 */
/* linkage=_Z18UTIL_ClientsInGamev */
int UTIL_ClientsInGame(void)
{
//	{
//		int iCount;                                           //    68
//		{
//			int iIndex;                                   //    70
//			{
//				class CBaseEntity *pPlayer;          //    72
//				FNullEnt(entvars_t *pev);  //    77
//			}
//		}
//	}
}

/* <4ad1c6> ../game_shared/bot/bot_util.cpp:26 */
/* linkage=_Z16UTIL_IsNameTakenPKcb */
bool UTIL_IsNameTaken(const char *name, bool ignoreHumans)
{
//	{
//		int i;                                                //    28
//		{
//			class CBaseEntity *player;                   //    30
//			FNullEnt(entvars_t *pev);  //    35
//			FStrEq(const char *sz1,
//				const char *sz2);  //    55
//			{
//				class CBot *bot;                     //    45
//				FStrEq(const char *sz1,
//					const char *sz2);  //    46
//			}
//		}
//	}
}

/* <4ad17f> ../game_shared/bot/nav.h:263 */
inline float NormalizeAnglePositive(float angle)
{
}

/* <4ad12d> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <4ad0ec> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <4ad0de> ../game_shared/bot/bot_util.cpp:411 */
const char *UTIL_GetBotPrefix(void)
{
}

/* <4ad0c5> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <4ad0a7> ../game_shared/bot/bot_profile.h:64 */
inline void BotProfile::GetName(void)
{
}

/* <4ad081> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <4ad05a> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <4ad033> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <4ad01a> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <4acffc> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <4acf99> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4acf4a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4acf00> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4acec5> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <4ace9e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4acdd2> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4acda6> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4acd86> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <4acd68> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <4a8acb> ../game_shared/bot/bot_profile.cpp:137 */
void BotProfileManager::Init(const char *filename, unsigned int *checksum)
{
//	{
//		int dataLength;                                       //   139
//		char *dataPointer;                                   //   140
//		const char *dataFile;                               //   141
//		BotProfileList templateList;                          //   159
//		class BotProfile defaultProfile;                      //   161
//		ComputeSimpleChecksum(const unsigned char *dataPointer,
//					int dataLength);  //   155
//		BotProfile(BotProfile *const this);  //   161
//		list(list<BotProfile*, std::allocator<BotProfile*>> *const this);  //   159
//		{
//			char *token;                                 //   172
//			bool isDefault;                               //   174
//			bool isTemplate;                              //   175
//			bool isCustomSkin;                            //   176
//			class BotProfile *profile;                   //   270
//			bool isFirstWeaponPref;                       //   348
//			{
//				int const BufLen;                      //   180
//				char skinName;                        //   181
//				const char *decoratedName;          //   236
//				bool skinExists;                      //   237
//				GetDecoratedSkinName(const char *name,
//							const char *filename);  //   236
//				GetCustomSkinIndex(BotProfileManager *const this,
//							const char *name,
//							const char *filename);  //   237
//				CloneString(const char *str);  //   241
//				CloneString(const char *str);  //   244
//			}
//			{
//				const class BotProfile *inherit;    //   287
//				{
//					char *c;                     //   292
//					strchr(char *__s,
//						int __c);  //   292
//					{
//						iterator iter;        //   297
//						operator++(_List_iterator<BotProfile*> *const this);  //   297
//					}
//					Inherit(BotProfile *const this,
//						const class BotProfile *parent,
//						const class BotProfile *baseline);  //   314
//				}
//			}
//			{
//				char attributeName;                   //   366
//				{
//					char *c;                     //   474
//					strchr(char *__s,
//						int __c);  //   474
//					{
//						int i;                //   478
//					}
//				}
//				atof(const char *__nptr);  //   464
//				atof(const char *__nptr);  //   453
//				atoi(const char *__nptr);  //   424
//				atoi(const char *__nptr);  //   420
//				atof(const char *__nptr);  //   416
//				atoi(const char *__nptr);  //   407
//				GetCustomSkinIndex(BotProfileManager *const this,
//							const char *name,
//							const char *filename);  //   411
//				atof(const char *__nptr);  //   403
//				atof(const char *__nptr);  //   399
//			}
//			BotProfile(BotProfile *const this);  //   278
//			CloneString(const char *str);  //   334
//			push_back(list<BotProfile*, std::allocator<BotProfile*>> *const this,
//					const value_type &__x);  //   514
//			push_back(list<BotProfile*, std::allocator<BotProfile*>> *const this,
//					const value_type &__x);  //   519
//		}
//		~list(list<BotProfile*, std::allocator<BotProfile*>> *const this,
//			int const __in_chrg);  //   159
//		{
//			iterator iter;                                //   527
//			operator++(_List_iterator<BotProfile*> *const this);  //   527
//		}
//		~list(list<BotProfile*, std::allocator<BotProfile*>> *const this,
//			int const __in_chrg);  //   159
//	}
}

/* <4a8aa1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::push_back(const value_type &__x)
{
}

/* <4a8916> ../game_shared/bot/bot_profile.cpp:647 */
void BotProfileManager::FindVoiceBankIndex(const char *filename)
{
//	{
//		int index;                                            //   649
//		const_iterator it;                                    //   651
//		begin(vector<char*, std::allocator<char*>> *const this);  //   652
//		end(vector<char*, std::allocator<char*>> *const this);  //   652
//		operator++(__normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> > *const this);  //   652
//		CloneString(const char *str);  //   660
//		push_back(vector<char*, std::allocator<char*>> *const this,
//				const value_type &__x);  //   660
//	}
}

/* <4a82f1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<char*, std::allocator<char*>>::_M_insert_aux(iterator __position, const char * &__x)
{
//	{
//		char *__x_copy;                                      //   308
//		construct(new_allocator<char*> *const this,
//				pointer __p,
//				const char * &__val);  //   303
//		copy_backward<char**, char**>(char ** __first,
//						char ** __last,
//						char ** __result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<char*, std::allocator<char*>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<char**, std::vector<char*>>(const class __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__lhs,
//							const class __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<char*, std::allocator<char*>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<char*> *const this,
//				pointer __p,
//				const char * &__val);  //   332
//		__uninitialized_move_a<char**, char**, std::allocator<char*>>(char ** __first,
//										char ** __last,
//										char ** __result,
//										class allocator<char*> &__alloc);  //   340
//		__uninitialized_move_a<char**, char**, std::allocator<char*>>(char ** __first,
//										char ** __last,
//										char ** __result,
//										class allocator<char*> &__alloc);  //   346
//		_M_deallocate(_Vector_base<char*, std::allocator<char*>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <4a8177> ../game_shared/bot/bot_profile.cpp:669 */
void BotProfileManager::GetRandomProfile(BotDifficultyType difficulty, BotProfileTeamType team)
{
//	{
//		const_iterator iter;                                  //   674
//		int validCount;                                       //   677
//		int which;                                            //   690
//		operator++(_List_const_iterator<BotProfile*> *const this);  //   678
//		{
//			const class BotProfile *profile;            //   680
//			IsDifficulty(const class BotProfile *const this,
//					enum BotDifficultyType diff);  //   682
//			IsValidForTeam(const class BotProfile *const this,
//					enum BotProfileTeamType team);  //   682
//		}
//		operator++(_List_const_iterator<BotProfile*> *const this);  //   691
//		{
//			const class BotProfile *profile;            //   693
//			IsDifficulty(const class BotProfile *const this,
//					enum BotDifficultyType diff);  //   695
//			IsValidForTeam(const class BotProfile *const this,
//					enum BotProfileTeamType team);  //   695
//		}
//	}
}

/* <4a80db> ../game_shared/bot/bot_profile.cpp:621 */
void BotProfileManager::GetCustomSkinIndex(const char *name, const char *filename)
{
//	{
//		const char *skinName;                               //   623
//		GetDecoratedSkinName(const char *name,
//					const char *filename);  //   626
//		{
//			int i;                                        //   629
//		}
//	}
}

/* <4a808d> ../game_shared/bot/bot_profile.cpp:621 */
void BotProfileManager::GetCustomSkinIndex(const char *name, const char *filename)
{
//	{
//		const char *skinName;                               //   623
//		{
//			int i;                                        //   629
//		}
//	}
}

/* <4a8053> ../game_shared/bot/bot_profile.cpp:607 */
void BotProfileManager::GetCustomSkinModelname(int index)
{
}

/* <4a8019> ../game_shared/bot/bot_profile.cpp:593 */
void BotProfileManager::GetCustomSkinFname(int index)
{
}

/* <4a7fdf> ../game_shared/bot/bot_profile.cpp:579 */
void BotProfileManager::GetCustomSkin(int index)
{
}

/* <4a7dfd> ../game_shared/bot/bot_profile.cpp:532 */
void BotProfileManager::~BotProfileManager(void)
{
//	{
//		iterator it;                                          //   536
//		begin(vector<char*, std::allocator<char*>> *const this);  //   537
//		end(vector<char*, std::allocator<char*>> *const this);  //   537
//		operator++(__normal_iterator<char**, std::vector<char*, std::allocator<char*>> > *const this);  //   537
//		clear(vector<char*, std::allocator<char*>> *const this);  //   541
//	}
//	~vector(vector<char*, std::allocator<char*>> *const this,
//		int const __in_chrg);  //   532
//	~list(list<BotProfile*, std::allocator<BotProfile*>> *const this,
//		int const __in_chrg);  //   532
}

/* <4a7dca> ../game_shared/bot/bot_profile.cpp:532 */
void BotProfileManager::~BotProfileManager(int const __in_chrg)
{
//	{
//		iterator it;                                          //   536
//	}
}

/* <4a7da4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::~list( int const __in_chrg)
{
}

/* <4a7c76> ../game_shared/bot/bot_profile.cpp:548 */
void BotProfileManager::Reset(void)
{
//	clear(list<BotProfile*, std::allocator<BotProfile*>> *const this);  //   553
//	{
//		iterator iter;                                        //   550
//		operator++(_List_iterator<BotProfile*> *const this);  //   550
//	}
//	{
//		int i;                                                //   555
//	}
}

/* <4a7bb2> ../game_shared/bot/bot_profile.cpp:122 */
void BotProfileManager::BotProfileManager(void)
{
//	list(list<BotProfile*, std::allocator<BotProfile*>> *const this);  //   122
//	vector(vector<char*, std::allocator<char*>> *const this);  //   122
}

/* <4a7b87> ../game_shared/bot/bot_profile.cpp:122 */
void BotProfileManager::BotProfileManager(void)
{
//	{
//		int i;                                                //   125
//	}
}

/* <4a7b5e> ../game_shared/bot/bot_profile.cpp:112 */
void BotProfile::IsValidForTeam(BotProfileTeamType team)
{
}

/* <4a7b22> ../game_shared/bot/bot_profile.cpp:99 */
void BotProfile::HasPistolPreference(void)
{
//	{
//		int i;                                                //   101
//	}
}

/* <4a7acd> ../game_shared/bot/bot_profile.cpp:78 */
void BotProfile::HasPrimaryPreference(void)
{
//	{
//		int i;                                                //    80
//		{
//			int weaponClass;                              //    82
//		}
//	}
}

/* <4a7a99> ../game_shared/bot/bot_profile.cpp:65 */
void BotProfile::GetWeaponPreferenceAsString( int i)
{
}

/* <4a7a20> ../game_shared/bot/bot_profile.h:123 */
inline void BotProfile::Inherit(BotProfile *parent, const BotProfile *baseline)
{
//	{
//		int i;                                                //   137
//	}
}

/* <4a79f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/string.h:220 */
inline char *strchr(char *__s, int __c)
{
}

/* <4a79de> ../game_shared/bot/bot_profile.h:46 */
inline void BotProfile::BotProfile(void)
{
}

/* <4a799e> ../game_shared/simple_checksum.h:12 */
inline unsigned int ComputeSimpleChecksum(const unsigned char *dataPointer, int dataLength)
{
//	{
//		unsigned int checksum;                                //    14
//		{
//			int i;                                        //    16
//		}
//	}
}

/* <4a7974> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<char*, std::allocator<char*>>::push_back(const value_type &__x)
{
}

/* <4a792c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:811 */
inline void operator!=<char* const*, char**, std::vector<char*>>(const class __normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> > &__lhs, const __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__rhs)
{
}

/* <4a790d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:740 */
inline void __normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> >::operator++(void)
{
}

/* <4a78c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:724 */
inline void __normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> >::__normal_iterator<char**>(__normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__i)
{
}

/* <4a78a3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:717 */
inline void __normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> >::__normal_iterator(void)
{
}

/* <4a7864> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<char**, std::vector<char*>>(const class __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__lhs, const __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__rhs)
{
}

/* <4a7820> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<char*, std::allocator<char*>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <4a77df> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<char**, char**>(char ** __first, char ** __last, char ** __result)
{
}

/* <4a7784> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<char**, char**, std::allocator<char*>>(char ** __first, char ** __last, char ** __result, class allocator<char*> &__alloc)
{
}

/* <4a7730> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<char**, char**, char*>(char ** __first, char ** __last, char ** __result, class allocator<char*> &const)
{
}

/* <4a76f1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<char**, char**>(char ** __first, char ** __last, char ** __result)
{
//	{
//	}
}

/* <4a76b3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<char**, char**>(char ** __first, char ** __last, char ** __result)
{
}

/* <4a7672> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<char**, char**>(char ** __first, char ** __last, char ** __result)
{
}

/* <4a7627> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, char**, char**>(char ** __first, char ** __last, char ** __result)
{
}

/* <4a75ce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, char**, char**>(char ** __first, char ** __last, char ** __result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <4a7588> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<char*>(const char **__first, const char **__last, char ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <4a753d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, char**, char**>(char ** __first, char ** __last, char ** __result)
{
}

/* <4a751d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<char**>(char ** __it)
{
}

/* <4a74c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, char**, char**>(char ** __first, char ** __last, char ** __result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <4a74a4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<char**>(char ** __it)
{
}

/* <4a7459> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<char*>(const char **__first, const char **__last, char ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <4a7415> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <4a73dd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <4a73c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_get_node(void)
{
}

/* <4a739b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<BotProfile*>>::allocate( size_type __n, const void *)
{
}

/* <4a737d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<BotProfile*>>::max_size(void)
{
}

/* <4a7359> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<char*, std::allocator<char*>>::_M_allocate( size_t __n)
{
}

/* <4a7330> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<char*>::allocate( size_type __n, const void *)
{
}

/* <4a72fc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:210 */
inline void max<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <4a72d8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<char*, std::allocator<char*>>::max_size(void)
{
}

/* <4a72ba> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<char*, std::allocator<char*>>::_M_get_Tp_allocator(void)
{
}

/* <4a729c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<char*>::max_size(void)
{
}

/* <4a7286> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(char ** __it)
{
}

/* <4a726d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<char*, std::allocator<char*>>::vector(void)
{
}

/* <4a7254> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::list(void)
{
}

/* <4a723b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<char*, std::allocator<char*>>::_Vector_base(void)
{
}

/* <4a7222> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <4a7209> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<char*>::allocator(void)
{
}

/* <4a71f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<char*>::new_allocator(void)
{
}

/* <4a71cd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<char*, std::allocator<char*>>::~vector( int const __in_chrg)
{
}

/* <4a71b4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1039 */
inline void vector<char*, std::allocator<char*>>::clear(void)
{
}

/* <4a7175> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:817 */
inline void operator!=<char**, std::vector<char*>>(const class __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__lhs, const __normal_iterator<char**, std::vector<char*, std::allocator<char*>> > &__rhs)
{
}

/* <4a7156> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<char*, std::allocator<char*>>::end(void)
{
}

/* <4a713d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:740 */
inline void __normal_iterator<char**, std::vector<char*, std::allocator<char*>> >::operator++(void)
{
}

/* <4a710b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<char*, std::allocator<char*>>::begin(void)
{
}

/* <4a70f2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:717 */
inline void __normal_iterator<char**, std::vector<char*, std::allocator<char*>> >::__normal_iterator(void)
{
}

/* <4a70cf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::~_List_base( int const __in_chrg)
{
}

/* <4a70b6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::clear(void)
{
}

/* <4a708d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<BotProfile*>::operator!=(const _Self &__x)
{
}

/* <4a7074> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::end(void)
{
}

/* <4a705b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<BotProfile*>::operator++(void)
{
}

/* <4a6ff9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <4a6fd5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<BotProfile*>(BotProfile *&const __r)
{
}

/* <4a6fbc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_get_Tp_allocator(void)
{
}

/* <4a6f9e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_get_Node_allocator(void)
{
}

/* <4a6f72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<BotProfile*>::allocator<std::_List_node<BotProfile*>>(allocator<std::_List_node<BotProfile*>> &const)
{
}

/* <4a6f4e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<BotProfile*>::new_allocator(void)
{
}

/* <4a6f35> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_List_base(void)
{
}

/* <4a6f1c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_init(void)
{
}

/* <4a6f03> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <4a6eea> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<BotProfile*>>::allocator(void)
{
}

/* <4a6ed1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<BotProfile*>>::new_allocator(void)
{
}

/* <4a6eb3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<char*, std::allocator<char*>>::size(void)
{
}

/* <4a6e7f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<BotProfile*>::construct( pointer __p, const BotProfile * &__val)
{
}

/* <4a6e55> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1253 */
inline void vector<char*, std::allocator<char*>>::_M_erase_at_end( pointer __pos)
{
}

/* <4a6e3c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<char*, std::allocator<char*>>::_M_get_Tp_allocator(void)
{
}

/* <4a6dff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<char**, char*>(char ** __first, char ** __last, class allocator<char*> &const)
{
}

/* <4a6dcf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<char**>(char ** __first, char ** __last)
{
}

/* <4a6db1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<char**>(char **, char **)
{
}

/* <4a6d8e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<char*, std::allocator<char*>>::~_Vector_base( int const __in_chrg)
{
}

/* <4a6d5a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<char*, std::allocator<char*>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <4a6d31> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<char*>::deallocate( pointer __p, size_type)
{
}

/* <4a6d07> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <4a6cdf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<char*>::~allocator( int const __in_chrg)
{
}

/* <4a6cbc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<char*>::~new_allocator( int const __in_chrg)
{
}

/* <4a6c92> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<BotProfile*, std::allocator<BotProfile*>>::_M_put_node(_List_node<BotProfile*> *__p)
{
}

/* <4a6c69> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<BotProfile*>>::deallocate( pointer __p, size_type)
{
}

/* <4a6c41> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<BotProfile*>::~allocator( int const __in_chrg)
{
}

/* <4a6c1e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<BotProfile*>::~new_allocator( int const __in_chrg)
{
}

/* <4a6bf5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<BotProfile*>::destroy( pointer __p)
{
}

/* <4a6bca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <4a6ba2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<BotProfile*>>::~allocator( int const __in_chrg)
{
}

/* <4a6b7a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<BotProfile*>>::~new_allocator( int const __in_chrg)
{
}

/* <4a6b41> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<char*>::construct( pointer __p, const char * &__val)
{
}

/* <4a6b23> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<char* const*, std::vector<char*, std::allocator<char*>> >::base(void)
{
}

/* <4a6b05> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<char**, std::vector<char*, std::allocator<char*>> >::base(void)
{
}

/* <4a6ad6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<char**, std::vector<char*, std::allocator<char*>> >::__normal_iterator(const char ** &__i)
{
}

/* <4a6ab8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::begin(void)
{
}

/* <4a6a8f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<BotProfile*>::_List_iterator(_List_node_base *__x)
{
}

/* <4a6a65> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotProfile*>::operator!=(const _Self &__x)
{
}

/* <4a6a4c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::end(void)
{
}

/* <4a6a33> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotProfile*>::operator++(void)
{
}

/* <4a6a0d> ../game_shared/bot/bot_profile.cpp:112 */
void BotProfile::IsValidForTeam(BotProfileTeamType team)
{
}

/* <4a69d6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<BotProfile*>::_List_const_iterator(void)
{
}

/* <4a69b8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::begin(void)
{
}

/* <4a698f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotProfile*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4a693f> ../game_shared/bot/bot_profile.cpp:52 */
const char *GetDecoratedSkinName(const char *name, const char *filename)
{
//	{
//		int const BufLen;                                      //    57
//		char buf;                                             //    59
//	}
}

/* <4a6919> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <4a68f2> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <4a68cb> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <4a68b2> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <4a6894> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4a6845> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4a67fb> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4a67c0> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <4a6771> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4a66f7> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4a66cb> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4a666f> ../game_shared/bot/bot_profile.h:115 */
inline void BotProfile::IsDifficulty(BotDifficultyType diff)
{
}

/* <4a6651> ../game_shared/bot/bot_profile.h:64 */
inline void BotProfile::GetName(void)
{
}

/* <4a6607> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <49fd8b> ../game_shared/bot/bot_manager.cpp:355 */
void CBotManager::IsLineBlockedBySmoke(const Vector *from, const Vector *to)
{
//	{
//		float const smokeRadiusSq;                             //   357
//		float totalSmokedLength;                              //   358
//		Vector sightDir;                                //   361
//		float sightLength;                                    //   362
//		iterator iter;                                        //   365
//		float const maxSmokedLength;                           //   470
//		operator-(const Vector *const this,
//				const Vector &v);  //   361
//		NormalizeInPlace(Vector *const this);  //   362
//		{
//			class ActiveGrenade *ag;                     //   368
//			{
//				const Vector *smokeOrigin;    //   384
//				Vector toGrenade;               //   386
//				float alongDist;                      //   388
//				Vector close;                   //   391
//				Vector toClose;                 //   402
//				float lengthSq;                       //   403
//				operator-(const Vector *const this,
//						const Vector &v);  //   386
//				DotProduct(Vector &a,
//						const Vector &b);  //   388
//				operator-(const Vector *const this,
//						const Vector &v);  //   402
//				LengthSquared(const Vector *const this);  //   403
//				{
//					float fromSq;                 //   409
//					float toSq;                   //   410
//					operator-(const Vector *const this,
//							const Vector &v);  //   410
//					LengthSquared(const Vector *const this);  //   410
//					LengthSquared(const Vector *const this);  //   409
//					{
//						float halfSmokedLength; //   424
//						operator-(const Vector *const this,
//								const Vector &v);  //   429
//						Length(const Vector *const this);  //   429
//						Length(const Vector *const this);  //   434
//					}
//					operator-(const Vector *const this,
//							const Vector &v);  //   418
//					Length(const Vector *const this);  //   418
//					{
//						float halfSmokedLength; //   443
//						Vector v;       //   445
//						operator-(const Vector *const this,
//								const Vector &v);  //   445
//						DotProduct(Vector &a,
//								const Vector &b);  //   446
//						operator-(const Vector *const this,
//								const Vector &v);  //   449
//						Length(const Vector *const this);  //   449
//						Length(const Vector *const this);  //   454
//					}
//					{
//						float smokedLength;   //   461
//					}
//				}
//				operator*(const Vector *const this,
//						float fl);  //   399
//				operator+(const Vector *const this,
//						const Vector &v);  //   399
//			}
//			operator++(_List_iterator<ActiveGrenade*> *const this);  //   379
//			erase(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this,
//				iterator __position);  //   374
//		}
//	}
}

/* <49fc24> ../game_shared/bot/bot_manager.cpp:317 */
void CBotManager::IsInsideSmokeCloud(const Vector *pos)
{
//	{
//		iterator iter;                                        //   319
//		{
//			class ActiveGrenade *ag;                     //   322
//			{
//				const Vector *smokeOrigin;    //   338
//				operator-(const Vector *const this,
//						const Vector &v);  //   340
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   340
//			}
//			operator++(_List_iterator<ActiveGrenade*> *const this);  //   333
//			erase(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this,
//				iterator __position);  //   328
//		}
//	}
}

/* <49faf3> ../game_shared/bot/bot_manager.cpp:305 */
void CBotManager::DestroyAllGrenades(void)
{
//	clear(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this);  //   310
//	{
//		iterator iter;                                        //   307
//		end(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this);  //   307
//		operator++(_List_iterator<ActiveGrenade*> *const this);  //   307
//	}
}

/* <49f9fc> ../game_shared/bot/bot_manager.cpp:285 */
void CBotManager::ValidateActiveGrenades(void)
{
//	{
//		iterator iter;                                        //   287
//		{
//			class ActiveGrenade *ag;                     //   290
//			erase(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this,
//				iterator __position);  //   295
//			operator++(_List_iterator<ActiveGrenade*> *const this);  //   299
//		}
//	}
}

/* <49f95a> ../game_shared/bot/bot_manager.cpp:267 */
void CBotManager::RemoveGrenade(CGrenade *grenade)
{
//	{
//		iterator iter;                                        //   269
//		end(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this);  //   269
//		operator++(_List_iterator<ActiveGrenade*> *const this);  //   269
//		{
//			class ActiveGrenade *ag;                     //   271
//		}
//	}
}

/* <49f7ff> ../game_shared/bot/bot_manager.cpp:257 */
void CBotManager::AddGrenade(int type, class CGrenade *grenade)
{
//	{
//		class ActiveGrenade *ag;                             //   259
//		push_back(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this,
//				const value_type &__x);  //   260
//	}
}

/* <49f7a6> ../game_shared/bot/bot_manager.cpp:205 */
void CBotManager::GetNavMapFilename(void)
{
//	{
//		char filename;                                        //   207
//	}
}

/* <49f733> ../game_shared/bot/bot_manager.cpp:69 */
void CBotManager::CBotManager(void)
{
//	list(list<ActiveGrenade*, std::allocator<ActiveGrenade*>> *const this);  //    69
}

/* <49f71a> ../game_shared/bot/bot_manager.cpp:69 */
void CBotManager::CBotManager(void)
{
}

/* <49f6d7> ../game_shared/bot/bot_manager.cpp:58 */
/* linkage=_Z15NameToGameEventPKc */
enum GameEventType NameToGameEvent(const char *name)
{
//	{
//		int i;                                                //    60
//	}
}

/* <49f586> ../game_shared/bot/bot_manager.cpp:78 */
void CBotManager::RestartRound(void)
{
//	DestroyAllGrenades(CBotManager *const this);  //    97
}

/* <49f55f> ../game_shared/bot/bot_manager.cpp:305 */
void CBotManager::DestroyAllGrenades(void)
{
//	{
//		iterator iter;                                        //   307
//	}
}

/* <49f17b> ../game_shared/bot/bot_manager.cpp:219 */
void CBotManager::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int i;                                                //   222
//		{
//			class CBasePlayer *player;                   //   224
//			class CBot *bot;                             //   242
//			FNullEnt(entvars_t *pev);  //   229
//		}
//	}
}

/* <49f13c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <49f112> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::push_back(const value_type &__x)
{
}

/* <49f0ce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <49f096> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <49f07d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_get_node(void)
{
}

/* <49f054> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::allocate( size_type __n, const void *)
{
}

/* <49f036> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::max_size(void)
{
}

/* <49f01d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::clear(void)
{
}

/* <49efd9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <49ef98> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <49ef7f> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <49ef38> ../game_shared/bot/bot_manager.h:51 */
inline void ActiveGrenade::GetDetonationPosition(void)
{
}

/* <49ef07> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:109 */
void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::erase(iterator __position)
{
//	{
//		iterator __ret;                                       //   112
//	}
}

/* <49eed4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1530 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_erase( iterator __position)
{
//	{
//		_Node *__n;                                          //  1533
//	}
}

/* <49eeb0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<ActiveGrenade*>(ActiveGrenade *&const __r)
{
}

/* <49ee97> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_get_Tp_allocator(void)
{
}

/* <49ee79> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_get_Node_allocator(void)
{
}

/* <49ee4d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<ActiveGrenade*>::allocator<std::_List_node<ActiveGrenade*>>(allocator<std::_List_node<ActiveGrenade*>> &const)
{
}

/* <49ee29> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<ActiveGrenade*>::new_allocator(void)
{
}

/* <49ee10> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::list(void)
{
}

/* <49edf7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_List_base(void)
{
}

/* <49edde> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_init(void)
{
}

/* <49edc0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <49eda2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<ActiveGrenade*>>::allocator(void)
{
}

/* <49ed89> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::new_allocator(void)
{
}

/* <49ed55> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<ActiveGrenade*>::construct( pointer __p, const ActiveGrenade * &__val)
{
}

/* <49ed2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_put_node(_List_node<ActiveGrenade*> *__p)
{
}

/* <49ecfd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::deallocate( pointer __p, size_type)
{
}

/* <49ecd5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<ActiveGrenade*>::~allocator( int const __in_chrg)
{
}

/* <49ecb2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<ActiveGrenade*>::~new_allocator( int const __in_chrg)
{
}

/* <49ec89> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<ActiveGrenade*>::destroy( pointer __p)
{
}

/* <49ec60> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<ActiveGrenade*>::operator!=(const _Self &__x)
{
}

/* <49ec47> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::end(void)
{
}

/* <49ec2e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<ActiveGrenade*>::operator++(void)
{
}

/* <49ebf2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::begin(void)
{
}

/* <49ebc9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<ActiveGrenade*>::_List_iterator(_List_node_base *__x)
{
}

/* <49ebab> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <49eb87> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <49eb5e> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <49eb36> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <49eb0c> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <49eadc> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <49ea83> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <49ea2a> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <49e9d1> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <49e992> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <49e968> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <49e90f> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <49e8b9> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <49e892> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <49e879> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <49e85b> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <49e83d> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <49e824> ../game_shared/bot/bot_manager.h:50 */
inline void ActiveGrenade::GetID(void)
{
}

/* <49e7fb> ../game_shared/bot/bot_manager.h:49 */
inline void ActiveGrenade::IsEntity(CGrenade *grenade)
{
}

/* <49e7dd> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <49e78e> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <49e744> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <49e709> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <49e6e2> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <49e5c8> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <49e59c> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <49e57e> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <49e556> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <49e52e> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <49e504> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <49e4dc> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <490710> ../game_shared/bot/bot.cpp:622 */
void ActiveGrenade::GetPosition(void)
{
}

/* <4906e1> ../game_shared/bot/bot.cpp:610 */
void ActiveGrenade::IsValid(void)
{
}

/* <49069d> ../game_shared/bot/bot.cpp:597 */
void ActiveGrenade::OnEntityGone(void)
{
//	{
//		float const smokeLingerTime;                           //   602
//	}
}

/* <49066c> ../game_shared/bot/bot.cpp:588 */
void ActiveGrenade::ActiveGrenade(int weaponID, class CGrenade *grenadeEntity)
{
}

/* <490636> ../game_shared/bot/bot.cpp:588 */
void ActiveGrenade::ActiveGrenade(int weaponID, class CGrenade *grenadeEntity)
{
}

/* <490561> ../game_shared/bot/bot.cpp:557 */
void CBot::PrintIfWatched( char *format, ...)
{
//	IsLocalPlayerWatchingMe(const class CBot *const this);  //   562
//	{
//		va_list varg;                                         //   565
//		char buffer;                                          //   566
//		const char *name;                                   //   569
//	}
}

/* <4904f2> ../game_shared/bot/bot.cpp:536 */
void CBot::Print( char *format, ...)
{
//	{
//		va_list varg;                                         //   538
//		char buffer;                                          //   539
//	}
}

/* <490489> ../game_shared/bot/bot.cpp:503 */
void CBot::IsLocalPlayerWatchingMe(void)
{
//	{
//		int myIndex;                                          //   509
//		class CBasePlayer *player;                           //   511
//		entindex(CBaseEntity *const this);  //   509
//	}
}

/* <490456> ../game_shared/bot/bot.cpp:503 */
void CBot::IsLocalPlayerWatchingMe(void)
{
//	{
//		int myIndex;                                          //   509
//		class CBasePlayer *player;                           //   511
//	}
}

/* <490338> ../game_shared/bot/bot.cpp:467 */
void CBot::GetFriendsRemaining(void)
{
//	{
//		int count;                                            //   469
//		{
//			int i;                                        //   471
//			{
//				class CBaseEntity *player;           //   473
//				FNullEnt(entvars_t *pev);  //   478
//				IsEnemy(const class CBot *const this,
//					class CBaseEntity *ent);  //   484
//			}
//		}
//	}
}

/* <49021a> ../game_shared/bot/bot.cpp:434 */
void CBot::GetEnemiesRemaining(void)
{
//	{
//		int count;                                            //   436
//		{
//			int i;                                        //   438
//			{
//				class CBaseEntity *player;           //   440
//				FNullEnt(entvars_t *pev);  //   445
//				IsEnemy(const class CBot *const this,
//					class CBaseEntity *ent);  //   451
//			}
//		}
//	}
}

/* <4901ac> ../game_shared/bot/bot.cpp:410 */
void CBot::IsEnemy(CBaseEntity *ent)
{
//	{
//		class CBasePlayer *player;                           //   420
//	}
//	IsEnemy(const class CBot *const this,
//		class CBaseEntity *ent);  //   410
}

/* <49011b> ../game_shared/bot/bot.cpp:372 */
void CBot::ThrottledMsec(void)
{
//	{
//		int iNewMsec;                                         //   374
//	}
}

/* <4900fa> ../game_shared/bot/bot.cpp:362 */
void CBot::ResetCommand(void)
{
}

/* <4900d4> ../game_shared/bot/bot.cpp:327 */
void CBot::IsUsingScope(void)
{
}

/* <490096> ../game_shared/bot/bot.cpp:307 */
void CBot::IsActiveWeaponOutOfAmmo(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   309
//	}
}

/* <490058> ../game_shared/bot/bot.cpp:293 */
void CBot::IsActiveWeaponClipEmpty(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   295
//	}
}

/* <490008> ../game_shared/bot/bot.cpp:275 */
void CBot::GetActiveWeaponAmmoRatio(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   277
//		iMaxClip(CBasePlayerItem *const this);  //   286
//	}
}

/* <48ffe7> ../game_shared/bot/bot.cpp:196 */
void CBot::IsJumping(void)
{
}

/* <48ffa8> ../game_shared/bot/bot.cpp:97 */
void CBot::BotThink(void)
{
//	ResetCommand(CBot *const this);  //   109
}

/* <48fed0> ../game_shared/bot/bot.cpp:28 */
void CBot::CBot(void)
{
//	CBasePlayer(CBasePlayer *const this);  //    28
//	{
//		unsigned int nextID;                                  //    34
//	}
}

/* <48fea4> ../game_shared/bot/bot.cpp:28 */
void CBot::CBot(void)
{
//	{
//		unsigned int nextID;                                  //    34
//	}
}

/* <48fe00> ../game_shared/bot/bot.cpp:160 */
void CBot::Jump(bool mustJump)
{
//	{
//		float const sanityInterval;                            //   173
//		IsJumping(CBot *const this);  //   162
//		{
//			float const minJumpInterval;                   //   167
//		}
//	}
//	Jump(CBot *const this,
//		bool mustJump);  //   160
}

/* <48fde7> ../game_shared/bot/bot.cpp:196 */
void CBot::IsJumping(void)
{
}

/* <48fd89> ../game_shared/bot/bot.h:138 */
void CBot::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
}

/* <48fd47> ../game_shared/bot/bot.h:144 */
void CBot::Killed(entvars_t *pevAttacker, int iGib)
{
}

/* <48fbfc> ../game_shared/bot/bot.h:355 */
void CBot::IsPlayerLookingAtMe(CBasePlayer *other)
{
//	{
//		Vector toOther;                                 //   357
//		Vector otherDir;                                //   362
//		float const lookAtCos;                                 //   365
//		operator-(const Vector *const this,
//				const Vector &v);  //   357
//		NormalizeInPlace(Vector *const this);  //   358
//		operator+(const Vector *const this,
//				const Vector &v);  //   361
//		{
//			Vector vec;                             //   369
//		}
//	}
}

/* <48fbbd> ../game_shared/bot/bot.cpp:57 */
void CBot::Spawn(void)
{
//	ResetCommand(CBot *const this);  //    80
}

/* <48fae3> ../game_shared/bot/bot.h:340 */
void CBot::IsPlayerFacingMe(CBasePlayer *other)
{
//	{
//		Vector toOther;                                 //   342
//		Vector otherDir;                                //   346
//		operator-(const Vector *const this,
//				const Vector &v);  //   342
//		operator+(const Vector *const this,
//				const Vector &v);  //   345
//	}
}

/* <48fa37> ../game_shared/bot/bot.cpp:88 */
void CBot::GetAutoaimVector(float flDelta)
{
//	operator+(const Vector *const this,
//			const Vector &v);  //    90
//	Vector(Vector *const this,
//		const Vector &v);  //    92
}

/* <48f9e8> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <48f989> ../game_shared/bot/bot.cpp:338 */
void CBot::ExecuteCommand(void)
{
//	{
//		byte adjustedMSec;                                    //   340
//		ThrottledMsec(const class CBot *const this);  //   343
//	}
}

/* <48f963> ../game_shared/bot/bot.cpp:266 */
void CBot::Reload(void)
{
}

/* <48f93d> ../game_shared/bot/bot.cpp:260 */
void CBot::SecondaryAttack(void)
{
}

/* <48f917> ../game_shared/bot/bot.cpp:246 */
void CBot::TogglePrimaryAttack(void)
{
}

/* <48f8f1> ../game_shared/bot/bot.cpp:240 */
void CBot::ClearPrimaryAttack(void)
{
}

/* <48f8cb> ../game_shared/bot/bot.cpp:234 */
void CBot::PrimaryAttack(void)
{
}

/* <48f8a5> ../game_shared/bot/bot.cpp:227 */
void CBot::UseEnvironment(void)
{
}

/* <48f87f> ../game_shared/bot/bot.cpp:220 */
void CBot::StandUp(void)
{
}

/* <48f859> ../game_shared/bot/bot.cpp:214 */
void CBot::Crouch(void)
{
}

/* <48f81b> ../game_shared/bot/bot.cpp:187 */
void CBot::ClearMovement(void)
{
//	ResetCommand(CBot *const this);  //   189
}

/* <48f7dd> ../game_shared/bot/bot.cpp:150 */
void CBot::StrafeRight(void)
{
//	GetMoveSpeed(CBot *const this);  //   152
}

/* <48f79f> ../game_shared/bot/bot.cpp:140 */
void CBot::StrafeLeft(void)
{
//	GetMoveSpeed(CBot *const this);  //   142
}

/* <48f761> ../game_shared/bot/bot.cpp:130 */
void CBot::MoveBackward(void)
{
//	GetMoveSpeed(CBot *const this);  //   132
}

/* <48f723> ../game_shared/bot/bot.cpp:119 */
void CBot::MoveForward(void)
{
//	GetMoveSpeed(CBot *const this);  //   121
}

/* <48f6ef> ../game_shared/bot/bot.cpp:50 */
void CBot::Initialize(const class BotProfile *profile)
{
}

/* <48f6c9> ../game_shared/bot/bot.h:275 */
void CBot::Walk(void)
{
}

/* <48f6a3> ../game_shared/bot/bot.h:269 */
void CBot::Run(void)
{
}

/* <48f61d> ../game_shared/bot/bot.h:253 */
void CBot::SetModel(const char *modelName)
{
//	edict(CBaseEntity *const this);  //   255
//	entindex(CBaseEntity *const this);  //   255
}

/* <48f5f7> ../game_shared/bot/bot.h:200 */
void CBot::Think(void)
{
}

/* <48f5a7> ../game_shared/bot/bot.h:152 */
void CBot::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
}

/* <48f573> ../game_shared/bot/bot.h:149 */
void CBot::OnTouchingWeapon(CWeaponBox *box)
{
}

/* <48f54d> ../game_shared/bot/bot.h:84 */
void CBot::IsBot(void)
{
}

/* <48f527> ../cstrike/dlls/player.h:541 */
void CBasePlayer::ObjectCaps(void)
{
}

/* <48f501> ../cstrike/dlls/player.h:496 */
void CBasePlayer::IsNetClient(void)
{
}

/* <48f4db> ../cstrike/dlls/player.h:490 */
void CBasePlayer::IsPlayer(void)
{
}

/* <48f4b5> ../cstrike/dlls/player.h:489 */
void CBasePlayer::ShouldFadeOnDeath(void)
{
}

/* <48f48f> ../cstrike/dlls/player.h:488 */
void CBasePlayer::IsAlive(void)
{
}

/* <48f469> ../cstrike/dlls/player.h:487 */
void CBasePlayer::IsSneaking(void)
{
}

/* <48f443> ../cstrike/dlls/player.h:486 */
void CBasePlayer::StopSneaking(void)
{
}

/* <48f41d> ../cstrike/dlls/player.h:485 */
void CBasePlayer::StartSneaking(void)
{
}

/* <48f36f> ../cstrike/dlls/player.h:484 */
void CBasePlayer::BodyTarget(Vector &posSrc)
{
//	operator*(const Vector *const this,
//			float fl);  //   484
//	operator+(const Vector *const this,
//			const Vector &v);  //   484
}

/* <48f349> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <48f323> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <48f2fd> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <48f2d7> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <48f2a2> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <48f217> ../cstrike/dlls/cbase.h:384 */
Vector CBaseEntity::EarPosition(void)
{
//	operator+(const Vector ::EarPosition(//			const Vector &v);  //   384
}

/* <48f192> ../cstrike/dlls/cbase.h:383 */
Vector CBaseEntity::EyePosition(void)
{
//	operator+(const Vector ::EyePosition(//			const Vector &v);  //   383
}

/* <48f0e8> ../cstrike/dlls/cbase.h:382 */
Vector CBaseEntity::Center(void)
{
//	operator+(const Vector ::Center(//			const Vector &v);  //   382
//	operator*(const Vector *const this,
//			float fl);  //   382
}

/* <48f0c2> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <48f09c> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <48f067> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <48f008> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <48efd3> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <48efac> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <48ef86> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <48ef52> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <48ef1e> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <48eef8> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <48ee8a> ../cstrike/dlls/cbase.h:215 */
int CBaseEntity::IsMoving(void)
{
//	operator!=(const Vector ::IsMoving(//			const Vector &v);  //   215
}

/* <48ee64> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <48ee32> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <48edfe> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <48edca> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <48eda4> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <48ed7e> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <48ed5e> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <48ed3f> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <48ed1f> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <48ecff> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <48ec60> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <48ec2c> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <48ec0e> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <48ebbe> ../game_shared/bot/bot.cpp:410 */
void CBot::IsEnemy(CBaseEntity *ent)
{
//	{
//		class CBasePlayer *player;                           //   420
//	}
}

/* <48eba5> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <48eb7e> ../game_shared/bot/bot.cpp:372 */
void CBot::ThrottledMsec(void)
{
//	{
//		int iNewMsec;                                         //   374
//	}
}

/* <48eb65> ../game_shared/bot/bot.cpp:362 */
void CBot::ResetCommand(void)
{
}

/* <48eb27> ../game_shared/bot/bot.cpp:160 */
void CBot::Jump(bool mustJump)
{
//	{
//		float const sanityInterval;                            //   173
//		{
//			float const minJumpInterval;                   //   167
//		}
//	}
}

/* <48eb06> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <48ea6f> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <48ea00> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <48e9c1> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <48e9a8> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <48e98a> ../game_shared/bot/bot.h:259 */
inline void CBot::GetMoveSpeed(void)
{
}

/* <48e96c> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <48e94e> ../cstrike/dlls/weapons.h:297 */
inline void CBasePlayerItem::iMaxClip(void)
{
}

/* <48e8f0> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <48e8a1> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <48e86b> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <48e84d> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <48e780> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <48e71d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <48e6f6> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <48e6cf> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <48e69b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <48e674> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <48e648> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <48e62a> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <48e602> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <487eeb> ../cstrike/dlls/hostage/hostage_localnav.cpp:851 */
void Think(void)
{
//	{
//		float flElapsedTime;                                  //   853
//		class EHANDLE hCallback;                              //   854
//		cvar_t *sv_stepsize;                                 //   855
//		{
//			class CHostage *pHostage;                    //   909
//			GetClassPtr<CHostage>(CHostage *a);  //   911
//		}
//	}
}

/* <487e14> ../cstrike/dlls/hostage/hostage_localnav.cpp:976 */
void HostagePrethink(void)
{
//	{
//		int iCount;                                           //   978
//		GetClassPtr<CHostage>(CHostage *a);  //   984
//	}
}

/* <487e03> ../cstrike/dlls/hostage/hostage_localnav.cpp:964 */
void Reset(void)
{
}

/* <487ccd> ../cstrike/dlls/hostage/hostage_localnav.cpp:922 */
void CLocalNav::RequestNav(CHostage *pCaller)
{
//	{
//		int curr;                                             //   932
//		int found;                                            //   933
//		{
//			int i;                                        //   934
//			{
//				class CHostage *pQueueItem;          //   936
//				GetClassPtr<CHostage>(CHostage *a);  //   938
//			}
//		}
//	}
}

/* <487588> ../cstrike/dlls/hostage/hostage_localnav.cpp:824 */
void CLocalNav::LadderHit(Vector &vecSource, Vector &vecDest, TraceResult &tr)
{
//	{
//		Vector vecFwd;                                  //   826
//		Vector vecRight;                                //   827
//		Vector vecUp;                                   //   828
//		operator-(const Vector *const this);  //   832
//		UTIL_MakeVectorsPrivate(Vector &vecAngles,
//					float *p_vForward,
//					float *p_vRight,
//					float *p_vUp);  //   832
//		operator*(const Vector *const this,
//				float fl);  //   834
//		operator*(const Vector *const this,
//				float fl);  //   834
//		operator+(const Vector *const this,
//				const Vector &v);  //   834
//		operator+(const Vector *const this,
//				const Vector &v);  //   834
//		operator*(const Vector *const this,
//				float fl);  //   836
//		operator+(const Vector *const this,
//				const Vector &v);  //   836
//		operator*(const Vector *const this,
//				float fl);  //   836
//		operator-(const Vector *const this,
//				const Vector &v);  //   836
//		operator*(const Vector *const this,
//				float fl);  //   838
//		operator*(const Vector *const this,
//				float fl);  //   838
//		operator*(const Vector *const this,
//				float fl);  //   838
//		operator+(const Vector *const this,
//				const Vector &v);  //   838
//		operator+(const Vector *const this,
//				const Vector &v);  //   838
//		operator+(const Vector *const this,
//				const Vector &v);  //   838
//		operator*(const Vector *const this,
//				float fl);  //   840
//		operator*(const Vector *const this,
//				float fl);  //   840
//		operator+(const Vector *const this,
//				const Vector &v);  //   840
//		operator*(const Vector *const this,
//				float fl);  //   840
//		operator-(const Vector *const this,
//				const Vector &v);  //   840
//		operator+(const Vector *const this,
//				const Vector &v);  //   840
//		operator*(const Vector *const this,
//				float fl);  //   842
//		operator*(const Vector *const this,
//				float fl);  //   842
//		operator+(const Vector *const this,
//				const Vector &v);  //   842
//		operator+(const Vector *const this,
//				const Vector &v);  //   842
//		operator*(const Vector *const this,
//				float fl);  //   842
//		operator-(const Vector *const this,
//				const Vector &v);  //   842
//		operator*(const Vector *const this,
//				float fl);  //   844
//		operator+(const Vector *const this,
//				const Vector &v);  //   844
//		operator*(const Vector *const this,
//				float fl);  //   844
//		operator-(const Vector *const this,
//				const Vector &v);  //   844
//		operator*(const Vector *const this,
//				float fl);  //   844
//		operator-(const Vector *const this,
//				const Vector &v);  //   844
//	}
}

/* <4873b3> ../cstrike/dlls/hostage/hostage_localnav.cpp:713 */
void CLocalNav::StepJumpable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecStepStart;                            //   715
//		Vector vecStepDest;                             //   716
//		BOOL fFwdTrace;                                       //   717
//		float flFwdFraction;                                  //   718
//		float flJumpHeight;                                   //   719
//		BOOL fJumpClear;                                      //   720
//		edict_t *hit;                                        //   721
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   736
//		operator-(const Vector *const this,
//				const Vector &v);  //   750
//		Length2D(const Vector *const this);  //   750
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   775
//	}
}

/* <4871ef> ../cstrike/dlls/hostage/hostage_localnav.cpp:662 */
void CLocalNav::StepTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecStepStart;                            //   664
//		Vector vecStepDest;                             //   665
//		BOOL fFwdTrace;                                       //   666
//		float flFwdFraction;                                  //   667
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   676
//		operator-(const Vector *const this,
//				const Vector &v);  //   684
//		Length(const Vector *const this);  //   684
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   693
//	}
}

/* <487085> ../cstrike/dlls/hostage/hostage_localnav.cpp:635 */
void CLocalNav::LadderTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecLadderStart;                          //   637
//		Vector vecLadderDest;                           //   638
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   646
//		operator-(const Vector *const this,
//				const Vector &v);  //   651
//		Length(const Vector *const this);  //   651
//	}
}

/* <486ea0> ../cstrike/dlls/hostage/hostage_localnav.cpp:593 */
void CLocalNav::SlopeTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecSlopeEnd;                             //   595
//		Vector vecDown;                                 //   596
//		operator-(const Vector *const this,
//				const Vector &v);  //   599
//		Length2D(const Vector *const this);  //   599
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   601
//		operator-(const Vector *const this,
//				const Vector &v);  //   606
//		Length2D(const Vector *const this);  //   606
//		PathClear(CLocalNav *const this,
//				Vector &vecOrigin,
//				Vector &vecDest,
//				int fNoMonsters,
//				TraceResult &tr);  //   615
//	}
}

/* <486d8d> ../cstrike/dlls/hostage/hostage_localnav.cpp:304 */
void CLocalNav::FindPath(Vector &vecStart, Vector &vecDest, float flTargetRadius, int fNoMonsters)
{
//	{
//		node_index_t nIndexBest;                              //   306
//		{
//			localnode_t *node;                           //   325
//			Vector vecNodeLoc;                      //   326
//			float flDistToDest;                           //   327
//			GetNode(CLocalNav *const this,
//				node_index_t nindex);  //   329
//			operator-(const Vector *const this,
//					const Vector &v);  //   332
//			Length2D(const Vector *const this);  //   332
//		}
//	}
}

/* <486d46> ../cstrike/dlls/hostage/hostage_localnav.cpp:123 */
void CLocalNav::AddPathNodes(node_index_t nindexSource, int fNoMonsters)
{
}

/* <486adb> ../cstrike/dlls/hostage/hostage_localnav.cpp:138 */
void CLocalNav::AddPathNode(node_index_t nindexSource, int offsetX, int offsetY, int fNoMonsters)
{
//	{
//		int bDepth;                                           //   140
//		Vector vecSource;                               //   141
//		Vector vecDest;                                 //   142
//		int offsetXAbs;                                       //   143
//		int offsetYAbs;                                       //   144
//		{
//			localnode_t *nodeSource;                     //   156
//			localnode_t *nodeCurrent;                    //   157
//			node_index_t nindexCurrent;                   //   158
//			GetNode(CLocalNav *const this,
//				node_index_t nindex);  //   160
//			NodeExists(CLocalNav *const this,
//					int offsetX,
//					int offsetY);  //   166
//			operator+(const Vector *const this,
//					const Vector &v);  //   170
//			operator*(const Vector *const this,
//					float fl);  //   170
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   149
//		operator*(const Vector *const this,
//				float fl);  //   149
//		AddNode(CLocalNav *const this,
//			node_index_t nindexParent,
//			Vector &vecLoc,
//			int offsetX,
//			int offsetY,
//			byte bDepth);  //   200
//	}
}

/* <486a56> ../cstrike/dlls/hostage/hostage_localnav.cpp:290 */
void CLocalNav::GetFurthestTraversableNode(Vector &vecStartingLoc, Vector *vecNodes, int nTotalNodes, int fNoMonsters)
{
//	{
//		int nCount;                                           //   292
//	}
}

/* <4867dc> ../cstrike/dlls/hostage/hostage_localnav.cpp:413 */
void CLocalNav::FindDirectPath(Vector &vecStart, Vector &vecDest, float flTargetRadius, int fNoMonsters)
{
//	{
//		Vector vecActualDest;                           //   415
//		Vector vecPathDir;                              //   416
//		Vector vecNodeLoc;                              //   417
//		node_index_t nindexLast;                              //   418
//		operator-(const Vector *const this,
//				const Vector &v);  //   420
//		Normalize(const Vector *const this);  //   420
//		operator*(const Vector *const this,
//				float fl);  //   422
//		operator-(const Vector *const this,
//				const Vector &v);  //   422
//		operator-(const Vector *const this,
//				const Vector &v);  //   432
//		Length2D(const Vector *const this);  //   432
//		{
//			node_index_t nindexCurrent;                   //   434
//			AddNode(CLocalNav *const this,
//				node_index_t nindexParent,
//				Vector &vecLoc,
//				int offsetX,
//				int offsetY,
//				byte bDepth);  //   438
//			operator*(const Vector *const this,
//					float fl);  //   436
//			operator+(const Vector *const this,
//					const Vector &v);  //   436
//		}
//	}
}

/* <485ecf> ../cstrike/dlls/hostage/hostage_localnav.cpp:472 */
void CLocalNav::PathTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters)
{
//	{
//		TraceResult tr;                                       //   474
//		Vector vecSrcTmp;                               //   475
//		Vector vecDestTmp;                              //   476
//		Vector vecDir;                                  //   477
//		float flTotal;                                        //   478
//		int retval;                                           //   479
//		operator-(const Vector *const this,
//				const Vector &v);  //   484
//		Normalize(const Vector *const this);  //   484
//		operator-(const Vector *const this,
//				const Vector &v);  //   486
//		Length2D(const Vector *const this);  //   486
//		{
//			BOOL fProgressThisTime;                       //   490
//			Vector vecSrcThisTime;                  //   491
//			Vector vecDropDest;                     //   558
//			PathClear(CLocalNav *const this,
//					Vector &vecOrigin,
//					Vector &vecDest,
//					int fNoMonsters,
//					TraceResult &tr);  //   506
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //   521
//			SlopeTraversable(CLocalNav *const this,
//					Vector &vecSource,
//					Vector &vecDest,
//					int fNoMonsters,
//					TraceResult &tr);  //   529
//			PathClear(CLocalNav *const this,
//					Vector &vecOrigin,
//					Vector &vecDest,
//					int fNoMonsters,
//					TraceResult &tr);  //   563
//			operator-(const Vector *const this,
//					const Vector &v);  //   583
//			Length2D(const Vector *const this);  //   583
//			operator*(const Vector *const this,
//					float fl);  //   499
//			operator+(const Vector *const this,
//					const Vector &v);  //   499
//			StepTraversable(CLocalNav *const this,
//					Vector &vecSource,
//					Vector &vecDest,
//					int fNoMonsters,
//					TraceResult &tr);  //   538
//			StepJumpable(CLocalNav *const this,
//					Vector &vecSource,
//					Vector &vecDest,
//					int fNoMonsters,
//					TraceResult &tr);  //   544
//		}
//	}
}

/* <485e40> ../cstrike/dlls/hostage/hostage_localnav.cpp:449 */
void CLocalNav::PathClear(Vector &vecOrigin, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	edict(CBaseEntity *const this);  //   452
//	PathClear(CLocalNav *const this,
//			Vector &vecOrigin,
//			Vector &vecDest,
//			int fNoMonsters,
//			TraceResult &tr);  //   449
}

/* <485d79> ../cstrike/dlls/hostage/hostage_localnav.cpp:263 */
void CLocalNav::SetupPathNodes(node_index_t nindex, Vector *vecNodes, int fNoMonsters)
{
//	{
//		node_index_t nCurrentIndex;                           //   265
//		int nNodeCount;                                       //   266
//		{
//			localnode_t *nodeCurrent;                    //   273
//			Vector vecCurrentLoc;                   //   274
//			GetNode(CLocalNav *const this,
//				node_index_t nindex);  //   276
//		}
//	}
}

/* <485c63> ../cstrike/dlls/hostage/hostage_localnav.cpp:205 */
void CLocalNav::GetBestNode(Vector &vecOrigin, Vector &vecDest)
{
//	{
//		node_index_t nindexCurrent;                           //   207
//		localnode_t *nodeCurrent;                            //   208
//		node_index_t nindexBest;                              //   209
//		float flBestVal;                                      //   210
//		{
//			float flCurrentVal;                           //   220
//			float flDistFromStart;                        //   221
//			float flDistToDest;                           //   222
//			float flZDiff;                                //   223
//			operator-(const Vector *const this,
//					const Vector &v);  //   235
//			Length(const Vector *const this);  //   235
//		}
//	}
}

/* <485c01> ../cstrike/dlls/hostage/hostage_localnav.cpp:100 */
void CLocalNav::NodeExists(int offsetX, int offsetY)
{
//	{
//		node_index_t nindexCurrent;                           //   102
//		localnode_t *nodeCurrent;                            //   103
//		GetNode(CLocalNav *const this,
//			node_index_t nindex);  //   106
//	}
}

/* <485b91> ../cstrike/dlls/hostage/hostage_localnav.cpp:74 */
void CLocalNav::AddNode(node_index_t nindexParent, Vector &vecLoc, int offsetX, int offsetY, byte bDepth)
{
//	{
//		localnode_t *nodeNew;                                //    76
//		GetNode(CLocalNav *const this,
//			node_index_t nindex);  //    81
//	}
}

/* <485b67> ../cstrike/dlls/hostage/hostage_localnav.cpp:45 */
void CLocalNav::CLocalNav(CHostage *pOwner)
{
}

/* <485b43> ../cstrike/dlls/hostage/hostage_localnav.cpp:45 */
void CLocalNav::CLocalNav(CHostage *pOwner)
{
}

/* <485b09> ../cstrike/dlls/hostage/hostage_localnav.cpp:68 */
void CLocalNav::~CLocalNav(void)
{
//	~CLocalNav(CLocalNav::~CLocalNav(//			int const __in_chrg);  //    71
}

/* <485ae8> ../cstrike/dlls/hostage/hostage_localnav.cpp:68 */
void CLocalNav::~CLocalNav(void)
{
}

/* <485ac5> ../cstrike/dlls/hostage/hostage_localnav.cpp:68 */
void CLocalNav::~CLocalNav(int const __in_chrg)
{
}

/* <485a23> ../cstrike/dlls/hostage/hostage_localnav.cpp:662 */
void CLocalNav::StepTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecStepStart;                            //   664
//		Vector vecStepDest;                             //   665
//		BOOL fFwdTrace;                                       //   666
//		float flFwdFraction;                                  //   667
//	}
}

/* <4859b2> ../cstrike/dlls/hostage/hostage_localnav.cpp:593 */
void CLocalNav::SlopeTraversable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecSlopeEnd;                             //   595
//		Vector vecDown;                                 //   596
//	}
}

/* <485905> ../cstrike/dlls/hostage/hostage_localnav.cpp:713 */
void CLocalNav::StepJumpable(Vector &vecSource, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
//	{
//		Vector vecStepStart;                            //   715
//		Vector vecStepDest;                             //   716
//		BOOL fFwdTrace;                                       //   717
//		float flFwdFraction;                                  //   718
//		float flJumpHeight;                                   //   719
//		BOOL fJumpClear;                                      //   720
//		edict_t *hit;                                        //   721
//	}
}

/* <4858e5> ../cstrike/dlls/hostage/hostage.h:32 */
inline void CHostage::CHostage(void)
{
}

/* <485887> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <485842> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <4857fd> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <4857b8> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <485779> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <48571c> ../cstrike/dlls/vector.h:108 */
inline void Vector::operator-(void)
{
}

/* <4856d5> ../cstrike/dlls/hostage/hostage_localnav.cpp:100 */
void CLocalNav::NodeExists(int offsetX, int offsetY)
{
//	{
//		node_index_t nindexCurrent;                           //   102
//		localnode_t *nodeCurrent;                            //   103
//	}
}

/* <485673> ../cstrike/dlls/hostage/hostage_localnav.cpp:74 */
void CLocalNav::AddNode(node_index_t nindexParent, Vector &vecLoc, int offsetX, int offsetY, byte bDepth)
{
//	{
//		localnode_t *nodeNew;                                //    76
//	}
}

/* <485630> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <4855d9> ../cstrike/dlls/hostage/hostage_localnav.cpp:449 */
void CLocalNav::PathClear(Vector &vecOrigin, Vector &vecDest, int fNoMonsters, TraceResult &tr)
{
}

/* <4855c0> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <485599> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <485570> ../cstrike/dlls/hostage/hostage_localnav.cpp:94 */
inline void CLocalNav::GetNode( node_index_t nindex)
{
}

/* <485552> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <48552e> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <485505> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <4854dd> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <4854b3> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <485483> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <48542a> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <4853d1> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <485378> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <485339> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <48530f> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <4852b6> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <485269> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <48524b> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <48522d> ../cstrike/dlls/hostage/hostage_localnav.h:43 */
inline void localnode_s::localnode_s(void)
{
}

/* <48520f> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <4851c0> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <485176> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <485158> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <485131> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <485118> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <485087> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <48505b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <485027> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <485007> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <484fe9> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <484fc1> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <484f97> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <484f6f> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <47837a> ../cstrike/dlls/hostage/hostage_improv.cpp:1384 */
void CHostageImprov::OnUpkeep(float deltaT)
{
}

/* <477691> ../cstrike/dlls/hostage/hostage_improv.cpp:1214 */
void CHostageImprov::UpdatePosition(float deltaT)
{
//	{
//		class CNavArea *area;                                //  1217
//		float const friction;                                  //  1344
//		float speed;                                          //  1349
//		float const maxSpeed;                                  //  1351
//		class KeepPersonalSpace spacer;                       //  1365
//		{
//			float const pushSpeed;                         //  1258
//			Vector dir;                             //  1260
//			operator-(const Vector *const this,
//					const Vector &v);  //  1260
//			NormalizeInPlace(Vector *const this);  //  1262
//			ResetJump(CHostageImprov *const this);  //  1247
//		}
//		{
//			Vector angles;                          //  1282
//			float yaw;                                    //  1284
//			float pitch;                                  //  1288
//			operator-(const Vector *const this,
//					const Vector &v);  //  1282
//		}
//		{
//			class HostagePathCost pathCost;               //  1322
//			Compute<HostagePathCost>(CNavPath *const this,
//						const Vector *start,
//						const Vector *goal,
//						class HostagePathCost &costFunc);  //  1323
//			SetPath(CNavPathFollower *const this,
//				class CNavPath *path);  //  1326
//			SetImprov(CNavPathFollower *const this,
//					class CImprov *improv);  //  1325
//			Debug(CNavPathFollower *const this,
//				bool status);  //  1328
//		}
//		IsElapsed(const class CountdownTimer *const this);  //  1333
//		ResetStuck(CNavPathFollower *const this);  //  1336
//		NormalizeInPlace(Vector2D *const this);  //  1349
//		operator*(float fl,
//				const class Vector2D &v);  //  1355
//		KeepPersonalSpace(KeepPersonalSpace *const this,
//					class CHostageImprov *improv);  //  1365
//		ForEachPlayer<KeepPersonalSpace>(KeepPersonalSpace &func);  //  1366
//		DrawAxes(Vector &origin,
//			int red,
//			int green,
//			int blue);  //  1223
//		ForEachHostage<KeepPersonalSpace>(const class CHostageManager *const this,
//							class KeepPersonalSpace &func);  //  1369
//	}
}

/* <477114> ../cstrike/dlls/hostage/hostage_improv.cpp:2558 */
void CHostageImprov::UpdateStationaryAnimation(void)
{
//	UpdateStationaryAnimation(HostageStateMachine::UpdateStationaryAnimation(//					class CHostageImprov *improv);  //  2560
}

/* <476e49> ../cstrike/dlls/hostage/hostage_improv.cpp:997 */
void CHostageImprov::TrackPath(Vector &pathGoal, float deltaT)
{
//	TrackPath(CHostageImprov *const this,
//			const Vector &pathGoal,
//			float deltaT);  //   997
}

/* <476a30> ../cstrike/dlls/hostage/hostage_improv.cpp:154 */
void CHostageImprov::MoveTowards(Vector &pos, float deltaT)
{
//	{
//		Vector move;                                    //   228
//		float accelRate;                                      //   236
//		float const crouchWalkRate;                            //   237
//		{
//			float ground;                                 //   180
//			Vector aheadRay;                        //   181
//			bool jumped;                                  //   186
//			NormalizeInPlace(Vector *const this);  //   182
//			{
//				float const farLookAheadRange;         //   189
//				Vector normal;                  //   190
//				Vector stepAhead;               //   191
//				operator*(float fl,
//						const Vector &v);  //   191
//				operator+(const Vector *const this,
//						const Vector &v);  //   191
//			}
//			{
//				float const lookAheadRange;            //   204
//				Vector stepAhead;               //   205
//				operator*(float fl,
//						const Vector &v);  //   205
//				operator+(const Vector *const this,
//						const Vector &v);  //   205
//			}
//			{
//				float const lookAheadRange;            //   216
//				Vector stepAhead;               //   217
//				operator*(float fl,
//						const Vector &v);  //   217
//				operator+(const Vector *const this,
//						const Vector &v);  //   217
//			}
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   228
//		IsZero(Vector *const this,
//			float tolerance);  //   231
//		NormalizeInPlace(Vector *const this);  //   232
//	}
}

/* <4766cc> ../cstrike/dlls/hostage/hostage_improv.cpp:2438 */
void CHostageImprov::ClearPath(void)
{
//	{
//		class Vectorconst eye;                                //  2448
//		Vector start;                                   //  2451
//		Vector end;                                     //  2452
//		TraceResult result;                                   //  2459
//		IsElapsed(const class CountdownTimer *const this);  //  2440
//		Start(CountdownTimer *const this,
//			float duration);  //  2445
//		Vector(Vector *const this,
//			const Vector &v);  //  2448
//		Vector(Vector *const this,
//			const Vector &v);  //  2451
//		operator*(const Vector *const this,
//				float fl);  //  2453
//		operator+(const Vector *const this,
//				const Vector &v);  //  2454
//		{
//			entvars_t *entity;                           //  2463
//			VARS(edict_t *pent);  //  2463
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  2467
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  2467
//			{
//				class CBaseEntity *pObject;          //  2469
//				Instance(edict_t *pent);  //  2469
//			}
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  2479
//			{
//				class CBaseEntity *pObject;          //  2481
//				Instance(edict_t *pent);  //  2481
//			}
//		}
//	}
}

/* <4763d7> ../cstrike/dlls/hostage/hostage_improv.cpp:2391 */
void CHostageImprov::Wiggle(void)
{
//	{
//		Vector dir;                                     //  2399
//		Vector lat;                                     //  2400
//		float const force;                                     //  2402
//		float const minStuckJumpTime;                          //  2423
//		IsElapsed(const class CountdownTimer *const this);  //  2393
//		GetStuckDuration(const class CNavPathFollower *const this);  //  2424
//		operator*(float fl,
//				const Vector &v);  //  2419
//		ApplyForce(CHostageImprov *const this,
//				Vector force);  //  2419
//		Start(CountdownTimer *const this,
//			float duration);  //  2396
//		Start(CountdownTimer *const this,
//			float duration);  //  2429
//		operator*(float fl,
//				const Vector &v);  //  2407
//		operator*(float fl,
//				const Vector &v);  //  2411
//		ApplyForce(CHostageImprov *const this,
//				Vector force);  //  2411
//		operator*(float fl,
//				const Vector &v);  //  2415
//	}
}

/* <476395> ../cstrike/dlls/hostage/hostage_improv.cpp:2363 */
void CHostageImprov::Wave(void)
{
//	SetPerformance(HostageAnimateState::Wave(//			enum PerformanceType performance);  //  2366
}

/* <476350> ../cstrike/dlls/hostage/hostage_improv.cpp:2349 */
void CHostageImprov::Disagree(void)
{
//	SetPerformance(HostageAnimateState::Disagree(//			enum PerformanceType performance);  //  2355
}

/* <476327> ../cstrike/dlls/hostage/hostage_improv.cpp:2339 */
void CHostageImprov::Agree(void)
{
}

/* <4762fe> ../cstrike/dlls/hostage/hostage_improv.cpp:2329 */
void CHostageImprov::CrouchDie(void)
{
}

/* <4761eb> ../cstrike/dlls/hostage/hostage_improv.cpp:2307 */
void CHostageImprov::Flinch(Activity activity)
{
//	Chatter(CHostageImprov *const this,
//		enum HostageChatterType sayType,
//		bool mustSpeak);  //  2310
//	SetPerformance(HostageAnimateState *const this,
//			enum PerformanceType performance);  //  2321
}

/* <475ce3> ../cstrike/dlls/hostage/hostage_improv.cpp:1502 */
void CHostageImprov::OnUpdate(float deltaT)
{
//	{
//		float const runSpeed;                                  //  1553
//		float const walkSpeed;                                 //  1554
//		float const fallVelocity;                              //  1560
//		float const safeTime;                                  //  1687
//	}
//	OnUpdate(CHostageImprov *const this,
//		float deltaT);  //  1502
}

/* <475bd4> ../cstrike/dlls/hostage/hostage_improv.cpp:2268 */
void CHostageImprov::UpdateDelayedChatter(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //  2270
//	Chatter(CHostageImprov *const this,
//		enum HostageChatterType sayType,
//		bool mustSpeak);  //  2299
}

/* <475b35> ../cstrike/dlls/hostage/hostage_improv.cpp:2249 */
void CHostageImprov::DelayedChatter(float delayTime, HostageChatterType sayType, bool mustSpeak)
{
//	DelayedChatter(CHostageImprov *const this,
//			float delayTime,
//			enum HostageChatterType sayType,
//			bool mustSpeak);  //  2249
}

/* <47552a> ../cstrike/dlls/hostage/hostage_improv.cpp:1705 */
void CHostageImprov::OnGameEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	DelayedChatter(CHostageImprov *const this,
//			float delayTime,
//			enum HostageChatterType sayType,
//			bool mustSpeak);  //  1780
//	{
//		Vector *impactPos;                             //  1713
//		float const nearRange;                                 //  1715
//		operator-(const Vector *const this,
//				const Vector &v);  //  1716
//		IsLengthLessThan(const Vector *const this,
//				float length);  //  1716
//	}
//	DelayedChatter(CHostageImprov *const this,
//			float delayTime,
//			enum HostageChatterType sayType,
//			bool mustSpeak);  //  1736
//	OnInjury(HostageIdleState *const this,
//		float amount);  //  1742
//	Invalidate(CountdownTimer *const this);  //  1764
//	DelayedChatter(CHostageImprov *const this,
//			float delayTime,
//			enum HostageChatterType sayType,
//			bool mustSpeak);  //  1769
//	{
//		float range;                                          //  1788
//		enum PriorityType priority;                           //  1789
//		bool isHostile;                                       //  1790
//		{
//			float const fudge;                             //  1793
//			operator-(const Vector *const this,
//					const Vector &v);  //  1795
//			IsLengthLessThan(const Vector *const this,
//					float length);  //  1795
//			Start(IntervalTimer *const this);  //  1798
//			DelayedChatter(CHostageImprov *const this,
//					float delayTime,
//					enum HostageChatterType sayType,
//					bool mustSpeak);  //  1810
//			DelayedChatter(CHostageImprov *const this,
//					float delayTime,
//					enum HostageChatterType sayType,
//					bool mustSpeak);  //  1822
//		}
//	}
//	{
//		Vector *impactPos;                             //  1835
//		float const flashRange;                                //  1837
//		operator-(const Vector *const this,
//				const Vector &v);  //  1838
//		IsLengthLessThan(const Vector *const this,
//				float length);  //  1838
//		DelayedChatter(CHostageImprov *const this,
//				float delayTime,
//				enum HostageChatterType sayType,
//				bool mustSpeak);  //  1843
//	}
}

/* <4753ba> ../cstrike/dlls/hostage/hostage_improv.cpp:1440 */
void CHostageImprov::UpdateGrenadeReactions(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //  1442
//	{
//		class CBaseEntity *entity;                           //  1458
//		float const watchGrenadeRadius;                        //  1459
//		Start(CountdownTimer *const this,
//			float duration);  //  1456
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1464
//		{
//			class CGrenade *grenade;                     //  1466
//			OnInjury(HostageIdleState *const this,
//				float amount);  //  1480
//			Start(CountdownTimer *const this,
//				float duration);  //  1489
//		}
//	}
//	Start(CountdownTimer *const this,
//		float duration);  //  1447
}

/* <4752d9> ../cstrike/dlls/hostage/hostage_improv.cpp:2226 */
void CHostageImprov::Chatter(HostageChatterType sayType, bool mustSpeak)
{
//	IsElapsed(const class CountdownTimer *const this);  //  2235
//	Chatter(CHostageImprov *const this,
//		enum HostageChatterType sayType,
//		bool mustSpeak);  //  2226
}

/* <475290> ../cstrike/dlls/hostage/hostage_improv.cpp:2201 */
void CHostageImprov::UpdateIdleActivity(Activity activity, Activity fidget)
{
}

/* <475200> ../cstrike/dlls/hostage/hostage_improv.cpp:2165 */
void CHostageImprov::Afraid(void)
{
//	{
//		int which;                                            //  2185
//		char animInto;                                        //  2186
//		char animLoop;                                        //  2186
//		char animExit;                                        //  2186
//		SetPerformance(HostageAnimateState *const this,
//				enum PerformanceType performance);  //  2182
//	}
}

/* <47517e> ../cstrike/dlls/hostage/hostage_improv.h:127 */
void CHostageImprov::OnInjury(float amount)
{
//	OnInjury(HostageStateMachine *const this,
//		float amount);  //   127
//	Start(IntervalTimer *const this);  //   127
}

/* <47506e> ../cstrike/dlls/hostage/hostage_improv.cpp:2129 */
void CHostageImprov::Frighten(ScareType scare)
{
//	IsScared(const class CHostageImprov *const this);  //  2132
//	Invalidate(CountdownTimer *const this);  //  2137
//	Start(CountdownTimer *const this,
//		float duration);  //  2145
//	{
//		float const ignoreTime;                                //  2152
//		Start(CountdownTimer *const this,
//			float duration);  //  2149
//		Start(CountdownTimer *const this,
//			float duration);  //  2153
//	}
}

/* <47503a> ../cstrike/dlls/hostage/hostage_improv.cpp:2117 */
void CHostageImprov::IsScared(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //  2119
}

/* <474fb3> ../cstrike/dlls/hostage/hostage_improv.cpp:2107 */
void CHostageImprov::GetTimeSinceLastNoise(void)
{
//	GetElapsedTime(const class IntervalTimer *const this);  //  2109
}

/* <474f2c> ../cstrike/dlls/hostage/hostage_improv.cpp:2098 */
void CHostageImprov::GetTimeSinceLastInjury(void)
{
//	GetElapsedTime(const class IntervalTimer *const this);  //  2100
}

/* <474db2> ../cstrike/dlls/hostage/hostage_improv.cpp:2080 */
void CHostageImprov::GetTimeSinceLastSawPlayer(int team)
{
//	{
//		float timeCT;                                         //  2088
//		float timeT;                                          //  2089
//		GetElapsedTime(const class IntervalTimer *const this);  //  2086
//		GetElapsedTime(const class IntervalTimer *const this);  //  2088
//		GetElapsedTime(const class IntervalTimer *const this);  //  2089
//		GetElapsedTime(const class IntervalTimer *const this);  //  2083
//	}
}

/* <474cd3> ../cstrike/dlls/hostage/hostage_improv.cpp:2047 */
void CHostageImprov::GetClosestVisiblePlayer(int team)
{
//	{
//		class CBasePlayer *close;                            //  2049
//		float closeRangeSq;                                   //  2050
//		{
//			int i;                                        //  2052
//			{
//				class CBasePlayer *player;           //  2054
//				float rangeSq;                        //  2064
//				operator-(const Vector *const this,
//						const Vector &v);  //  2064
//				LengthSquared(const Vector *const this);  //  2064
//			}
//		}
//	}
}

/* <474c76> ../cstrike/dlls/hostage/hostage_improv.cpp:2025 */
void CHostageImprov::CanSeeRescueZone(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2027
//		const class Zone *zone;                             //  2031
//	}
}

/* <474bd5> ../cstrike/dlls/hostage/hostage_improv.cpp:2016 */
void CHostageImprov::IsAtHome(void)
{
//	IsAtHome(const class CHostage *const this);  //  2018
}

/* <474ba8> ../cstrike/dlls/hostage/hostage_improv.cpp:2006 */
void CHostageImprov::ApplyForce(Vector force)
{
}

/* <474ae7> ../cstrike/dlls/hostage/hostage_improv.cpp:1412 */
void CHostageImprov::CheckForNearbyTerrorists(void)
{
//	{
//		float const checkInterval;                             //  1418
//		float range;                                          //  1423
//		IsElapsed(const class CountdownTimer *const this);  //  1414
//		Start(CountdownTimer *const this,
//			float duration);  //  1419
//		{
//			float const nearbyTerroristRange;              //  1427
//			Start(CountdownTimer *const this,
//				float duration);  //  1431
//		}
//	}
}

/* <4749f9> ../cstrike/dlls/hostage/hostage_improv.cpp:1396 */
void CHostageImprov::IsTerroristNearby(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //  1399
//	CheckForNearbyTerrorists(CHostageImprov *const this);  //  1403
}

/* <4749b3> ../cstrike/dlls/hostage/hostage_improv.cpp:1412 */
void CHostageImprov::CheckForNearbyTerrorists(void)
{
//	{
//		float const checkInterval;                             //  1418
//		float range;                                          //  1423
//		{
//			float const nearbyTerroristRange;              //  1427
//		}
//	}
}

/* <474938> ../cstrike/dlls/hostage/hostage_improv.cpp:2375 */
void CHostageImprov::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
//	OnMoveToFailure(HostageStateMachine *const this,
//			const Vector &goal,
//			enum MoveToFailureType reason);  //  2378
}

/* <47486d> ../cstrike/dlls/hostage/hostage_improv.cpp:1038 */
void CHostageImprov::ResetToKnownGoodPosition(void)
{
//	{
//		float const tolerance;                                 //  1044
//		operator-(const Vector *const this,
//				const Vector &v);  //  1045
//		IsLengthLessThan(const Vector *const this,
//				float length);  //  1045
//		Start(CountdownTimer *const this,
//			float duration);  //  1055
//	}
//	Invalidate(CNavPath *const this);  //  1073
}

/* <474809> ../cstrike/dlls/hostage/hostage_improv.cpp:61 */
void CHostageImprov::MoveTo(Vector &goal)
{
//	Invalidate(CNavPath *const this);  //    64
//	MoveTo(CHostageImprov *const this,
//		const Vector &goal);  //    61
}

/* <474781> ../cstrike/dlls/hostage/hostage_improv.cpp:1014 */
void CHostageImprov::SetKnownGoodPosition(Vector &pos)
{
//	SetKnownGoodPosition(CHostageImprov *const this,
//				const Vector &pos);  //  1014
}

/* <474659> ../cstrike/dlls/hostage/hostage_improv.cpp:886 */
void CHostageImprov::UpdateVision(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //   888
//	{
//		int i;                                                //   893
//		{
//			class CBasePlayer *player;                   //   895
//			FNullEnt(entvars_t *pev);  //   900
//			Start(IntervalTimer *const this);  //   914
//			Start(IntervalTimer *const this);  //   916
//		}
//	}
//	Start(CountdownTimer *const this,
//		float duration);  //   924
}

/* <474631> ../cstrike/dlls/hostage/hostage_improv.cpp:568 */
void CHostageImprov::GetSpeed(void)
{
}

/* <474309> ../cstrike/dlls/hostage/hostage_improv.cpp:557 */
void CHostageImprov::IsFriendInTheWay(void)
{
//	{
//		class CheckAhead check;                               //   559
//		CheckAhead(CheckAhead *const this,
//				const class CHostageImprov *me);  //   559
//		ForEachHostage<CheckAhead>(const class CHostageManager *const this,
//						class CheckAhead &func);  //   561
//		ForEachPlayer<CheckAhead>(CheckAhead &func);  //   562
//	}
}

/* <47402b> ../cstrike/dlls/hostage/hostage_improv.cpp:308 */
void CHostageImprov::FaceOutwards(void)
{
//	{
//		TraceResult result;                                   //   310
//		Vector to;                                      //   312
//		float farthestRange;                                  //   313
//		int farthest;                                         //   314
//		int const cornerCount;                                 //   316
//		Vector corner;                                  //   317
//		{
//			int i;                                        //   325
//			{
//				float range;                          //   328
//				operator+(const Vector *const this,
//						const Vector &v);  //   327
//				operator-(const Vector *const this,
//						const Vector &v);  //   328
//				LengthSquared(const Vector *const this);  //   328
//			}
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   337
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   323
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   323
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   323
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   323
//	}
}

/* <473e46> ../cstrike/dlls/hostage/hostage_improv.cpp:262 */
void CHostageImprov::FaceTowards(Vector &target, float deltaT)
{
//	{
//		class Vector2D to;                                    //   264
//		float moveAngle;                                      //   267
//		class Vector2D dir;                                   //   270
//		class Vector2D lat;                                   //   271
//		float const maxTurnRate;                               //   273
//		float error;                                          //   275
//		float dot;                                            //   278
//		operator-(const Vector *const this,
//				const Vector &v);  //   264
//		NormalizeInPlace(Vector2D *const this);  //   265
//		DotProduct(const class Vector2D &a,
//				const class Vector2D &b);  //   275
//		DotProduct(const class Vector2D &a,
//				const class Vector2D &b);  //   278
//		{
//			float const tolerance;                         //   285
//			fabs(double __x);  //   286
//		}
//		SetMoveAngle(CHostageImprov *const this,
//				float angle);  //   298
//	}
}

/* <473da4> ../cstrike/dlls/hostage/hostage_improv.cpp:96 */
void CHostageImprov::DiscontinuityJump(float ground, bool onlyJumpDown, bool mustJump)
{
//	{
//		float dz;                                             //   101
//	}
//	DiscontinuityJump(CHostageImprov *const this,
//				float ground,
//				bool onlyJumpDown,
//				bool mustJump);  //    96
}

/* <47353e> ../cstrike/dlls/hostage/hostage_improv.cpp:41 */
void CHostageImprov::CHostageImprov(CBaseEntity *entity)
{
//	HostageEscapeState(HostageEscapeState *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	HostageStateMachine(HostageStateMachine *const this);  //    41
//	HostageIdleState(HostageIdleState *const this);  //    41
//	HostageRetreatState(HostageRetreatState *const this);  //    41
//	HostageFollowState(HostageFollowState *const this);  //    41
//	HostageAnimateState(HostageAnimateState *const this);  //    41
//	CNavPath(CNavPath *const this);  //    41
//	IntervalTimer(IntervalTimer *const this);  //    41
//	IntervalTimer(IntervalTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	IntervalTimer(IntervalTimer *const this);  //    41
//	IntervalTimer(IntervalTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	IntervalTimer(IntervalTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
//	CountdownTimer(CountdownTimer *const this);  //    41
}

/* <47351a> ../cstrike/dlls/hostage/hostage_improv.cpp:41 */
void CHostageImprov::CHostageImprov(CBaseEntity *entity)
{
}

/* <472e7b> ../cstrike/dlls/hostage/hostage_improv.cpp:783 */
void CHostageImprov::GetClosestPlayerByTravelDistance( int team, float *range)
{
//	{
//		class CBasePlayer *close;                            //   788
//		float closeRange;                                     //   789
//		{
//			int i;                                        //   791
//			{
//				class CBasePlayer *player;           //   793
//				class ShortestPathCost cost;          //   804
//				Vector vecCenter;               //   805
//				float range;                          //   806
//				IsEntityValid(CBaseEntity *entity);  //   795
//				NavAreaTravelDistance<ShortestPathCost>(const Vector *startPos,
//									class CNavArea *startArea,
//									const Vector *goalPos,
//									class ShortestPathCost &costFunc);  //   806
//			}
//		}
//	}
}

/* <472e5d> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <472b83> ../cstrike/dlls/hostage/hostage_improv.cpp:453 */
void CHostageImprov::IsFriendInTheWay(CBaseEntity *myFriend, Vector &goalPos)
{
//	{
//		Vector moveDir;                                 //   460
//		float length;                                         //   463
//		Vector friendFeet;                              //   465
//		Vector toFriend;                                //   476
//		float const personalSpace;                             //   479
//		float friendDistAlong;                                //   484
//		Vector pos;                                     //   491
//		float const friendRadius;                              //   498
//		operator-(const Vector *const this,
//				const Vector &v);  //   460
//		NormalizeInPlace(Vector *const this);  //   463
//		operator-(const Vector *const this,
//				const Vector &v);  //   476
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //   480
//		DotProduct(Vector &a,
//				const Vector &b);  //   484
//		operator-(const Vector *const this,
//				const Vector &v);  //   499
//		IsLengthLessThan(const Vector *const this,
//				float length);  //   499
//		IsZero(Vector *const this,
//			float tolerance);  //   504
//		DotProduct(Vector &a,
//				const Vector &b);  //   507
//		operator*(float fl,
//				const Vector &v);  //   495
//		operator+(const Vector *const this,
//				const Vector &v);  //   495
//	}
}

/* <472a9f> ../cstrike/dlls/hostage/hostage_improv.cpp:757 */
void CHostageImprov::IsAnyPlayerLookingAtMe( int team, float cosTolerance)
{
//	{
//		int i;                                                //   759
//		{
//			class CBasePlayer *player;                   //   761
//			IsEntityValid(CBaseEntity *entity);  //   763
//		}
//	}
}

/* <472938> ../cstrike/dlls/hostage/hostage_improv.cpp:728 */
void CHostageImprov::IsPlayerLookingAtMe(CBasePlayer *other, float cosTolerance)
{
//	{
//		class Vector2D toOther;                               //   730
//		class Vector2D otherDir;                              //   737
//		NormalizeInPlace(Vector2D *const this);  //   733
//		operator+(const Vector *const this,
//				const Vector &v);  //   736
//		NormalizeInPlace(Vector2D *const this);  //   740
//	}
}

/* <47263d> ../cstrike/dlls/hostage/hostage_improv.h:49 */
void CHostageImprov::~CHostageImprov(void)
{
//	~CHostageImprov(CHostageImprov::~CHostageImprov(//			int const __in_chrg);  //    49
}

/* <471e27> ../cstrike/dlls/hostage/hostage_improv.cpp:1854 */
void CHostageImprov::OnTouch(CBaseEntity *other)
{
//	{
//		const char *classname;                              //  1856
//		class Vector2D to;                                    //  1994
//		float const pushForce;                                 //  1997
//		Start(IntervalTimer *const this);  //  1862
//		FStrEq(const char *sz1,
//			const char *sz2);  //  1864
//		{
//			float const lookAheadRange;                    //  1866
//			float ground;                                 //  1870
//			Vector normal;                          //  1871
//			Vector alongFloor;                      //  1881
//			TraceResult result;                           //  1885
//			bool isStep;                                  //  1886
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //  1871
//			{
//				float offset;                         //  1887
//				{
//					Vector pos;             //  1889
//					Vector(Vector *const this,
//						const Vector &v);  //  1889
//					operator*(float fl,
//							const Vector &v);  //  1892
//					operator+(const Vector *const this,
//							const Vector &v);  //  1892
//				}
//			}
//			CrossProduct(Vector &a,
//					const Vector &b);  //  1881
//			{
//				bool isSeam;                          //  1942
//				float const checkSeamRange;            //  1943
//				Vector posBehind;               //  1946
//				operator*(float fl,
//						const Vector &v);  //  1946
//				operator-(const Vector *const this,
//						const Vector &v);  //  1946
//				operator+(const Vector *const this,
//						const Vector &v);  //  1947
//				DotProduct(Vector &a,
//						const Vector &b);  //  1949
//				{
//					Vector posAhead;        //  1956
//					operator+(const Vector *const this,
//							const Vector &v);  //  1956
//					operator+(const Vector *const this,
//							const Vector &v);  //  1957
//					DotProduct(Vector &a,
//							const Vector &b);  //  1959
//				}
//				{
//					float const nudge;             //  1971
//				}
//			}
//			operator*(float fl,
//					const Vector &v);  //  1878
//			Vector(Vector *const this,
//				const Vector &v);  //  1878
//			operator+(const Vector *const this,
//					const Vector &v);  //  1878
//			{
//				float stepAheadGround;                //  1909
//				Vector stepAheadNormal;         //  1910
//				Start(CountdownTimer *const this,
//					float duration);  //  1907
//				{
//					float range;                  //  1912
//					{
//						Vector stepAhead; //  1914
//						{
//							float dz;     //  1927
//						}
//						operator+(const Vector *const this,
//								const Vector &v);  //  1914
//						operator*(float fl,
//								const Vector &v);  //  1914
//					}
//				}
//			}
//		}
//		FStrEq(const char *sz1,
//			const char *sz2);  //  1983
//		operator-(const Vector *const this,
//				const Vector &v);  //  1994
//		NormalizeInPlace(Vector2D *const this);  //  1995
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1990
//	}
}

/* <471dff> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <471c36> ../cstrike/dlls/hostage/hostage_improv.cpp:395 */
void CHostageImprov::IsFriendInTheWay(Vector &goalPos)
{
//	{
//		float const avoidFriendInterval;                       //   403
//		IsElapsed(const class CountdownTimer *const this);  //   398
//	}
//	IsFriendInTheWay(const class CHostageImprov *const this,
//			const Vector &goalPos);  //   395
}

/* <471b3f> ../cstrike/dlls/hostage/hostage_improv.cpp:2497 */
void CHostageImprov::Crouch(void)
{
//	Crouch(CHostageImprov *const this);  //  2497
}

/* <47195c> ../cstrike/dlls/hostage/hostage_improv.cpp:2516 */
void CHostageImprov::StandUp(void)
{
//	{
//		TraceResult result;                                   //  2525
//		IsElapsed(const class CountdownTimer *const this);  //  2521
//	}
//	StandUp(CHostageImprov *const this);  //  2516
}

/* <47185f> ../cstrike/dlls/hostage/hostage_improv.cpp:592 */
void CHostageImprov::Jump(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //   604
//	Jump(CHostageImprov *const this);  //   592
}

/* <4717e4> ../cstrike/dlls/hostage/hostage_improv.cpp:78 */
void CHostageImprov::GetSimpleGroundHeightWithFloor(const Vector *pos, float *height, Vector *normal)
{
//	GetSimpleGroundHeightWithFloor(CHostageImprov *const this,
//					const Vector *pos,
//					float *height,
//					Vector *normal);  //    78
}

/* <47166d> ../cstrike/dlls/hostage/hostage_improv.cpp:822 */
void CHostageImprov::OnReset(void)
{
//	Invalidate(CountdownTimer *const this);  //   833
//	SetMoveAngle(CHostageImprov *const this,
//			float angle);  //   840
//	Invalidate(CountdownTimer *const this);  //   846
//	Invalidate(CNavPath *const this);  //   856
//	Invalidate(CountdownTimer *const this);  //   854
//	Start(IntervalTimer *const this);  //   863
//	Start(IntervalTimer *const this);  //   864
//	Invalidate(CountdownTimer *const this);  //   866
//	Invalidate(CountdownTimer *const this);  //   868
//	Idle(CHostageImprov *const this);  //   879
//	Reset(SimpleStateMachine<CHostageImprov*, HostageState> *const this,
//		class CHostageImprov *userData);  //   878
}

/* <4715d1> ../cstrike/dlls/hostage/hostage_improv.cpp:697 */
void CHostageImprov::IsVisible(Vector &pos, bool testFOV)
{
//	{
//		class Vectorconst eye;                                //   707
//		TraceResult result;                                   //   715
//		Vector(Vector *const this,
//			const Vector &v);  //   707
//	}
}

/* <471594> ../game_shared/bot/improv.h:43 */
void CImprov::~CImprov(void)
{
//	~CImprov(CImprov::~CImprov(//		int const __in_chrg);  //    43
}

/* <47153d> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <471500> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <4714c9> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <471492> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <47145b> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <471438> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <4710c4> ../cstrike/dlls/hostage/hostage_improv.cpp:1094 */
void CHostageImprov::TraverseLadder(const class CNavLadder *ladder, NavTraverseType how, const Vector *approachPos, const Vector *departPos, float deltaT)
{
//	{
//		Vector goal;                                    //  1098
//		AddDirectionVector(Vector *v,
//					enum NavDirType dir,
//					float amount);  //  1122
//		{
//			float const atGoalRange;                       //  1198
//			{
//				float closeRange;                     //  1158
//				float range;                          //  1158
//				operator-(const Vector *const this,
//						const Vector &v);  //  1162
//				LengthSquared(const Vector *const this);  //  1162
//				operator-(const Vector *const this,
//						const Vector &v);  //  1174
//				LengthSquared(const Vector *const this);  //  1174
//				operator-(const Vector *const this,
//						const Vector &v);  //  1186
//				LengthSquared(const Vector *const this);  //  1186
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //  1199
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1199
//		}
//		{
//			float const walkRange;                         //  1130
//			float const ladderRange;                       //  1135
//			operator-(const Vector *const this,
//					const Vector &v);  //  1131
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1131
//			operator-(const Vector *const this,
//					const Vector &v);  //  1136
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1136
//		}
//		AddDirectionVector(Vector *v,
//					enum NavDirType dir,
//					float amount);  //  1103
//		{
//			float const ladderRange;                       //  1108
//			operator-(const Vector *const this,
//					const Vector &v);  //  1109
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1109
//		}
//	}
}

/* <47105c> ../cstrike/dlls/hostage/hostage_improv.cpp:1082 */
void CHostageImprov::StartLadder(const class CNavLadder *ladder, NavTraverseType how, const Vector *approachPos, const Vector *departPos)
{
}

/* <470fec> ../cstrike/dlls/hostage/hostage_improv.cpp:687 */
void CHostageImprov::IsMoving(void)
{
//	{
//		float const epsilon;                                   //   689
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //   690
//	}
}

/* <470fc4> ../cstrike/dlls/hostage/hostage_improv.cpp:681 */
void CHostageImprov::IsOnGround(void)
{
}

/* <470f9c> ../cstrike/dlls/hostage/hostage_improv.cpp:671 */
void CHostageImprov::GetEyes(void)
{
}

/* <470f74> ../cstrike/dlls/hostage/hostage_improv.cpp:661 */
void CHostageImprov::GetCentroid(void)
{
}

/* <470f4c> ../cstrike/dlls/hostage/hostage_improv.cpp:655 */
void CHostageImprov::GetFeet(void)
{
}

/* <470f23> ../cstrike/dlls/hostage/hostage_improv.cpp:644 */
void CHostageImprov::Stop(void)
{
}

/* <470efb> ../cstrike/dlls/hostage/hostage_improv.cpp:638 */
void CHostageImprov::Walk(void)
{
}

/* <470ed3> ../cstrike/dlls/hostage/hostage_improv.cpp:632 */
void CHostageImprov::Run(void)
{
}

/* <470eab> ../cstrike/dlls/hostage/hostage_improv.cpp:353 */
void CHostageImprov::IsAtFaceGoal(void)
{
}

/* <470e23> ../cstrike/dlls/hostage/hostage_improv.cpp:344 */
void CHostageImprov::IsAtMoveGoal( float error)
{
//	operator-(const Vector *const this,
//			const Vector &v);  //   346
//	IsLengthLessThan(const Vector *const this,
//			float length);  //   346
}

/* <470dfb> ../cstrike/dlls/hostage/hostage_improv.cpp:145 */
void CHostageImprov::ClearFaceTo(void)
{
}

/* <470dbf> ../cstrike/dlls/hostage/hostage_improv.cpp:135 */
void CHostageImprov::FaceTo(Vector &goal)
{
}

/* <470d97> ../cstrike/dlls/hostage/hostage_improv.cpp:126 */
void CHostageImprov::ClearLookAt(void)
{
}

/* <470d5b> ../cstrike/dlls/hostage/hostage_improv.cpp:116 */
void CHostageImprov::LookAt(Vector &target)
{
}

/* <470d33> ../cstrike/dlls/hostage/hostage_improv.cpp:52 */
void CHostageImprov::IsAlive(void)
{
}

/* <470cd3> ../cstrike/dlls/hostage/hostage_improv.h:125 */
void CHostageImprov::OnMoveToSuccess(Vector &goal)
{
//	OnMoveToSuccess(HostageStateMachine *const this,
//			const Vector &goal);  //   125
}

/* <470cab> ../cstrike/dlls/hostage/hostage_improv.h:119 */
void CHostageImprov::GetLastKnownArea(void)
{
}

/* <470c83> ../cstrike/dlls/hostage/hostage_improv.h:110 */
void CHostageImprov::CanJump(void)
{
}

/* <470c5b> ../cstrike/dlls/hostage/hostage_improv.h:109 */
void CHostageImprov::CanCrouch(void)
{
}

/* <470c33> ../cstrike/dlls/hostage/hostage_improv.h:108 */
void CHostageImprov::CanRun(void)
{
}

/* <470c0b> ../cstrike/dlls/hostage/hostage_improv.h:104 */
void CHostageImprov::IsUsingLadder(void)
{
}

/* <470bd3> ../cstrike/dlls/hostage/hostage_improv.h:103 */
void CHostageImprov::IsJumping(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //   103
}

/* <470bab> ../cstrike/dlls/hostage/hostage_improv.h:102 */
void CHostageImprov::IsCrouching(void)
{
}

/* <470b83> ../cstrike/dlls/hostage/hostage_improv.h:100 */
void CHostageImprov::IsStopped(void)
{
}

/* <470b5b> ../cstrike/dlls/hostage/hostage_improv.h:99 */
void CHostageImprov::IsWalking(void)
{
}

/* <470b33> ../cstrike/dlls/hostage/hostage_improv.h:98 */
void CHostageImprov::IsRunning(void)
{
}

/* <470b0b> ../cstrike/dlls/hostage/hostage_improv.h:92 */
void CHostageImprov::GetFaceAngle(void)
{
}

/* <470ae3> ../cstrike/dlls/hostage/hostage_improv.h:91 */
void CHostageImprov::GetMoveAngle(void)
{
}

/* <470abb> ../cstrike/dlls/hostage/hostage_improv.h:73 */
void CHostageImprov::StrafeRight(void)
{
}

/* <470a93> ../cstrike/dlls/hostage/hostage_improv.h:72 */
void CHostageImprov::StrafeLeft(void)
{
}

/* <470a6b> ../cstrike/dlls/hostage/hostage_improv.h:71 */
void CHostageImprov::MoveBackward(void)
{
}

/* <470a43> ../cstrike/dlls/hostage/hostage_improv.h:70 */
void CHostageImprov::MoveForward(void)
{
}

/* <470a1b> ../cstrike/dlls/hostage/hostage_improv.h:63 */
void CHostageImprov::HasFaceTo(void)
{
}

/* <4709f3> ../cstrike/dlls/hostage/hostage_improv.h:62 */
void CHostageImprov::HasLookAt(void)
{
}

/* <470712> ../cstrike/dlls/hostage/hostage_improv.h:49 */
void CHostageImprov::~CHostageImprov(void)
{
//	~HostageAnimateState(HostageAnimateState::~CHostageImprov(//				int const __in_chrg);  //    49
//	~HostageFollowState(HostageFollowState *const this,
//				int const __in_chrg);  //    49
//	~HostageRetreatState(HostageRetreatState *const this,
//				int const __in_chrg);  //    49
//	~HostageEscapeState(HostageEscapeState *const this,
//				int const __in_chrg);  //    49
//	~HostageIdleState(HostageIdleState *const this,
//				int const __in_chrg);  //    49
//	~CImprov(CImprov *const this,
//		int const __in_chrg);  //    49
}

/* <4706ef> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <4706b2> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <470686> ../cstrike/dlls/hostage/hostage_states.h:31 */
void HostageStateMachine::OnInjury(float amount)
{
}

/* <470650> ../cstrike/dlls/hostage/hostage_states.h:30 */
void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <470624> ../cstrike/dlls/hostage/hostage_states.h:29 */
void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <4705ed> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <4705ca> ../game_shared/bot/improv.h:43 */
void CImprov::~CImprov(void)
{
}

/* <470593> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <470548> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <47050c> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <4704cb> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <47046f> ../cstrike/dlls/hostage/hostage_improv.cpp:525 */
inline void CheckAhead::operator()( CBaseEntity *entity)
{
//	{
//		Vector to;                                      //   530
//		float range;                                          //   531
//		float const closeRange;                                //   533
//		float const aheadTolerance;                            //   537
//	}
}

/* <47044b> ../cstrike/dlls/vector.h:174 */
inline void Vector::IsZero(float tolerance)
{
}

/* <4703fc> ../cstrike/dlls/hostage/hostage_improv.cpp:19 */
inline void DrawAxes(Vector &origin, int red, int green, int blue)
{
//	{
//		float size;                                           //    21
//	}
}

/* <47017c> ../game_shared/bot/nav_path.h:60 */
inline void CNavPath::Compute<HostagePathCost>(Vector *start, const Vector *goal, class HostagePathCost &costFunc)
{
//	{
//		class CNavArea *startArea;                           //    67
//		class CNavArea *goalArea;                            //    71
//		Vector pathEndPosition;                         //    81
//		class CNavArea *closestArea;                         //    90
//		bool pathToGoalExists;                                //    91
//		class CNavArea *effectiveGoalArea;                   //    93
//		int count;                                            //   100
//		class CNavArea *area;                                //   101
//	}
}

/* <470134> ../cstrike/dlls/hostage/hostage.h:293 */
inline void CHostageManager::ForEachHostage<KeepPersonalSpace>(KeepPersonalSpace &func)
{
//	{
//		int i;                                                //   295
//	}
}

/* <4700e1> ../game_shared/bot/bot_util.h:294 */
bool ForEachPlayer<KeepPersonalSpace>(KeepPersonalSpace &func)
{
//	{
//		int i;                                                //   296
//		{
//			class CBasePlayer *player;                   //   298
//		}
//	}
}

/* <4700b6> ../cstrike/dlls/hostage/hostage_improv.cpp:931 */
inline void KeepPersonalSpace::KeepPersonalSpace(CHostageImprov *improv)
{
}

/* <470072> ../game_shared/bot/nav_path.h:202 */
inline void CNavPathFollower::IsStuck(void)
{
}

/* <470059> ../game_shared/bot/nav_path.h:203 */
inline void CNavPathFollower::ResetStuck(void)
{
}

/* <470040> ../cstrike/dlls/hostage/hostage_improv.h:132 */
inline void CHostageImprov::ResetJump(void)
{
}

/* <470037> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <47001b> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <46ffff> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <46ffe6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <46ff9d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <46ff84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <46ff6b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <46ff2e> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <46fefe> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <46fee5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <46fecc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <46fea8> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <46fe8a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <46fe61> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <46fe43> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <46fe1a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <46fd9d> ../cstrike/dlls/hostage/hostage_improv.cpp:1502 */
void CHostageImprov::OnUpdate(float deltaT)
{
//	{
//		float const runSpeed;                                  //  1553
//		float const walkSpeed;                                 //  1554
//		float const fallVelocity;                              //  1560
//		float const safeTime;                                  //  1687
//		{
//			float dot;                                    //  1621
//			{
//				float speed;                          //  1632
//			}
//		}
//	}
}

/* <46fd84> ../cstrike/dlls/hostage/hostage_improv.cpp:2558 */
void CHostageImprov::UpdateStationaryAnimation(void)
{
}

/* <46fd6b> ../cstrike/dlls/hostage/hostage_improv.h:188 */
inline void CHostageImprov::IsEscaping(void)
{
}

/* <46fd52> ../game_shared/bot/simple_state_machine.h:71 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::Update(void)
{
}

/* <46fd39> ../cstrike/dlls/hostage/hostage_states.h:186 */
inline void HostageAnimateState::HostageAnimateState(void)
{
}

/* <46fd1e> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::HostageFollowState(void)
{
}

/* <46fd03> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::HostageRetreatState(void)
{
}

/* <46fcea> ../cstrike/dlls/hostage/hostage_states.h:109 */
inline void HostageEscapeState::HostageEscapeState(void)
{
}

/* <46fccf> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::HostageIdleState(void)
{
}

/* <46fcb4> ../game_shared/bot/improv.h:40 */
inline void CImprov::CImprov(void)
{
}

/* <46fc9b> ../cstrike/dlls/hostage/hostage_improv.h:150 */
inline void CHostageImprov::Idle(void)
{
}

/* <46fc77> ../game_shared/bot/simple_state_machine.h:48 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::Reset(CHostageImprov *userData)
{
}

/* <46fc2a> ../game_shared/bot/bot_util.h:294 */
bool ForEachPlayer<CheckAhead>(CheckAhead &func)
{
//	{
//		int i;                                                //   296
//		{
//			class CBasePlayer *player;                   //   298
//		}
//	}
}

/* <46fbe8> ../cstrike/dlls/hostage/hostage.h:293 */
inline void CHostageManager::ForEachHostage<CheckAhead>(CheckAhead &func)
{
//	{
//		int i;                                                //   295
//	}
}

/* <46fbb8> ../cstrike/dlls/hostage/hostage_improv.cpp:518 */
inline void CheckAhead::CheckAhead(CHostageImprov *me)
{
}

/* <46fb4b> ../cstrike/dlls/hostage/hostage_improv.cpp:395 */
void CHostageImprov::IsFriendInTheWay(Vector &goalPos)
{
//	{
//		float const avoidFriendInterval;                       //   403
//		{
//			class CheckWayFunctor check;                  //   411
//		}
//		{
//			int i;                                        //   421
//			{
//				class CBasePlayer *player;           //   423
//			}
//		}
//	}
}

/* <46fb04> ../cstrike/dlls/hostage/hostage.h:293 */
inline void CHostageManager::ForEachHostage<CheckWayFunctor>(CheckWayFunctor &func)
{
//	{
//		int i;                                                //   295
//	}
}

/* <46fac7> ../cstrike/dlls/hostage/hostage_improv.cpp:363 */
inline void CheckWayFunctor::CheckWayFunctor(CHostageImprov *me, Vector &goalPos)
{
}

/* <46fa9c> ../cstrike/dlls/hostage/hostage_improv.cpp:370 */
inline void CheckWayFunctor::operator()(CHostage *them)
{
}

/* <46f9d7> ../cstrike/dlls/hostage/hostage_improv.cpp:939 */
inline void KeepPersonalSpace::operator()(CBaseEntity *entity)
{
//	{
//		float const space;                                     //   953
//		Vector to;                                      //   955
//		float range;                                          //   956
//		{
//			class CBasePlayer *player;                   //   948
//		}
//		{
//			class CBasePlayer *player;                   //   961
//			float const cosTolerance;                      //   962
//			float const spring;                            //   967
//			float ds;                                     //   969
//			float const minSpace;                          //   971
//			float const force;                             //   975
//			float const damper;                            //   979
//		}
//	}
}

/* <46f9b3> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <46f995> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <46f961> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <46f93d> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <46f922> ../cstrike/dlls/hostage/hostage_states.h:26 */
inline void HostageStateMachine::HostageStateMachine(void)
{
}

/* <46f907> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::HostageEscapeLookAroundState(void)
{
}

/* <46f8ec> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::HostageEscapeToCoverState(void)
{
}

/* <46f8c8> ../game_shared/bot/simple_state_machine.h:28 */
inline void SimpleState<CHostageImprov*>::SetParent(SimpleState<CHostageImprov*> *parent)
{
}

/* <46f8aa> ../game_shared/bot/simple_state_machine.h:43 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SimpleStateMachine(void)
{
}

/* <46f891> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <46f878> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <46f85d> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::HostageState(void)
{
}

/* <46f844> ../game_shared/bot/simple_state_machine.h:16 */
inline void SimpleState<CHostageImprov*>::SimpleState(void)
{
}

/* <46f80c> ../cstrike/dlls/hostage/hostage_improv.cpp:997 */
void CHostageImprov::TrackPath(Vector &pathGoal, float deltaT)
{
}

/* <46f7e3> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <46f7a1> ../game_shared/bot/nav_path.h:204 */
inline void CNavPathFollower::GetStuckDuration(void)
{
}

/* <46f77b> ../cstrike/dlls/hostage/hostage_improv.cpp:2006 */
void CHostageImprov::ApplyForce(Vector force)
{
}

/* <46f73b> ../cstrike/dlls/hostage/hostage_improv.cpp:2249 */
void CHostageImprov::DelayedChatter(float delayTime, HostageChatterType sayType, bool mustSpeak)
{
}

/* <46f717> ../cstrike/dlls/hostage/hostage_states.h:48 */
inline void HostageIdleState::OnInjury(float amount)
{
}

/* <46f6bf> ../cstrike/dlls/hostage/hostage_improv.cpp:2226 */
void CHostageImprov::Chatter(HostageChatterType sayType, bool mustSpeak)
{
//	{
//		float duration;                                       //  2239
//	}
}

/* <46f6a1> ../cstrike/dlls/hostage/hostage.h:258 */
inline void CHostageManager::GetChatter(void)
{
}

/* <46f67d> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <46f664> ../cstrike/dlls/hostage/hostage_improv.cpp:2117 */
void CHostageImprov::IsScared(void)
{
}

/* <46f64b> ../cstrike/dlls/hostage/hostage.h:130 */
inline void CHostage::IsAtHome(void)
{
}

/* <46f62d> ../cstrike/dlls/hostage/hostage.h:136 */
inline void CHostage::GetHomePosition(void)
{
}

/* <46f5f9> ../cstrike/dlls/hostage/hostage_improv.cpp:61 */
void CHostageImprov::MoveTo(Vector &goal)
{
}

/* <46f5ce> ../cstrike/dlls/hostage/hostage_improv.cpp:1014 */
void CHostageImprov::SetKnownGoodPosition(Vector &pos)
{
}

/* <46f5b5> ../cstrike/dlls/hostage/hostage_improv.h:135 */
inline void CHostageImprov::GetActualVelocity(void)
{
}

/* <46f597> ../cstrike/dlls/hostage/hostage_improv.cpp:546 */
inline void CheckAhead::IsBlocked(void)
{
}

/* <46f4f9> ../cstrike/dlls/hostage/hostage_improv.cpp:96 */
void CHostageImprov::DiscontinuityJump(float ground, bool onlyJumpDown, bool mustJump)
{
//	{
//		float dz;                                             //   101
//	}
}

/* <46f4d9> ../game_shared/bot/improv.h:17 */
inline void IImprovEvent::IImprovEvent(void)
{
}

/* <46f4c0> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <46f426> ../cstrike/dlls/hostage/hostage_improv.h:400 */
inline void HostagePathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float dist;                                           //   416
//		float cost;                                           //   419
//		{
//			float const ladderCost;                        //   412
//		}
//		{
//			float const crouchPenalty;                     //   424
//		}
//		{
//			float const jumpPenalty;                       //   431
//		}
//	}
}

/* <46f400> ../cstrike/dlls/hostage/hostage_improv.h:357 */
inline void CHostageImprov::SetMoveAngle(float angle)
{
}

/* <46f3d7> ../cstrike/dlls/hostage/hostage_improv.cpp:2497 */
void CHostageImprov::Crouch(void)
{
//	{
//		float const minCrouchTime;                             //  2503
//	}
}

/* <46f392> ../cstrike/dlls/hostage/hostage_improv.cpp:2516 */
void CHostageImprov::StandUp(void)
{
//	{
//		TraceResult result;                                   //  2525
//		{
//			int y;                                        //  2527
//			{
//				int x;                                //  2529
//			}
//		}
//	}
}

/* <46f374> ../cstrike/dlls/hostage/hostage_improv.h:255 */
inline void CHostageImprov::GetEntity(void)
{
}

/* <46f34f> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <46f325> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <46f2f5> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <46f2c5> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <46f295> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <46f249> ../cstrike/dlls/hostage/hostage_improv.cpp:592 */
void CHostageImprov::Jump(void)
{
//	{
//		float const epsilon;                                   //   609
//		float const minJumpInterval;                           //   618
//		{
//			float const fudge;                             //   613
//		}
//	}
}

/* <46f220> ../cstrike/dlls/hostage/hostage_states.h:226 */
inline void HostageAnimateState::SetPerformance(PerformanceType performance)
{
}

/* <46f201> ../cstrike/dlls/hostage/hostage_states.h:225 */
inline void HostageAnimateState::GetPerformance(void)
{
}

/* <46f1e3> ../cstrike/dlls/hostage/hostage_states.h:199 */
inline void HostageAnimateState::IsBusy(void)
{
}

/* <46f1a4> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <46f17a> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <46f10a> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <46f0a0> ../cstrike/dlls/hostage/hostage_states.h:32 */
inline void HostageStateMachine::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <46f087> ../game_shared/bot/nav_path.h:169 */
inline void CStuckMonitor::GetDuration(void)
{
}

/* <46f063> ../game_shared/bot/nav_path.h:200 */
inline void CNavPathFollower::Debug( bool status)
{
}

/* <46f03f> ../game_shared/bot/nav_path.h:194 */
inline void CNavPathFollower::SetPath(CNavPath *path)
{
}

/* <46f016> ../game_shared/bot/nav_path.h:193 */
inline void CNavPathFollower::SetImprov(CImprov *improv)
{
}

/* <46eff8> ../game_shared/bot/nav_path.h:167 */
inline void CStuckMonitor::IsStuck(void)
{
}

/* <46efdf> ../game_shared/bot/nav_path.h:47 */
inline void CNavPath::Invalidate(void)
{
}

/* <46efc1> ../game_shared/bot/nav_path.h:46 */
inline void CNavPath::IsValid(void)
{
}

/* <46efa3> ../game_shared/bot/nav_path.h:22 */
inline void CNavPath::CNavPath(void)
{
}

/* <46ef83> ../game_shared/bot/nav_path.h:27 */
inline void PathSegment::PathSegment(void)
{
}

/* <46eef7> ../game_shared/bot/nav_area.h:629 */
inline void ShortestPathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float dist;                                           //   639
//		float cost;                                           //   646
//		{
//			float const crouchPenalty;                     //   651
//		}
//		{
//			float const jumpPenalty;                       //   658
//		}
//	}
}

/* <46eedb> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <46eebf> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <46eea6> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <46ee80> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <46ee67> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <46ee41> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <46ee28> ../game_shared/bot/nav_area.h:292 */
inline void CNavArea::GetParentHow(void)
{
}

/* <46ee0f> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <46eddc> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <46edc3> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <46edaa> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <46ed91> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <46ed78> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <46ed54> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <46ed36> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <46ecae> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <46ec95> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <46ec6c> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <46ec1f> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <46ec06> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <46ebe8> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <46ebca> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <46eb7a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <46eb3e> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <46eadb> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <46ea08> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <46e93e> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <46e91a> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <46e8f3> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <46e8cb> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <46e8a4> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <46e878> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <46e844> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <46e824> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <46e806> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <46e79a> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <46e77c> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <46e73d> ../cstrike/dlls/hostage/hostage_improv.cpp:78 */
void CHostageImprov::GetSimpleGroundHeightWithFloor(const Vector *pos, float *height, Vector *normal)
{
}

/* <46e715> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <46e6eb> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <46e6c3> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <46e695> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <45f194> ../cstrike/dlls/hostage/hostage.cpp:204 */
void CHostage::IdleThink(void)
{
//	{
//		float const upkeepRate;                                //   220
//		float flInterval;                                     //   224
//		float const updateRate;                                //   236
//		{
//			float const giveUpTime;                        //   249
//		}
//		{
//			class CBasePlayer *player;                   //   263
//			GetFollowLeader(const class CHostageImprov *const this);  //   263
//			{
//				class CBaseEntity *pSpot;            //   271
//				BOOL bContinue;                       //   272
//				BOOL bResHostagePt;                   //   272
//				operator-(const Vector *const this,
//						const Vector &v);  //   284
//				Length(const Vector *const this);  //   284
//				operator-(const Vector *const this,
//						const Vector &v);  //   298
//				Length(const Vector *const this);  //   298
//			}
//			edict(CBaseEntity *const this);  //   332
//			edict(CBaseEntity *const this);  //   332
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //   337
//			edict(CBaseEntity *const this);  //   340
//			ENTINDEX(edict_t *pEdict);  //   340
//			edict(CBaseEntity *const this);  //   341
//			ENTINDEX(edict_t *pEdict);  //   341
//			Remove(CHostage *const this);  //   346
//		}
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   242
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   242
//		{
//			Vector vDistance;                       //   395
//			operator-(const Vector *const this,
//					const Vector &v);  //   395
//			Length(const Vector *const this);  //   397
//		}
//		Length(const Vector *const this);  //   378
//		SetActivity(CHostage *const this,
//				int act);  //   379
//		Length(const Vector *const this);  //   380
//		SetActivity(CHostage *const this,
//				int act);  //   381
//		SetActivity(CHostage *const this,
//				int act);  //   383
//	}
}

/* <45ee7f> ../cstrike/dlls/hostage/hostage.cpp:469 */
void CHostage::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		float flActualDamage;                                 //   471
//		class CBasePlayer *pAttacker;                        //   472
//		GetModifiedDamage(CHostage *const this,
//					float flDamage,
//					int nHitGroup);  //   475
//		PlayPainSound(CHostage *const this);  //   485
//		{
//			class CBaseEntity *pAttackingEnt;            //   489
//			GetClassPtr<CBaseEntity>(CBaseEntity *a);  //   492
//		}
//		ApplyHostagePenalty(CHostage *const this,
//					class CBasePlayer *pAttacker);  //   518
//		SetFlinchActivity(CHostage *const this);  //   552
//	}
}

/* <45edaa> ../cstrike/dlls/hostage/hostage.cpp:1159 */
void CHostage::SendHostagePositionMsg(void)
{
//	{
//		class CBaseEntity *pEntity;                          //  1161
//		edict(CBaseEntity *const this);  //  1165
//		FNullEnt(const edict_t *pent);  //  1165
//		{
//			class CBasePlayer *pTempPlayer;              //  1169
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  1173
//		}
//	}
}

/* <45ecd5> ../cstrike/dlls/hostage/hostage.cpp:1189 */
void CHostage::SendHostageEventMsg(void)
{
//	{
//		class CBaseEntity *pEntity;                          //  1191
//		edict(CBaseEntity *const this);  //  1195
//		FNullEnt(const edict_t *pent);  //  1195
//		{
//			class CBasePlayer *pTempPlayer;              //  1199
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  1203
//		}
//	}
}

/* <45ea1b> ../cstrike/dlls/hostage/hostage.cpp:1818 */
void SimpleChatter::PlaySound(CBaseEntity *entity, HostageChatterType type)
{
//	{
//		class CHostage *hostage;                             //  1821
//		float duration;                                       //  1823
//		char *sound;                                         //  1824
//		GetSound(SimpleChatter *const this,
//			enum HostageChatterType type,
//			float *duration);  //  1824
//		{
//			int pitch;                                    //  1828
//			int attenuation;                              //  1838
//		}
//	}
}

/* <45e979> ../cstrike/dlls/hostage/hostage.cpp:1793 */
void SimpleChatter::GetSound(HostageChatterType type, float *duration)
{
//	{
//		class ChatterSet *chatter;                           //  1795
//		char *sound;                                         //  1805
//		Shuffle(SimpleChatter *const this,
//			class ChatterSet *chatter);  //  1800
//	}
}

/* <45e92b> ../cstrike/dlls/hostage/hostage.cpp:1793 */
void SimpleChatter::GetSound(HostageChatterType type, float *duration)
{
//	{
//		class ChatterSet *chatter;                           //  1795
//		char *sound;                                         //  1805
//	}
}

/* <45e8c7> ../cstrike/dlls/hostage/hostage.cpp:1773 */
void SimpleChatter::Shuffle(ChatterSet *chatter)
{
//	{
//		int i;                                                //  1775
//		{
//			int j;                                        //  1777
//			{
//				class SoundFile tmp;                  //  1781
//			}
//		}
//	}
}

/* <45e879> ../cstrike/dlls/hostage/hostage.cpp:1773 */
void SimpleChatter::Shuffle(ChatterSet *chatter)
{
//	{
//		int i;                                                //  1775
//		{
//			int j;                                        //  1777
//			{
//				class SoundFile tmp;                  //  1781
//			}
//		}
//	}
}

/* <45e736> ../cstrike/dlls/hostage/hostage.cpp:1752 */
void SimpleChatter::AddSound(HostageChatterType type, char *filename)
{
//	{
//		class ChatterSet *chatter;                           //  1754
//		char actualFilename;                                  //  1758
//		CloneString(const char *str);  //  1756
//	}
}

/* <45e6f0> ../cstrike/dlls/hostage/hostage.cpp:1737 */
void SimpleChatter::~SimpleChatter(void)
{
//	{
//		int i;                                                //  1739
//		{
//			int f;                                        //  1741
//		}
//	}
}

/* <45e6b8> ../cstrike/dlls/hostage/hostage.cpp:1726 */
void SimpleChatter::SimpleChatter(void)
{
//	{
//		int i;                                                //  1728
//	}
}

/* <45e642> ../cstrike/dlls/hostage/hostage.cpp:1716 */
void CHostageManager::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int i;                                                //  1718
//	}
}

/* <45e57b> ../cstrike/dlls/hostage/hostage.cpp:1689 */
void CHostageManager::IsNearbyHostageJumping(CHostageImprov *improv)
{
//	{
//		int i;                                                //  1691
//		{
//			const class CHostageImprov *other;          //  1695
//			float const closeRange;                        //  1703
//			operator-(const Vector *const this,
//					const Vector &v);  //  1704
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //  1704
//		}
//	}
}

/* <45e47f> ../cstrike/dlls/hostage/hostage.cpp:1657 */
void CHostageManager::IsNearbyHostageTalking(CHostageImprov *improv)
{
//	{
//		int i;                                                //  1659
//		{
//			const class CHostageImprov *other;          //  1663
//			float const closeRange;                        //  1671
//			operator-(const Vector *const this,
//					const Vector &v);  //  1672
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //  1672
//			IsTalking(const class CHostageImprov *const this);  //  1675
//		}
//	}
}

/* <45e43d> ../cstrike/dlls/hostage/hostage.cpp:1640 */
void CHostageManager::AddHostage(CHostage *hostage)
{
//	{
//		int i;                                                //  1646
//	}
}

/* <45e3f7> ../cstrike/dlls/hostage/hostage.cpp:1631 */
void CHostageManager::RestartRound(void)
{
//	{
//		int i;                                                //  1634
//	}
}

/* <45e375> ../cstrike/dlls/hostage/hostage.cpp:1443 */
void CHostageManager::CHostageManager(void)
{
//	SimpleChatter(SimpleChatter *const this);  //  1443
}

/* <45e2a6> ../cstrike/dlls/hostage/hostage.cpp:1430 */
/* linkage=_Z21InstallHostageManagerv */
void InstallHostageManager(void)
{
//	~CHostageManager(CHostageManager *const this,
//			int const __in_chrg);  //  1433
//	CHostageManager(CHostageManager *const this);  //  1435
}

/* <45e268> ../cstrike/dlls/hostage/hostage.cpp:1737 */
void SimpleChatter::~SimpleChatter(int const __in_chrg)
{
//	{
//		int i;                                                //  1739
//		{
//			int f;                                        //  1741
//		}
//	}
}

/* <45e24e> ../cstrike/dlls/hostage/hostage.cpp:1421 */
/* linkage=_Z21Hostage_RegisterCVarsv */
void Hostage_RegisterCVars(void)
{
}

/* <45e00c> ../cstrike/dlls/hostage/hostage.cpp:1346 */
void CHostage::PreThink(void)
{
//	{
//		Vector vecSrc;                                  //  1352
//		Vector vecDest;                                 //  1353
//		TraceResult tr;                                       //  1354
//		float flOrigDist;                                     //  1355
//		float flRaisedDist;                                   //  1356
//		float flInterval;                                     //  1357
//		Length2D(const Vector *const this);  //  1362
//		operator*(const Vector *const this,
//				float fl);  //  1368
//		operator+(const Vector *const this,
//				const Vector &v);  //  1368
//		edict(CBaseEntity *const this);  //  1371
//		operator-(const Vector *const this,
//				const Vector &v);  //  1382
//		Length2D(const Vector *const this);  //  1382
//		Normalize(const Vector *const this);  //  1386
//		operator*(const Vector *const this,
//				float fl);  //  1386
//		edict(CBaseEntity *const this);  //  1389
//		operator+(const Vector *const this,
//				const Vector &v);  //  1386
//		edict(CBaseEntity *const this);  //  1397
//		operator-(const Vector *const this,
//				const Vector &v);  //  1402
//		Length2D(const Vector *const this);  //  1402
//		{
//			Vector vecNewOrigin;                    //  1406
//		}
//	}
}

/* <45dd66> ../cstrike/dlls/hostage/hostage.cpp:910 */
void CHostage::DoFollow(void)
{
//	{
//		class CBaseEntity *pFollowing;                       //   912
//		Vector vecDest;                                 //   913
//		float flRadius;                                       //   914
//		float flDistToDest;                                   //   915
//		GetClassPtr<CBaseEntity>(CBaseEntity *a);  //   930
//		SetTargetEnt(CLocalNav *const this,
//				class CBaseEntity *pTarget);  //   931
//		operator-(const Vector *const this,
//				const Vector &v);  //   937
//		Length(const Vector *const this);  //   937
//		Length2D(const Vector *const this);  //  1009
//		operator-(const Vector *const this,
//				const Vector &v);  //   964
//		Length2D(const Vector *const this);  //   964
//		Length2D(const Vector *const this);  //   952
//		IsFollowingSomeone(CHostage *const this);  //   994
//		PointAt(CHostage *const this,
//			const Vector &vecLoc);  //   985
//	}
}

/* <45d8a6> ../cstrike/dlls/hostage/hostage.cpp:1292 */
void CHostage::Wiggle(void)
{
//	{
//		TraceResult tr;                                       //  1294
//		Vector vec;                                     //  1295
//		Vector wiggle_directions;                       //  1297
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		{
//			int i;                                        //  1309
//			{
//				Vector dest;                    //  1311
//				operator+(const Vector *const this,
//						const Vector &v);  //  1311
//				operator-(const Vector *const this,
//						const Vector &v);  //  1314
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator*(const Vector *const this,
//				float fl);  //  1307
//		operator+(const Vector *const this,
//				const Vector &v);  //  1338
//		Normalize(const Vector *const this);  //  1340
//		operator+(const Vector *const this,
//				const Vector &v);  //  1340
//	}
}

/* <45d727> ../cstrike/dlls/hostage/hostage.cpp:1106 */
void CHostage::NavReady(void)
{
//	{
//		class CBaseEntity *pFollowing;                       //  1108
//		Vector vecDest;                                 //  1109
//		float flRadius;                                       //  1110
//		node_index_t nindexPath;                              //  1111
//		GetClassPtr<CBaseEntity>(CBaseEntity *a);  //  1118
//		{
//			TraceResult tr;                               //  1123
//			Vector vecDropDest;                     //  1124
//			edict(CBaseEntity *const this);  //  1129
//		}
//		SetTargetEnt(CLocalNav *const this,
//				class CBaseEntity *pTarget);  //  1142
//	}
}

/* <45d704> ../cstrike/dlls/hostage/hostage.cpp:1102 */
void CHostage::IsOnLadder(void)
{
}

/* <45d34c> ../cstrike/dlls/hostage/hostage.cpp:1025 */
void CHostage::MoveToward(Vector &vecLoc)
{
//	{
//		int nFwdMove;                                         //  1027
//		Vector vecFwd;                                  //  1028
//		Vector vecbigDest;                              //  1029
//		Vector vecMove;                                 //  1030
//		class CBaseEntity *pFollowing;                       //  1032
//		Vector vecAng;                                  //  1034
//		float flDist;                                         //  1040
//		GetClassPtr<CBaseEntity>(CBaseEntity *a);  //  1032
//		UTIL_MakeVectorsPrivate(Vector &vecAngles,
//					float *p_vForward,
//					float *p_vRight,
//					float *p_vUp);  //  1038
//		operator-(const Vector *const this,
//				const Vector &v);  //  1036
//		operator-(const Vector *const this,
//				const Vector &v);  //  1040
//		Length2D(const Vector *const this);  //  1040
//		operator*(const Vector *const this,
//				float fl);  //  1040
//		Length2D(const Vector *const this);  //  1040
//		operator-(const Vector *const this,
//				const Vector &v);  //  1040
//		Length2D(const Vector *const this);  //  1040
//		operator*(const Vector *const this,
//				float fl);  //  1041
//		operator+(const Vector *const this,
//				const Vector &v);  //  1043
//		{
//			float flSpeed;                                //  1049
//			Vector vecDest;                         //  1051
//			{
//				float flDist;                         //  1061
//				operator-(const Vector *const this,
//						const Vector &v);  //  1063
//				Length(const Vector *const this);  //  1063
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //  1040
//		Length2D(const Vector *const this);  //  1040
//	}
}

/* <45d278> ../cstrike/dlls/hostage/hostage.cpp:1018 */
void CHostage::PointAt(Vector &vecLoc)
{
//	operator-(const Vector *const this,
//			const Vector &v);  //  1022
}

/* <45d24e> ../cstrike/dlls/hostage/hostage.cpp:1018 */
void CHostage::PointAt(Vector &vecLoc)
{
}

/* <45d1ff> ../cstrike/dlls/hostage/hostage.cpp:851 */
void CHostage::GiveCTTouchBonus(CBasePlayer *pPlayer)
{
//	edict(CBaseEntity *const this);  //   865
//	edict(CBaseEntity *const this);  //   865
}

/* <45cfd6> ../cstrike/dlls/hostage/hostage.cpp:740 */
void CHostage::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *pPlayer;                          //   742
//	}
//	Use(CHostage *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   740
}

/* <45cfb1> ../cstrike/dlls/hostage/hostage.cpp:851 */
void CHostage::GiveCTTouchBonus(CBasePlayer *pPlayer)
{
}

/* <45cf8d> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <45cdba> ../cstrike/dlls/hostage/hostage.cpp:833 */
void CHostage::PlayFollowRescueSound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   845
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   843
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   837
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   839
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   841
}

/* <45cd6b> ../cstrike/dlls/hostage/hostage.cpp:717 */
void CHostage::ApplyHostagePenalty(CBasePlayer *pAttacker)
{
//	{
//		int iHostagePenalty;                                  //   719
//		edict(CBaseEntity *const this);  //   735
//	}
}

/* <45cd38> ../cstrike/dlls/hostage/hostage.cpp:717 */
void CHostage::ApplyHostagePenalty(CBasePlayer *pAttacker)
{
//	{
//		int iHostagePenalty;                                  //   719
//	}
}

/* <45cc41> ../cstrike/dlls/hostage/hostage.cpp:684 */
void CHostage::AnnounceDeath(CBasePlayer *pAttacker)
{
//	edict(CBaseEntity *const this);  //   704
//	edict(CBaseEntity *const this);  //   704
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   707
//	edict(CBaseEntity *const this);  //   710
//	ENTINDEX(edict_t *pEdict);  //   710
//	edict(CBaseEntity *const this);  //   711
//	ENTINDEX(edict_t *pEdict);  //   711
}

/* <45c960> ../cstrike/dlls/hostage/hostage.cpp:642 */
void CHostage::SetDeathActivity(void)
{
//	SetActivity(CHostage::SetDeathActivity(//			int act);  //   675
//	SetActivity(CHostage *const this,
//			int act);  //   678
//	SetActivity(CHostage *const this,
//			int act);  //   676
//	SetActivity(CHostage *const this,
//			int act);  //   677
//	SetActivity(CHostage *const this,
//			int act);  //   658
//	SetActivity(CHostage *const this,
//			int act);  //   656
}

/* <45c8c4> ../cstrike/dlls/hostage/hostage.cpp:612 */
void CHostage::SetFlinchActivity(void)
{
//	{
//		Activity activity;                                    //   616
//		SetActivity(CHostage *const this,
//				int act);  //   637
//	}
}

/* <45c89d> ../cstrike/dlls/hostage/hostage.cpp:612 */
void CHostage::SetFlinchActivity(void)
{
//	{
//		Activity activity;                                    //   616
//	}
}

/* <45c7d3> ../cstrike/dlls/hostage/hostage.cpp:597 */
void CHostage::PlayPainSound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   603
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   605
}

/* <45c7ba> ../cstrike/dlls/hostage/hostage.cpp:597 */
void CHostage::PlayPainSound(void)
{
}

/* <45c783> ../cstrike/dlls/hostage/hostage.cpp:578 */
void CHostage::GetModifiedDamage(float flDamage, int nHitGroup)
{
}

/* <45c752> ../cstrike/dlls/hostage/hostage.cpp:578 */
void CHostage::GetModifiedDamage(float flDamage, int nHitGroup)
{
}

/* <45c624> ../cstrike/dlls/hostage/hostage.cpp:426 */
void CHostage::RePosition(void)
{
//	Vector(Vector::RePosition(//		float X,
//		float Y,
//		float Z);  //   449
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   449
//	edict(CBaseEntity *const this);  //   451
//	SetActivity(CHostage *const this,
//			int act);  //   453
}

/* <45c5ac> ../cstrike/dlls/hostage/hostage.cpp:179 */
void CHostage::SetActivity(int act)
{
//	{
//		int sequence;                                         //   181
//	}
//	SetActivity(CHostage *const this,
//			int act);  //   179
}

/* <45c4d3> ../cstrike/dlls/hostage/hostage.cpp:48 */
void monster_scientist(entvars_t *pev)
{
//	GetClassPtr<CHostage>(CHostage *a);  //    48
}

/* <45c3fa> ../cstrike/dlls/hostage/hostage.cpp:47 */
void hostage_entity(entvars_t *pev)
{
//	GetClassPtr<CHostage>(CHostage *a);  //    47
}

/* <45c3c6> ../cstrike/dlls/cbase.h:800 */
CHostage *GetClassPtr<CHostage>(CHostage *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <45c228> ../cstrike/dlls/hostage/hostage.cpp:54 */
void CHostage::Spawn(void)
{
//	MAKE_STRING_CLASS(const char *str,
//				entvars_t *pev);  //    61
//	SetActivity(CHostage *const this,
//			int act);  //    83
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    93
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    93
//	edict(CBaseEntity *const this);  //   102
//	CHostageManager(CHostageManager *const this);  //    57
}

/* <45c0e3> ../cstrike/dlls/hostage/hostage.cpp:876 */
void CHostage::Touch(CBaseEntity *pOther)
{
//	{
//		class Vector2D vPush;                                 //   901
//		float const pushForce;                                 //   904
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   895
//		{
//			class CBasePlayer *pPlayer;                  //   888
//		}
//	}
//	Touch(CHostage *const this,
//		class CBaseEntity *pOther);  //   876
}

/* <45c041> ../cstrike/dlls/hostage/hostage.cpp:413 */
void CHostage::Remove(void)
{
//	Vector(Vector::Remove(//		float X,
//		float Y,
//		float Z);  //   419
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   419
}

/* <45c028> ../cstrike/dlls/hostage/hostage.cpp:413 */
void CHostage::Remove(void)
{
}

/* <45bfd3> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <45bf91> ../cstrike/dlls/hostage/hostage.cpp:137 */
void CHostage::Precache(void)
{
//	{
//		int which;                                            //   141
//	}
}

/* <45bf69> ../cstrike/dlls/hostage/hostage.cpp:869 */
void CHostage::ObjectCaps(void)
{
}

/* <45bf41> ../cstrike/dlls/hostage/hostage.h:49 */
void CHostage::BloodColor(void)
{
}

/* <45bf19> ../cstrike/dlls/hostage/hostage.h:47 */
void CHostage::Classify(void)
{
}

/* <45bef1> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <45bec9> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <45bea1> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <45be79> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <45be51> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <45be19> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <45bdeb> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <45bdad> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <45bbb0> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <45bb88> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <45bb60> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <45bb28> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <45bb00> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <45bad8> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <45bab0> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <45ba88> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <45ba5f> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <45ba37> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <45ba0f> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <45b9d8> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <45b9b0> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <45b988> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <45b951> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <45b929> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <45b85e> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <45b827> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <45b7f0> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <45b78a> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <45b744> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <45b71c> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <45b6e8> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <45b6b1> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <45b67a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <45b652> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <45b62a> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <45b5c5> ../cstrike/dlls/hostage/hostage_improv.h:202 */
inline void CHostageImprov::GetFollowLeader(void)
{
}

/* <45b5a7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <45b530> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <45b510> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <45b4f0> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <45b4c1> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <45b48d> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <45b46f> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <45b456> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <45b43d> ../cstrike/dlls/hostage/hostage.cpp:1102 */
void CHostage::IsOnLadder(void)
{
}

/* <45b3dd> ../cstrike/dlls/hostage/hostage.h:32 */
inline void CHostage::CHostage(void)
{
}

/* <45b361> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <45b33a> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <45b2a3> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <45b233> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <45b1f4> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <45b19d> ../cstrike/dlls/hostage/hostage.cpp:740 */
void CHostage::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *pPlayer;                          //   742
//	}
}

/* <45b184> ../cstrike/dlls/hostage/hostage_improv.h:150 */
inline void CHostageImprov::Idle(void)
{
}

/* <45b160> ../cstrike/dlls/hostage/hostage_improv.h:157 */
inline void CHostageImprov::Follow(CBasePlayer *leader)
{
}

/* <45b142> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <45b10e> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <45b0e5> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <45b0c1> ../cstrike/dlls/hostage/hostage_states.h:161 */
inline void HostageFollowState::SetLeader( CBaseEntity *leader)
{
}

/* <45b0a8> ../cstrike/dlls/hostage/hostage.h:258 */
inline void CHostageManager::GetChatter(void)
{
}

/* <45b074> ../cstrike/dlls/hostage/hostage.cpp:1640 */
void CHostageManager::AddHostage(CHostage *hostage)
{
//	{
//		int i;                                                //  1646
//	}
}

/* <45b018> ../cstrike/dlls/hostage/hostage.h:247 */
inline void CHostageManager::~CHostageManager( int const __in_chrg)
{
}

/* <45afd3> ../cstrike/dlls/hostage/hostage.cpp:1443 */
void CHostageManager::CHostageManager(void)
{
}

/* <45afa6> ../cstrike/dlls/hostage/hostage.cpp:1726 */
void SimpleChatter::SimpleChatter(void)
{
//	{
//		int i;                                                //  1728
//	}
}

/* <45af88> ../cstrike/dlls/hostage/hostage_improv.h:229 */
inline void CHostageImprov::IsTalking(void)
{
}

/* <45af59> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <45af40> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <45af1a> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <45aeb0> ../cstrike/dlls/hostage/hostage.cpp:179 */
void CHostage::SetActivity(int act)
{
//	{
//		int sequence;                                         //   181
//	}
}

/* <45ae8a> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <45ae63> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <45ae4a> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <45ae31> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <45ae13> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <45adef> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <45adc6> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <45ad9e> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <45ad74> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <45ad44> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <45acaa> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <45ac51> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <45abf8> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <45abb9> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <45ab8f> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <45ab36> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <45aae9> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <45aacb> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <45aaa2> ../cstrike/dlls/hostage/hostage_localnav.h:58 */
inline void CLocalNav::SetTargetEnt(CBaseEntity *pTarget)
{
}

/* <45aa84> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <45aa18> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <45a9fa> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <45a9e1> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <45a98f> ../cstrike/dlls/hostage/hostage.cpp:876 */
void CHostage::Touch(CBaseEntity *pOther)
{
//	{
//		class Vector2D vPush;                                 //   901
//		float const pushForce;                                 //   904
//		{
//			class CBasePlayer *pPlayer;                  //   888
//		}
//	}
}

/* <45a969> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <45a942> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <45a877> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <45a851> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <45a807> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <45a7e0> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <45a7b4> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <45a780> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <45a760> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <45a742> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <45a706> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <45a6de> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <45a6b6> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <45a68c> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <45a664> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState(int const __in_chrg)
{
}

/* <44a220> ../cstrike/dlls/hostage/states/hostage_retreat.cpp:20 */
void HostageRetreatState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CBasePlayer *player;                           //    40
//	}
//	OnUpdate(HostageRetreatState *const this,
//		class CHostageImprov *improv);  //    20
}

/* <44a207> ../cstrike/dlls/hostage/hostage_improv.h:150 */
inline void CHostageImprov::Idle(void)
{
}

/* <44a1b6> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <44a14d> ../cstrike/dlls/hostage/hostage_states.h:138 */
void HostageRetreatState::~HostageRetreatState(void)
{
//	~HostageRetreatState(HostageRetreatState::~HostageRetreatState(//				int const __in_chrg);  //   138
}

/* <44a114> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <44a0e0> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <44a0ac> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <44a078> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <44a057> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <44a023> ../cstrike/dlls/hostage/states/hostage_retreat.cpp:79 */
void HostageRetreatState::OnExit(CHostageImprov *improv)
{
}

/* <449fee> ../cstrike/dlls/hostage/states/hostage_retreat.cpp:12 */
void HostageRetreatState::OnEnter(CHostageImprov *improv)
{
}

/* <449f9d> ../cstrike/dlls/hostage/hostage_states.h:138 */
void HostageRetreatState::~HostageRetreatState(void)
{
//	~HostageState(HostageState::~HostageRetreatState(//			int const __in_chrg);  //   138
}

/* <449f72> ../cstrike/dlls/hostage/hostage_states.h:144 */
void HostageRetreatState::GetName(void)
{
}

/* <449f39> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <449f05> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <449ed1> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <449e8a> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <449e4c> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <449e0e> ../cstrike/dlls/hostage/states/hostage_retreat.cpp:20 */
void HostageRetreatState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CBasePlayer *player;                           //    40
//		{
//			float const farRange;                          //    45
//		}
//	}
}

/* <449dea> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <449dc1> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <449d9b> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <449d74> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <449d4d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <449d34> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <449d16> ../cstrike/dlls/hostage/hostage.h:136 */
inline void CHostage::GetHomePosition(void)
{
}

/* <449cf2> ../cstrike/dlls/hostage/hostage_improv.h:255 */
inline void CHostageImprov::GetEntity(void)
{
}

/* <449cd4> ../cstrike/dlls/hostage/hostage_improv.h:219 */
inline void CHostageImprov::GetScareIntensity(void)
{
}

/* <449cab> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <449c87> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <449c5e> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <449c36> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <449c0c> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <449bdc> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <449b83> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <449b2a> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <449aeb> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <449ac1> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <449a68> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <449a1b> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <4499fd> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <4499df> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <449990> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <449946> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <44990b> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <4498bc> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <449842> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <449816> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <4497ee> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <4497c4> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <44979a> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <449772> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <43c7db> ../cstrike/dlls/hostage/states/hostage_idle.cpp:23 */
void HostageIdleState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CHostage *hostage;                             //    29
//		float const pushbackRange;                             //   107
//		class CBasePlayer *rescuer;                          //   119
//		class CBasePlayer *captor;                           //   120
//	}
//	OnUpdate(HostageIdleState *const this,
//		class CHostageImprov *improv);  //    23
}

/* <43c783> ../cstrike/dlls/hostage/states/hostage_idle.cpp:307 */
void HostageIdleState::UpdateStationaryAnimation(CHostageImprov *improv)
{
//	UpdateStationaryAnimation(HostageIdleState *const this,
//					class CHostageImprov *improv);  //   307
}

/* <43c732> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <43c6c9> ../cstrike/dlls/hostage/hostage_states.h:38 */
void HostageIdleState::~HostageIdleState(void)
{
//	~HostageIdleState(HostageIdleState::~HostageIdleState(//				int const __in_chrg);  //    38
}

/* <43c690> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <43c65c> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <43c628> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <43c5f4> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <43c5d3> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <43c59b> ../cstrike/dlls/hostage/states/hostage_idle.cpp:297 */
void HostageIdleState::OnExit(CHostageImprov *improv)
{
}

/* <43c558> ../cstrike/dlls/hostage/states/hostage_idle.cpp:15 */
void HostageIdleState::OnEnter(CHostageImprov *improv)
{
//	Invalidate(CountdownTimer *const this);  //    18
}

/* <43c507> ../cstrike/dlls/hostage/hostage_states.h:38 */
void HostageIdleState::~HostageIdleState(void)
{
//	~HostageState(HostageState::~HostageIdleState(//			int const __in_chrg);  //    38
}

/* <43c4ce> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <43c48b> ../cstrike/dlls/hostage/hostage_states.h:48 */
void HostageIdleState::OnInjury(float amount)
{
//	Invalidate(CountdownTimer *const this);  //    48
}

/* <43c444> ../cstrike/dlls/hostage/hostage_states.h:47 */
void HostageIdleState::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <43c40b> ../cstrike/dlls/hostage/hostage_states.h:46 */
void HostageIdleState::OnMoveToSuccess(Vector &goal)
{
}

/* <43c3e0> ../cstrike/dlls/hostage/hostage_states.h:44 */
void HostageIdleState::GetName(void)
{
}

/* <43c3ac> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <43c378> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <43c331> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <43c2f3> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <43c197> ../cstrike/dlls/hostage/states/hostage_idle.cpp:23 */
void HostageIdleState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CHostage *hostage;                             //    29
//		float const pushbackRange;                             //   107
//		class CBasePlayer *rescuer;                          //   119
//		class CBasePlayer *captor;                           //   120
//		{
//			float const terroristRecentTime;               //    48
//			{
//				float const fleeChance;                //    52
//			}
//		}
//		{
//			const Vector *spot;                   //    62
//		}
//		{
//			float const crouchChance;                      //    90
//		}
//		{
//			float const waveRange;                         //   188
//			{
//				float rangeT;                         //   132
//				float const attentionRange;            //   135
//				{
//					float const cosTolerance;      //   139
//					TraceResult result;           //   147
//				}
//			}
//			{
//				float const closeRange;                //   168
//				{
//					enum HostageChatterType say;  //   173
//				}
//			}
//		}
//		{
//			float const closeRange;                        //   207
//			{
//				float const minThreatenTime;           //   224
//			}
//		}
//		{
//			float const stayHomeDuration;                  //   256
//			{
//				float sightTimeT;                     //   264
//				float sightTimeCT;                    //   265
//				float const waitTime;                  //   266
//			}
//		}
//	}
}

/* <43c17e> ../cstrike/dlls/hostage/hostage_improv.h:184 */
inline void CHostageImprov::Escape(void)
{
}

/* <43c165> ../game_shared/bot/bot_util.h:146 */
inline void IntervalTimer::Invalidate(void)
{
}

/* <43c14c> ../cstrike/dlls/hostage/hostage_improv.h:191 */
inline void CHostageImprov::Retreat(void)
{
}

/* <43c133> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <43c10f> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <43c0eb> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <43c0b3> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <43c08a> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <43c071> ../cstrike/dlls/bot/cs_bot_manager.h:198 */
inline void CCSBotManager::IsRoundOver(void)
{
}

/* <43c053> ../cstrike/dlls/bot/cs_bot_manager.h:178 */
inline void CCSBotManager::GetElapsedRoundTime(void)
{
}

/* <43c022> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <43bffb> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <43bfd4> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <43bfbb> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <43bfa2> ../cstrike/dlls/hostage/hostage_improv.h:255 */
inline void CHostageImprov::GetEntity(void)
{
}

/* <43bf89> ../cstrike/dlls/hostage/hostage_improv.h:222 */
inline void CHostageImprov::GetAggression(void)
{
}

/* <43bf64> ../cstrike/dlls/hostage/states/hostage_idle.cpp:307 */
void HostageIdleState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <43bf46> ../cstrike/dlls/hostage/hostage_improv.h:219 */
inline void CHostageImprov::GetScareIntensity(void)
{
}

/* <43bf1d> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <43bef9> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <43bed0> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <43bea8> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <43be7e> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <43be4e> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <43bdf5> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <43bd9c> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <43bd34> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <43bd0a> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <43bcb1> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <43bc64> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <43bc46> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <43bc28> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <43bc0a> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <43bbbb> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <43bb71> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <43bb36> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <43bae7> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <43ba8b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <43ba5f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <43ba3f> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <43ba21> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <43b9f9> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <43b9cf> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <43b9a5> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <43b97d> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <42e461> ../cstrike/dlls/hostage/states/hostage_follow.cpp:40 */
void HostageFollowState::OnUpdate(CHostageImprov *improv)
{
//	{
//		float range;                                          //    58
//		float const giveUpRange;                               //    61
//		float const maxPathLength;                             //    62
//		float const walkRange;                                 //    70
//		float const continueRange;                             //    71
//		float leaderSpeed;                                    //    74
//		float const runThreshold;                              //    75
//		bool isLeaderRunning;                                 //    76
//		float const movedRange;                                //   246
//		Idle(CHostageImprov *const this);  //    54
//	}
//	OnUpdate(HostageFollowState *const this,
//		class CHostageImprov *improv);  //    40
}

/* <42e448> ../cstrike/dlls/hostage/hostage_improv.h:150 */
inline void CHostageImprov::Idle(void)
{
}

/* <42e3e3> ../cstrike/dlls/hostage/states/hostage_follow.cpp:12 */
void HostageFollowState::OnEnter(CHostageImprov *improv)
{
//	Invalidate(CountdownTimer *const this);  //    28
//	OnEnter(HostageFollowState *const this,
//		class CHostageImprov *improv);  //    12
}

/* <42e38f> ../cstrike/dlls/hostage/states/hostage_follow.cpp:270 */
void HostageFollowState::UpdateStationaryAnimation(CHostageImprov *improv)
{
//	UpdateStationaryAnimation(HostageFollowState *const this,
//					class CHostageImprov *improv);  //   270
}

/* <42e33e> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <42e2d5> ../cstrike/dlls/hostage/hostage_states.h:149 */
void HostageFollowState::~HostageFollowState(void)
{
//	~HostageFollowState(HostageFollowState::~HostageFollowState(//				int const __in_chrg);  //   149
}

/* <42e29c> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <42e268> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <42e234> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <42e200> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <42e1df> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <42e1aa> ../cstrike/dlls/hostage/states/hostage_follow.cpp:256 */
void HostageFollowState::OnExit(CHostageImprov *improv)
{
}

/* <42e159> ../cstrike/dlls/hostage/hostage_states.h:149 */
void HostageFollowState::~HostageFollowState(void)
{
//	~HostageState(HostageState::~HostageFollowState(//			int const __in_chrg);  //   149
}

/* <42e12e> ../cstrike/dlls/hostage/hostage_states.h:158 */
void HostageFollowState::GetName(void)
{
}

/* <42e0f5> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <42e0c1> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <42e08d> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <42e046> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <42e008> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <42dfc9> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <42deaf> ../cstrike/dlls/hostage/states/hostage_follow.cpp:40 */
void HostageFollowState::OnUpdate(CHostageImprov *improv)
{
//	{
//		float range;                                          //    58
//		float const giveUpRange;                               //    61
//		float const maxPathLength;                             //    62
//		float const walkRange;                                 //    70
//		float const continueRange;                             //    71
//		float leaderSpeed;                                    //    74
//		float const runThreshold;                              //    75
//		bool isLeaderRunning;                                 //    76
//		float const movedRange;                                //   246
//		{
//			float const closeRange;                        //   117
//			class CBasePlayer *terrorist;                //   193
//			{
//				bool makeWay;                         //   120
//				float const cosTolerance;              //   123
//				{
//					Vector to;              //   148
//					Vector cross;           //   152
//					Vector lat;             //   154
//					float const sideStepSize;      //   168
//					Vector sideStepPos;     //   169
//					float ground;                 //   172
//					{
//						float const push;      //   178
//					}
//				}
//			}
//		}
//		{
//			bool doWait;                                  //   206
//		}
//	}
}

/* <42de8b> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <42de1a> ../cstrike/dlls/vector.h:108 */
inline void Vector::operator-(void)
{
}

/* <42ddf6> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <42ddbe> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <42dd87> ../cstrike/dlls/hostage/hostage_improv.h:146 */
inline void CHostageImprov::GetPath(void)
{
}

/* <42dd5e> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <42dd40> ../cstrike/dlls/bot/cs_bot_manager.h:198 */
inline void CCSBotManager::IsRoundOver(void)
{
}

/* <42dd0e> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <42dce7> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <42dcce> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <42dcb0> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <42dc8c> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <42dc63> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <42dc3b> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <42dc11> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <42dbe1> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <42db88> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <42db2f> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <42daf0> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <42dac6> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <42da6d> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <42da20> ../game_shared/bot/nav_path.h:46 */
inline void CNavPath::IsValid(void)
{
}

/* <42da07> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <42d9e9> ../game_shared/bot/bot_util.h:205 */
inline void CountdownTimer::HasStarted(void)
{
}

/* <42d9c5> ../cstrike/dlls/hostage/states/hostage_follow.cpp:12 */
void HostageFollowState::OnEnter(CHostageImprov *improv)
{
}

/* <42d9a7> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <42d989> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <42d93a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <42d913> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <42d8d8> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <42d889> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <42d818> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <42d7ec> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <42d7b8> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <42d79a> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <42d77c> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <42d757> ../cstrike/dlls/hostage/states/hostage_follow.cpp:270 */
void HostageFollowState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <42d72f> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <42d705> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <42d6db> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <42d6b3> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <4205b1> ../cstrike/dlls/hostage/states/hostage_escape.cpp:12 */
void HostageEscapeToCoverState::OnEnter(CHostageImprov *improv)
{
//	{
//		class CNavPath path;                                  //    18
//		class HostagePathCost pathCost;                       //    19
//		Invalidate(CNavPath *const this);  //    14
//		CNavPath(CNavPath *const this);  //    18
//		Compute<HostagePathCost>(CNavPath *const this,
//					const Vector *start,
//					const Vector *goal,
//					class HostagePathCost &costFunc);  //    20
//		{
//			float const moveRange;                         //    23
//			int idx;                                      //    24
//			{
//				Vector pathPos;                 //    32
//				float const hidingRange;               //    34
//				const Vector *spot;           //    35
//				operator[](CNavPath *const this,
//						int i);  //    32
//				Vector(Vector *const this,
//					const Vector &v);  //    32
//			}
//		}
//	}
}

/* <42006a> ../game_shared/bot/nav_area.h:679 */
/* linkage=_Z16NavAreaBuildPathI15HostagePathCostEbP8CNavAreaS2_PK6VectorRT_PS2_ */
bool NavAreaBuildPath<HostagePathCost>(CNavArea *startArea, class CNavArea *goalArea, const Vector *goalPos, class HostagePathCost &costFunc, class CNavArea ** closestArea)
{
//	{
//		Vector actualGoalPos;                           //   710
//		float initCost;                                       //   719
//		float closestAreaDist;                                //   729
//		SetParent(CNavArea *const this,
//				class CNavArea *parent,
//				enum NavTraverseType how);  //   696
//		Vector(Vector *const this,
//			const Vector &v);  //   710
//		operator-(const Vector *const this,
//				const Vector &v);  //   717
//		Length(const Vector *const this);  //   717
//		SetTotalCost(CNavArea *const this,
//				float value);  //   717
//		SetCostSoFar(CNavArea *const this,
//				float value);  //   722
//		IsOpenListEmpty(void);  //   732
//		{
//			class CNavArea *area;                        //   735
//			bool searchFloor;                             //   747
//			int dir;                                      //   748
//			const NavConnectList *floorList;            //   749
//			const_iterator floorIter;                     //   750
//			bool ladderUp;                                //   752
//			const NavLadderList *ladderList;            //   753
//			const_iterator ladderIter;                    //   754
//			int ladderTopDir;                             //   756
//			PopOpenList(void);  //   735
//			{
//				class CNavArea *newArea;             //   760
//				enum NavTraverseType how;             //   761
//				const class CNavLadder *ladder;     //   762
//				float newCostSoFar;                   //   859
//				operator++(_List_const_iterator<NavConnect> *const this);  //   795
//				operator()(HostagePathCost *const this,
//						class CNavArea *area,
//						class CNavArea *fromArea,
//						const class CNavLadder *ladder);  //   859
//				IsOpen(const class CNavArea *const this);  //   865
//				IsClosed(const class CNavArea *const this);  //   865
//				{
//					float newCostRemaining;       //   873
//					operator-(const Vector *const this,
//							const Vector &v);  //   873
//					Length(const Vector *const this);  //   873
//					SetParent(CNavArea *const this,
//							class CNavArea *parent,
//							enum NavTraverseType how);  //   882
//					SetCostSoFar(CNavArea *const this,
//							float value);  //   883
//					SetTotalCost(CNavArea *const this,
//							float value);  //   884
//				}
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //   848
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //   836
//			}
//			AddToClosedList(CNavArea *const this);  //   902
//		}
//	}
}

/* <41fe8e> ../cstrike/dlls/hostage/states/hostage_escape.cpp:167 */
void HostageEscapeState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CBasePlayer *player;                           //   192
//	}
//	OnUpdate(HostageEscapeState *const this,
//		class CHostageImprov *improv);  //   167
}

/* <41fd51> ../cstrike/dlls/hostage/states/hostage_escape.cpp:52 */
void HostageEscapeToCoverState::OnUpdate(CHostageImprov *improv)
{
//	Idle(CHostageImprov *const this);  //    57
//	OnUpdate(HostageEscapeToCoverState *const this,
//		class CHostageImprov *improv);  //    52
}

/* <41fd38> ../cstrike/dlls/hostage/hostage_improv.h:150 */
inline void CHostageImprov::Idle(void)
{
}

/* <41fc67> ../cstrike/dlls/hostage/states/hostage_escape.cpp:119 */
void HostageEscapeLookAroundState::OnUpdate(CHostageImprov *improv)
{
//	IsElapsed(const class CountdownTimer *const this);  //   123
//	OnUpdate(HostageEscapeLookAroundState *const this,
//		class CHostageImprov *improv);  //   119
}

/* <41fb6b> ../cstrike/dlls/hostage/states/hostage_escape.cpp:145 */
void HostageEscapeState::OnEnter(CHostageImprov *improv)
{
//	{
//		class CCSBotManager *ctrl;                           //   148
//		const class Zone *zone;                             //   149
//		GetRandomZone(const class CCSBotManager *const this);  //   149
//		SetRescueGoal(HostageEscapeToCoverState *const this,
//				const Vector &rescueGoal);  //   153
//		SetState(SimpleStateMachine<CHostageImprov*, HostageState> *const this,
//			class HostageState *newState);  //   156
//		Reset(SimpleStateMachine<CHostageImprov*, HostageState> *const this,
//			class CHostageImprov *userData);  //   155
//	}
}

/* <41faaf> ../cstrike/dlls/hostage/states/hostage_escape.cpp:100 */
void HostageEscapeToCoverState::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
//	{
//		class HostageEscapeState *escape;                    //   103
//		LookAround(HostageEscapeState *const this);  //   104
//	}
}

/* <41fa8b> ../game_shared/bot/simple_state_machine.h:55 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::SetState(HostageState *newState)
{
}

/* <41fa2f> ../cstrike/dlls/hostage/states/hostage_escape.cpp:110 */
void HostageEscapeLookAroundState::OnEnter(CHostageImprov *improv)
{
//	Start(CountdownTimer *const this,
//		float duration);  //   112
}

/* <41f9de> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <41f975> ../cstrike/dlls/hostage/hostage_states.h:71 */
void HostageEscapeToCoverState::~HostageEscapeToCoverState(void)
{
//	~HostageEscapeToCoverState(HostageEscapeToCoverState::~HostageEscapeToCoverState(//					int const __in_chrg);  //    71
}

/* <41f90c> ../cstrike/dlls/hostage/hostage_states.h:92 */
void HostageEscapeLookAroundState::~HostageEscapeLookAroundState(void)
{
//	~HostageEscapeLookAroundState(HostageEscapeLookAroundState::~HostageEscapeLookAroundState(//					int const __in_chrg);  //    92
}

/* <41f7f1> ../cstrike/dlls/hostage/hostage_states.h:106 */
void HostageEscapeState::~HostageEscapeState(void)
{
//	~HostageEscapeState(HostageEscapeState::~HostageEscapeState(//				int const __in_chrg);  //   106
}

/* <41f7b8> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <41f784> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <41f750> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <41f71c> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <41f6fb> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <41f6c7> ../cstrike/dlls/hostage/states/hostage_escape.cpp:230 */
void HostageEscapeState::OnExit(CHostageImprov *improv)
{
}

/* <41f693> ../cstrike/dlls/hostage/states/hostage_escape.cpp:133 */
void HostageEscapeLookAroundState::OnExit(CHostageImprov *improv)
{
}

/* <41f65f> ../cstrike/dlls/hostage/states/hostage_escape.cpp:95 */
void HostageEscapeToCoverState::OnExit(CHostageImprov *improv)
{
}

/* <41f55c> ../cstrike/dlls/hostage/hostage_states.h:106 */
void HostageEscapeState::~HostageEscapeState(void)
{
//	~HostageEscapeLookAroundState(HostageEscapeLookAroundState::~HostageEscapeState(//					int const __in_chrg);  //   106
//	~HostageEscapeToCoverState(HostageEscapeToCoverState *const this,
//					int const __in_chrg);  //   106
//	~HostageState(HostageState *const this,
//			int const __in_chrg);  //   106
}

/* <41f531> ../cstrike/dlls/hostage/hostage_states.h:120 */
void HostageEscapeState::GetName(void)
{
}

/* <41f4bf> ../cstrike/dlls/hostage/hostage_states.h:118 */
void HostageEscapeState::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
//	OnMoveToFailure(HostageStateMachine *const this,
//			const Vector &goal,
//			enum MoveToFailureType reason);  //   118
}

/* <41f46e> ../cstrike/dlls/hostage/hostage_states.h:92 */
void HostageEscapeLookAroundState::~HostageEscapeLookAroundState(void)
{
//	~HostageState(HostageState::~HostageEscapeLookAroundState(//			int const __in_chrg);  //    92
}

/* <41f41d> ../cstrike/dlls/hostage/hostage_states.h:71 */
void HostageEscapeToCoverState::~HostageEscapeToCoverState(void)
{
//	~HostageState(HostageState::~HostageEscapeToCoverState(//			int const __in_chrg);  //    71
}

/* <41f3e4> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <41f3b9> ../cstrike/dlls/hostage/hostage_states.h:98 */
void HostageEscapeLookAroundState::GetName(void)
{
}

/* <41f38e> ../cstrike/dlls/hostage/hostage_states.h:80 */
void HostageEscapeToCoverState::GetName(void)
{
}

/* <41f35a> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <41f326> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <41f2df> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <41f2a1> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <41f1e6> ../game_shared/bot/nav_path.h:60 */
inline void CNavPath::Compute<HostagePathCost>(Vector *start, const Vector *goal, class HostagePathCost &costFunc)
{
//	{
//		class CNavArea *startArea;                           //    67
//		class CNavArea *goalArea;                            //    71
//		Vector pathEndPosition;                         //    81
//		class CNavArea *closestArea;                         //    90
//		bool pathToGoalExists;                                //    91
//		class CNavArea *effectiveGoalArea;                   //    93
//		int count;                                            //   100
//		class CNavArea *area;                                //   101
//	}
}

/* <41f1be> ../game_shared/bot/nav_path.h:35 */
inline void CNavPath::operator[]( int i)
{
}

/* <41f1a5> ../cstrike/dlls/hostage/hostage_improv.h:146 */
inline void CHostageImprov::GetPath(void)
{
}

/* <41f19d> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <41f182> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <41f167> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <41f14e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <41f106> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <41f0ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <41f0d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <41f097> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <41f068> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <41f04f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <41f036> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <41f012> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <41eff7> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <41efd9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <41efb0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <41ef92> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <41ef69> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <41ef2b> ../cstrike/dlls/hostage/states/hostage_escape.cpp:167 */
void HostageEscapeState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CBasePlayer *player;                           //   192
//		{
//			float const farRange;                          //   198
//		}
//	}
}

/* <41ef07> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <41eeee> ../game_shared/bot/simple_state_machine.h:71 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::Update(void)
{
}

/* <41eed0> ../cstrike/dlls/bot/cs_bot_manager.h:150 */
inline void CCSBotManager::GetRandomZone(void)
{
}

/* <41ee91> ../game_shared/bot/simple_state_machine.h:48 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::Reset(CHostageImprov *userData)
{
}

/* <41ee37> ../cstrike/dlls/hostage/states/hostage_escape.cpp:52 */
void HostageEscapeToCoverState::OnUpdate(CHostageImprov *improv)
{
//	{
//		float const emergencyHidingRange;                      //    64
//		const Vector *spot;                           //    65
//		{
//			class HostageEscapeState *escape;            //    72
//		}
//	}
//	{
//		class HostageEscapeState *escape;                    //    85
//	}
}

/* <41ee1e> ../cstrike/dlls/hostage/hostage_states.h:123 */
inline void HostageEscapeState::LookAround(void)
{
}

/* <41eded> ../cstrike/dlls/hostage/states/hostage_escape.cpp:119 */
void HostageEscapeLookAroundState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class HostageEscapeState *escape;                    //   126
//	}
}

/* <41edd4> ../cstrike/dlls/hostage/hostage_states.h:122 */
inline void HostageEscapeState::ToCover(void)
{
}

/* <41edb6> ../game_shared/bot/simple_state_machine.h:29 */
inline void SimpleState<CHostageImprov*>::GetParent(void)
{
}

/* <41ed90> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <41ed69> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <41ed50> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <41ecc2> ../cstrike/dlls/hostage/hostage_improv.h:400 */
inline void HostagePathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float dist;                                           //   416
//		float cost;                                           //   419
//		{
//			float const ladderCost;                        //   412
//		}
//		{
//			float const crouchPenalty;                     //   424
//		}
//		{
//			float const jumpPenalty;                       //   431
//		}
//	}
}

/* <41ec9b> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <41ec82> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <41ec69> ../cstrike/dlls/hostage/hostage_improv.h:255 */
inline void CHostageImprov::GetEntity(void)
{
}

/* <41ec4b> ../cstrike/dlls/hostage/hostage_improv.h:219 */
inline void CHostageImprov::GetScareIntensity(void)
{
}

/* <41ec22> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <41ebfe> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <41ebd5> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <41ebad> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <41eb83> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <41eb53> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <41eafa> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <41eaa1> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <41ea72> ../cstrike/dlls/hostage/hostage_states.h:82 */
inline void HostageEscapeToCoverState::SetRescueGoal(Vector &rescueGoal)
{
}

/* <41ea39> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <41ea20> ../game_shared/bot/nav_path.h:47 */
inline void CNavPath::Invalidate(void)
{
}

/* <41ea02> ../game_shared/bot/nav_path.h:36 */
inline void CNavPath::GetSegmentCount(void)
{
}

/* <41e9e4> ../game_shared/bot/nav_path.h:22 */
inline void CNavPath::CNavPath(void)
{
}

/* <41e9c4> ../game_shared/bot/nav_path.h:27 */
inline void PathSegment::PathSegment(void)
{
}

/* <41e9a3> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <41e988> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <41e96f> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <41e94a> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <41e931> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <41e90c> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <41e8f3> ../game_shared/bot/nav_area.h:292 */
inline void CNavArea::GetParentHow(void)
{
}

/* <41e8da> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <41e8a9> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <41e890> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <41e877> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <41e859> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <41e83b> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <41e822> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <41e7f9> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <41e7db> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <41e78c> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <41e742> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <41e707> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <41e6b8> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <41e65c> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <41e630> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <41e612> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <41e5ea> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <41e5c0> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <41e596> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <41e56c> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <41e542> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <41e51a> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <4112d1> ../cstrike/dlls/hostage/states/hostage_animate.cpp:147 */
void HostageAnimateState::IsPlaying(CHostageImprov *improv, const char *seqName)
{
//	{
//		class CHostage *hostage;                             //   152
//		int id;                                               //   154
//	}
}

/* <41127f> ../cstrike/dlls/hostage/states/hostage_animate.cpp:81 */
void HostageAnimateState::IsDoneHolding(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //    88
//	Start(CountdownTimer *const this,
//		float duration);  //    96
}

/* <4111be> ../cstrike/dlls/hostage/states/hostage_animate.cpp:62 */
void HostageAnimateState::AddSequence(CHostageImprov *improv, int activity, float holdTime, float rate)
{
//	{
//		class CHostage *hostage;                             //    64
//		void *model;                                         //    66
//		StartSequence(HostageAnimateState *const this,
//				class CHostageImprov *improv,
//				const class SeqInfo *seqInfo);  //    77
//	}
}

/* <41110a> ../cstrike/dlls/hostage/states/hostage_animate.cpp:41 */
void HostageAnimateState::AddSequence(CHostageImprov *improv, const char *seqName, float holdTime, float rate)
{
//	{
//		class CHostage *hostage;                             //    46
//		StartSequence(HostageAnimateState *const this,
//				class CHostageImprov *improv,
//				const class SeqInfo *seqInfo);  //    55
//	}
}

/* <4110c7> ../cstrike/dlls/hostage/states/hostage_animate.cpp:20 */
void HostageAnimateState::StartSequence(CHostageImprov *improv, const SeqInfo *seqInfo)
{
//	{
//		class CHostage *hostage;                             //    24
//	}
}

/* <4110a1> ../cstrike/dlls/hostage/states/hostage_animate.cpp:13 */
void HostageAnimateState::Reset(void)
{
}

/* <410fb2> ../cstrike/dlls/hostage/states/hostage_animate.cpp:108 */
void HostageAnimateState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CHostage *hostage;                             //   113
//		IsDoneHolding(HostageAnimateState *const this);  //   118
//	}
//	OnUpdate(HostageAnimateState *const this,
//		class CHostageImprov *improv);  //   108
}

/* <410f76> ../cstrike/dlls/hostage/states/hostage_animate.cpp:20 */
void HostageAnimateState::StartSequence(CHostageImprov *improv, const SeqInfo *seqInfo)
{
//	{
//		class CHostage *hostage;                             //    24
//	}
}

/* <410f5d> ../cstrike/dlls/hostage/states/hostage_animate.cpp:81 */
void HostageAnimateState::IsDoneHolding(void)
{
}

/* <410f0c> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~HostageState(HostageState::~HostageState(//			int const __in_chrg);  //    16
}

/* <410ea3> ../cstrike/dlls/hostage/hostage_states.h:183 */
void HostageAnimateState::~HostageAnimateState(void)
{
//	~HostageAnimateState(HostageAnimateState::~HostageAnimateState(//				int const __in_chrg);  //   183
}

/* <410e6a> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*> *const this)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~SimpleState(//			int const __in_chrg);  //    21
}

/* <410e36> ../game_shared/bot/simple_state_machine.h:24 */
void SimpleState<CHostageImprov*>::OnUpdate(CHostageImprov *userData)
{
}

/* <410e02> ../game_shared/bot/simple_state_machine.h:23 */
void SimpleState<CHostageImprov*>::OnEnter(CHostageImprov *userData)
{
}

/* <410dce> ../game_shared/bot/simple_state_machine.h:25 */
void SimpleState<CHostageImprov*>::OnExit(CHostageImprov *userData)
{
}

/* <410dad> ../game_shared/bot/simple_state_machine.h:21 */
void SimpleState<CHostageImprov*>::~SimpleState(void)
{
}

/* <410d79> ../cstrike/dlls/hostage/states/hostage_animate.cpp:139 */
void HostageAnimateState::OnExit(CHostageImprov *improv)
{
}

/* <410d45> ../cstrike/dlls/hostage/states/hostage_animate.cpp:103 */
void HostageAnimateState::OnEnter(CHostageImprov *improv)
{
}

/* <410cf4> ../cstrike/dlls/hostage/hostage_states.h:183 */
void HostageAnimateState::~HostageAnimateState(void)
{
//	~HostageState(HostageState::~HostageAnimateState(//			int const __in_chrg);  //   183
}

/* <410cc9> ../cstrike/dlls/hostage/hostage_states.h:191 */
void HostageAnimateState::GetName(void)
{
}

/* <410c90> ../cstrike/dlls/hostage/hostage_states.h:16 */
void HostageState::~HostageState(void)
{
//	~SimpleState(SimpleState<CHostageImprov*>::~HostageState(//			int const __in_chrg);  //    16
}

/* <410c5c> ../cstrike/dlls/hostage/hostage_states.h:19 */
void HostageState::UpdateStationaryAnimation(CHostageImprov *improv)
{
}

/* <410c28> ../game_shared/bot/improv.h:30 */
void IImprovEvent::OnInjury(float amount)
{
}

/* <410be1> ../game_shared/bot/improv.h:28 */
void IImprovEvent::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <410ba3> ../game_shared/bot/improv.h:20 */
void IImprovEvent::OnMoveToSuccess(Vector &goal)
{
}

/* <410b72> ../cstrike/dlls/hostage/states/hostage_animate.cpp:108 */
void HostageAnimateState::OnUpdate(CHostageImprov *improv)
{
//	{
//		class CHostage *hostage;                             //   113
//	}
}

/* <410b4e> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <410b28> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <410b01> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <410ada> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <410ac1> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <410aa3> ../cstrike/dlls/hostage/hostage_improv.h:255 */
inline void CHostageImprov::GetEntity(void)
{
}

/* <410a7a> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <410a56> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <410a2d> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <410a05> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <4109db> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <410982> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <410929> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <4108d0> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <410891> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <410867> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <41080e> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <4107c1> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <4107a3> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <410785> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <410736> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <4106ec> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <4106b1> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <410662> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <4105e8> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <4105bc> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <410594> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <41056a> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <410540> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <410518> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <403a98> (null):27581 */
void _GLOBAL__sub_I__ZN10CUtlSymbol14s_pSymbolTableE(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //   191
}

/* <403946> ../public/utlsymbol.cpp:53 */
void CUtlSymbol::CUtlSymbol(const char *pStr)
{
//	CurrTable(void);  //    55
}

/* <403920> ../public/utlsymbol.cpp:53 */
void CUtlSymbol::CUtlSymbol(const char *pStr)
{
}

/* <40358d> ../public/utlsymbol.cpp:150 */
void CUtlSymbolTable::AddString(const char *pString)
{
//	{
//		class CUtlSymbol id;                                  //   155
//		int len;                                              //   161
//		int stridx;                                           //   162
//		UtlSymId_t idx;                                       //   164
//		IsValid(const class CUtlSymbol *const this);  //   157
//		CUtlSymbol(CUtlSymbol *const this,
//				UtlSymId_t id);  //   165
//		AddMultipleToTail(CUtlVector<char> *const this,
//					int num);  //   162
//		Insert(CUtlRBTree<unsigned int, short unsigned int> *const this,
//			const unsigned int &insert);  //   164
//		CUtlSymbol(CUtlSymbol *const this,
//				UtlSymId_t id);  //   153
//	}
}

/* <403448> ../public/utlrbtree.h:630 */
void CUtlRBTree<unsigned int, short unsigned int>::InsertAt(short unsigned int parent, bool leftchild)
{
//	{
//		short unsigned int i;                                 //   632
//		class Links_t &elem;                            //   634
//		NewNode(CUtlRBTree<unsigned int, short unsigned int> *const this);  //   632
//	}
}

/* <4029c4> ../public/utlrbtree.h:555 */
void CUtlRBTree<unsigned int, short unsigned int>::InsertRebalance(short unsigned int elem)
{
//	{
//		short unsigned int parent;                            //   559
//		short unsigned int grandparent;                       //   560
//		{
//			short unsigned int uncle;                     //   594
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   598
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   599
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   600
//			LeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//					short unsigned int i);  //   594
//			IsRed(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   595
//			IsLeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//					short unsigned int i);  //   606
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   615
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   616
//			Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   611
//			Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   612
//		}
//		IsLeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   563
//		{
//			short unsigned int uncle;                     //   565
//			RightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//					short unsigned int i);  //   565
//			IsRed(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   566
//			IsRightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//					short unsigned int i);  //   577
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   586
//			SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				enum NodeColor_t c);  //   587
//			Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   582
//			Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   583
//		}
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   559
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   560
//	}
//	Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//		short unsigned int i);  //   557
//	Color(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//		short unsigned int i);  //   557
//	SetColor(CUtlRBTree<unsigned int, short unsigned int> *const this,
//		short unsigned int i,
//		enum NodeColor_t c);  //   621
}

/* <40240c> ../public/utlrbtree.h:525 */
void CUtlRBTree<unsigned int, short unsigned int>::RotateRight(short unsigned int elem)
{
//	{
//		short unsigned int leftchild;                         //   527
//		LeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   527
//		RightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   528
//		SetLeftChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   528
//		RightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   529
//		RightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   530
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   530
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   533
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   533
//		IsRightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   536
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   539
//		SetLeftChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   539
//		SetRightChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   544
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   546
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   537
//		SetRightChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   537
//	}
}

/* <401e54> ../public/utlrbtree.h:495 */
void CUtlRBTree<unsigned int, short unsigned int>::RotateLeft(short unsigned int elem)
{
//	{
//		short unsigned int rightchild;                        //   497
//		RightChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   497
//		LeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   498
//		LeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   499
//		SetRightChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   498
//		LeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   500
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   500
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   503
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   503
//		IsLeftChild(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i);  //   506
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   507
//		SetLeftChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   507
//		SetLeftChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   514
//		SetParent(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int parent);  //   516
//		Parent(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			short unsigned int i);  //   509
//		SetRightChild(CUtlRBTree<unsigned int, short unsigned int> *const this,
//				short unsigned int i,
//				short unsigned int child);  //   509
//	}
}

/* <401e31> ../public/utlrbtree.h:305 */
inline void CUtlRBTree<unsigned int, short unsigned int>::IsLeftChild(short unsigned int i)
{
}

/* <401e0e> ../public/utlrbtree.h:283 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Parent(short unsigned int i)
{
}

/* <401da8> ../public/UtlVector.h:256 */
void CUtlVector<char>::GrowVector(int num)
{
//	Grow(CUtlMemory<char> *const this,
//		int num);  //   260
}

/* <401c10> ../public/utlsymbol.cpp:187 */
void CUtlSymbolTable::RemoveAll(void)
{
//	RemoveAll(CUtlRBTree<unsigned int, short unsigned int> *const this);  //   189
//	RemoveAll(CUtlVector<char> *const this);  //   190
}

/* <401b8f> ../public/utlsymbol.cpp:173 */
void CUtlSymbolTable::String(CUtlSymbol id)
{
//	IsValid(const class CUtlSymbol *const this);  //   175
//	operator[](const class CUtlVector<char> *const this,
//			int i);  //   179
}

/* <4019b0> ../public/utlsymbol.cpp:130 */
void CUtlSymbolTable::Find(const char *pString)
{
//	{
//		UtlSymId_t idx;                                       //   141
//		Find(const class CUtlRBTree<unsigned int, short unsigned int> *const this,
//			const unsigned int &search);  //   141
//		CUtlSymbol(CUtlSymbol *const this,
//				UtlSymId_t id);  //   142
//		CUtlSymbol(CUtlSymbol *const this);  //   133
//	}
}

/* <40198d> ../public/utlrbtree.h:295 */
inline void CUtlRBTree<unsigned int, short unsigned int>::RightChild(short unsigned int i)
{
}

/* <40195b> ../public/utlrbtree.h:393 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Links(short unsigned int i)
{
//	{
//		class Links_t s_Sentinel;                             //   396
//	}
}

/* <401938> ../public/utlrbtree.h:289 */
inline void CUtlRBTree<unsigned int, short unsigned int>::LeftChild(short unsigned int i)
{
}

/* <401823> ../public/utlsymbol.cpp:125 */
void CUtlSymbolTable::~CUtlSymbolTable(void)
{
//	~CUtlVector(CUtlVector<char>::~CUtlSymbolTable(//			int const __in_chrg);  //   125
//	~CUtlRBTree(CUtlRBTree<unsigned int, short unsigned int> *const this,
//			int const __in_chrg);  //   125
}

/* <4017fe> ../public/utlsymbol.cpp:125 */
void CUtlSymbolTable::~CUtlSymbolTable(int const __in_chrg)
{
}

/* <4017e5> ../public/UtlMemory.h:270 */
void CUtlMemory<char>::Purge(void)
{
}

/* <4016f4> ../public/utlsymbol.cpp:120 */
void CUtlSymbolTable::CUtlSymbolTable(int growSize, int initSize, bool caseInsensitive)
{
//	CUtlRBTree(CUtlRBTree<unsigned int, short unsigned int> *const this,
//			int growSize,
//			int initSize,
//			LessFunc_t lessfunc);  //   121
//	CUtlVector(CUtlVector<char> *const this,
//			int growSize,
//			int initSize);  //   121
}

/* <40154b> ../public/utlsymbol.cpp:67 */
void CUtlSymbol::operator==(const char *pStr)
{
//	String(const class CUtlSymbol *const this);  //    71
}

/* <4013a8> ../public/utlsymbol.cpp:58 */
void CUtlSymbol::String(void)
{
//	CurrTable(void);  //    60
//	String(const class CUtlSymbolTable *const this,
//		class CUtlSymbol id);  //    60
}

/* <40138d> ../public/utlsymbol.cpp:58 */
void CUtlSymbol::String(void)
{
}

/* <40125f> ../public/utlsymbol.cpp:42 */
void CurrTable(void)
{
//	Initialize(void);  //    44
}

/* <401141> ../public/utlsymbol.cpp:31 */
void Initialize(void)
{
//	{
//		bool symbolsInitialized;                              //    34
//		CUtlSymbolTable(CUtlSymbolTable *const this,
//				int growSize,
//				int initSize,
//				bool caseInsensitive);  //    37
//	}
}

/* <401127> ../public/utlsymbol.cpp:31 */
void Initialize(void)
{
//	{
//		bool symbolsInitialized;                              //    34
//	}
}

/* <40104d> ../public/utlsymbol.cpp:91 */
void SymLess(const unsigned int &i1, const unsigned int &i2)
{
//	{
//		const char *str1;                                   //    93
//		const char *str2;                                   //    95
//		operator[](CUtlVector<char> *const this,
//				int i);  //    94
//		operator[](CUtlVector<char> *const this,
//				int i);  //    96
//	}
}

/* <400f73> ../public/utlsymbol.cpp:102 */
void SymLessi(const unsigned int &i1, const unsigned int &i2)
{
//	{
//		const char *str1;                                   //   104
//		const char *str2;                                   //   106
//		operator[](CUtlVector<char> *const this,
//				int i);  //   105
//		operator[](CUtlVector<char> *const this,
//				int i);  //   107
//	}
}

/* <400f32> ../public/utlsymbol.cpp:120 */
void CUtlSymbolTable::CUtlSymbolTable(int growSize, int initSize, bool caseInsensitive)
{
}

/* <400f01> ../public/UtlMemory.h:227 */
void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::Grow(int num)
{
//	{
//		int growSize;                                         //   237
//	}
}

/* <400edf> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <400ea7> ../public/utlrbtree.h:1172 */
void CUtlRBTree<unsigned int, short unsigned int>::Insert(const unsigned int &insert)
{
//	{
//		short unsigned int newnode;                           //  1175
//	}
}

/* <400e82> ../public/UtlVector.h:388 */
inline void CUtlVector<char>::AddMultipleToTail( int num)
{
}

/* <400e59> ../public/utlsymbol.h:46 */
inline void CUtlSymbol::CUtlSymbol(CUtlSymbol &sym)
{
}

/* <400e29> ../public/UtlMemory.h:52 */
inline void CopyConstruct<unsigned int>(unsigned int *pMemory, const unsigned int &src)
{
}

/* <400dd9> ../public/utlrbtree.h:1148 */
void CUtlRBTree<unsigned int, short unsigned int>::CreateInsertedNode(const unsigned int &insert)
{
//	{
//		short unsigned int current;                           //  1153
//		short unsigned int parent;                            //  1154
//		bool leftchild;                                       //  1155
//	}
}

/* <400db2> ../public/utlrbtree.h:450 */
void CUtlRBTree<unsigned int, short unsigned int>::NewNode(void)
{
//	{
//		short unsigned int newElem;                           //   452
//	}
}

/* <400d8f> ../public/utlrbtree.h:434 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Color(short unsigned int i)
{
}

/* <400d62> ../public/utlrbtree.h:440 */
inline void CUtlRBTree<unsigned int, short unsigned int>::SetColor( short unsigned int i, NodeColor_t c)
{
}

/* <400d3f> ../public/utlrbtree.h:417 */
inline void CUtlRBTree<unsigned int, short unsigned int>::IsRed(short unsigned int i)
{
}

/* <400d1c> ../public/utlrbtree.h:311 */
inline void CUtlRBTree<unsigned int, short unsigned int>::IsRightChild(short unsigned int i)
{
}

/* <400ced> ../public/utlrbtree.h:371 */
inline void CUtlRBTree<unsigned int, short unsigned int>::SetParent( short unsigned int i, short unsigned int parent)
{
}

/* <400cca> ../public/utlrbtree.h:322 */
inline void CUtlRBTree<unsigned int, short unsigned int>::IsRoot(short unsigned int i)
{
}

/* <400caa> ../public/UtlMemory.h:46 */
inline void Construct<unsigned int>(unsigned int *pMemory)
{
}

/* <400c91> ../public/UtlMemory.h:206 */
inline void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::NumAllocated(void)
{
}

/* <400c60> ../public/UtlVector.h:430 */
inline void CUtlVector<char>::InsertMultipleBefore( int elem, int num)
{
}

/* <400c21> ../public/UtlVector.h:284 */
void CUtlVector<char>::ShiftElementsRight(int elem, int num)
{
//	{
//		int numToMove;                                        //   287
//	}
}

/* <400bf0> ../public/UtlMemory.h:227 */
void CUtlMemory<char>::Grow(int num)
{
//	{
//		int growSize;                                         //   237
//	}
}

/* <400bd7> ../public/UtlMemory.h:206 */
inline void CUtlMemory<char>::NumAllocated(void)
{
}

/* <400bb4> ../public/utlrbtree.h:209 */
void CUtlRBTree<unsigned int, short unsigned int>::~CUtlRBTree(int const __in_chrg)
{
}

/* <400b91> ../public/UtlVector.h:169 */
inline void CUtlVector<char>::~CUtlVector( int const __in_chrg)
{
}

/* <400b6e> ../public/UtlMemory.h:141 */
void CUtlMemory<char>::~CUtlMemory(int const __in_chrg)
{
}

/* <400b55> ../public/UtlVector.h:532 */
void CUtlVector<char>::Purge(void)
{
}

/* <400b3c> ../public/UtlMemory.h:171 */
void CUtlMemory<char>::IsExternallyAllocated(void)
{
}

/* <400b19> ../public/UtlMemory.h:141 */
void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::~CUtlMemory(int const __in_chrg)
{
}

/* <400b00> ../public/UtlMemory.h:270 */
void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::Purge(void)
{
}

/* <400ae7> ../public/UtlMemory.h:171 */
void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::IsExternallyAllocated(void)
{
}

/* <400aa6> ../public/utlrbtree.h:854 */
void CUtlRBTree<unsigned int, short unsigned int>::RemoveAll(void)
{
//	{
//		short unsigned int prev;                              //   860
//		{
//			int i;                                        //   861
//			{
//				short unsigned int idx;               //   863
//			}
//		}
//	}
}

/* <400a77> ../public/utlrbtree.h:377 */
inline void CUtlRBTree<unsigned int, short unsigned int>::SetLeftChild( short unsigned int i, short unsigned int child)
{
}

/* <400a48> ../public/utlrbtree.h:383 */
inline void CUtlRBTree<unsigned int, short unsigned int>::SetRightChild( short unsigned int i, short unsigned int child)
{
}

/* <400a26> ../public/utlrbtree.h:218 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Element( short unsigned int i)
{
}

/* <400a03> ../public/utlrbtree.h:339 */
inline void CUtlRBTree<unsigned int, short unsigned int>::IsValidIndex(short unsigned int i)
{
}

/* <4009e0> ../public/utlrbtree.h:406 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Links( short unsigned int i)
{
}

/* <4009be> ../public/UtlMemory.h:152 */
inline void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::operator[]( int i)
{
}

/* <40099e> ../public/UtlMemory.h:46 */
inline void Construct<char>(char *pMemory)
{
}

/* <400966> ../public/utlrbtree.h:1186 */
void CUtlRBTree<unsigned int, short unsigned int>::Find(const unsigned int &search)
{
//	{
//		short unsigned int current;                           //  1190
//	}
}

/* <40094d> ../public/utlsymbol.h:43 */
inline void CUtlSymbol::CUtlSymbol(void)
{
}

/* <400923> ../public/utlsymbol.cpp:173 */
void CUtlSymbolTable::String(CUtlSymbol id)
{
}

/* <40091b> ../public/utlsymbol.cpp:42 */
void CurrTable(void)
{
}

/* <4008f3> ../public/utlsymbol.h:44 */
inline void CUtlSymbol::CUtlSymbol( UtlSymId_t id)
{
}

/* <4008cc> ../public/UtlVector.h:187 */
inline void CUtlVector<char>::operator[](int i)
{
}

/* <4008aa> ../public/utlrbtree.h:236 */
inline void CUtlRBTree<unsigned int, short unsigned int>::operator[](short unsigned int i)
{
}

/* <400891> ../public/utlsymbol.h:59 */
inline void CUtlSymbol::operator const UtlSymId_t(void)
{
}

/* <400873> ../public/utlsymbol.h:56 */
inline void CUtlSymbol::IsValid(void)
{
}

/* <40084c> ../public/utlrbtree.h:224 */
inline void CUtlRBTree<unsigned int, short unsigned int>::Element(short unsigned int i)
{
}

/* <400825> ../public/UtlMemory.h:159 */
inline void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::operator[](int i)
{
}

/* <40080c> ../public/UtlVector.h:518 */
void CUtlVector<char>::RemoveAll(void)
{
}

/* <4007ea> ../public/UtlVector.h:194 */
inline void CUtlVector<char>::Element( int i)
{
}

/* <4007ca> ../public/UtlMemory.h:58 */
inline void Destruct<char>(char *pMemory)
{
}

/* <4007a4> ../public/UtlMemory.h:58 */
inline void Destruct<unsigned int>(unsigned int *pMemory)
{
}

/* <40077d> ../public/UtlMemory.h:159 */
inline void CUtlMemory<char>::operator[](int i)
{
}

/* <40074e> ../public/UtlVector.h:155 */
inline void CUtlVector<char>::CUtlVector( int growSize, int initSize)
{
}

/* <400714> ../public/utlrbtree.h:198 */
void CUtlRBTree<unsigned int, short unsigned int>::CUtlRBTree(int growSize, int initSize, LessFunc_t lessfunc)
{
}

/* <4006e5> ../public/UtlMemory.h:125 */
void CUtlMemory<char>::CUtlMemory(int growSize, int initSize)
{
}

/* <4006cc> ../public/UtlVector.h:143 */
inline void CUtlVector<char>::ResetDbgInfo(void)
{
}

/* <4006c6> ../public/utlrbtree.h:350 */
void InvalidIndex(void)
{
}

/* <400692> ../public/UtlMemory.h:125 */
void CUtlMemory<CUtlRBTree<unsigned int, short unsigned int>::Node_t>::CUtlMemory(int growSize, int initSize)
{
}

/* <400674> ../public/utlrbtree.h:184 */
inline void CUtlRBTree<unsigned int, short unsigned int>::ResetDbgInfo(void)
{
}

/* <40064d> ../public/UtlVector.h:180 */
inline void CUtlVector<char>::operator[]( int i)
{
}

/* <400626> ../public/UtlMemory.h:152 */
inline void CUtlMemory<char>::operator[]( int i)
{
}

/* <400608> ../public/utlsymbol.cpp:85 */
inline void LessCtx_t::LessCtx_t(void)
{
}

/* <3feabe> ../public/MemPool.cpp:193 */
void CMemoryPool::Free(void *memBlock)
{
}

/* <3fea72> ../public/MemPool.cpp:157 */
void CMemoryPool::Alloc(unsigned int amount)
{
//	{
//		void *returnBlock;                                   //   159
//	}
}

/* <3fea40> ../public/MemPool.cpp:35 */
void CMemoryPool::CMemoryPool(int blockSize, int numElements)
{
}

/* <3fea0f> ../public/MemPool.cpp:35 */
void CMemoryPool::CMemoryPool(int blockSize, int numElements)
{
}

/* <3fe99c> ../public/MemPool.cpp:109 */
void CMemoryPool::AddNewBlob(void)
{
//	{
//		void ** newBlob;                                     //   111
//		int i;                                                //   112
//		int sizeMultiplier;                                   //   113
//		{
//			int j;                                        //   134
//		}
//	}
}

/* <3fe967> ../public/MemPool.cpp:52 */
void CMemoryPool::~CMemoryPool(void)
{
//	{ /* ~CMemoryPool+0x9 */
//		int i;                                                //   100
//	}
}

/* <3fe932> ../public/MemPool.cpp:52 */
void CMemoryPool::~CMemoryPool(int const __in_chrg)
{
//	{
//		int i;                                                //   100
//	}
}

/* <3fe1a2> ../cstrike/dlls/bot/cs_gamestate.cpp:742 */
void CSGameState::AllHostagesGone(void)
{
//	{
//		int i;                                                //   744
//	}
}

/* <3fe148> ../cstrike/dlls/bot/cs_gamestate.cpp:712 */
void CSGameState::AreAllHostagesGone(void)
{
//	{
//		int i;                                                //   718
//		{
//			const class HostageInfo *info;              //   720
//		}
//	}
}

/* <3fe064> ../cstrike/dlls/bot/cs_gamestate.cpp:668 */
void CSGameState::AreAllHostagesBeingRescued(void)
{
//	{
//		bool isAllDead;                                       //   674
//		{
//			int i;                                        //   676
//			{
//				const class HostageInfo *info;      //   678
//				IsValid(CHostage *const this);  //   683
//				IsFollowingSomeone(CHostage *const this);  //   685
//			}
//		}
//	}
}

/* <3fdef7> ../cstrike/dlls/bot/cs_gamestate.cpp:626 */
void CSGameState::GetNearestVisibleFreeHostage(void)
{
//	{
//		class CHostage *close;                               //   628
//		float closeRangeSq;                                   //   629
//		float rangeSq;                                        //   630
//		Vector pos;                                     //   632
//		{
//			int i;                                        //   634
//			{
//				const class HostageInfo *info;      //   636
//				IsFollowingSomeone(CHostage *const this);  //   643
//				operator+(const Vector *const this,
//						const Vector &v);  //   647
//				operator-(const Vector *const this,
//						const Vector &v);  //   648
//				LengthSquared(const Vector *const this);  //   648
//			}
//		}
//	}
}

/* <3fdcd2> ../cstrike/dlls/bot/cs_gamestate.cpp:509 */
void CSGameState::ValidateHostagePositions(void)
{
//	{
//		float const validateInterval;                          //   515
//		TraceResult result;                                   //   520
//		unsigned char status;                                 //   521
//		int i;                                                //   523
//		int startValidCount;                                  //   524
//		int endValidCount;                                    //   605
//		IsElapsed(const class CountdownTimer *const this);  //   512
//		Start(CountdownTimer *const this,
//			float duration);  //   516
//		{
//			class HostageInfo *info;                     //   531
//			{
//				float const tolerance;                 //   594
//				IsValid(CHostage *const this);  //   576
//				IsFollowingSomeone(CHostage *const this);  //   586
//				operator-(const Vector *const this,
//						const Vector &v);  //   595
//				IsLengthGreaterThan(const Vector *const this,
//							float length);  //   595
//			}
//			IsFollowingSomeone(CHostage *const this);  //   541
//		}
//	}
}

/* <3fdbd3> ../cstrike/dlls/bot/cs_gamestate.cpp:461 */
void CSGameState::GetRandomFreeHostagePosition(void)
{
//	{
//		const Vector *freePos;                        //   466
//		int freeCount;                                        //   467
//		{
//			int i;                                        //   469
//			{
//				const class HostageInfo *info;      //   471
//				IsFollowingSomeone(CHostage *const this);  //   480
//			}
//		}
//	}
}

/* <3fd5ab> ../cstrike/dlls/bot/cs_gamestate.cpp:398 */
void CSGameState::GetNearestFreeHostage(Vector *knowPos)
{
//	{
//		class CNavArea *startArea;                           //   403
//		class CHostage *close;                               //   407
//		const Vector *closePos;                       //   408
//		float closeDistance;                                  //   409
//		{
//			int i;                                        //   411
//			{
//				const Vector *hostagePos;     //   413
//				class CNavArea *hostageArea;         //   435
//				{
//					class ShortestPathCost pc;    //   438
//					float travelDistance;         //   439
//					NavAreaTravelDistance<ShortestPathCost>(CNavArea *startArea,
//										class CNavArea *endArea,
//										class ShortestPathCost &costFunc);  //   439
//				}
//				IsValid(CHostage *const this);  //   418
//				IsFollowingSomeone(CHostage *const this);  //   421
//			}
//		}
//	}
}

/* <3fd4f4> ../cstrike/dlls/bot/cs_gamestate.cpp:55 */
void CSGameState::Reset(void)
{
//	{
//		class CCSBotManager *ctrl;                           //    66
//		int i;                                                //    69
//		Invalidate(IntervalTimer *const this);  //    61
//		Invalidate(IntervalTimer *const this);  //    62
//		{
//			int swap;                                     //    81
//			int rnd;                                      //    82
//		}
//	}
}

/* <3fd4b0> ../cstrike/dlls/bot/cs_gamestate.cpp:367 */
void CSGameState::InitializeHostageInfo(void)
{
//	{
//		class CBaseEntity *hostage;                          //   373
//	}
}

/* <3fd475> ../cstrike/dlls/bot/cs_gamestate.cpp:354 */
void CSGameState::IsBombsiteClear( int zoneIndex)
{
}

/* <3fd43a> ../cstrike/dlls/bot/cs_gamestate.cpp:347 */
void CSGameState::ClearBombsite(int zoneIndex)
{
}

/* <3fd3dd> ../cstrike/dlls/bot/cs_gamestate.cpp:337 */
void CSGameState::MarkBombsiteAsPlanted(int zoneIndex)
{
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   340
}

/* <3fd373> ../cstrike/dlls/bot/cs_gamestate.cpp:313 */
void CSGameState::UpdatePlantedBomb(const Vector *pos)
{
//	{
//		class CCSBotManager *ctrl;                           //   315
//		const class Zone *zone;                             //   316
//		SetBombState(CSGameState *const this,
//				enum BombState state);  //   330
//	}
}

/* <3fd32c> ../cstrike/dlls/bot/cs_gamestate.cpp:277 */
void CSGameState::GetBombPosition(void)
{
//	HasStarted(const class IntervalTimer *const this);  //   283
}

/* <3fd2d2> ../cstrike/dlls/bot/cs_gamestate.cpp:246 */
void CSGameState::GetNextBombsiteToSearch(void)
{
//	{
//		int i;                                                //   251
//		{
//			int z;                                        //   256
//		}
//	}
}

/* <3fd284> ../cstrike/dlls/bot/cs_gamestate.cpp:225 */
void CSGameState::IsAtPlantedBombsite(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   230
//		const class Zone *zone;                             //   231
//	}
}

/* <3fd25a> ../cstrike/dlls/bot/cs_gamestate.cpp:213 */
void CSGameState::GetPlantedBombsite(void)
{
}

/* <3fd237> ../cstrike/dlls/bot/cs_gamestate.cpp:201 */
void CSGameState::IsPlantedBombLocationKnown(void)
{
}

/* <3fd1b1> ../cstrike/dlls/bot/cs_gamestate.cpp:195 */
void CSGameState::TimeSinceLastSawBomber(void)
{
//	GetElapsedTime(const class IntervalTimer *const this);  //   197
}

/* <3fd135> ../cstrike/dlls/bot/cs_gamestate.cpp:185 */
void CSGameState::UpdateBomber(const Vector *pos)
{
//	Reset(IntervalTimer *const this);  //   188
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   191
}

/* <3fd0f4> ../cstrike/dlls/bot/cs_gamestate.cpp:176 */
void CSGameState::IsLooseBombLocationKnown(void)
{
//	HasStarted(const class IntervalTimer *const this);  //   181
}

/* <3fd06e> ../cstrike/dlls/bot/cs_gamestate.cpp:170 */
void CSGameState::TimeSinceLastSawLooseBomb(void)
{
//	GetElapsedTime(const class IntervalTimer *const this);  //   172
}

/* <3fcff2> ../cstrike/dlls/bot/cs_gamestate.cpp:160 */
void CSGameState::UpdateLooseBomb(const Vector *pos)
{
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   166
//	Reset(IntervalTimer *const this);  //   163
}

/* <3fcfc6> ../cstrike/dlls/bot/cs_gamestate.cpp:150 */
void CSGameState::SetBombState(BombState state)
{
}

/* <3fcf9c> ../cstrike/dlls/bot/cs_gamestate.cpp:144 */
void CSGameState::IsRoundOver(void)
{
}

/* <3fce67> ../cstrike/dlls/bot/cs_gamestate.cpp:97 */
void CSGameState::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   104
//	UpdatePlantedBomb(CSGameState *const this,
//				const Vector *pos);  //   109
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   117
//	SetBombState(CSGameState *const this,
//			enum BombState state);  //   124
}

/* <3fce0f> ../cstrike/dlls/bot/cs_gamestate.cpp:313 */
void CSGameState::UpdatePlantedBomb(const Vector *pos)
{
//	{
//		class CCSBotManager *ctrl;                           //   315
//		const class Zone *zone;                             //   316
//	}
}

/* <3fcd6b> ../cstrike/dlls/bot/cs_gamestate.cpp:27 */
void CSGameState::CSGameState(CCSBot *owner)
{
//	IntervalTimer(IntervalTimer *const this);  //    27
//	{
//		int i;                                                //    41
//	}
//	IntervalTimer(IntervalTimer *const this);  //    27
//	CountdownTimer(CountdownTimer *const this);  //    27
}

/* <3fcd38> ../cstrike/dlls/bot/cs_gamestate.cpp:27 */
void CSGameState::CSGameState(CCSBot *owner)
{
//	{
//		int i;                                                //    41
//	}
}

/* <3fcbd3> ../game_shared/bot/nav_area.h:679 */
bool NavAreaBuildPath<ShortestPathCost>(CNavArea *startArea, class CNavArea *goalArea, const Vector *goalPos, class ShortestPathCost &costFunc, class CNavArea ** closestArea)
{
//	{
//		Vector actualGoalPos;                           //   710
//		float initCost;                                       //   719
//		float closestAreaDist;                                //   729
//		{
//			class CNavArea *area;                        //   735
//			bool searchFloor;                             //   747
//			int dir;                                      //   748
//			const NavConnectList *floorList;            //   749
//			const_iterator floorIter;                     //   750
//			bool ladderUp;                                //   752
//			const NavLadderList *ladderList;            //   753
//			const_iterator ladderIter;                    //   754
//			int ladderTopDir;                             //   756
//			{
//				class CNavArea *newArea;             //   760
//				enum NavTraverseType how;             //   761
//				const class CNavLadder *ladder;     //   762
//				float newCostSoFar;                   //   859
//				{
//					float newCostRemaining;       //   873
//				}
//			}
//		}
//	}
}

/* <3fcb64> ../game_shared/bot/nav_area.h:914 */
float NavAreaTravelDistance<ShortestPathCost>(CNavArea *startArea, class CNavArea *endArea, class ShortestPathCost &costFunc)
{
//	{
//		float distance;                                       //   930
//		{
//			class CNavArea *area;                        //   931
//		}
//	}
}

/* <3fcb5b> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <3fcb3f> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <3fcb23> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <3fcb0a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <3fcac1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <3fcaa8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <3fca8f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <3fca52> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <3fca22> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <3fca09> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <3fc9f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <3fc9cc> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <3fc9ae> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <3fc990> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <3fc967> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3fc949> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <3fc920> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3fc8fc> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <3fc8d8> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <3fc8bf> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <3fc8a6> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <3fc87d> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <3fc849> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <3fc815> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <3fc7fa> ../cstrike/dlls/bot/cs_gamestate.cpp:201 */
void CSGameState::IsPlantedBombLocationKnown(void)
{
}

/* <3fc7da> ../cstrike/dlls/bot/cs_gamestate.cpp:176 */
void CSGameState::IsLooseBombLocationKnown(void)
{
}

/* <3fc7af> ../cstrike/dlls/bot/cs_gamestate.cpp:150 */
void CSGameState::SetBombState(BombState state)
{
}

/* <3fc796> ../game_shared/bot/bot_util.h:136 */
inline void IntervalTimer::Reset(void)
{
}

/* <3fc77d> ../game_shared/bot/bot_util.h:146 */
inline void IntervalTimer::Invalidate(void)
{
}

/* <3fc764> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <3fc74b> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <3fc72b> ../cstrike/dlls/bot/cs_gamestate.h:126 */
inline void HostageInfo::HostageInfo(void)
{
}

/* <3fc70c> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <3fc6ee> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3fc6c5> ../cstrike/dlls/bot/cs_bot_manager.h:110 */
inline void CCSBotManager::GetZoneCount(void)
{
}

/* <3fc692> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3fc66b> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3fc652> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3fc634> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <3fc616> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <3fc5f2> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <3fc5c9> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <3fc5a1> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <3fc577> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <3fc547> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <3fc4cd> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <3fc474> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <3fc41b> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <3fc3dc> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <3fc3b2> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <3fc359> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <3fc2a4> ../game_shared/bot/nav_area.h:629 */
inline void ShortestPathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float dist;                                           //   639
//		float cost;                                           //   646
//		{
//			float const crouchPenalty;                     //   651
//		}
//		{
//			float const jumpPenalty;                       //   658
//		}
//	}
}

/* <3fc27d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3fc264> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <3fc248> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <3fc22c> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <3fc213> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <3fc1ed> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <3fc1d4> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <3fc1ae> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <3fc195> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <3fc162> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <3fc149> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <3fc130> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <3fc112> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <3fc0f4> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <3fc0d6> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <3fc0bd> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <3fc09f> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <3fc081> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3fc032> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3fbfe8> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3fbfad> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3fbf5e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3fbf02> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3fbed6> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3fbeb6> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <3fbe98> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3fbe70> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <3fbe48> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <3fbe1e> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <3fbdf6> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <3eb84d> ../cstrike/dlls/bot/cs_bot_weapon.cpp:1009 */
void CCSBot::ComputeWeaponSightRange(void)
{
//	{
//		Vector aimDir;                                  //  1013
//		TraceResult result;                                   //  1016
//		Vector target;                                  //  1017
//		operator+(const Vector *const this,
//				const Vector &v);  //  1012
//		operator*(float fl,
//				const Vector &v);  //  1017
//		operator+(const Vector *const this,
//				const Vector &v);  //  1017
//		operator-(const Vector *const this,
//				const Vector &v);  //  1020
//		Length(const Vector *const this);  //  1020
//	}
}

/* <3eb434> ../cstrike/dlls/bot/cs_bot_weapon.cpp:17 */
void CCSBot::FireWeaponAtEnemy(void)
{
//	{
//		class CBasePlayer *enemy;                            //    20
//		IsUsingSniperRifle(const class CCSBot *const this);  //    29
//		{
//			class Vector2D toAimSpot;                     //    47
//			float rangeToEnemy;                           //    48
//			float yaw;                                    //    50
//			class Vector2D dir;                           //    51
//			float onTarget;                               //    53
//			float const halfSize;                          //    57
//			float const halfPI;                            //    60
//			float aimTolerance;                           //    61
//			{
//				class CCSBotManager *ctrl;           //    65
//				bool doAttack;                        //    67
//				IsUsingKnife(const class CCSBot *const this);  //    86
//				{
//					float const knifeRange;        //   121
//					ForceRun(CCSBot *const this,
//						float duration);  //   125
//					{
//						float const knifeStabChance;     //   142
//					}
//				}
//				IsUsingPistol(const class CCSBot *const this);  //   157
//				{
//					float const closePistolRange;  //   160
//					StartRapidFire(CCSBot *const this);  //   165
//				}
//				{
//					float const sprayRange;        //   175
//					IsUsingMachinegun(const class CCSBot *const this);  //   176
//					{
//						float const distantTargetRange;        //   183
//						IsUsingSniperRifle(const class CCSBot *const this);  //   184
//					}
//				}
//			}
//			NormalizeInPlace(Vector2D *const this);  //    48
//			DotProduct(const class Vector2D &a,
//					const class Vector2D &b);  //    53
//			IsUsingSniperRifle(const class CCSBot *const this);  //    57
//		}
//		IsActiveWeaponReloading(const class CBot *const this);  //    40
//		GetTimeSinceAcquiredCurrentEnemy(const class CCSBot *const this);  //    33
//		GetSurpriseDelay(const class CCSBot *const this);  //    34
//		ClearSurpriseDelay(CCSBot *const this);  //    37
//		IsNotMoving(const class CCSBot *const this);  //    29
//		StopRapidFire(CCSBot *const this);  //    24
//	}
}

/* <3eb277> ../cstrike/dlls/bot/cs_bot_weapon.cpp:977 */
void CCSBot::IsFriendInLineOfFire(void)
{
//	{
//		Vector aimDir;                                  //   981
//		TraceResult result;                                   //   984
//		Vector target;                                  //   985
//		operator+(const Vector *const this,
//				const Vector &v);  //   980
//		operator*(float fl,
//				const Vector &v);  //   985
//		operator+(const Vector *const this,
//				const Vector &v);  //   985
//		{
//			class CBaseEntity *victim;                   //   990
//			Instance(edict_t *pent);  //   990
//		}
//	}
}

/* <3eb1a9> ../cstrike/dlls/bot/cs_bot_weapon.cpp:926 */
void CCSBot::OnTouchingWeapon(CWeaponBox *box)
{
//	{
//		class CBasePlayerItem *droppedGun;                   //   929
//		class CBasePlayerWeapon *myGun;                      //   934
//		float const safeTime;                                  //   947
//		GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   948
//		{
//			int i;                                        //   952
//			{
//				int prefID;                           //   954
//				GetWeaponPreference(const class BotProfile *const this,
//							int i);  //   954
//			}
//		}
//	}
}

/* <3eb0ac> ../cstrike/dlls/bot/cs_bot_weapon.cpp:885 */
void CCSBot::SilencerCheck(void)
{
//	{
//		float const safeSilencerWaitTime;                      //   887
//		IsActiveWeaponReloading(const class CBot *const this);  //   889
//		DoesActiveWeaponHaveSilencer(const class CCSBot *const this);  //   892
//		GetNearbyEnemyCount(const class CCSBot *const this);  //   896
//		{
//			bool isSilencerOn;                            //   899
//			class CBasePlayerWeapon *myGun;              //   901
//		}
//	}
}

/* <3eaf22> ../cstrike/dlls/bot/cs_bot_weapon.cpp:810 */
void CCSBot::ReloadCheck(void)
{
//	{
//		float const safeReloadWaitTime;                        //   812
//		float const reloadAmmoRatio;                           //   813
//		IsActiveWeaponReloading(const class CBot *const this);  //   819
//		IsPistolEmpty(const class CCSBot *const this);  //   827
//		IsUsingAWP(const class CCSBot *const this);  //   848
//		GetNearbyEnemyCount(const class CCSBot *const this);  //   854
//		{
//			float const hideChance;                        //   857
//			{
//				float const safeTime;                  //   861
//				GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   862
//				{
//					const Vector *spot;   //   865
//				}
//			}
//		}
//		GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   835
//		IsPistol(CBasePlayerWeapon *const this);  //   827
//	}
}

/* <3eac08> ../cstrike/dlls/bot/cs_bot_weapon.cpp:709 */
void CCSBot::FindGrenadeTossPathTarget(Vector *pos)
{
//	{
//		int i;                                                //   715
//		Vector dir;                                     //   726
//		float length;                                         //   727
//		float const inc;                                       //   729
//		Vector p;                                       //   730
//		Vector visibleSpot;                             //   731
//		float const bufferRange;                               //   745
//		TraceResult result;                                   //   747
//		Vector check;                                   //   748
//		operator+(const Vector *const this,
//				const Vector &v);  //   718
//		operator-(const Vector *const this,
//				const Vector &v);  //   726
//		NormalizeInPlace(Vector *const this);  //   727
//		Vector(Vector *const this,
//			const Vector &v);  //   731
//		operator+(const Vector *const this,
//				const Vector &v);  //   751
//		{
//			float range;                                  //   756
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   764
//		{
//			float range;                                  //   769
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   777
//		{
//			float range;                                  //   782
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   790
//		{
//			float range;                                  //   795
//		}
//		{
//			float t;                                      //   732
//			operator*(float fl,
//					const Vector &v);  //   734
//			operator+(const Vector *const this,
//					const Vector &v);  //   734
//		}
//	}
}

/* <3eab80> ../cstrike/dlls/bot/cs_bot_weapon.cpp:690 */
void CCSBot::ThrowGrenade(const Vector *target)
{
//	IsUsingGrenade(const class CCSBot *const this);  //   692
//	Start(CountdownTimer *const this,
//		float duration);  //   698
}

/* <3eab3f> ../cstrike/dlls/bot/cs_bot_weapon.cpp:672 */
void CCSBot::IsUsingHEGrenade(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   674
//	}
}

/* <3eab09> ../cstrike/dlls/bot/cs_bot_weapon.cpp:652 */
void CCSBot::IsUsingGrenade(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   654
//	}
}

/* <3eaac2> ../cstrike/dlls/bot/cs_bot_weapon.cpp:638 */
void CCSBot::IsUsingPistol(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   640
//		IsPistol(CBasePlayerWeapon *const this);  //   642
//	}
}

/* <3eaa8c> ../cstrike/dlls/bot/cs_bot_weapon.cpp:624 */
void CCSBot::IsUsingKnife(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   626
//	}
}

/* <3ea9ae> ../cstrike/dlls/bot/cs_bot_weapon.cpp:598 */
void CCSBot::EquipGrenade(bool noSmoke)
{
//	IsSniper(const class CCSBot *const this);  //   601
//	IsUsingGrenade(const class CCSBot *const this);  //   604
//	HasGrenade(const class CCSBot *const this);  //   607
}

/* <3ea98b> ../cstrike/dlls/bot/cs_bot_weapon.cpp:589 */
void CCSBot::HasGrenade(void)
{
}

/* <3ea91a> ../cstrike/dlls/bot/cs_bot_weapon.cpp:575 */
void CCSBot::EquipKnife(void)
{
//	IsUsingKnife(const class CCSBot *const this);  //   581
//	EquipKnife(CCSBot *const this);  //   575
}

/* <3ea7fe> ../cstrike/dlls/bot/cs_bot_weapon.cpp:557 */
void CCSBot::EquipPistol(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   563
//		GetElapsedTime(const class IntervalTimer *const this);  //   560
//		IsUsingPistol(const class CCSBot *const this);  //   566
//		DoEquip(CCSBot *const this,
//			class CBasePlayerWeapon *gun);  //   567
//	}
}

/* <3ea7d7> ../cstrike/dlls/bot/cs_bot_weapon.cpp:638 */
void CCSBot::IsUsingPistol(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   640
//	}
}

/* <3ea621> ../cstrike/dlls/bot/cs_bot_weapon.cpp:510 */
void CCSBot::EquipBestWeapon(bool mustEquip)
{
//	{
//		class CCSBotManager *ctrl;                           //   523
//		class CBasePlayerWeapon *primary;                    //   525
//		GetElapsedTime(const class IntervalTimer *const this);  //   513
//		{
//			int weaponClass;                              //   528
//			AllowShotguns(const class CCSBotManager *const this);  //   530
//			DoEquip(CCSBot *const this,
//				class CBasePlayerWeapon *gun);  //   538
//		}
//		DoEquip(CCSBot *const this,
//			class CBasePlayerWeapon *gun);  //   545
//		EquipKnife(CCSBot *const this);  //   550
//	}
}

/* <3ea5d9> ../cstrike/dlls/bot/cs_bot_weapon.cpp:485 */
void CCSBot::DoEquip(CBasePlayerWeapon *gun)
{
//	Start(IntervalTimer *const this);  //   496
}

/* <3ea5b3> ../cstrike/dlls/bot/cs_bot_weapon.cpp:485 */
void CCSBot::DoEquip(CBasePlayerWeapon *gun)
{
}

/* <3ea578> ../cstrike/dlls/bot/cs_bot_weapon.cpp:467 */
void CCSBot::IsPistolEmpty(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   469
//	}
}

/* <3ea532> ../cstrike/dlls/bot/cs_bot_weapon.cpp:449 */
void CCSBot::IsPrimaryWeaponEmpty(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   451
//	}
}

/* <3ea50f> ../cstrike/dlls/bot/cs_bot_weapon.cpp:437 */
void CCSBot::IsUsingMachinegun(void)
{
}

/* <3ea4e8> ../cstrike/dlls/bot/cs_bot_weapon.cpp:417 */
void CCSBot::IsUsingShotgun(void)
{
}

/* <3ea4c1> ../cstrike/dlls/bot/cs_bot_weapon.cpp:405 */
void CCSBot::IsSniping(void)
{
}

/* <3ea462> ../cstrike/dlls/bot/cs_bot_weapon.cpp:387 */
void CCSBot::IsSniper(void)
{
//	{
//		int i;                                                //   389
//		{
//			class CBasePlayerItem *item;                 //   391
//			isSniperRifle(CBasePlayerItem *item);  //   393
//		}
//	}
}

/* <3ea42f> ../cstrike/dlls/bot/cs_bot_weapon.cpp:387 */
void CCSBot::IsSniper(void)
{
//	{
//		int i;                                                //   389
//		{
//			class CBasePlayerItem *item;                 //   391
//		}
//	}
}

/* <3ea3f1> ../cstrike/dlls/bot/cs_bot_weapon.cpp:375 */
void CCSBot::IsUsingSniperRifle(void)
{
//	isSniperRifle(CBasePlayerItem *item);  //   380
}

/* <3ea3ce> ../cstrike/dlls/bot/cs_bot_weapon.cpp:357 */
void CCSBot::DoesActiveWeaponHaveSilencer(void)
{
}

/* <3ea3ab> ../cstrike/dlls/bot/cs_bot_weapon.cpp:342 */
void CCSBot::IsUsingAWP(void)
{
}

/* <3ea2b7> ../cstrike/dlls/bot/cs_bot_weapon.cpp:271 */
void CCSBot::AdjustZoom(float range)
{
//	IsUsingSniperRifle(const class CCSBot *const this);  //   273
//	{
//		float const sniperZoomRange;                           //   275
//		float const sniperFarZoomRange;                        //   276
//		GetZoomLevel(const class CCSBot *const this);  //   282
//		GetZoomLevel(const class CCSBot *const this);  //   291
//		GetZoomLevel(const class CCSBot *const this);  //   300
//	}
}

/* <3ea29e> ../cstrike/dlls/bot/cs_bot_weapon.cpp:375 */
void CCSBot::IsUsingSniperRifle(void)
{
}

/* <3ea224> ../cstrike/dlls/bot/cs_bot_weapon.cpp:252 */
void CCSBot::UpdateAimOffset(void)
{
//	{
//		Vector d;                                       //   258
//		float const stiffness;                                 //   259
//		operator-(const Vector *const this,
//				const Vector &v);  //   258
//	}
}

/* <3ea12d> ../cstrike/dlls/bot/cs_bot_weapon.cpp:210 */
void CCSBot::SetAimOffset(float accuracy)
{
//	{
//		float range;                                          //   236
//		float const maxOffset;                                 //   237
//		float error;                                          //   238
//		{
//			float const focusTime;                         //   220
//			float focusInterval;                          //   221
//			float focusAccuracy;                          //   223
//			float const maxFocusAccuracy;                  //   226
//			IsViewMoving(const class CCSBot *const this,
//					float angleVelThreshold);  //   216
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   236
//		Length(const Vector *const this);  //   236
//	}
}

/* <3ea0ee> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3ea0d5> ../cstrike/dlls/bot/cs_bot_weapon.cpp:437 */
void CCSBot::IsUsingMachinegun(void)
{
}

/* <3ea0b0> ../cstrike/dlls/bot/cs_bot.h:586 */
inline void CCSBot::ForceRun( float duration)
{
}

/* <3ea056> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <3ea026> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <3ea00d> ../cstrike/dlls/bot/cs_bot.h:386 */
inline void CCSBot::GetSurpriseDelay(void)
{
}

/* <3e9fe8> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <3e9fc0> ../game_shared/bot/bot_profile.h:69 */
inline void BotProfile::GetWeaponPreference(int i)
{
}

/* <3e9fa7> ../cstrike/dlls/bot/cs_bot_weapon.cpp:357 */
void CCSBot::DoesActiveWeaponHaveSilencer(void)
{
}

/* <3e9f8e> ../cstrike/dlls/bot/cs_bot_weapon.cpp:342 */
void CCSBot::IsUsingAWP(void)
{
}

/* <3e9f67> ../cstrike/dlls/bot/cs_bot_weapon.cpp:467 */
void CCSBot::IsPistolEmpty(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   469
//	}
}

/* <3e9f40> ../game_shared/bot/bot.h:287 */
inline void CBot::IsActiveWeaponReloading(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   289
//	}
}

/* <3e9efd> ../cstrike/dlls/bot/cs_bot_weapon.cpp:589 */
void CCSBot::HasGrenade(void)
{
}

/* <3e9ed6> ../cstrike/dlls/bot/cs_bot_weapon.cpp:652 */
void CCSBot::IsUsingGrenade(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   654
//	}
}

/* <3e9eaf> ../cstrike/dlls/bot/cs_bot_weapon.cpp:575 */
void CCSBot::EquipKnife(void)
{
}

/* <3e9e88> ../cstrike/dlls/bot/cs_bot_weapon.cpp:624 */
void CCSBot::IsUsingKnife(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   626
//	}
}

/* <3e9e6a> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <3e9e2d> ../cstrike/dlls/bot/cs_bot_weapon.cpp:320 */
bool isSniperRifle(CBasePlayerItem *item)
{
}

/* <3e9e06> ../cstrike/dlls/bot/cs_bot.h:1085 */
inline void CCSBot::IsNotMoving(void)
{
//	{
//		float const stillSpeed;                                //  1087
//	}
}

/* <3e9de2> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <3e9dc9> ../cstrike/dlls/bot/cs_bot.h:684 */
inline void CCSBot::GetZoomLevel(void)
{
}

/* <3e9db0> ../cstrike/dlls/bot/cs_bot.h:680 */
inline void CCSBot::StopRapidFire(void)
{
}

/* <3e9d97> ../cstrike/dlls/bot/cs_bot.h:679 */
inline void CCSBot::StartRapidFire(void)
{
}

/* <3e9d7e> ../cstrike/dlls/bot/cs_bot.h:674 */
inline void CCSBot::IsThrowingGrenade(void)
{
}

/* <3e9d59> ../cstrike/dlls/bot/cs_bot.h:625 */
inline void CCSBot::IsViewMoving(float angleVelThreshold)
{
}

/* <3e9d30> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <3e9d17> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <3e9cfe> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3e9ce5> ../cstrike/dlls/bot/cs_bot.h:540 */
inline void CCSBot::GetTimeSinceAcquiredCurrentEnemy(void)
{
}

/* <3e9ccc> ../cstrike/dlls/bot/cs_bot.h:539 */
inline void CCSBot::GetTimeSinceLastSawEnemy(void)
{
}

/* <3e9cb3> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <3e9c9a> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <3e9c7c> ../cstrike/dlls/bot/cs_bot.h:387 */
inline void CCSBot::ClearSurpriseDelay(void)
{
}

/* <3e9c5e> ../cstrike/dlls/bot/cs_bot.h:385 */
inline void CCSBot::IsSurprised(void)
{
}

/* <3e9c3a> ../cstrike/dlls/bot/cs_bot_manager.h:190 */
inline void CCSBotManager::AllowFriendlyFireDamage(void)
{
}

/* <3e9c21> ../cstrike/dlls/bot/cs_bot_manager.h:188 */
inline void CCSBotManager::AllowTacticalShield(void)
{
}

/* <3e9c08> ../cstrike/dlls/bot/cs_bot_manager.h:187 */
inline void CCSBotManager::AllowSnipers(void)
{
}

/* <3e9bef> ../cstrike/dlls/bot/cs_bot_manager.h:185 */
inline void CCSBotManager::AllowMachineGuns(void)
{
}

/* <3e9bd6> ../cstrike/dlls/bot/cs_bot_manager.h:184 */
inline void CCSBotManager::AllowRifles(void)
{
}

/* <3e9bbd> ../cstrike/dlls/bot/cs_bot_manager.h:183 */
inline void CCSBotManager::AllowSubMachineGuns(void)
{
}

/* <3e9ba4> ../cstrike/dlls/bot/cs_bot_manager.h:182 */
inline void CCSBotManager::AllowShotguns(void)
{
}

/* <3e9b86> ../cstrike/dlls/bot/cs_bot_manager.h:181 */
inline void CCSBotManager::AllowPistols(void)
{
}

/* <3e9b62> ../game_shared/bot/bot_profile.h:85 */
inline void BotProfile::PrefersSilencer(void)
{
}

/* <3e9b49> ../game_shared/bot/bot_profile.h:80 */
inline void BotProfile::GetAttackDelay(void)
{
}

/* <3e9b30> ../game_shared/bot/bot_profile.h:71 */
inline void BotProfile::GetWeaponPreferenceCount(void)
{
}

/* <3e9b12> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <3e9aeb> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3e9ac4> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3e9aab> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <3e9a92> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3e9a74> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3e9a4b> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <3e9a32> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <3e9a14> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <3e99f6> ../cstrike/dlls/player.h:774 */
inline void CBasePlayer::Intense(void)
{
}

/* <3e99d8> ../cstrike/dlls/weapons.h:408 */
inline void CBasePlayerWeapon::IsPistol(void)
{
}

/* <3e998c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3e993d> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3e9916> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3e98db> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3e9852> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3e97d3> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3e97a7> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3e9787> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <3e9769> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3da170> ../cstrike/dlls/bot/cs_bot_vision.cpp:1063 */
void CCSBot::Blind(float duration, float holdTime, float fadeTime, int alpha)
{
//	Say(BotChatterInterface *const this,
//		const char *phraseName,
//		float lifetime,
//		float delay);  //  1091
}

/* <3da0c5> ../cstrike/dlls/bot/cs_bot_vision.cpp:1049 */
void CCSBot::GetRangeToNearestRecognizedEnemy(void)
{
//	{
//		const class CBasePlayer *enemy;                     //  1051
//		GetRecognizedEnemy(CCSBot *const this);  //  1051
//		operator-(const Vector *const this,
//				const Vector &v);  //  1054
//		Length(const Vector *const this);  //  1054
//	}
}

/* <3da09d> ../cstrike/dlls/bot/cs_bot_vision.cpp:1037 */
void CCSBot::IsRecognizedEnemyProtectedByShield(void)
{
}

/* <3da075> ../cstrike/dlls/bot/cs_bot_vision.cpp:1025 */
void CCSBot::IsRecognizedEnemyReloading(void)
{
}

/* <3da052> ../cstrike/dlls/bot/cs_bot_vision.cpp:1013 */
void CCSBot::GetRecognizedEnemy(void)
{
}

/* <3da039> ../cstrike/dlls/bot/cs_bot_vision.cpp:1013 */
void CCSBot::GetRecognizedEnemy(void)
{
}

/* <3d9f7d> ../cstrike/dlls/bot/cs_bot_vision.cpp:960 */
void CCSBot::UpdateReactionQueue(void)
{
//	{
//		class CBasePlayer *threat;                           //   967
//		int now;                                              //   969
//		float reactionTime;                                   //   994
//		float maxReactionTime;                                //   995
//		int reactionTimeSteps;                                //  1000
//		int i;                                                //  1002
//		IsReloading(CBasePlayer *const this);  //   975
//		IsProtectedByShield(CBasePlayer *const this);  //   976
//	}
}

/* <3d99e8> ../cstrike/dlls/bot/cs_bot_vision.cpp:707 */
void CCSBot::FindMostDangerousThreat(void)
{
//	{
//		class CloseInfo threat;                               //   715
//		int threatCount;                                      //   716
//		float closeFriendRange;                               //   721
//		float closeHumanFriendRange;                          //   724
//		int i;                                                //   726
//		int prevEnemies;                                      //   835
//		int prevFriends;                                      //   836
//		class PlaceRank placeRank;                            //   869
//		int locCount;                                         //   870
//		class PlaceRank common;                               //   872
//		{
//			class CBaseEntity *entity;                   //   729
//			class CBasePlayer *player;                   //   744
//			int idx;                                      //   792
//			Vector d;                               //   801
//			float distSq;                                 //   802
//			FNullEnt(entvars_t *pev);  //   734
//			{
//				int j;                                //   814
//				{
//					int k;                        //   822
//				}
//			}
//			entindex(CBaseEntity *const this);  //   747
//			entindex(CBaseEntity *const this);  //   747
//			{
//				TraceResult result;                   //   758
//				GetEyePosition(const class CCSBot *const this);  //   759
//				{
//					int idx;                      //   763
//					Vector to;              //   768
//					float rangeSq;                //   769
//					entindex(CBaseEntity *const this);  //   763
//					operator-(const Vector *const this,
//							const Vector &v);  //   768
//					LengthSquared(const Vector *const this);  //   769
//				}
//			}
//			entindex(CBaseEntity *const this);  //   792
//			operator-(const Vector *const this,
//					const Vector &v);  //   801
//			LengthSquared(const Vector *const this);  //   802
//		}
//		{
//			float const recentTime;                        //   844
//		}
//		{
//			class CNavArea *area;                        //   879
//			unsigned int threatLoc;                       //   888
//			int j;                                        //   893
//		}
//		{
//			int t;                                        //   948
//			IsProtectedByShield(CBasePlayer *const this);  //   949
//		}
//	}
}

/* <3d9618> ../cstrike/dlls/bot/cs_bot_vision.cpp:628 */
void CCSBot::BendLineOfSight(Vector *eye, const Vector *point, Vector *bend)
{
//	{
//		TraceResult result;                                   //   631
//		Vector v;                                       //   641
//		float startAngle;                                     //   642
//		float length;                                         //   643
//		float const angleInc;                                  //   645
//		operator+(const Vector *const this,
//				const Vector &v);  //   632
//		Length2D(const Vector *const this);  //   643
//		operator-(const Vector *const this,
//				const Vector &v);  //   641
//		{
//			float angle;                                  //   646
//			{
//				int side;                             //   649
//				{
//					float actualAngle;            //   651
//					float dx;                     //   653
//					float dy;                     //   654
//					Vector rotPoint;        //   657
//					TraceResult result;           //   660
//					Vector ray;             //   667
//					float rayLength;              //   668
//					float visibleLength;          //   669
//					float const bendStepSize;      //   672
//					operator+(const Vector *const this,
//							const Vector &v);  //   661
//					operator-(const Vector *const this,
//							const Vector &v);  //   667
//					NormalizeInPlace(Vector *const this);  //   668
//					{
//						float bendLength;     //   673
//						{
//							Vector rayPoint;        //   676
//							Vector(Vector *const this,
//								float X,
//								float Y,
//								float Z);  //   676
//							operator+(const Vector *const this,
//									const Vector &v);  //   679
//						}
//					}
//				}
//			}
//		}
//	}
}

/* <3d91af> ../cstrike/dlls/bot/cs_bot_vision.cpp:429 */
void CCSBot::UpdateLookAround(bool updateNow)
{
//	{
//		float const noiseStartleRange;                         //   439
//		float const recentThreatTime;                          //   456
//		{
//			Vector spot;                            //   442
//			Vector(Vector *const this,
//				const Vector &v);  //   442
//			InhibitLookAround(CCSBot *const this,
//						float duration);  //   448
//		}
//		IsLookingAtSpot(const class CCSBot *const this,
//				enum PriorityType pri);  //   457
//		{
//			Vector spot;                            //   461
//			Vector(Vector *const this,
//				const Vector &v);  //   461
//			ClearLookAt(CCSBot *const this);  //   459
//		}
//		IsNotMoving(const class CCSBot *const this);  //   481
//		{
//			int which;                                    //   521
//			Vector spot;                            //   522
//			IsViewMoving(const class CCSBot *const this,
//					float angleVelThreshold);  //   489
//			{
//				float range;                          //   491
//			}
//			GetZoomLevel(const class CCSBot *const this);  //   497
//			ClearLookAt(CCSBot *const this);  //   517
//			Vector(Vector *const this,
//				const Vector &v);  //   522
//		}
//		IsLookingAtSpot(const class CCSBot *const this,
//				enum PriorityType pri);  //   541
//		{
//			float asleep;                                 //   550
//			Vector delta;                           //   558
//			float length;                                 //   559
//			float adx;                                    //   560
//			float ady;                                    //   561
//			float t;                                      //   562
//			float const leadCheckRange;                    //   570
//			class HidingSpot *dangerSpot;                //   580
//			int dangerSpotCount;                          //   581
//			int dangerIndex;                              //   582
//			float const checkTime;                         //   584
//			const class SpotOrder *spotOrder;           //   585
//			operator-(const Vector *const this,
//					const Vector &v);  //   558
//			Length(const Vector *const this);  //   559
//			{
//				iterator iter;                        //   586
//				end(list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   586
//				operator++(_List_iterator<SpotOrder> *const this);  //   586
//			}
//			{
//				int which;                            //   607
//				const Vector *checkSpot;      //   608
//				Vector pos;                     //   610
//				operator+(const Vector *const this,
//						const Vector &v);  //   610
//			}
//		}
//	}
}

/* <3d90d3> ../cstrike/dlls/bot/cs_bot_vision.cpp:392 */
void CCSBot::UpdatePeripheralVision(void)
{
//	{
//		float const peripheralUpdateInterval;                  //   394
//		{
//			const class SpotOrder *spotOrder;           //   403
//			Vector pos;                             //   404
//			{
//				const_iterator iter;                  //   406
//				end(list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   406
//				operator++(_List_const_iterator<SpotOrder> *const this);  //   406
//				{
//					const Vector *spotPos;//   410
//				}
//			}
//		}
//	}
}

/* <3d90a7> ../cstrike/dlls/bot/cs_bot_vision.cpp:383 */
void CCSBot::InhibitLookAround(float duration)
{
}

/* <3d900c> ../cstrike/dlls/bot/cs_bot_vision.cpp:345 */
void CCSBot::SetLookAt(const char *desc, const Vector *pos, PriorityType pri, float duration, bool clearIfClose, float angleTolerance)
{
//	{
//		float const tolerance;                                 //   355
//		VectorsAreEqual(const Vector *a,
//				const Vector *b,
//				float tolerance);  //   356
//	}
}

/* <3d8f0d> ../cstrike/dlls/bot/cs_bot_vision.cpp:331 */
void CCSBot::UpdateLookAt(void)
{
//	{
//		Vector to;                                      //   333
//		Vector idealAngle;                              //   335
//		operator+(const Vector *const this,
//				const Vector &v);  //   333
//		operator-(const Vector *const this,
//				const Vector &v);  //   333
//		SetLookAngles(CCSBot *const this,
//				float yaw,
//				float pitch);  //   338
//	}
}

/* <3d8d9b> ../cstrike/dlls/bot/cs_bot_vision.cpp:269 */
void CCSBot::IsVisible(CBasePlayer *player, bool testFOV, unsigned char *visParts)
{
//	{
//		float const topOfHead;                                 //   271
//		float const standFeet;                                 //   272
//		float const crouchFeet;                                //   273
//		unsigned char testVisParts;                           //   274
//		Vector spot;                                    //   283
//		class Vector2D dir;                                   //   297
//		class Vector2D perp;                                  //   299
//		float const edgeOffset;                                //   300
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   283
//		NormalizeInPlace(Vector2D *const this);  //   298
//	}
}

/* <3d8c91> ../cstrike/dlls/bot/cs_bot_vision.cpp:238 */
void CCSBot::IsVisible(Vector *pos, bool testFOV)
{
//	{
//		const Vector *eye;                            //   248
//		class CCSBotManager *ctrl;                           //   251
//		TraceResult result;                                   //   256
//		GetEyePosition(const class CCSBot *const this);  //   248
//		GetEyePosition(const class CCSBot *const this);  //   252
//	}
}

/* <3d882c> ../cstrike/dlls/bot/cs_bot_vision.cpp:48 */
void CCSBot::UpdateLookAngles(void)
{
//	{
//		float const deltaT;                                    //    50
//		float maxAccel;                                       //    51
//		float stiffness;                                      //    52
//		float damping;                                        //    53
//		float useYaw;                                         //    70
//		float usePitch;                                       //    71
//		float angleDiff;                                      //   144
//		float const onTargetTolerance;                         //   170
//		{
//			Vector to;                              //    81
//			float idealYaw;                               //    82
//			enum NavDirType faceDir;                      //    84
//			float const lookAlongLadderRange;              //    85
//			float const ladderPitch;                       //    86
//			operator-(const Vector *const this,
//					const Vector &v);  //    81
//			DirectionToAngle(NavDirType dir);  //   129
//			StayOnLadderLine(CCSBot *me,
//					const class CNavLadder *ladder);  //   129
//			DirectionToAngle(NavDirType dir);  //   123
//			StayOnLadderLine(CCSBot *me,
//					const class CNavLadder *ladder);  //   123
//			{
//				Vector to;                      //   103
//				operator-(const Vector *const this,
//						const Vector &v);  //   103
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   106
//			}
//			{
//				Vector to;                      //    93
//				operator-(const Vector *const this,
//						const Vector &v);  //    93
//				IsLengthLessThan(const Vector *const this,
//						float length);  //    96
//			}
//			DirectionToAngle(NavDirType dir);  //   135
//			OppositeDirection(NavDirType dir);  //    84
//		}
//		NormalizeAngle(float angle);  //   144
//		{
//			float accel;                                  //   179
//		}
//		NormalizeAngle(float angle);  //   197
//		{
//			float accel;                                  //   209
//		}
//	}
}

/* <3d8792> ../cstrike/dlls/bot/cs_bot_vision.cpp:345 */
void CCSBot::SetLookAt(const char *desc, const Vector *pos, PriorityType pri, float duration, bool clearIfClose, float angleTolerance)
{
//	{
//		float const tolerance;                                 //   355
//		VectorsAreEqual(const Vector *a,
//				const Vector *b,
//				float tolerance);  //   356
//	}
}

/* <3d870a> ../cstrike/dlls/bot/cs_bot_vision.cpp:345 */
void CCSBot::SetLookAt(const char *desc, const Vector *pos, PriorityType pri, float duration, bool clearIfClose, float angleTolerance)
{
//	{
//		float const tolerance;                                 //   355
//	}
}

/* <3d86e4> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3d86ba> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <3d86a1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotOrder>::operator++(void)
{
}

/* <3d8655> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:218 */
inline void _List_const_iterator<SpotOrder>::_List_const_iterator(const iterator &__x)
{
}

/* <3d8637> ../game_shared/bot/nav_area.h:136 */
inline void HidingSpot::GetPosition(void)
{
}

/* <3d860e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <3d85f5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <3d85dc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<SpotOrder>::operator++(void)
{
}

/* <3d8599> ../cstrike/dlls/bot/cs_bot_vision.cpp:383 */
void CCSBot::InhibitLookAround(float duration)
{
}

/* <3d857b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <3d8552> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotOrder>::_List_iterator(_List_node_base *__x)
{
}

/* <3d8500> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <3d84e7> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <3d84c0> ../cstrike/dlls/player.h:660 */
inline void CBasePlayer::IsProtectedByShield(void)
{
}

/* <3d84a7> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <3d8457> ../game_shared/bot/nav.h:297 */
inline bool VectorsAreEqual(const Vector *a, const Vector *b, float tolerance)
{
}

/* <3d8431> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <3d8401> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <3d8352> ../cstrike/dlls/bot/cs_bot_vision.cpp:16 */
inline float StayOnLadderLine(CCSBot *me, const CNavLadder *ladder)
{
//	{
//		enum NavDirType faceDir;                              //    19
//		float const stiffness;                                 //    21
//	}
}

/* <3d8335> ../game_shared/bot/nav.h:202 */
inline NavDirType AngleToDirection(float angle)
{
}

/* <3d830e> ../cstrike/dlls/bot/cs_bot.h:1085 */
inline void CCSBot::IsNotMoving(void)
{
//	{
//		float const stillSpeed;                                //  1087
//	}
}

/* <3d82ea> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <3d82d1> ../cstrike/dlls/bot/cs_bot.h:684 */
inline void CCSBot::GetZoomLevel(void)
{
}

/* <3d82ac> ../cstrike/dlls/bot/cs_bot.h:625 */
inline void CCSBot::IsViewMoving(float angleVelThreshold)
{
}

/* <3d8287> ../cstrike/dlls/bot/cs_bot.h:618 */
inline void CCSBot::IsLookingAtSpot(PriorityType pri)
{
}

/* <3d826e> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <3d8238> ../cstrike/dlls/bot/cs_bot.h:598 */
inline void CCSBot::SetLookAngles( float yaw, float pitch)
{
}

/* <3d821f> ../cstrike/dlls/bot/cs_bot.h:577 */
inline void CCSBot::IsUsingLadder(void)
{
}

/* <3d8206> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <3d81e8> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3d81b3> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <3d819a> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <3d817c> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <3d815e> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <3d8137> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3d8110> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3d80f7> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3d80d9> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3d80b0> ../cstrike/dlls/player.h:681 */
inline void CBasePlayer::IsBlind(void)
{
}

/* <3d8087> ../cstrike/dlls/player.h:673 */
inline void CBasePlayer::IsReloading(void)
{
}

/* <3d8069> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3d801a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3d7fd0> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3d7f95> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3d7f46> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3d7eae> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <3d7e7a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3d7e4e> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3d7e2e> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <3d7e10> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3c6e1e> ../cstrike/dlls/bot/cs_bot_update.cpp:208 */
void CCSBot::Update(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   210
//		float const rememberNoiseDuration;                     //   401
//		float const recomputeApproachPointTolerance;           //   419
//		class CBasePlayer *threat;                           //   459
//		float const seenRecentTime;                            //   572
//		float const safeRearmTime;                             //   676
//		float const avoidTime;                                 //   691
//		float const earliestAutoFollowTime;                    //   807
//		float const minAutoFollowTeamwork;                     //   808
//		{
//			Vector vecAiming;                       //   342
//			Vector vecSrc;                          //   344
//			operator+(const Vector *const this,
//					const Vector &v);  //   341
//			operator+(const Vector *const this,
//					const Vector &v);  //   349
//			operator*(float fl,
//					const Vector &v);  //   349
//			operator+(const Vector *const this,
//					const Vector &v);  //   351
//			operator*(float fl,
//					const Vector &v);  //   351
//			Vector(Vector *const this,
//				const Vector &v);  //   351
//			Vector(Vector *const this,
//				const Vector &v);  //   349
//		}
//		{
//			Vector dir;                             //   366
//			float length;                                 //   367
//			const class SpotOrder *order;               //   369
//			Vector along;                           //   370
//			Vector(Vector *const this,
//				const Vector &v);  //   364
//			Vector(Vector *const this,
//				const Vector &v);  //   364
//			operator-(const Vector *const this,
//					const Vector &v);  //   366
//			NormalizeInPlace(Vector *const this);  //   367
//			{
//				const_iterator iter;                  //   371
//				end(list<SpotOrder, std::allocator<SpotOrder>> *const this);  //   371
//				operator*(float fl,
//						const Vector &v);  //   375
//				operator+(const Vector *const this,
//						const Vector &v);  //   375
//				Vector(Vector *const this,
//					const Vector &v);  //   377
//				Vector(Vector *const this,
//					const Vector &v);  //   377
//				operator++(_List_const_iterator<SpotOrder> *const this);  //   371
//			}
//		}
//		{
//			Vector from;                            //   385
//			float const size;                              //   387
//			Vector arrow;                           //   389
//			GetEyePosition(const class CCSBot *const this);  //   385
//			operator+(const Vector *const this,
//					const Vector &v);  //   391
//			Vector(Vector *const this,
//				const Vector &v);  //   391
//		}
//		ForgetNoise(CCSBot *const this);  //   403
//		SetClearedTimestamp(CNavArea *const this,
//					int teamID);  //   415
//		operator-(const Vector *const this,
//				const Vector &v);  //   420
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //   420
//		AckAnalysisRequest(CCSBotManager *const this);  //   215
//		{
//			float const selfDefenseRange;                  //   465
//			{
//				float const knifeAttackRange;          //   490
//				operator-(const Vector *const this,
//						const Vector &v);  //   491
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   491
//			}
//			GetEnemy(CCSBot *const this);  //   485
//			operator-(const Vector *const this,
//					const Vector &v);  //   483
//			IsLengthLessThan(const Vector *const this,
//					float length);  //   483
//			{
//				float const recentAttackDuration;      //   512
//				GetTimeSinceAttacked(const class CCSBot *const this);  //   513
//			}
//			SetLastSeenEnemyTimestamp(CCSBotManager *const this);  //   522
//		}
//		IsAwareOfEnemyDeath(const class CCSBot *const this);  //   530
//		GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   573
//		{
//			Vector target;                          //   591
//		}
//		{
//			bool doToss;                                  //   601
//			IsElapsed(const class CountdownTimer *const this);  //   605
//		}
//		IsActiveWeaponReloading(const class CBot *const this);  //   677
//		{
//			float const duration;                          //   704
//			float crouchDelayTime;                        //   705
//			float standUpTime;                            //   706
//			float elapsed;                                //   708
//		}
//		{
//			unsigned char status;                         //   784
//			HostageWasTaken(CSGameState *const this);  //   793
//		}
//		{
//			float gonnaBlowTime;                          //   755
//		}
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //   809
//		{
//			class CBasePlayer *leader;                   //   820
//			GetClosestVisibleHumanFriend(const class CCSBot *const this);  //   820
//			IsAutoFollowAllowed(const class CBasePlayer *const this);  //   821
//			{
//				float const maxFollowCount;            //   824
//				{
//					float const autoFollowRange;   //   827
//					operator-(const Vector *const this,
//							const Vector &v);  //   828
//					IsLengthLessThan(const Vector *const this,
//							float length);  //   828
//					{
//						class CNavArea *leaderArea;      //   830
//						{
//							class PathCost pc;    //   833
//							float travelRange;    //   834
//							PathCost(PathCost *const this,
//								class CCSBot *bot,
//								enum RouteType route);  //   833
//							NavAreaTravelDistance<PathCost>(CNavArea *startArea,
//											class CNavArea *endArea,
//											class PathCost &costFunc);  //   834
//						}
//					}
//				}
//			}
//		}
//		{
//			class CBaseEntity *leader;                   //   865
//			float const highTeamwork;                      //   872
//			{
//				float minFollowDuration;              //   875
//				GetFollowDuration(const class CCSBot *const this);  //   876
//			}
//		}
//		{
//			float const campChance;                        //   890
//		}
//		IsReloading(CBasePlayer *const this);  //   920
//		IsElapsed(const class CountdownTimer *const this);  //   927
//		{
//			float const waitForHostageRange;               //   929
//			Start(CountdownTimer *const this,
//				float duration);  //   936
//			IsElapsed(const class CountdownTimer *const this);  //   941
//			Start(CountdownTimer *const this,
//				float duration);  //   945
//		}
//		GetLooseBomb(CCSBotManager *const this);  //   743
//		GetBomber(CCSBot *const this);  //   740
//		GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   678
//	}
}

/* <3c672b> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <3c635f> ../cstrike/dlls/bot/cs_bot_update.cpp:26 */
void CCSBot::Upkeep(void)
{
//	{
//		class CCSBotManager *ctrl;                           //    28
//		{
//			float driftAmplitude;                         //   195
//			{
//				float const tooCloseRange;             //   159
//				operator-(const Vector *const this,
//						const Vector &v);  //   160
//				IsLengthLessThan(const Vector *const this,
//						float length);  //   160
//			}
//			SetLookAngles(CCSBot *const this,
//					float yaw,
//					float pitch);  //   169
//		}
//		{
//			float feetOffset;                             //    46
//			Vector toEnemy;                         //   144
//			Vector idealAngle;                      //   146
//			GetFeetZ(const class CCSBot *const this);  //    46
//			{
//				float const sharpshooter;              //    66
//				bool aimBlocked;                      //    67
//				{
//					float const k;                 //    53
//					operator-(const Vector *const this,
//							const Vector &v);  //    54
//					operator*(float fl,
//							const Vector &v);  //    54
//					operator+(const Vector *const this,
//							const Vector &v);  //    54
//				}
//				IsActiveWeaponRecoilHigh(const class CBot *const this);  //    70
//				{
//					class Vector2D to;            //   103
//					class Vector2D perp;          //   106
//					operator-(const Vector *const this,
//							const Vector &v);  //   103
//					Make2D(const Vector *const this);  //   103
//				}
//				{
//					class Vector2D to;            //   113
//					class Vector2D perp;          //   116
//					operator-(const Vector *const this,
//							const Vector &v);  //   113
//					Make2D(const Vector *const this);  //   113
//				}
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //   144
//			SetLookAngles(CCSBot *const this,
//					float yaw,
//					float pitch);  //   151
//		}
//	}
}

/* <3c62cf> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //   611
//	}
}

/* <3c627a> ../cstrike/dlls/vector.h:64 */
void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//		Length(const class Vector2D *const this);  //    66
//	}
}

/* <3c623b> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3c6212> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <3c6174> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <3c615b> ../cstrike/dlls/bot/cs_bot.h:521 */
inline void CCSBot::GetClosestVisibleHumanFriend(void)
{
}

/* <3c6142> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <3c6129> ../cstrike/dlls/bot/cs_bot_manager.h:164 */
inline void CCSBotManager::GetLooseBomb(void)
{
}

/* <3c6110> ../cstrike/dlls/bot/cs_bot.h:517 */
inline void CCSBot::GetBomber(void)
{
}

/* <3c60e9> ../game_shared/bot/bot.h:287 */
inline void CBot::IsActiveWeaponReloading(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   289
//	}
}

/* <3c60d0> ../cstrike/dlls/bot/cs_bot.h:1071 */
inline void CCSBot::IsAwareOfEnemyDeath(void)
{
}

/* <3c60b7> ../cstrike/dlls/bot/cs_bot.h:513 */
inline void CCSBot::GetEnemy(void)
{
}

/* <3c608d> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <3c6069> ../game_shared/bot/nav_area.h:251 */
inline void CNavArea::SetClearedTimestamp( int teamID)
{
}

/* <3c6026> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <3c600d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <3c5ff4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotOrder>::operator++(void)
{
}

/* <3c5fd6> ../game_shared/bot/nav_area.h:136 */
inline void HidingSpot::GetPosition(void)
{
}

/* <3c5f8a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:218 */
inline void _List_const_iterator<SpotOrder>::_List_const_iterator(const iterator &__x)
{
}

/* <3c5f71> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <3c5f68> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <3c5f4d> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <3c5f32> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <3c5f19> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <3c5ed1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <3c5eb8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <3c5e9f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <3c5e62> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <3c5e33> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <3c5e1a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <3c5e01> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <3c5ddd> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <3c5dc1> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <3c5da3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <3c5d7a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3c5d5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <3c5d33> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotOrder>::_List_iterator(_List_node_base *__x)
{
}

/* <3c5d15> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <3c5cec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3c5cc8> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <3c5c8f> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <3c5c5c> ../game_shared/bot/bot.h:297 */
inline void CBot::IsActiveWeaponRecoilHigh(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   299
//		float const highRecoil;                                //   303
//	}
}

/* <3c5bff> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <3c5be6> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <3c5bcd> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <3c5bb4> ../cstrike/dlls/bot/cs_bot.h:681 */
inline void CCSBot::IsRapidFiring(void)
{
}

/* <3c5b9b> ../cstrike/dlls/bot/cs_bot.h:674 */
inline void CCSBot::IsThrowingGrenade(void)
{
}

/* <3c5b6a> ../cstrike/dlls/bot/cs_bot.h:598 */
inline void CCSBot::SetLookAngles( float yaw, float pitch)
{
}

/* <3c5b51> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <3c5b38> ../cstrike/dlls/bot/cs_bot.h:544 */
inline void CCSBot::GetEnemyDeathTimestamp(void)
{
}

/* <3c5b1f> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3c5b06> ../cstrike/dlls/bot/cs_bot.h:539 */
inline void CCSBot::GetTimeSinceLastSawEnemy(void)
{
}

/* <3c5aed> ../cstrike/dlls/bot/cs_bot.h:536 */
inline void CCSBot::GetTimeSinceAttacked(void)
{
}

/* <3c5ad4> ../cstrike/dlls/bot/cs_bot.h:475 */
inline void CCSBot::ForgetNoise(void)
{
}

/* <3c5abb> ../cstrike/dlls/bot/cs_bot.h:453 */
inline void CCSBot::GetMorale(void)
{
}

/* <3c5aa2> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <3c5a89> ../cstrike/dlls/bot/cs_bot.h:383 */
inline void CCSBot::IsAimingAtEnemy(void)
{
}

/* <3c5a70> ../cstrike/dlls/bot/cs_bot.h:382 */
inline void CCSBot::StopAiming(void)
{
}

/* <3c5a52> ../cstrike/dlls/bot/cs_bot.h:381 */
inline void CCSBot::AimAtEnemy(void)
{
}

/* <3c5a39> ../cstrike/dlls/bot/cs_bot.h:376 */
inline void CCSBot::CanAutoFollow(void)
{
}

/* <3c5a20> ../cstrike/dlls/bot/cs_bot.h:375 */
inline void CCSBot::GetFollowDuration(void)
{
}

/* <3c5a02> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <3c59cd> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <3c59af> ../cstrike/dlls/bot/cs_gamestate.h:82 */
inline void CSGameState::HostageWasTaken(void)
{
}

/* <3c5996> ../cstrike/dlls/bot/cs_bot_manager.h:194 */
inline void CCSBotManager::IsDefenseRushing(void)
{
}

/* <3c597d> ../cstrike/dlls/bot/cs_bot_manager.h:178 */
inline void CCSBotManager::GetElapsedRoundTime(void)
{
}

/* <3c5964> ../cstrike/dlls/bot/cs_bot_manager.h:175 */
inline void CCSBotManager::SetLastSeenEnemyTimestamp(void)
{
}

/* <3c594b> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <3c5932> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <3c5914> ../cstrike/dlls/bot/cs_bot_manager.h:65 */
inline void CCSBotManager::AckAnalysisRequest(void)
{
}

/* <3c58f5> ../cstrike/dlls/bot/cs_bot_manager.h:63 */
inline void CCSBotManager::IsAnalysisRequested(void)
{
}

/* <3c58d7> ../cstrike/dlls/bot/cs_bot_manager.h:60 */
inline void CCSBotManager::IsLearningMap(void)
{
}

/* <3c58b3> ../game_shared/bot/bot_profile.h:67 */
inline void BotProfile::GetTeamwork(void)
{
}

/* <3c589a> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <3c587c> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <3c5861> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <3c5846> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <3c582d> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <3c5808> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <3c57ef> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <3c57ca> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <3c57b1> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <3c5780> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <3c5767> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <3c574e> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <3c5735> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <3c571c> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <3c56fe> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <3c56d7> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3c56b0> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3c5697> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <3c5672> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3c5659> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3c563b> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <3c5612> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <3c55f9> ../cstrike/dlls/player.h:691 */
inline void CBasePlayer::IsAutoFollowAllowed(void)
{
}

/* <3c55db> ../cstrike/dlls/player.h:681 */
inline void CBasePlayer::IsBlind(void)
{
}

/* <3c55b2> ../cstrike/dlls/player.h:673 */
inline void CBasePlayer::IsReloading(void)
{
}

/* <3c5594> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3c5545> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3c551e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3c54e3> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3c5494> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3c5423> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <3c53ef> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3c53c3> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3c53a5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3c5369> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <3c5341> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <3b46b1> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:504 */
void CCSBot::InvestigateNoise(void)
{
}

/* <3b468a> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:495 */
void CCSBot::DefuseBomb(void)
{
}

/* <3b4663> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:489 */
void CCSBot::FetchBomb(void)
{
}

/* <3b463c> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:480 */
void CCSBot::PlantBomb(void)
{
}

/* <3b45bf> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:472 */
void CCSBot::MoveTo(const Vector *pos, RouteType route)
{
//	SetGoalPosition(MoveToState *const this,
//			const Vector *pos);  //   474
//	SetRouteType(MoveToState *const this,
//			enum RouteType route);  //   475
}

/* <3b4598> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:460 */
void CCSBot::IsBuying(void)
{
}

/* <3b4571> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:447 */
void CCSBot::IsMovingTo(void)
{
}

/* <3b454a> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:435 */
void CCSBot::IsHunting(void)
{
}

/* <3b450f> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:423 */
void CCSBot::IsAtHidingSpot(void)
{
//	IsHiding(const class CCSBot *const this);  //   425
}

/* <3b44ed> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:411 */
void CCSBot::IsHiding(void)
{
}

/* <3b44c6> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:399 */
void CCSBot::IsDefusingBomb(void)
{
}

/* <3b449f> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:387 */
void CCSBot::IsEscapingFromBomb(void)
{
}

/* <3b447d> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:378 */
void CCSBot::IsAttacking(void)
{
}

/* <3b4416> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:366 */
void CCSBot::StopAttacking(void)
{
//	Idle(CCSBot *const this);  //   374
}

/* <3b4291> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:290 */
void CCSBot::Attack(CBasePlayer *victim)
{
//	{
//		Vector toEnemy;                                 //   340
//		Vector idealAngle;                              //   341
//		float deltaYaw;                                       //   342
//		float turn;                                           //   352
//		float accuracy;                                       //   353
//		IsActiveWeaponReloading(const class CBot *const this);  //   300
//		IsAtHidingSpot(const class CCSBot *const this);  //   322
//		SetCrouchAndHold(AttackState *const this,
//				bool crouch);  //   325
//		operator-(const Vector *const this,
//				const Vector &v);  //   340
//		SetCrouchAndHold(AttackState *const this,
//				bool crouch);  //   323
//	}
}

/* <3b426a> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:280 */
void CCSBot::Hunt(void)
{
}

/* <3b40ed> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:256 */
void CCSBot::TryToRetreat(void)
{
//	{
//		const Vector *spot;                           //   258
//		{
//			float holdTime;                               //   265
//			Hide(CCSBot *const this,
//				const Vector *hidingSpot,
//				float duration,
//				bool holdPosition);  //   268
//		}
//	}
}

/* <3b3fc1> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:205 */
void CCSBot::TryToHide(CNavArea *searchFromArea, float duration, float hideRange, bool holdPosition, bool useNearest)
{
//	{
//		class CNavArea *source;                              //   207
//		Vector sourcePos;                               //   208
//		const Vector *pos;                            //   232
//		SetDuration(HideState *const this,
//				float time);  //   228
//		SetSearchArea(HideState *const this,
//				class CNavArea *area);  //   226
//		SetSearchRange(HideState *const this,
//				float range);  //   227
//		SetHoldPosition(HideState *const this,
//				bool hold);  //   229
//		SetHidingSpot(HideState *const this,
//				const Vector *pos);  //   239
//	}
}

/* <3b3e98> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:171 */
void CCSBot::Hide(const Vector *hidingSpot, float duration, bool holdPosition)
{
//	{
//		class CNavArea *hideArea;                            //   173
//		DestroyPath(CCSBot *const this);  //   181
//		SetHoldPosition(HideState *const this,
//				bool hold);  //   186
//		SetSearchArea(HideState *const this,
//				class CNavArea *area);  //   183
//		SetSearchRange(HideState *const this,
//				float range);  //   184
//		SetDuration(HideState *const this,
//				float time);  //   185
//		SetHidingSpot(HideState *const this,
//				const Vector *pos);  //   187
//		Idle(CCSBot *const this);  //   193
//	}
}

/* <3b3d23> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:116 */
void CCSBot::Hide(CNavArea *searchFromArea, float duration, float hideRange, bool holdPosition)
{
//	{
//		class CNavArea *source;                              //   120
//		Vector sourcePos;                               //   121
//		const Vector *pos;                            //   146
//		DestroyPath(CCSBot *const this);  //   118
//		SetDuration(HideState *const this,
//				float time);  //   142
//		SetSearchArea(HideState *const this,
//				class CNavArea *area);  //   140
//		SetSearchRange(HideState *const this,
//				float range);  //   141
//		SetHoldPosition(HideState *const this,
//				bool hold);  //   143
//		SetHidingSpot(HideState *const this,
//				const Vector *pos);  //   154
//		Idle(CCSBot *const this);  //   160
//	}
}

/* <3b3cc9> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:103 */
void CCSBot::UseEntity(CBaseEntity *entity)
{
//	SetEntity(UseEntityState *const this,
//			class CBaseEntity *entity);  //   105
}

/* <3b3c7e> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:94 */
void CCSBot::RescueHostages(void)
{
//	SetTask(CCSBot::RescueHostages(//		enum TaskType task,
//		class CBaseEntity *entity);  //    96
}

/* <3b3c57> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:83 */
void CCSBot::StopFollowing(void)
{
}

/* <3b3bd1> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:69 */
void CCSBot::ContinueFollowing(void)
{
//	{
//		class CBasePlayer *leader;                           //    73
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //    71
//		SetLeader(FollowState *const this,
//				class CBasePlayer *player);  //    74
//	}
}

/* <3b3b4b> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:48 */
void CCSBot::Follow(CBasePlayer *player)
{
//	SetTask(CCSBot *const this,
//		enum TaskType task,
//		class CBaseEntity *entity);  //    60
//	SetLeader(FollowState *const this,
//			class CBasePlayer *player);  //    61
}

/* <3b3afa> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:41 */
void CCSBot::EscapeFromBomb(void)
{
//	SetTask(CCSBot::EscapeFromBomb(//		enum TaskType task,
//		class CBaseEntity *entity);  //    43
}

/* <3b3ab4> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:34 */
void CCSBot::Idle(void)
{
//	SetTask(CCSBot::Idle(//		enum TaskType task,
//		class CBaseEntity *entity);  //    36
}

/* <3b3a2a> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:16 */
void CCSBot::SetState(BotState *state)
{
//	StopAttacking(CCSBot *const this);  //    22
}

/* <3b3a05> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:34 */
void CCSBot::Idle(void)
{
}

/* <3b39ec> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:366 */
void CCSBot::StopAttacking(void)
{
}

/* <3b39a5> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:171 */
void CCSBot::Hide(const Vector *hidingSpot, float duration, bool holdPosition)
{
//	{
//		class CNavArea *hideArea;                            //   173
//	}
}

/* <3b398c> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:423 */
void CCSBot::IsAtHidingSpot(void)
{
}

/* <3b3965> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:378 */
void CCSBot::IsAttacking(void)
{
}

/* <3b393e> ../game_shared/bot/bot.h:287 */
inline void CBot::IsActiveWeaponReloading(void)
{
//	{
//		class CBasePlayerWeapon *gun;                        //   289
//	}
}

/* <3b3925> ../cstrike/dlls/bot/cs_bot_statemachine.cpp:411 */
void CCSBot::IsHiding(void)
{
}

/* <3b38fc> ../cstrike/dlls/bot/cs_bot.h:251 */
inline void FollowState::SetLeader(CBasePlayer *player)
{
}

/* <3b38cc> ../cstrike/dlls/bot/cs_bot.h:290 */
inline void UseEntityState::SetEntity( CBaseEntity *entity)
{
}

/* <3b387f> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <3b384e> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <3b382a> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <3b3811> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3b37f3> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <3b37ca> ../cstrike/dlls/bot/cs_bot.h:213 */
inline void HideState::IsAtSpot(void)
{
}

/* <3b379b> ../cstrike/dlls/bot/cs_bot.h:211 */
inline void HideState::SetHoldPosition( bool hold)
{
}

/* <3b3777> ../cstrike/dlls/bot/cs_bot.h:210 */
inline void HideState::SetDuration( float time)
{
}

/* <3b3753> ../cstrike/dlls/bot/cs_bot.h:209 */
inline void HideState::SetSearchRange( float range)
{
}

/* <3b372f> ../cstrike/dlls/bot/cs_bot.h:208 */
inline void HideState::SetSearchArea(CNavArea *area)
{
}

/* <3b3706> ../cstrike/dlls/bot/cs_bot.h:205 */
inline void HideState::SetHidingSpot(Vector *pos)
{
}

/* <3b3610> ../cstrike/dlls/bot/cs_bot.h:162 */
inline void MoveToState::SetRouteType(RouteType route)
{
}

/* <3b35e7> ../cstrike/dlls/bot/cs_bot.h:161 */
inline void MoveToState::SetGoalPosition(Vector *pos)
{
}

/* <3b356f> ../cstrike/dlls/bot/cs_bot.h:83 */
inline void AttackState::SetCrouchAndHold( bool crouch)
{
}

/* <3b3550> ../game_shared/bot/bot_profile.h:80 */
inline void BotProfile::GetAttackDelay(void)
{
}

/* <3b3537> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <3b3519> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <3b34f3> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3b34cc> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3b34a5> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3b348c> ../game_shared/bot/bot.h:281 */
inline void CBot::GetActiveWeapon(void)
{
}

/* <3b3467> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3b3449> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3b3420> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3b33d1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3b3387> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3b334c> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3b32fd> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3b3288> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3b325c> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3b323e> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3a4316> ../cstrike/dlls/bot/cs_bot_radio.cpp:319 */
void CCSBot::SendRadioMessage(GameEventType event)
{
//	{
//		class CCSBotManager *ctrl;                           //   328
//		char slot;                                            //   333
//	}
}

/* <3a3bcd> ../cstrike/dlls/bot/cs_bot_radio.cpp:259 */
void CCSBot::RespondToHelpRequest(CBasePlayer *them, Place place, float maxRange)
{
//	{
//		class PathCost pc;                                    //   272
//		float travelDistance;                                 //   273
//		NavAreaTravelDistance<PathCost>(CNavArea *startArea,
//						class CNavArea *endArea,
//						class PathCost &costFunc);  //   273
//	}
//	{
//		float rangeSq;                                        //   287
//		float const close;                                     //   288
//		operator-(const Vector *const this,
//				const Vector &v);  //   287
//		LengthSquared(const Vector *const this);  //   287
//	}
//	{
//		const Vector *pos;                            //   301
//	}
//	Say(BotChatterInterface *const this,
//		const char *phraseName,
//		float lifetime,
//		float delay);  //   309
}

/* <3a3ace> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <3a3a32> ../cstrike/dlls/bot/cs_bot_radio.cpp:241 */
void CCSBot::EndVoiceFeedback(bool force)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   249
//	edict(CBaseEntity *const this);  //   251
//	ENTINDEX(edict_t *pEdict);  //   251
}

/* <3a397f> ../cstrike/dlls/bot/cs_bot_radio.cpp:220 */
void CCSBot::StartVoiceFeedback(float duration)
{
//	{
//		class CBasePlayer *pPlayer;                          //   227
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   230
//		edict(CBaseEntity *const this);  //   232
//		ENTINDEX(edict_t *pEdict);  //   232
//	}
}

/* <3a36e0> ../cstrike/dlls/bot/cs_bot_radio.cpp:37 */
void CCSBot::RespondToRadioCommands(void)
{
//	{
//		float respondTime;                                    //    72
//		class CBasePlayer *player;                           //    92
//		class CCSBotManager *ctrl;                           //    96
//		bool canDo;                                           //    99
//		float const inhibitAutoFollowDuration;                 //   100
//		{
//			class CBasePlayer *player;                   //    42
//		}
//		InhibitAutoFollow(CBasePlayer *const this,
//					float duration);  //   165
//		{
//			const class Zone *zone;                     //   178
//			GetClosestZone(const class CCSBotManager *const this,
//					const class CBaseEntity *entity);  //   178
//		}
//		InhibitAutoFollow(CBasePlayer *const this,
//					float duration);  //   158
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //   129
//		AllowAutoFollow(CBasePlayer *const this);  //   130
//		SetTask(CCSBot *const this,
//			enum TaskType task,
//			class CBaseEntity *entity);  //   145
//		InhibitAutoFollow(CBasePlayer *const this,
//					float duration);  //   147
//		AllowAutoFollow(CBasePlayer *const this);  //   117
//		IsRadioCommand(const class CCSBot *const this,
//				enum GameEventType event);  //   206
//		IsRadioCommand(const class CCSBot *const this,
//				enum GameEventType event);  //    82
//	}
}

/* <3a3689> ../cstrike/dlls/bot/cs_bot_radio.cpp:19 */
void CCSBot::IsRadioCommand(GameEventType event)
{
//	IsRadioCommand(const class CCSBot *const this,
//			enum GameEventType event);  //    19
}

/* <3a361e> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <3a34d4> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <3a3437> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <3a342f> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <3a3414> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <3a33f9> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <3a33e0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <3a3398> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <3a337f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <3a3366> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <3a3329> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <3a32fa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <3a32e1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <3a32c8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <3a32a4> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <3a3289> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <3a326b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <3a3242> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3a3224> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <3a31fb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <3a316f> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <3a314a> ../cstrike/dlls/bot/cs_bot_manager.h:258 */
inline void CCSBotManager::GetClosestZone(const class CBaseEntity *entity)
{
}

/* <3a3103> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <3a30df> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <3a30bb> ../cstrike/dlls/bot/cs_bot_radio.cpp:19 */
void CCSBot::IsRadioCommand(GameEventType event)
{
}

/* <3a30a2> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <3a3089> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <3a3070> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3a3057> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <3a3039> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <3a3004> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <3a2feb> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <3a2fcd> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <3a2fa9> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <3a2f8b> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <3a2f70> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <3a2f55> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <3a2f3c> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <3a2f17> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <3a2efe> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <3a2ed9> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <3a2ec0> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <3a2e8f> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <3a2e76> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <3a2e5d> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <3a2e44> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <3a2e2b> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <3a2e0d> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <3a2de7> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3a2dc0> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3a2d99> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3a2d80> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <3a2d62> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3a2d3e> ../cstrike/dlls/player.h:693 */
inline void CBasePlayer::AllowAutoFollow(void)
{
}

/* <3a2d14> ../cstrike/dlls/player.h:692 */
inline void CBasePlayer::InhibitAutoFollow( float duration)
{
}

/* <3a2cf6> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3a2ca7> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3a2c5d> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3a2c22> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3a2bd3> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3a2b72> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3a2b46> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3912bf> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1300 */
void CCSBot::UpdatePathMovement(bool allowSpeedChange)
{
//	{
//		bool nearEndOfPath;                                   //  1329
//		int prevIndex;                                        //  1373
//		float const aheadRange;                                //  1374
//		int newIndex;                                         //  1375
//		float const nearCornerRange;                           //  1378
//		Vector toGoal;                                  //  1448
//		Vector adjustedGoal;                            //  1510
//		bool didFall;                                         //  1583
//		float const giveUpDuration;                            //  1608
//		{
//			Vector toEnd;                           //  1332
//			Vector d;                               //  1337
//			float const walkRange;                         //  1339
//			GetFeetZ(const class CCSBot *const this);  //  1335
//			IsLengthLessThan(const Vector *const this,
//					float length);  //  1342
//			{
//				float const nearEndRange;              //  1349
//				float const closeEpsilon;              //  1353
//				IsLengthLessThan(const Vector *const this,
//						float length);  //  1350
//				DestroyPath(CCSBot *const this);  //  1357
//			}
//		}
//		FindPathPoint(CCSBot *const this,
//				float aheadRange,
//				Vector *point,
//				int *prevIndex);  //  1375
//		operator-(const Vector *const this,
//				const Vector &v);  //  1379
//		IsLengthLessThan(const Vector *const this,
//				float length);  //  1379
//		ClearLookAt(CCSBot *const this);  //  1381
//		SetPathIndex(CCSBot *const this,
//				int newIndex);  //  1388
//		{
//			float const crouchRange;                       //  1409
//			bool didCrouch;                               //  1410
//			{
//				int i;                                //  1411
//				{
//					const class CNavArea *to;   //  1413
//					Vector close;           //  1419
//					operator-(const Vector *const this,
//							const Vector &v);  //  1422
//					IsLengthGreaterThan(const class Vector2D *const this,
//								float length);  //  1422
//				}
//			}
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //  1443
//		{
//			float const lookAheadRange;                    //  1458
//			operator-(const Vector *const this,
//					const Vector &v);  //  1455
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1461
//			{
//				float along;                          //  1463
//				int i;                                //  1464
//				Length2D(const Vector *const this);  //  1463
//				{
//					Vector delta;           //  1467
//					float segmentLength;          //  1468
//					operator-(const Vector *const this,
//							const Vector &v);  //  1467
//					Length2D(const Vector *const this);  //  1468
//					{
//						float t;              //  1473
//						Vector target;  //  1474
//						operator-(const Vector *const this,
//								const Vector &v);  //  1483
//						operator*(float fl,
//								const Vector &v);  //  1481
//						operator+(const Vector *const this,
//								const Vector &v);  //  1481
//					}
//					operator-(const Vector *const this,
//							const Vector &v);  //  1490
//				}
//				GetPathEndpoint(const class CCSBot *const this);  //  1498
//			}
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //  1503
//		Vector(Vector *const this,
//			const Vector &v);  //  1510
//		{
//			const Vector *pos;                    //  1528
//			operator+(const Vector *const this,
//					const Vector &v);  //  1529
//			Vector(Vector *const this,
//				const Vector &v);  //  1529
//			operator+(const Vector *const this,
//					const Vector &v);  //  1531
//			Vector(Vector *const this,
//				const Vector &v);  //  1531
//			operator+(const Vector *const this,
//					const Vector &v);  //  1532
//			Vector(Vector *const this,
//				const Vector &v);  //  1532
//		}
//		{
//			float const politeDuration;                    //  1542
//			Start(CountdownTimer *const this,
//				float duration);  //  1543
//		}
//		IsElapsed(const class CountdownTimer *const this);  //  1545
//		DestroyPath(CCSBot *const this);  //  1552
//		GetFeetZ(const class CCSBot *const this);  //  1584
//		{
//			float const closeRange;                        //  1586
//			class Vector2D to;                            //  1587
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1588
//			GetFeetZ(const class CCSBot *const this);  //  1594
//		}
//		DestroyPath(CCSBot *const this);  //  1622
//		IsNearJump(const class CCSBot *const this);  //  1518
//	}
}

/* <390fb1> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1821 */
void CCSBot::DrawPath(void)
{
//	{
//		Vector close;                                   //  1830
//		{
//			int i;                                        //  1826
//			operator+(const Vector *const this,
//					const Vector &v);  //  1828
//			operator+(const Vector *const this,
//					const Vector &v);  //  1828
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //  1835
//		operator+(const Vector *const this,
//				const Vector &v);  //  1835
//		operator+(const Vector *const this,
//				const Vector &v);  //  1836
//		operator+(const Vector *const this,
//				const Vector &v);  //  1836
//		operator+(const Vector *const this,
//				const Vector &v);  //  1837
//		operator+(const Vector *const this,
//				const Vector &v);  //  1837
//	}
}

/* <390ef6> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1798 */
void CCSBot::GetPathDistanceRemaining(void)
{
//	{
//		int idx;                                              //  1803
//		float dist;                                           //  1805
//		const Vector *prevCenter;                     //  1806
//		{
//			int i;                                        //  1808
//			operator-(const Vector *const this,
//					const Vector &v);  //  1810
//			Length(const Vector *const this);  //  1810
//		}
//	}
}

/* <3907cd> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1664 */
void CCSBot::ComputePath(CNavArea *goalArea, const Vector *goal, RouteType route)
{
//	{
//		class CNavArea *startArea;                           //  1679
//		Vector pathEndPosition;                         //  1687
//		class CNavArea *closestArea;                         //  1705
//		class PathCost pathCost;                              //  1706
//		bool pathToGoalExists;                                //  1707
//		class CNavArea *effectiveGoalArea;                   //  1709
//		int count;                                            //  1716
//		class CNavArea *area;                                //  1717
//		IsElapsed(const class CountdownTimer *const this);  //  1669
//		Start(CountdownTimer *const this,
//			float duration);  //  1673
//		DestroyPath(CCSBot *const this);  //  1675
//		Vector(Vector *const this,
//			const Vector &v);  //  1687
//		NavAreaBuildPath<PathCost>(CNavArea *startArea,
//						class CNavArea *goalArea,
//						const Vector *goalPos,
//						class PathCost &costFunc,
//						class CNavArea ** closestArea);  //  1707
//		SetupLadderMovement(CCSBot *const this);  //  1786
//		DestroyPath(CCSBot *const this);  //  1747
//	}
}

/* <3906d2> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <3906a6> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1634 */
void CCSBot::BuildTrivialPath(const Vector *goal)
{
}

/* <38fbd5> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1197 */
void CCSBot::FeelerReflexAdjustment(Vector *goalPosition)
{
//	{
//		Vector dir;                                     //  1203
//		Vector lat;                                     //  1204
//		float const feelerOffset;                              //  1206
//		float const feelerLengthRun;                           //  1207
//		float const feelerLengthWalk;                          //  1208
//		float const feelerHeight;                              //  1209
//		float feelerLength;                                   //  1211
//		float ground;                                         //  1218
//		Vector normal;                                  //  1219
//		Vector feet;                                    //  1230
//		Vector from;                                    //  1231
//		Vector to;                                      //  1232
//		float testZ;                                          //  1233
//		bool leftClear;                                       //  1235
//		bool rightClear;                                      //  1260
//		float const avoidRange;                                //  1279
//		GetEyePosition(const class CCSBot *const this);  //  1220
//		GetFeetZ(const class CCSBot *const this);  //  1230
//		CrossProduct(Vector &a,
//				const Vector &b);  //  1224
//		CrossProduct(Vector &a,
//				const Vector &b);  //  1227
//		IsWalkableTraceLineClear(Vector &from,
//					Vector &to,
//					unsigned int flags);  //  1235
//		operator*(float fl,
//				const Vector &v);  //  1231
//		operator+(const Vector *const this,
//				const Vector &v);  //  1231
//		operator*(float fl,
//				const Vector &v);  //  1232
//		operator+(const Vector *const this,
//				const Vector &v);  //  1232
//		Vector(Vector *const this,
//			const Vector &v);  //  1252
//		Vector(Vector *const this,
//			const Vector &v);  //  1252
//		operator-(const Vector *const this,
//				const Vector &v);  //  1257
//		IsWalkableTraceLineClear(Vector &from,
//					Vector &to,
//					unsigned int flags);  //  1260
//		operator+(const Vector *const this,
//				const Vector &v);  //  1258
//		Vector(Vector *const this,
//			const Vector &v);  //  1274
//		Vector(Vector *const this,
//			const Vector &v);  //  1274
//		operator*(float fl,
//				const Vector &v);  //  1286
//		operator+(const Vector *const this,
//				const Vector &v);  //  1286
//		operator*(float fl,
//				const Vector &v);  //  1292
//		operator-(const Vector *const this,
//				const Vector &v);  //  1292
//		Vector(Vector *const this,
//			const Vector &v);  //  1254
//		Vector(Vector *const this,
//			const Vector &v);  //  1254
//		Vector(Vector *const this,
//			const Vector &v);  //  1276
//		Vector(Vector *const this,
//			const Vector &v);  //  1276
//	}
}

/* <38f89b> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1118 */
void CCSBot::IsFriendInTheWay(Vector *goalPos)
{
//	{
//		float const avoidFriendInterval;                       //  1126
//		Vector moveDir;                                 //  1130
//		float length;                                         //  1133
//		IsElapsed(const class CountdownTimer *const this);  //  1121
//		{
//			int i;                                        //  1138
//			{
//				class CBasePlayer *player;           //  1140
//				Vector toFriend;                //  1158
//				float const personalSpace;             //  1161
//				float friendDistAlong;                //  1166
//				Vector pos;                     //  1173
//				float const friendRadius;              //  1180
//				FNullEnt(entvars_t *pev);  //  1145
//				operator-(const Vector *const this,
//						const Vector &v);  //  1158
//				IsLengthGreaterThan(const Vector *const this,
//							float length);  //  1162
//				DotProduct(Vector &a,
//						const Vector &b);  //  1166
//				operator*(float fl,
//						const Vector &v);  //  1177
//				operator+(const Vector *const this,
//						const Vector &v);  //  1177
//				operator-(const Vector *const this,
//						const Vector &v);  //  1181
//				IsLengthLessThan(const Vector *const this,
//						float length);  //  1181
//			}
//		}
//		Start(CountdownTimer *const this,
//			float duration);  //  1127
//		operator-(const Vector *const this,
//				const Vector &v);  //  1130
//		NormalizeInPlace(Vector *const this);  //  1133
//	}
}

/* <38f844> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1100 */
void CCSBot::GetApproximateFallDamage( float height)
{
//	{
//		float const slope;                                     //  1103
//		float const intercept;                                 //  1104
//		float damage;                                         //  1106
//	}
}

/* <38f7e3> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1077 */
void CCSBot::IsNearJump(void)
{
//	IsNearJump(const class CCSBot *const this);  //  1077
}

/* <38f761> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1052 */
void CCSBot::SetPathIndex(int newIndex)
{
//	SetupLadderMovement(CCSBot *const this);  //  1059
//	SetPathIndex(CCSBot *const this,
//			int newIndex);  //  1052
}

/* <38ec40> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:810 */
void CCSBot::FindPathPoint(float aheadRange, Vector *point, int *prevIndex)
{
//	{
//		int afterIndex;                                       //   813
//		Vector close;                                   //   816
//		int startIndex;                                       //   817
//		Vector initDir;                                 //   898
//		Vector feet;                                    //   901
//		Vector eyes;                                    //   902
//		float rangeSoFar;                                     //   903
//		bool visible;                                         //   906
//		Vector prevDir;                                 //   908
//		bool isCorner;                                        //   911
//		int i;                                                //   912
//		{
//			int index;                                    //   834
//			float const closeEpsilon;                      //   842
//			operator-(const Vector *const this,
//					const Vector &v);  //   843
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   843
//		}
//		{
//			Vector pos;                             //   862
//			float const closeEpsilon;                      //   865
//			operator-(const Vector *const this,
//					const Vector &v);  //   866
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   866
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   898
//		NormalizeInPlace(Vector *const this);  //   899
//		GetFeetZ(const class CCSBot *const this);  //   901
//		{
//			Vector pos;                             //   915
//			Vector to;                              //   916
//			Vector dir;                             //   917
//			Vector probe;                           //   936
//			Vector along;                           //   957
//			Vector(Vector *const this,
//				const Vector &v);  //   915
//			operator-(const Vector *const this,
//					const Vector &v);  //   916
//			Normalize(const Vector *const this);  //   917
//			DotProduct(Vector &a,
//					const Vector &b);  //   920
//			DotProduct(Vector &a,
//					const Vector &b);  //   927
//			operator+(const Vector *const this,
//					const Vector &v);  //   936
//			IsWalkableTraceLineClear(Vector &from,
//						Vector &to,
//						unsigned int flags);  //   937
//			operator-(const Vector *const this,
//					const Vector &v);  //   957
//			Length2D(const Vector *const this);  //   958
//			operator-(const Vector *const this,
//					const Vector &v);  //   957
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   902
//		{
//			const Vector *afterPoint;             //   981
//			const Vector *beforePoint;            //   982
//			Vector to;                              //   984
//			float length;                                 //   985
//			float t;                                      //   987
//			operator-(const Vector *const this,
//					const Vector &v);  //   984
//			Length2D(const Vector *const this);  //   985
//			operator*(float fl,
//					const Vector &v);  //   994
//			{
//				float const sightStepSize;             //   999
//				float dt;                             //  1000
//				Vector probe;                   //  1002
//				operator+(const Vector *const this,
//						const Vector &v);  //  1002
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //  1003
//				operator+(const Vector *const this,
//						const Vector &v);  //  1006
//				operator*(float fl,
//						const Vector &v);  //  1006
//			}
//			operator+(const Vector *const this,
//					const Vector &v);  //   994
//		}
//		{
//			float const epsilon;                           //  1017
//			class Vector2D toPoint;                       //  1018
//			DotProduct(const class Vector2D &a,
//					const class Vector2D &b);  //  1021
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //  1021
//			{
//				int i;                                //  1023
//				IsLengthGreaterThan(const class Vector2D *const this,
//							float length);  //  1028
//			}
//		}
//	}
}

/* <38ec14> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:752 */
void CCSBot::IsStraightLinePathWalkable(Vector *goal)
{
}

/* <38e6d0> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:665 */
void CCSBot::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   670
//		Vector toFeet;                                  //   670
//		Vector feet;                                    //   671
//		Vector eyes;                                    //   672
//		Vector pos;                                     //   673
//		const Vector *from;                           //   674
//		const Vector *to;                             //   674
//		float length;                                         //   675
//		float closeLength;                                    //   676
//		float closeDistSq;                                    //   677
//		int closeIndex;                                       //   678
//		float distSq;                                         //   679
//		int start;                                            //   681
//		int end;                                              //   681
//		{
//			int i;                                        //   699
//			operator-(const Vector *const this,
//					const Vector &v);  //   724
//			LengthSquared(const Vector *const this);  //   724
//			{
//				Vector probe;                   //   730
//				operator+(const Vector *const this,
//						const Vector &v);  //   730
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   731
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //   705
//			NormalizeInPlace(Vector *const this);  //   708
//			operator-(const Vector *const this,
//					const Vector &v);  //   711
//			DotProduct(Vector &a,
//					const Vector &b);  //   714
//			operator*(float fl,
//					const Vector &v);  //   722
//			operator+(const Vector *const this,
//					const Vector &v);  //   722
//		}
//		GetFeetZ(const class CCSBot *const this);  //   671
//		operator+(const Vector *const this,
//				const Vector &v);  //   672
//	}
}

/* <38e44d> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:609 */
void CCSBot::FindClosestPointOnPath(Vector *worldPos, int startIndex, int endIndex, Vector *close)
{
//	{
//		Vector along;                                   //   614
//		Vector toWorldPos;                              //   614
//		Vector pos;                                     //   615
//		const Vector *from;                           //   616
//		const Vector *to;                             //   616
//		float length;                                         //   617
//		float closeLength;                                    //   618
//		float closeDistSq;                                    //   619
//		float distSq;                                         //   620
//		{
//			int i;                                        //   622
//			NormalizeInPlace(Vector *const this);  //   631
//			operator-(const Vector *const this,
//					const Vector &v);  //   634
//			DotProduct(Vector &a,
//					const Vector &b);  //   637
//			operator-(const Vector *const this,
//					const Vector &v);  //   647
//			LengthSquared(const Vector *const this);  //   647
//			operator-(const Vector *const this,
//					const Vector &v);  //   628
//			operator*(float fl,
//					const Vector &v);  //   645
//			operator+(const Vector *const this,
//					const Vector &v);  //   645
//		}
//	}
}

/* <38de76> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:248 */
void CCSBot::UpdateLadderMovement(void)
{
//	{
//		bool giveUp;                                          //   253
//		float const ladderTimeoutDuration;                     //   256
//		float const tolerance;                                 //   315
//		float const closeToGoal;                               //   316
//		{
//			float const farAway;                           //   299
//			operator-(const class Vector2D *const this,
//					const class Vector2D &v);  //   300
//			IsLengthGreaterThan(const class Vector2D *const this,
//						float length);  //   300
//			DestroyPath(CCSBot *const this);  //   304
//		}
//		AddDirectionVector(Vector *v,
//					enum NavDirType dir,
//					float amount);  //   543
//		GetFeetZ(const class CCSBot *const this);  //   510
//		GetFeetZ(const class CCSBot *const this);  //   475
//		{
//			Vector to;                              //   446
//			Vector idealAngle;                      //   447
//			operator-(const Vector *const this,
//					const Vector &v);  //   446
//			AnglesAreEqual(float a,
//					float b,
//					float tolerance);  //   449
//		}
//		{
//			Vector to;                              //   429
//			Vector idealAngle;                      //   430
//			operator-(const Vector *const this,
//					const Vector &v);  //   429
//			AnglesAreEqual(float a,
//					float b,
//					float tolerance);  //   432
//		}
//		GetFeetZ(const class CCSBot *const this);  //   368
//		{
//			bool approached;                              //   380
//			class Vector2D d;                             //   382
//			{
//				class Vector2D perp;                  //   386
//				Length(const class Vector2D *const this);  //   388
//			}
//			{
//				float const walkRange;                 //   395
//				IsLengthLessThan(const class Vector2D *const this,
//						float length);  //   396
//			}
//		}
//		{
//			bool approached;                              //   322
//			class Vector2D d;                             //   324
//			float const walkRange;                         //   335
//			{
//				class Vector2D perp;                  //   328
//				Length(const class Vector2D *const this);  //   330
//			}
//			IsLengthLessThan(const class Vector2D *const this,
//					float length);  //   336
//		}
//		AddDirectionVector(Vector *v,
//					enum NavDirType dir,
//					float amount);  //   481
//		DestroyPath(CCSBot *const this);  //   528
//		GetFeetZ(const class CCSBot *const this);  //   538
//		SetPathIndex(CCSBot *const this,
//				int newIndex);  //   592
//	}
}

/* <38dd85> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:213 */
void CCSBot::ComputeLadderEndpoint(bool isAscending)
{
//	{
//		TraceResult result;                                   //   215
//		{
//			Vector from;                            //   221
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   221
//		}
//		{
//			Vector from;                            //   233
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   233
//		}
//	}
}

/* <38dd51> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:155 */
void CCSBot::SetupLadderMovement(void)
{
//	{
//		const class ConnectInfo *to;                        //   160
//	}
}

/* <38db02> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:30 */
void CCSBot::ComputePathPositions(void)
{
//	{
//		int i;                                                //    40
//		{
//			const class ConnectInfo *from;              //    42
//			class ConnectInfo *to;                       //    43
//			{
//				const NavLadderList *list;          //   124
//				const_iterator iter;                  //   125
//				end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //   126
//				{
//					class CNavLadder *ladder;    //   128
//					AddDirectionVector(Vector *v,
//								enum NavDirType dir,
//								float amount);  //   134
//				}
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //   126
//			}
//			{
//				const NavLadderList *list;          //    97
//				const_iterator iter;                  //    98
//				{
//					class CNavLadder *ladder;    //   101
//					AddDirectionVector(Vector *v,
//								enum NavDirType dir,
//								float amount);  //   110
//				}
//				end(const class list<CNavLadder*, std::allocator<CNavLadder*>> *const this);  //    99
//				operator++(_List_const_iterator<CNavLadder*> *const this);  //    99
//			}
//			{
//				float const stepInDist;                //    53
//				AddDirectionVector(Vector *v,
//							enum NavDirType dir,
//							float amount);  //    54
//				{
//					class Vector2D dir;           //    65
//					float const pushDist;          //    69
//					DirectionToVector2D(NavDirType dir,
//								class Vector2D *v);  //    66
//					{
//						int j;                //    77
//					}
//				}
//			}
//		}
//	}
}

/* <38d5e0> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:665 */
void CCSBot::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   670
//		Vector eyes;                                    //   672
//		const Vector *from;                           //   674
//		const Vector *to;                             //   674
//		float length;                                         //   675
//		float closeLength;                                    //   676
//		float closeDistSq;                                    //   677
//		int closeIndex;                                       //   678
//		float distSq;                                         //   679
//		int start;                                            //   681
//		int end;                                              //   681
//		Vector toFeet;                                  //   670
//		Vector feet;                                    //   671
//		Vector pos;                                     //   673
//		{
//			int i;                                        //   699
//			operator-(const Vector *const this,
//					const Vector &v);  //   724
//			LengthSquared(const Vector *const this);  //   724
//			{
//				Vector probe;                   //   730
//				operator+(const Vector *const this,
//						const Vector &v);  //   730
//				IsWalkableTraceLineClear(Vector &from,
//							Vector &to,
//							unsigned int flags);  //   731
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //   705
//			NormalizeInPlace(Vector *const this);  //   708
//			operator-(const Vector *const this,
//					const Vector &v);  //   711
//			DotProduct(Vector &a,
//					const Vector &b);  //   714
//			operator*(float fl,
//					const Vector &v);  //   722
//			operator+(const Vector *const this,
//					const Vector &v);  //   722
//		}
//		GetFeetZ(const class CCSBot *const this);  //   671
//		operator+(const Vector *const this,
//				const Vector &v);  //   672
//	}
}

/* <38d424> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:155 */
void CCSBot::SetupLadderMovement(void)
{
//	{
//		const class ConnectInfo *to;                        //   160
//		{
//			TraceResult result;                           //   186
//			Vector from;                            //   187
//			Vector to;                              //   188
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //   184
//			Vector(Vector *const this,
//				const Vector &v);  //   187
//			Vector(Vector *const this,
//				const Vector &v);  //   188
//			DirectionToAngle(NavDirType dir);  //   196
//			OppositeDirection(NavDirType dir);  //   203
//			DirectionToAngle(NavDirType dir);  //   203
//			AddDirectionVector(Vector *v,
//						enum NavDirType dir,
//						float amount);  //   205
//		}
//		AddDirectionVector(Vector *v,
//					enum NavDirType dir,
//					float amount);  //   177
//		OppositeDirection(NavDirType dir);  //   178
//		DirectionToAngle(NavDirType dir);  //   178
//	}
}

/* <38d3f6> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1634 */
void CCSBot::BuildTrivialPath(const Vector *goal)
{
}

/* <38d3b7> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <38d33d> ../game_shared/bot/nav.h:330 */
inline bool IsWalkableTraceLineClear(Vector &from, Vector &to, unsigned int flags)
{
//	{
//		TraceResult result;                                   //   332
//		edict_t *ignore;                                     //   333
//		Vector useFrom;                                 //   334
//		{
//			Vector dir;                             //   346
//		}
//	}
}

/* <38d249> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:665 */
void CCSBot::FindOurPositionOnPath(Vector *close, bool local)
{
//	{
//		Vector along;                                   //   670
//		Vector toFeet;                                  //   670
//		Vector feet;                                    //   671
//		Vector eyes;                                    //   672
//		Vector pos;                                     //   673
//		const Vector *from;                           //   674
//		const Vector *to;                             //   674
//		float length;                                         //   675
//		float closeLength;                                    //   676
//		float closeDistSq;                                    //   677
//		int closeIndex;                                       //   678
//		float distSq;                                         //   679
//		int start;                                            //   681
//		int end;                                              //   681
//		{
//			int i;                                        //   699
//			{
//				Vector probe;                   //   730
//			}
//		}
//	}
}

/* <38d0ed> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1634 */
void CCSBot::BuildTrivialPath(const Vector *goal)
{
}

/* <38cf25> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:810 */
void CCSBot::FindPathPoint(float aheadRange, Vector *point, int *prevIndex)
{
//	{
//		int afterIndex;                                       //   813
//		Vector close;                                   //   816
//		int startIndex;                                       //   817
//		Vector initDir;                                 //   898
//		Vector feet;                                    //   901
//		Vector eyes;                                    //   902
//		float rangeSoFar;                                     //   903
//		bool visible;                                         //   906
//		Vector prevDir;                                 //   908
//		bool isCorner;                                        //   911
//		int i;                                                //   912
//		{
//			int index;                                    //   834
//			float const closeEpsilon;                      //   842
//		}
//		{
//			Vector pos;                             //   862
//			float const closeEpsilon;                      //   865
//		}
//		{
//			Vector pos;                             //   915
//			Vector to;                              //   916
//			Vector dir;                             //   917
//			Vector probe;                           //   936
//			Vector along;                           //   957
//		}
//		{
//			const Vector *afterPoint;             //   981
//			const Vector *beforePoint;            //   982
//			Vector to;                              //   984
//			float length;                                 //   985
//			float t;                                      //   987
//			{
//				float const sightStepSize;             //   999
//				float dt;                             //  1000
//				Vector probe;                   //  1002
//			}
//		}
//		{
//			float const epsilon;                           //  1017
//			class Vector2D toPoint;                       //  1018
//			{
//				int i;                                //  1023
//			}
//		}
//	}
}

/* <38ceef> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <38cee7> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <38cecc> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <38ceb1> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <38ce98> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <38ce50> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <38ce37> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <38ce13> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <38cdf8> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <38cdce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <38cda4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <38cd8b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <38cd72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <38cd3b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <38cd17> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <38ccf5> ../game_shared/bot/nav.h:223 */
inline void DirectionToVector2D(NavDirType dir, class Vector2D *v)
{
}

/* <38ccd7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <38ccae> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <38cc90> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <38cc67> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <38cbfc> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <38cbd8> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <38cb92> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <38cb47> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1100 */
void CCSBot::GetApproximateFallDamage( float height)
{
//	{
//		float const slope;                                     //  1103
//		float const intercept;                                 //  1104
//		float damage;                                         //  1106
//	}
}

/* <38cb2e> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <38cafc> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1077 */
void CCSBot::IsNearJump(void)
{
//	{
//		int i;                                                //  1082
//		{
//			float dz;                                     //  1086
//		}
//	}
}

/* <38cac9> ../game_shared/bot/nav.h:288 */
inline bool AnglesAreEqual(float a, float b, float tolerance)
{
}

/* <38ca89> ../cstrike/dlls/vector.h:28 */
inline void operator-(const class Vector2D *const this, const Vector2D &v)
{
}

/* <38ca64> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:1052 */
void CCSBot::SetPathIndex(int newIndex)
{
}

/* <38ca4b> ../cstrike/dlls/bot/cs_bot.h:568 */
inline void CCSBot::GetPathEndpoint(void)
{
}

/* <38ca27> ../cstrike/dlls/vector.h:58 */
inline void Vector2D::IsLengthGreaterThan(float length)
{
}

/* <38c9cd> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <38c9a4> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <38c911> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:752 */
void CCSBot::IsStraightLinePathWalkable(Vector *goal)
{
//	{
//		float const inc;                                       //   757
//		Vector feet;                                    //   759
//		Vector dir;                                     //   760
//		float length;                                         //   761
//		float lastGround;                                     //   763
//		float along;                                          //   769
//		Vector pos;                                     //   770
//		float ground;                                         //   771
//		bool done;                                            //   772
//	}
}

/* <38c8de> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <38c8c5> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <38c845> ../cstrike/dlls/bot/cs_bot_pathfind.cpp:155 */
void CCSBot::SetupLadderMovement(void)
{
//	{
//		const class ConnectInfo *to;                        //   160
//		{
//			TraceResult result;                           //   186
//			Vector from;                            //   187
//			Vector to;                              //   188
//		}
//	}
}

/* <38c828> ../game_shared/bot/nav.h:188 */
inline float DirectionToAngle(NavDirType dir)
{
}

/* <38c7f2> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <38c7d9> ../cstrike/dlls/bot/cs_bot.h:612 */
inline void CCSBot::ClearLookAt(void)
{
}

/* <38c7c0> ../cstrike/dlls/bot/cs_bot.h:577 */
inline void CCSBot::IsUsingLadder(void)
{
}

/* <38c7a2> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <38c789> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <38c76b> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <38c742> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <38c729> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <38c710> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <38c6f7> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <38c6d9> ../game_shared/bot/bot.h:93 */
inline void CBot::IsRunning(void)
{
}

/* <38c6b0> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <38c695> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <38c67a> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <38c661> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <38c63c> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <38c623> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <38c5fe> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <38c5e5> ../game_shared/bot/nav_area.h:292 */
inline void CNavArea::GetParentHow(void)
{
}

/* <38c5cc> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <38c59b> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <38c582> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <38c569> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <38c550> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <38c537> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <38c51e> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <38c500> ../game_shared/bot/nav_area.h:213 */
inline void CNavArea::GetID(void)
{
}

/* <38c4af> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <38c440> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <38c40b> ../game_shared/bot/nav.h:275 */
inline float AngleDifference(float a, float b)
{
//	{
//		float angleDiff;                                      //   277
//	}
}

/* <38c3c0> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <38c371> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <38c34a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <38c30f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <38c2e8> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <38c1dd> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <38c1b7> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <38c183> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <38c157> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <38c137> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <38c119> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <38c0ee> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <38c0d0> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <38c0a8> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <37ce12> ../cstrike/dlls/bot/cs_bot_nav.cpp:435 */
void CCSBot::FindApproachPointNearestPath(Vector *pos)
{
//	{
//		Vector target;                                  //   446
//		Vector close;                                   //   446
//		float targetRangeSq;                                  //   447
//		bool found;                                           //   448
//		int start;                                            //   450
//		int end;                                              //   451
//		float const nearPathSq;                                //   457
//		{
//			int i;                                        //   459
//			{
//				float rangeSq;                        //   464
//				operator-(const Vector *const this,
//						const Vector &v);  //   464
//				LengthSquared(const Vector *const this);  //   464
//			}
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   478
//	}
}

/* <37cd67> ../cstrike/dlls/bot/cs_bot_nav.cpp:422 */
void CCSBot::DrawApproachPoints(void)
{
//	{
//		int i;                                                //   427
//		operator+(const Vector *const this,
//				const Vector &v);  //   428
//		Vector(Vector *const this,
//			const Vector &v);  //   428
//	}
}

/* <37cc94> ../cstrike/dlls/bot/cs_bot_nav.cpp:383 */
void CCSBot::ComputeApproachPoints(void)
{
//	{
//		Vector eye;                                     //   391
//		Vector ap;                                      //   393
//		float halfWidth;                                      //   394
//		Vector(Vector *const this,
//			const Vector &v);  //   391
//		{
//			int i;                                        //   395
//			{
//				const class ApproachInfo *info;     //   397
//				Vector bendPoint;               //   415
//			}
//			GetApproachInfoCount(const class CNavArea *const this);  //   395
//		}
//	}
}

/* <37cc52> ../cstrike/dlls/bot/cs_bot_nav.cpp:338 */
void CCSBot::Wiggle(void)
{
//	ResetStuckMonitor(CCSBot *const this);  //   342
}

/* <37cb85> ../cstrike/dlls/bot/cs_bot_nav.cpp:314 */
void CCSBot::StrafeAwayFromPosition(const Vector *pos)
{
//	{
//		float angle;                                          //   317
//		class Vector2D dir;                                   //   319
//		class Vector2D lat;                                   //   320
//		class Vector2D to;                                    //   323
//		float latProj;                                        //   326
//		NormalizeInPlace(Vector2D *const this);  //   324
//	}
}

/* <37ca96> ../cstrike/dlls/bot/cs_bot_nav.cpp:282 */
void CCSBot::MoveAwayFromPosition(const Vector *pos)
{
//	{
//		float angle;                                          //   285
//		class Vector2D dir;                                   //   287
//		class Vector2D lat;                                   //   288
//		class Vector2D to;                                    //   291
//		float toProj;                                         //   295
//		float latProj;                                        //   296
//		float const c;                                         //   298
//		NormalizeInPlace(Vector2D *const this);  //   292
//	}
}

/* <37c4de> ../cstrike/dlls/bot/cs_bot_nav.cpp:184 */
void CCSBot::MoveTowardsPosition(const Vector *pos)
{
//	{
//		float angle;                                          //   249
//		class Vector2D dir;                                   //   251
//		class Vector2D lat;                                   //   252
//		class Vector2D to;                                    //   255
//		float toProj;                                         //   259
//		float latProj;                                        //   260
//		float const c;                                         //   262
//		{
//			float ground;                                 //   200
//			Vector aheadRay;                        //   201
//			bool jumped;                                  //   207
//			NormalizeInPlace(Vector *const this);  //   202
//			{
//				float const farLookAheadRange;         //   210
//				Vector normal;                  //   211
//				Vector stepAhead;               //   212
//				operator*(float fl,
//						const Vector &v);  //   212
//				GetSimpleGroundHeightWithFloor(CCSBot *const this,
//								const Vector *pos,
//								float *height,
//								Vector *normal);  //   215
//				operator+(const Vector *const this,
//						const Vector &v);  //   212
//				DiscontinuityJump(CCSBot *const this,
//							float ground,
//							bool onlyJumpDown,
//							bool mustJump);  //   218
//			}
//			{
//				float const lookAheadRange;            //   225
//				Vector stepAhead;               //   226
//				operator*(float fl,
//						const Vector &v);  //   226
//				operator+(const Vector *const this,
//						const Vector &v);  //   226
//				GetSimpleGroundHeightWithFloor(CCSBot *const this,
//								const Vector *pos,
//								float *height,
//								Vector *normal);  //   228
//				DiscontinuityJump(CCSBot *const this,
//							float ground,
//							bool onlyJumpDown,
//							bool mustJump);  //   230
//			}
//			{
//				float const lookAheadRange;            //   237
//				Vector stepAhead;               //   238
//				operator*(float fl,
//						const Vector &v);  //   238
//				operator+(const Vector *const this,
//						const Vector &v);  //   238
//				GetSimpleGroundHeightWithFloor(CCSBot *const this,
//								const Vector *pos,
//								float *height,
//								Vector *normal);  //   240
//				DiscontinuityJump(CCSBot *const this,
//							float ground,
//							bool onlyJumpDown,
//							bool mustJump);  //   242
//			}
//		}
//		NormalizeInPlace(Vector2D *const this);  //   256
//	}
}

/* <37c4b8> ../cstrike/dlls/bot/cs_bot_nav.cpp:172 */
void CCSBot::GetPlace(void)
{
}

/* <37c448> ../cstrike/dlls/bot/cs_bot_nav.cpp:154 */
void CCSBot::GetSimpleGroundHeightWithFloor(const Vector *pos, float *height, Vector *normal)
{
//	GetSimpleGroundHeightWithFloor(CCSBot *const this,
//					const Vector *pos,
//					float *height,
//					Vector *normal);  //   154
}

/* <37c403> ../cstrike/dlls/bot/cs_bot_nav.cpp:114 */
void CCSBot::DiscontinuityJump(float ground, bool onlyJumpDown, bool mustJump)
{
//	{
//		float dz;                                             //   119
//	}
}

/* <37c2a6> ../cstrike/dlls/bot/cs_bot_nav.cpp:37 */
void CCSBot::StuckCheck(void)
{
//	{
//		Vector delta;                                   //    42
//		float const unstuckRange;                              //    44
//		operator-(const Vector *const this,
//				const Vector &v);  //    42
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //    45
//		ResetStuckMonitor(CCSBot *const this);  //    48
//	}
//	{
//		Vector vel;                                     //    57
//		float moveDist;                                       //    64
//		float deltaT;                                         //    66
//		operator-(const Vector *const this,
//				const Vector &v);  //    57
//		Length(const Vector *const this);  //    64
//		{
//			float avgVel;                                 //    81
//			float stuckVel;                               //    88
//			{
//				int t;                                //    82
//			}
//		}
//	}
}

/* <37c284> ../cstrike/dlls/bot/cs_bot_nav.cpp:16 */
void CCSBot::ResetStuckMonitor(void)
{
}

/* <37c26b> ../cstrike/dlls/bot/cs_bot_nav.cpp:16 */
void CCSBot::ResetStuckMonitor(void)
{
}

/* <37c1f6> ../cstrike/dlls/bot/cs_bot_nav.cpp:114 */
void CCSBot::DiscontinuityJump(float ground, bool onlyJumpDown, bool mustJump)
{
//	{
//		float dz;                                             //   119
//		GetFeetZ(const class CCSBot *const this);  //   119
//	}
}

/* <37c1d0> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <37c1aa> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <37c178> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <37c15f> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <37c13c> ../game_shared/bot/nav_area.h:281 */
inline void CNavArea::GetApproachInfo(int i)
{
}

/* <37c10c> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <37c0a8> ../cstrike/dlls/bot/cs_bot_nav.cpp:154 */
void CCSBot::GetSimpleGroundHeightWithFloor(const Vector *pos, float *height, Vector *normal)
{
}

/* <37c05d> ../cstrike/dlls/bot/cs_bot_nav.cpp:114 */
void CCSBot::DiscontinuityJump(float ground, bool onlyJumpDown, bool mustJump)
{
//	{
//		float dz;                                             //   119
//	}
}

/* <37c02a> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <37c006> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <37bfed> ../cstrike/dlls/bot/cs_bot.h:577 */
inline void CCSBot::IsUsingLadder(void)
{
}

/* <37bfd4> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <37bfb6> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <37bf92> ../game_shared/bot/nav_area.h:282 */
inline void CNavArea::GetApproachInfoCount(void)
{
}

/* <37bf79> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <37bf5b> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <37bf34> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <37bf0d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <37bef4> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <37bedb> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <37bebd> ../game_shared/bot/bot.h:93 */
inline void CBot::IsRunning(void)
{
}

/* <37be94> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <37be45> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <37be1e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <37bde3> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <37bd94> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <37bd15> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <37bce9> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <37bccb> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <36d1dd> ../cstrike/dlls/bot/cs_bot_manager.cpp:1086 */
void MonitorBotCVars(void)
{
}

/* <36d1d6> ../cstrike/dlls/bot/cs_bot_manager.cpp:1086 */
void MonitorBotCVars(void)
{
}

/* <36d10f> ../cstrike/dlls/bot/cs_bot_manager.cpp:979 */
void MaintainBotQuota(void)
{
//	{
//		int totalHumansInGame;                                //   984
//		int humanPlayersInGame;                               //   985
//		class CHalfLifeMultiplay *mp;                        //   991
//		int desiredBotCount;                                  //   993
//		BotAddCommand(BotProfileTeamType team,
//				bool isFromConsole);  //  1017
//		{
//			enum TeamName kickTeam;                       //  1027
//		}
//		{
//			bool humansAreCTs;                            //  1067
//		}
//	}
}

/* <36c4cd> ../cstrike/dlls/bot/cs_bot_manager.cpp:484 */
void CCSBotManager::ServerCommand(const char *pcmd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   494
//	FStrEq(const char *sz1,
//		const char *sz2);  //   504
//	BotAddCommand(BotProfileTeamType team,
//			bool isFromConsole);  //   506
//	{
//		const char *msg;                                    //   496
//		char buffer;                                          //   498
//	}
//	ServerCommand(CCSBotManager *const this,
//			const char *pcmd);  //   484
}

/* <36c497> ../cstrike/dlls/bot/cs_bot_manager.cpp:903 */
void BotAddCommand(BotProfileTeamType team, bool isFromConsole)
{
//	{
//		const class BotProfile *profile;                    //   913
//	}
}

/* <36c3c2> ../cstrike/dlls/bot/cs_bot_manager.cpp:903 */
void BotAddCommand(BotProfileTeamType team, bool isFromConsole)
{
//	{
//		const class BotProfile *profile;                    //   913
//		GetDifficultyLevel(void);  //   958
//		{
//			enum TeamName defaultTeam;                    //   947
//		}
//		{
//			class CHalfLifeMultiplay *mp;                //   918
//			bool ignoreHumans;                            //   919
//			GetProfile(const class BotProfileManager *const this,
//					const char *name,
//					enum BotProfileTeamType team);  //   927
//		}
//	}
}

/* <36c2b2> ../cstrike/dlls/bot/cs_bot_manager.cpp:1278 */
void AddBot(const class BotProfile *profile, BotProfileTeamType team)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  1285
//		class CCSBot *pBot;                                  //  1286
//		int nTeamSlot;                                        //  1287
//		{
//			int nJoinedTeam;                              //  1329
//			edict(CBaseEntity *const this);  //  1331
//			edict(CBaseEntity *const this);  //  1337
//			entindex(CBaseEntity *const this);  //  1337
//			{
//				int skin;                             //  1348
//			}
//		}
//	}
}

/* <36c175> ../game_shared/bot/bot.h:36 */
/* linkage=_Z9CreateBotI6CCSBotEPT_PK10BotProfile */
CCSBot *CreateBot<CCSBot>(const class BotProfile *profile)
{
//	{
//		edict_t *pentBot;                                    //    38
//		char netname;                                         //    46
//		FNullEnt(const edict_t *pent);  //    52
//		{
//			class CCSBot *pBot;                          //    59
//			VARS(edict_t *pent);  //    62
//			GetClassPtr<CCSBot>(CCSBot *a);  //    62
//		}
//	}
}

/* <36bf06> ../cstrike/dlls/bot/cs_bot_manager.cpp:1690 */
void CCSBotManager::ResetRadioMessageTimestamps(void)
{
//	{
//		int t;                                                //  1692
//		{
//			int m;                                        //  1694
//		}
//	}
}

/* <36bebe> ../cstrike/dlls/bot/cs_bot_manager.cpp:1680 */
void CCSBotManager::SetRadioMessageTimestamp(GameEventType event, int teamID)
{
}

/* <36be76> ../cstrike/dlls/bot/cs_bot_manager.cpp:1667 */
void CCSBotManager::GetRadioMessageInterval(GameEventType event, int teamID)
{
}

/* <36be2e> ../cstrike/dlls/bot/cs_bot_manager.cpp:1655 */
void CCSBotManager::GetRadioMessageTimestamp(GameEventType event, int teamID)
{
}

/* <36bddb> ../cstrike/dlls/bot/cs_bot_manager.cpp:1547 */
void CCSBotManager::SetLooseBomb(CBaseEntity *bomb)
{
//	SetLooseBomb(CCSBotManager *const this,
//			class CBaseEntity *bomb);  //  1547
}

/* <36bdb3> ../cstrike/dlls/bot/cs_bot_manager.cpp:1541 */
void CCSBotManager::GetBombTimeLeft(void)
{
}

/* <36bd64> ../cstrike/dlls/bot/cs_bot_manager.cpp:1458 */
void CCSBotManager::GetRandomAreaInZone(Zone *zone)
{
//	{
//		int a;                                                //  1466
//	}
}

/* <36bcc9> ../cstrike/dlls/bot/cs_bot_manager.cpp:1415 */
void CCSBotManager::GetRandomPositionInZone(Zone *zone)
{
//	{
//		Vector pos;                                     //  1417
//		int a;                                                //  1426
//		class CNavArea *area;                                //  1427
//		{
//			const class Extent *areaExtent;             //  1439
//			class Extent overlap;                         //  1440
//		}
//	}
}

/* <36bbfd> ../cstrike/dlls/bot/cs_bot_manager.cpp:1392 */
void CCSBotManager::GetClosestZone(Vector *pos)
{
//	{
//		const class Zone *close;                            //  1394
//		float closeRangeSq;                                   //  1395
//		{
//			int z;                                        //  1397
//			{
//				float rangeSq;                        //  1399
//				operator-(const Vector *const this,
//						const Vector &v);  //  1399
//				LengthSquared(const Vector *const this);  //  1399
//			}
//		}
//	}
}

/* <36bb90> ../cstrike/dlls/bot/cs_bot_manager.cpp:1375 */
void CCSBotManager::GetZone(Vector *pos)
{
//	{
//		int z;                                                //  1377
//		Contains(const class Extent *const this,
//			const Vector *pos);  //  1379
//	}
}

/* <36b780> ../cstrike/dlls/bot/cs_bot_manager.cpp:1109 */
void CCSBotManager::ValidateMapData(void)
{
//	{
//		class CBaseEntity *entity;                           //  1135
//		int i;                                                //  1136
//		{
//			bool found;                                   //  1144
//			bool isLegacy;                                //  1145
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1159
//			Vector(Vector *const this,
//				const Vector &v);  //  1189
//			Instance(edict_t *pent);  //  1139
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1147
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1153
//			operator+(const Vector *const this,
//					const Vector &v);  //  1189
//			operator/(const Vector *const this,
//					float fl);  //  1189
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1165
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1171
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1178
//		}
//		{
//			class Zone *zone;                            //  1230
//			float const zFudge;                            //  1249
//			{
//				float const legacyRange;               //  1234
//			}
//			{
//				iterator iter;                        //  1255
//				{
//					class CNavArea *area;        //  1257
//					const class Extent *areaExtent;   //  1258
//				}
//				operator++(_List_iterator<CNavArea*> *const this);  //  1255
//			}
//		}
//		edict(CBaseEntity *const this);  //  1208
//		FNullEnt(const edict_t *pent);  //  1208
//	}
}

/* <36b714> ../cstrike/dlls/bot/cs_bot_manager.cpp:464 */
void PrintAllEntities(void)
{
//	{
//		edict_t *edict;                                      //   466
//		{
//			int i;                                        //   468
//		}
//	}
}

/* <36b6b8> ../cstrike/dlls/bot/cs_bot_manager.cpp:327 */
void CCSBotManager::IsOnOffense(CBasePlayer *player)
{
//	IsOnDefense(const class CCSBotManager *const this,
//			const class CBasePlayer *player);  //   329
}

/* <36b68c> ../cstrike/dlls/bot/cs_bot_manager.cpp:306 */
void CCSBotManager::IsOnDefense(CBasePlayer *player)
{
}

/* <36b62a> ../cstrike/dlls/bot/cs_bot_manager.cpp:276 */
void CCSBotManager::IsWeaponUseable(CBasePlayerItem *item)
{
//	{
//		int weaponClass;                                      //   284
//		AllowShotguns(const class CCSBotManager *const this);  //   286
//	}
}

/* <36b3b4> ../cstrike/dlls/bot/cs_bot_manager.cpp:45 */
void CCSBotManager::CCSBotManager(void)
{
//	{
//		const char *filename;                               //    66
//		int dataLength;                                       //    76
//		char *dataPointer;                                   //    77
//		const VoiceBankList *pVoiceBanks;                   //   100
//		SetLooseBomb(CCSBotManager *const this,
//				class CBaseEntity *bomb);  //    49
//		{
//			const char *dataFile;                       //    84
//			const char *token;                          //    85
//			{
//				char *clone;                         //    90
//				CloneString(const char *str);  //    90
//			}
//		}
//		{
//			int i;                                        //   101
//			size(const class vector<char*, std::allocator<char*>> *const this);  //   101
//		}
//	}
//	CountdownTimer(CountdownTimer *const this);  //    45
}

/* <36b330> ../cstrike/dlls/bot/cs_bot_manager.cpp:45 */
void CCSBotManager::CCSBotManager(void)
{
//	{
//		const char *filename;                               //    66
//		int dataLength;                                       //    76
//		char *dataPointer;                                   //    77
//		const VoiceBankList *pVoiceBanks;                   //   100
//		{
//			const char *dataFile;                       //    84
//			const char *token;                          //    85
//			{
//				char *clone;                         //    90
//			}
//		}
//		{
//			int i;                                        //   101
//		}
//	}
}

/* <36b22a> ../cstrike/dlls/bot/cs_bot_manager.cpp:111 */
void CCSBotManager::RestartRound(void)
{
//	{
//		float const defenseRushChance;                         //   129
//		SetLooseBomb(CCSBotManager *const this,
//				class CBaseEntity *bomb);  //   116
//		ResetRadioMessageTimestamps(CCSBotManager *const this);  //   122
//	}
}

/* <36b1a7> ../cstrike/dlls/bot/cs_bot_manager.cpp:1602 */
void CCSBotManager::GetPlayerPriority(CBasePlayer *player)
{
//	{
//		unsigned int const lowestPriority;                     //  1604
//		class CCSBot *bot;                                   //  1613
//	}
//	GetPlayerPriority(const class CCSBotManager *const this,
//				class CBasePlayer *player);  //  1602
}

/* <36b14d> ../cstrike/dlls/bot/cs_bot_manager.cpp:1565 */
void CCSBotManager::IsImportantPlayer(CBasePlayer *player)
{
//	IsImportantPlayer(const class CCSBotManager *const this,
//				class CBasePlayer *player);  //  1565
}

/* <36b0e0> ../cstrike/dlls/bot/cs_bot_manager.cpp:375 */
void CCSBotManager::AddServerCommands(void)
{
//	{
//		bool fFirstTime;                                      //   377
//	}
//	AddServerCommands(CCSBotManager *const this);  //   375
}

/* <36b02d> ../cstrike/dlls/bot/cs_bot_manager.cpp:1477 */
void CCSBotManager::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	SetLastSeenEnemyTimestamp(CCSBotManager *const this);  //  1501
}

/* <36afcd> ../cstrike/dlls/bot/cs_bot_manager.cpp:369 */
void CCSBotManager::AddServerCommand(const char *cmd)
{
}

/* <36aebc> ../cstrike/dlls/bot/cs_bot_manager.cpp:142 */
void UTIL_DrawBox(Extent *extent, int lifetime, int red, int green, int blue)
{
//	{
//		Vector v;                                       //   144
//		int const edge;                                        //   154
//		Vector from;                                    //   165
//		Vector to;                                      //   165
//		bool restart;                                         //   166
//		{
//			int i;                                        //   167
//			{
//				int index;                            //   178
//			}
//		}
//	}
}

/* <36ace2> ../cstrike/dlls/bot/cs_bot_manager.cpp:484 */
void CCSBotManager::ServerCommand(const char *pcmd)
{
//	{
//		const char *msg;                                    //   496
//		char buffer;                                          //   498
//	}
//	{
//		bool killThemAll;                                     //   518
//		{
//			int iIndex;                                   //   523
//			{
//				class CBasePlayer *pPlayer;          //   525
//				const char *name;                   //   533
//			}
//		}
//	}
//	{
//		bool kickThemAll;                                     //   548
//		{
//			int iIndex;                                   //   553
//			{
//				class CBasePlayer *pPlayer;          //   555
//				const char *name;                   //   563
//			}
//		}
//	}
//	{
//		char filename;                                        //   696
//	}
//	{
//		const BotPhraseList *placeList;                     //   716
//		int i;                                                //   717
//		{
//			const_iterator iter;                          //   718
//		}
//	}
//	{
//		const BotPhraseList *placeList;                     //   733
//		const class BotPhrase *found;                       //   734
//		bool isAmbiguous;                                     //   735
//		{
//			const_iterator iter;                          //   736
//		}
//	}
//	{
//		class CNavArea *area;                                //   789
//		{
//			class CBaseEntity *pEntity;                  //   792
//			{
//				class CBasePlayer *playerOrBot;      //   797
//				{
//					class CCSBot *bot;           //   801
//				}
//			}
//		}
//	}
//	{
//		unsigned int encounterMem;                            //   829
//		{
//			iterator iter;                                //   830
//			{
//				class CNavArea *area;                //   832
//				{
//					iterator siter;               //   834
//					{
//						class SpotEncounter se; //   838
//					}
//				}
//			}
//		}
//	}
}

/* <36acb9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<SpotEncounter>::operator!=(const _Self &__x)
{
}

/* <36aca0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::end(void)
{
}

/* <36ac87> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<SpotEncounter>::operator++(void)
{
}

/* <36ac61> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::~SpotEncounter( int const __in_chrg)
{
}

/* <36ac48> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::size(void)
{
}

/* <36ac1d> ../game_shared/bot/nav_area.h:179 */
inline void SpotEncounter::SpotEncounter(SpotEncounter &const)
{
}

/* <36abe6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::size(void)
{
}

/* <36abcd> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <36aba2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotPhrase*>::operator!=(const _Self &__x)
{
}

/* <36ab89> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::end(void)
{
}

/* <36ab70> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotPhrase*>::operator++(void)
{
}

/* <36ab34> ../cstrike/dlls/bot/cs_bot_chatter.h:279 */
inline void BotPhraseManager::GetPlaceList(void)
{
}

/* <36aaec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:571 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::list(list<SpotOrder, std::allocator<SpotOrder>> &__x)
{
}

/* <36aac1> ../game_shared/bot/nav.h:122 */
inline void Ray::Ray(Ray &const)
{
}

/* <36aa6f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1452 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_initialize_dispatch<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last, class __false_type)
{
}

/* <36aa44> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::push_back(const value_type &__x)
{
}

/* <36aa12> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <36a9cc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <36a992> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <36a979> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_node(void)
{
}

/* <36a950> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<SpotOrder>>::allocate( size_type __n, const void *)
{
}

/* <36a932> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<SpotOrder>>::max_size(void)
{
}

/* <36a8fd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<SpotOrder>::construct( pointer __p, const SpotOrder &__val)
{
}

/* <36a8d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotOrder>::_List_iterator(_List_node_base *__x)
{
}

/* <36a8a9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:356 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_List_base(const allocator_type &__a)
{
}

/* <36a890> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_init(void)
{
}

/* <36a865> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:318 */
inline void _List_impl::_List_impl(const _Node_alloc_type &__a)
{
}

/* <36a83c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:109 */
inline void allocator<std::_List_node<SpotOrder>>::allocator(allocator<std::_List_node<SpotOrder>> &__a)
{
}

/* <36a819> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:71 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(new_allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <36a7ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::~list( int const __in_chrg)
{
}

/* <36a7ca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::~_List_base( int const __in_chrg)
{
}

/* <36a784> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <36a75f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<SpotOrder>(SpotOrder &__r)
{
}

/* <36a734> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_put_node(_List_node<SpotOrder> *__p)
{
}

/* <36a70b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<SpotOrder>>::deallocate( pointer __p, size_type)
{
}

/* <36a6df> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<std::_List_node<SpotOrder>>::allocator<SpotOrder>(allocator<SpotOrder> &const)
{
}

/* <36a6bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<SpotOrder>>::new_allocator(void)
{
}

/* <36a68e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<HidingSpot*>>(_List_const_iterator<HidingSpot*> __first, class _List_const_iterator<HidingSpot*> __last)
{
}

/* <36a675> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <36a635> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<HidingSpot*>>(_List_const_iterator<HidingSpot*> __first, class _List_const_iterator<HidingSpot*> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <36a605> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <36a5ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<HidingSpot*>::operator++(void)
{
}

/* <36a5bf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last)
{
}

/* <36a5a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::end(void)
{
}

/* <36a566> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<SpotOrder>>(_List_const_iterator<SpotOrder> __first, class _List_const_iterator<SpotOrder> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <36a536> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<SpotOrder>::operator!=(const _Self &__x)
{
}

/* <36a51d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<SpotOrder>::operator++(void)
{
}

/* <36a4fe> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<SpotOrder>>(const class _List_const_iterator<SpotOrder> &const)
{
}

/* <36a4d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<SpotOrder>::destroy( pointer __p)
{
}

/* <36a4a9> ../game_shared/bot/nav_area.h:164 */
inline void SpotOrder::~SpotOrder( int const __in_chrg)
{
}

/* <36a490> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Tp_allocator(void)
{
}

/* <36a472> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<SpotOrder, std::allocator<SpotOrder>>::_M_get_Node_allocator(void)
{
}

/* <36a446> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <36a41e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<SpotOrder>>::~allocator( int const __in_chrg)
{
}

/* <36a3f6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<SpotOrder>>::~new_allocator( int const __in_chrg)
{
}

/* <36a3d8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<SpotOrder, std::allocator<SpotOrder>>::begin(void)
{
}

/* <36a3af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<SpotOrder>::_List_const_iterator(_List_node_base *__x)
{
}

/* <36a38c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<SpotOrder>::~allocator( int const __in_chrg)
{
}

/* <36a369> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<SpotOrder>::~new_allocator( int const __in_chrg)
{
}

/* <36a338> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<SpotOrder>::allocator<std::_List_node<SpotOrder>>(allocator<std::_List_node<SpotOrder>> &const)
{
}

/* <36a30f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<SpotOrder>::new_allocator(void)
{
}

/* <36a2f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<HidingSpot*>>(const class _List_const_iterator<HidingSpot*> &const)
{
}

/* <36a2cc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <36a2a3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<HidingSpot*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <36a242> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <36a222> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <36a201> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <36a1e0> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <36a18b> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <36a155> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <36a137> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <36a097> ../cstrike/dlls/bot/cs_bot_manager.cpp:903 */
void BotAddCommand(BotProfileTeamType team, bool isFromConsole)
{
//	{
//		const class BotProfile *profile;                    //   913
//		{
//			class CHalfLifeMultiplay *mp;                //   918
//			bool ignoreHumans;                            //   919
//		}
//		{
//			enum TeamName defaultTeam;                    //   947
//		}
//	}
}

/* <36a090> ../cstrike/dlls/bot/cs_bot_manager.h:68 */
inline void GetDifficultyLevel(void)
{
}

/* <36a051> ../game_shared/bot/bot_profile.h:183 */
inline void BotProfileManager::GetProfile(const char *name, BotProfileTeamType team)
{
//	{
//		const_iterator iter;                                  //   185
//	}
}

/* <36a01c> ../cstrike/dlls/cbase.h:800 */
CCSBot *GetClassPtr<CCSBot>(CCSBot *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <369fbd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<SpotEncounter, std::allocator<SpotEncounter>>::begin(void)
{
}

/* <369f94> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<SpotEncounter>::_List_iterator(_List_node_base *__x)
{
}

/* <369f5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <369f43> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <369f2a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <369ecb> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <369ea4> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <369e80> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <369e57> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <369e39> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::begin(void)
{
}

/* <369e10> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <369de5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotProfile*>::operator!=(const _Self &__x)
{
}

/* <369dcc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::end(void)
{
}

/* <369db3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotProfile*>::operator++(void)
{
}

/* <369d77> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotProfile*, std::allocator<BotProfile*>>::begin(void)
{
}

/* <369d4e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotProfile*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <369d2c> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <369ce6> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <369ca0> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <369c60> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <369c42> ../game_shared/bot/bot_profile.h:202 */
inline void BotProfileManager::GetVoiceBanks(void)
{
}

/* <369beb> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <369bc5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:710 */
inline void vector<char*, std::allocator<char*>>::operator[](size_type __n)
{
}

/* <369ba7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<char*, std::allocator<char*>>::size(void)
{
}

/* <369b74> ../cstrike/dlls/bot/cs_bot_manager.cpp:1690 */
void CCSBotManager::ResetRadioMessageTimestamps(void)
{
//	{
//		int t;                                                //  1692
//		{
//			int m;                                        //  1694
//		}
//	}
}

/* <369b4e> ../cstrike/dlls/bot/cs_bot_manager.cpp:1547 */
void CCSBotManager::SetLooseBomb(CBaseEntity *bomb)
{
}

/* <369b30> ../game_shared/bot/nav_area.h:268 */
inline void CNavArea::GetExtent(void)
{
}

/* <369b17> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <369aee> ../game_shared/bot/nav.h:114 */
inline void Extent::Contains(const Vector *pos)
{
}

/* <369ac8> ../cstrike/dlls/bot/cs_bot_manager.cpp:306 */
void CCSBotManager::IsOnDefense(CBasePlayer *player)
{
}

/* <369aa7> ../cstrike/dlls/bot/cs_bot_manager.h:95 */
inline void Zone::Zone(void)
{
}

/* <369a80> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(void)
{
}

/* <369a39> ../cstrike/dlls/bot/cs_bot_manager.cpp:1602 */
void CCSBotManager::GetPlayerPriority(CBasePlayer *player)
{
//	{
//		unsigned int const lowestPriority;                     //  1604
//		class CCSBot *bot;                                   //  1613
//	}
}

/* <369a20> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <369a07> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <3699e9> ../cstrike/dlls/bot/cs_bot.h:355 */
inline void CCSBot::IsCarryingBomb(void)
{
}

/* <3699c5> ../cstrike/dlls/bot/cs_bot_chatter.h:207 */
inline void BotPhrase::GetID(void)
{
}

/* <3699a7> ../cstrike/dlls/bot/cs_bot_chatter.h:206 */
inline void BotPhrase::GetName(void)
{
}

/* <36998e> ../cstrike/dlls/bot/cs_bot_manager.h:188 */
inline void CCSBotManager::AllowTacticalShield(void)
{
}

/* <369975> ../cstrike/dlls/bot/cs_bot_manager.h:187 */
inline void CCSBotManager::AllowSnipers(void)
{
}

/* <36995c> ../cstrike/dlls/bot/cs_bot_manager.h:186 */
inline void CCSBotManager::AllowGrenades(void)
{
}

/* <369943> ../cstrike/dlls/bot/cs_bot_manager.h:185 */
inline void CCSBotManager::AllowMachineGuns(void)
{
}

/* <36992a> ../cstrike/dlls/bot/cs_bot_manager.h:184 */
inline void CCSBotManager::AllowRifles(void)
{
}

/* <369911> ../cstrike/dlls/bot/cs_bot_manager.h:183 */
inline void CCSBotManager::AllowSubMachineGuns(void)
{
}

/* <3698f8> ../cstrike/dlls/bot/cs_bot_manager.h:182 */
inline void CCSBotManager::AllowShotguns(void)
{
}

/* <3698df> ../cstrike/dlls/bot/cs_bot_manager.h:181 */
inline void CCSBotManager::AllowPistols(void)
{
}

/* <3698c6> ../cstrike/dlls/bot/cs_bot_manager.h:175 */
inline void CCSBotManager::SetLastSeenEnemyTimestamp(void)
{
}

/* <3698a0> ../cstrike/dlls/bot/cs_bot_manager.cpp:1565 */
void CCSBotManager::IsImportantPlayer(CBasePlayer *player)
{
}

/* <369882> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <369869> ../cstrike/dlls/bot/cs_bot_manager.h:64 */
inline void CCSBotManager::RequestAnalysis(void)
{
}

/* <36984b> ../game_shared/bot/nav_area.h:495 */
inline void CNavAreaGrid::GetNavAreaCount(void)
{
}

/* <369832> ../game_shared/bot/bot_profile.h:76 */
inline void BotProfile::GetSkin(void)
{
}

/* <369814> ../game_shared/bot/bot_profile.h:64 */
inline void BotProfile::GetName(void)
{
}

/* <3697ed> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <3697c6> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <36979f> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <369786> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <369768> ../game_shared/bot/bot.h:82 */
inline void CBot::GetID(void)
{
}

/* <36973f> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <3696ef> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3696a5> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <369669> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <369605> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <3694eb> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <3694bf> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <3694a1> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <369479> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <36944d> ../cstrike/dlls/bot/cs_bot_manager.cpp:375 */
void CCSBotManager::AddServerCommands(void)
{
//	{
//		bool fFirstTime;                                      //   377
//	}
}

/* <354f48> ../cstrike/dlls/bot/cs_bot_listen.cpp:160 */
void CCSBot::UpdateLookAtNoise(void)
{
//	{
//		bool nearbyThreat;                                    //   176
//		float const recentThreatTime;                          //   177
//		float const closeThreatRange;                          //   178
//		Vector spot;                                    //   190
//		enum PriorityType pri;                                //   231
//		IsNoiseHeard(const class CCSBot *const this);  //   163
//		operator-(const Vector *const this,
//				const Vector &v);  //   181
//		IsLengthLessThan(const Vector *const this,
//				float length);  //   181
//		CanSeeNoisePosition(const class CCSBot *const this);  //   193
//		{
//			int nearIdx;                                  //   200
//			float nearRangeSq;                            //   201
//			{
//				int i;                                //   202
//				{
//					float distanceSq;             //   206
//					operator-(const Vector *const this,
//							const Vector &v);  //   206
//					LengthSquared(const Vector *const this);  //   206
//				}
//			}
//		}
//	}
}

/* <354e7b> ../cstrike/dlls/bot/cs_bot_listen.cpp:141 */
void CCSBot::CanSeeNoisePosition(void)
{
//	{
//		TraceResult result;                                   //   143
//		operator+(const Vector *const this,
//				const Vector &v);  //   144
//		GetEyePosition(const class CCSBot *const this);  //   144
//	}
}

/* <354c8d> ../cstrike/dlls/bot/cs_bot_listen.cpp:104 */
void CCSBot::CanHearNearbyEnemyGunfire( float range)
{
//	{
//		float gunfireDistSq;                                  //   125
//		float enemyDistSq;                                    //   126
//		float const muchCloserSq;                              //   127
//		operator-(const Vector *const this,
//				const Vector &v);  //   126
//		operator-(const Vector *const this,
//				const Vector &v);  //   125
//		LengthSquared(const Vector *const this);  //   125
//		LengthSquared(const Vector *const this);  //   126
//	}
//	CanSeeNoisePosition(const class CCSBot *const this);  //   119
//	operator-(const Vector *const this,
//			const Vector &v);  //   115
//	IsLengthGreaterThan(const Vector *const this,
//				float length);  //   115
}

/* <354c67> ../cstrike/dlls/bot/cs_bot_listen.cpp:141 */
void CCSBot::CanSeeNoisePosition(void)
{
//	{
//		TraceResult result;                                   //   143
//	}
}

/* <354545> ../cstrike/dlls/bot/cs_bot_listen.cpp:17 */
void CCSBot::ShouldInvestigateNoise(float *retNoiseDist)
{
//	IsNoiseHeard(const class CCSBot *const this);  //    32
//	{
//		float const noiseCheckInterval;                        //    36
//		Vector toNoise;                                 //    44
//		float noiseDist;                                      //    45
//		float const maxNoiseDist;                              //    46
//		float const oneStoreyHeight;                           //    49
//		float chance;                                         //    72
//		operator-(const Vector *const this,
//				const Vector &v);  //    44
//		Length(const Vector *const this);  //    45
//		{
//			class PathCost pc;                            //    53
//			float travelDistToNoise;                      //    54
//			float const tooFar;                            //    58
//			NavAreaTravelDistance<PathCost>(CNavArea *startArea,
//							class CNavArea *endArea,
//							class PathCost &costFunc);  //    54
//		}
//		{
//			float friendFactor;                           //    78
//		}
//	}
}

/* <35444a> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <354263> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <35425b> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <354240> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <354225> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <35420c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <3541c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <3541ab> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <354192> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <354155> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <354126> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <35410d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <3540f4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <3540d0> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <3540b5> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <354097> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <35406e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <354050> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <354027> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <354003> ../cstrike/dlls/vector.h:143 */
inline void Vector::IsLengthLessThan(float length)
{
}

/* <353fea> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <353fc6> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <353f94> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <353f7b> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <353f62> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <353f49> ../cstrike/dlls/bot/cs_bot.h:474 */
inline void CCSBot::GetNoiseArea(void)
{
}

/* <353f2b> ../cstrike/dlls/bot/cs_bot.h:459 */
inline void CCSBot::IsNoiseHeard(void)
{
}

/* <353f07> ../game_shared/bot/bot_profile.h:79 */
inline void BotProfile::GetReactionTime(void)
{
}

/* <353ee9> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <353ece> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <353eb3> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <353e9a> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <353e75> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <353e5c> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <353e37> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <353e1e> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <353ded> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <353dd4> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <353dbb> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <353da2> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <353d89> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <353d6b> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <353d45> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <353d1e> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <353cf7> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <353cde> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <353cc0> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <353c97> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <353c48> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <353bfe> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <353bc3> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <353b74> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <353b18> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <353aec> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <353acc> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <353aae> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <344e24> ../cstrike/dlls/bot/cs_bot_learn.cpp:554 */
void CCSBot::StartNormalProcess(void)
{
}

/* <344d41> ../cstrike/dlls/bot/cs_bot_learn.cpp:527 */
void CCSBot::UpdateSaveProcess(void)
{
//	{
//		char filename;                                        //   530
//		char msg;                                             //   538
//		char cmd;                                             //   548
//		hideProgressMeter(void);  //   542
//		StartNormalProcess(CCSBot *const this);  //   545
//	}
}

/* <344d1f> ../cstrike/dlls/bot/cs_bot_learn.cpp:517 */
void CCSBot::StartSaveProcess(void)
{
}

/* <344b8d> ../cstrike/dlls/bot/cs_bot_learn.cpp:495 */
void CCSBot::UpdateAnalyzeBetaProcess(void)
{
//	{
//		float startTime;                                      //   497
//		float progress;                                       //   512
//		AnalyzeBetaStep(CCSBot *const this);  //   503
//		drawProgressMeter(float progress,
//					char *title);  //   506
//		StartSaveProcess(CCSBot *const this);  //   507
//		drawProgressMeter(float progress,
//					char *title);  //   513
//	}
}

/* <344aed> ../cstrike/dlls/bot/cs_bot_learn.cpp:467 */
void CCSBot::StartAnalyzeBetaProcess(void)
{
//	size(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   471
}

/* <3448de> ../cstrike/dlls/bot/cs_bot_learn.cpp:443 */
void CCSBot::UpdateAnalyzeAlphaProcess(void)
{
//	{
//		float startTime;                                      //   445
//		float progress;                                       //   462
//		AnalyzeAlphaStep(CCSBot *const this);  //   451
//		drawProgressMeter(float progress,
//					char *title);  //   454
//		StartAnalyzeBetaProcess(CCSBot *const this);  //   456
//		drawProgressMeter(float progress,
//					char *title);  //   463
//	}
}

/* <34489e> ../cstrike/dlls/bot/cs_bot_learn.cpp:392 */
void CCSBot::UpdateLearnProcess(void)
{
//	{
//		float startTime;                                      //   394
//	}
}

/* <344750> ../cstrike/dlls/bot/cs_bot_learn.cpp:409 */
void CCSBot::StartAnalyzeAlphaProcess(void)
{
//	size(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //   413
//	startProgressMeter(const char *title);  //   419
//	drawProgressMeter(float progress,
//				char *title);  //   420
}

/* <343d37> ../cstrike/dlls/bot/cs_bot_learn.cpp:217 */
void CCSBot::LearnStep(void)
{
//	{
//		int dir;                                              //   249
//		{
//			float feetOffset;                             //   256
//			Vector pos;                             //   259
//			int cx;                                       //   262
//			int cy;                                       //   263
//			TraceResult result;                           //   283
//			Vector from;                            //   284
//			Vector to;                              //   284
//			Vector toNormal;                        //   289
//			Vector fromOrigin;                      //   298
//			Vector toOrigin;                        //   299
//			bool walkable;                                //   303
//			IsEntityWalkable(entvars_t *entity,
//					unsigned int flags);  //   362
//			{
//				float toGround;                       //   309
//				float fromGround;                     //   310
//				float epsilon;                        //   312
//				{
//					Vector delta;           //   322
//					float const inc;               //   323
//					float along;                  //   324
//					bool done;                    //   325
//					float ground;                 //   326
//					Vector normal;          //   327
//					operator-(const Vector *const this,
//							const Vector &v);  //   322
//					{
//						Vector p;       //   333
//						operator*(const Vector *const this,
//								float fl);  //   343
//						operator+(const Vector *const this,
//								const Vector &v);  //   343
//					}
//				}
//			}
//			VARS(edict_t *pent);  //   362
//			GetFeetZ(const class CCSBot *const this);  //   256
//			Vector(Vector *const this,
//				const Vector &v);  //   259
//			MarkAsVisited(CNavNode *const this,
//					enum NavDirType dir);  //   280
//			operator+(const Vector *const this,
//					const Vector &v);  //   294
//			operator+(const Vector *const this,
//					const Vector &v);  //   298
//			operator+(const Vector *const this,
//					const Vector &v);  //   299
//			{
//				class CNavNode *newNode;             //   376
//				AddNode(CCSBot *const this,
//					const Vector *destPos,
//					const Vector *normal,
//					enum NavDirType dir,
//					class CNavNode *source);  //   376
//			}
//		}
//		HasVisited(CNavNode *const this,
//				enum NavDirType dir);  //   251
//	}
//	{
//		iterator iter;                                        //   225
//		{
//			class CNavLadder *ladder;                    //   227
//			LadderEndSearch(CBaseEntity *entity,
//					const Vector *pos,
//					enum NavDirType mountDir);  //   230
//			LadderEndSearch(CBaseEntity *entity,
//					const Vector *pos,
//					enum NavDirType mountDir);  //   234
//		}
//		operator++(_List_iterator<CNavLadder*> *const this);  //   225
//	}
}

/* <343cbe> ../cstrike/dlls/bot/cs_bot_learn.cpp:95 */
inline class CNavNode *LadderEndSearch(CBaseEntity *entity, const Vector *pos, NavDirType mountDir)
{
//	{
//		Vector center;                                  //    97
//		{
//			int d;                                        //   103
//			{
//				Vector tryPos;                  //   105
//				Vector tryNormal;               //   118
//				float const fudge;                     //   123
//				TraceResult result;                   //   124
//			}
//		}
//	}
}

/* <343b63> ../cstrike/dlls/bot/cs_bot_learn.cpp:182 */
void CCSBot::StartLearnProcess(void)
{
//	{
//		Vector pos;                                     //   192
//		Vector normal;                                  //   195
//		startProgressMeter(const char *title);  //   184
//		drawProgressMeter(float progress,
//					char *title);  //   185
//		Vector(Vector *const this,
//			const Vector &v);  //   192
//		SnapToGrid(Vector *pos);  //   193
//		StartNormalProcess(CCSBot *const this);  //   199
//	}
}

/* <343b40> ../cstrike/dlls/bot/cs_bot_learn.cpp:150 */
void drawProgressMeter(float progress, char *title)
{
}

/* <343a56> ../cstrike/dlls/bot/cs_bot_learn.cpp:30 */
void CCSBot::AddNode(const Vector *destPos, const Vector *normal, NavDirType dir, class CNavNode *source)
{
//	{
//		class CNavNode *node;                                //    34
//		bool useNew;                                          //    37
//		float const zTolerance;                                //    48
//		TraceResult result;                                   //    63
//		Vector floor;                                   //    64
//		Vector ceiling;                                 //    64
//		bool crouch;                                          //    65
//		MarkAsVisited(CNavNode *const this,
//				enum NavDirType dir);  //    52
//		{
//			float y;                                      //    66
//			{
//				float x;                              //    68
//			}
//		}
//		SetAttributes(CNavNode *const this,
//				unsigned char bits);  //    89
//	}
}

/* <3439ac> ../cstrike/dlls/bot/cs_bot_learn.cpp:30 */
void CCSBot::AddNode(const Vector *destPos, const Vector *normal, NavDirType dir, class CNavNode *source)
{
//	{
//		class CNavNode *node;                                //    34
//		bool useNew;                                          //    37
//		float const zTolerance;                                //    48
//		TraceResult result;                                   //    63
//		Vector floor;                                   //    64
//		Vector ceiling;                                 //    64
//		bool crouch;                                          //    65
//		{
//			float y;                                      //    66
//			{
//				float x;                              //    68
//			}
//		}
//	}
}

/* <343993> ../cstrike/dlls/bot/cs_bot_learn.cpp:467 */
void CCSBot::StartAnalyzeBetaProcess(void)
{
}

/* <34396c> ../cstrike/dlls/bot/cs_bot_learn.cpp:427 */
inline void CCSBot::AnalyzeAlphaStep(void)
{
//	{
//		class CNavArea *area;                                //   432
//	}
}

/* <343953> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::size(void)
{
}

/* <343929> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last)
{
}

/* <343910> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <3438d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<CNavArea*>>(_List_const_iterator<CNavArea*> __first, class _List_const_iterator<CNavArea*> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <3438a5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <34388c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavArea*>::operator++(void)
{
}

/* <34386e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<CNavArea*>>(const class _List_const_iterator<CNavArea*> &const)
{
}

/* <34384a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <343821> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavArea*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <343808> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <3437ef> ../cstrike/dlls/bot/cs_bot_learn.cpp:517 */
void CCSBot::StartSaveProcess(void)
{
}

/* <3437c8> ../cstrike/dlls/bot/cs_bot_learn.cpp:479 */
inline void CCSBot::AnalyzeBetaStep(void)
{
//	{
//		class CNavArea *area;                                //   484
//	}
}

/* <3437af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <343768> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:182 */
inline void _List_iterator<CNavArea*>::operator==(const _Self &__x)
{
}

/* <34374a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <343721> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <3436f6> ../game_shared/bot/nav.h:313 */
inline bool IsEntityWalkable(entvars_t *entity, unsigned int flags)
{
}

/* <3436a6> ../cstrike/dlls/bot/cs_bot.h:1055 */
inline void CCSBot::GetFeetZ(void)
{
//	{
//		class Vectorconst crouch;                             //  1057
//		class Vectorconst stand;                              //  1058
//	}
}

/* <34367d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <343664> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <34364b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavLadder*>::operator++(void)
{
}

/* <34360f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <3435e6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavLadder*>::_List_iterator(_List_node_base *__x)
{
}

/* <3435ce> ../cstrike/dlls/bot/cs_bot_learn.cpp:159 */
void startProgressMeter(const char *title)
{
}

/* <3435b0> ../cstrike/dlls/bot/cs_bot_learn.cpp:554 */
void CCSBot::StartNormalProcess(void)
{
}

/* <3435a8> ../cstrike/dlls/bot/cs_bot_learn.cpp:167 */
void hideProgressMeter(void)
{
}

/* <34358b> ../game_shared/bot/nav.h:134 */
inline NavDirType OppositeDirection(NavDirType dir)
{
}

/* <343571> ../game_shared/bot/nav_node.h:79 */
inline void CNavNode::GetPosition(void)
{
}

/* <343553> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <343523> ../game_shared/bot/nav_node.h:94 */
inline void CNavNode::HasVisited(NavDirType dir)
{
}

/* <3434fe> ../game_shared/bot/nav_node.h:89 */
inline void CNavNode::MarkAsVisited(NavDirType dir)
{
}

/* <3434df> ../game_shared/bot/nav_node.h:84 */
inline void CNavNode::GetParent(void)
{
}

/* <3434b6> ../game_shared/bot/nav_node.h:46 */
inline void CNavNode::SetAttributes( unsigned char bits)
{
}

/* <343490> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <343469> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <343442> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <343429> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <34340b> ../game_shared/bot/bot.h:97 */
inline void CBot::IsCrouching(void)
{
}

/* <3433d1> ../game_shared/bot/nav.h:235 */
inline void SnapToGrid(Vector *pos)
{
//	{
//		int cx;                                               //   237
//		int cy;                                               //   238
//	}
}

/* <3433a4> ../game_shared/bot/nav.h:176 */
inline void AddDirectionVector(Vector *v, NavDirType dir, float amount)
{
}

/* <343386> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <343337> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <3432ed> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <3432b2> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <34328b> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <34318d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <343161> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <343141> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <343123> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <3430fb> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <334332> ../cstrike/dlls/bot/cs_bot_init.cpp:378 */
void CCSBot::Disconnect(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   386
}

/* <3342e4> ../cstrike/dlls/bot/cs_bot_init.cpp:336 */
void CCSBot::SpawnBot(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   338
//		SetLearningMapFlag(CCSBotManager *const this);  //   357
//	}
}

/* <3342ac> ../cstrike/dlls/bot/cs_bot_init.cpp:137 */
void CCSBot::Initialize(const class BotProfile *profile)
{
}

/* <3341dc> ../cstrike/dlls/bot/cs_bot_init.cpp:167 */
void CCSBot::ResetValues(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   304
//		Invalidate(CountdownTimer *const this);  //   175
//		Invalidate(CountdownTimer *const this);  //   188
//		{
//			int w;                                        //   206
//		}
//		Invalidate(IntervalTimer *const this);  //   224
//		ClearHuntArea(HuntState *const this);  //   294
//		Invalidate(CountdownTimer *const this);  //   289
//		Invalidate(CountdownTimer *const this);  //   292
//	}
}

/* <333d1e> ../cstrike/dlls/bot/cs_bot_init.cpp:129 */
void CCSBot::CCSBot(void)
{
//	CountdownTimer(CountdownTimer *const this);  //   129
//	IdleState(IdleState *const this);  //   129
//	MoveToState(MoveToState *const this);  //   129
//	HuntState(HuntState *const this);  //   129
//	FetchBombState(FetchBombState *const this);  //   129
//	AttackState(AttackState *const this);  //   129
//	InvestigateNoiseState(InvestigateNoiseState *const this);  //   129
//	BuyState(BuyState *const this);  //   129
//	PlantBombState(PlantBombState *const this);  //   129
//	DefuseBombState(DefuseBombState *const this);  //   129
//	HideState(HideState *const this);  //   129
//	EscapeFromBombState(EscapeFromBombState *const this);  //   129
//	FollowState(FollowState *const this);  //   129
//	UseEntityState(UseEntityState *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	IntervalTimer(IntervalTimer *const this);  //   129
//	_List_iterator(_List_iterator<CNavArea*> *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
//	CountdownTimer(CountdownTimer *const this);  //   129
}

/* <333d05> ../cstrike/dlls/bot/cs_bot_init.cpp:129 */
void CCSBot::CCSBot(void)
{
}

/* <333cec> ../cstrike/dlls/bot/cs_bot_init.cpp:81 */
/* linkage=_Z17Bot_RegisterCvarsv */
void Bot_RegisterCvars(void)
{
}

/* <333cb3> ../cstrike/dlls/bot/cs_bot_init.cpp:68 */
/* linkage=_Z17Bot_ServerCommandv */
void Bot_ServerCommand(void)
{
//	{
//		const char *pcmd;                                   //    72
//	}
}

/* <333bca> ../cstrike/dlls/bot/cs_bot_init.cpp:57 */
/* linkage=_Z17InstallBotControlv */
void InstallBotControl(void)
{
//	~CBotManager(CBotManager *const this,
//			int const __in_chrg);  //    60
}

/* <333b75> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <333a10> ../game_shared/bot/bot.h:355 */
void CBot::IsPlayerLookingAtMe(CBasePlayer *other)
{
//	{
//		Vector toOther;                                 //   357
//		Vector otherDir;                                //   362
//		float const lookAtCos;                                 //   365
//		operator-(const Vector *const this,
//				const Vector &v);  //   357
//		NormalizeInPlace(Vector *const this);  //   358
//		operator+(const Vector *const this,
//				const Vector &v);  //   361
//		{
//			Vector vec;                             //   369
//		}
//	}
}

/* <333925> ../game_shared/bot/bot.h:340 */
void CBot::IsPlayerFacingMe(CBasePlayer *other)
{
//	{
//		Vector toOther;                                 //   342
//		Vector otherDir;                                //   346
//		operator-(const Vector *const this,
//				const Vector &v);  //   342
//		operator+(const Vector *const this,
//				const Vector &v);  //   345
//	}
}

/* <3338f7> ../cstrike/dlls/bot/cs_bot_init.cpp:366 */
void CCSBot::RoundRespawn(void)
{
}

/* <3338bf> ../cstrike/dlls/bot/cs_bot.h:638 */
void CCSBot::IsEnemyPartVisible(VisiblePartType part)
{
}

/* <333888> ../cstrike/dlls/bot/cs_bot.h:49 */
void BotState::OnExit(CCSBot *bot)
{
}

/* <333851> ../cstrike/dlls/bot/cs_bot.h:48 */
void BotState::OnUpdate(CCSBot *bot)
{
}

/* <33381a> ../cstrike/dlls/bot/cs_bot.h:47 */
void BotState::OnEnter(CCSBot *bot)
{
}

/* <3337f2> ../game_shared/bot/bot.h:269 */
void CBot::Run(void)
{
}

/* <333763> ../game_shared/bot/bot.h:253 */
void CBot::SetModel(const char *modelName)
{
//	edict(CBaseEntity *const this);  //   255
//	entindex(CBaseEntity *const this);  //   255
}

/* <33373b> ../game_shared/bot/bot.h:200 */
void CBot::Think(void)
{
}

/* <33370e> ../game_shared/bot/bot.h:84 */
void CBot::IsBot(void)
{
}

/* <3336e0> ../cstrike/dlls/player.h:541 */
void CBasePlayer::ObjectCaps(void)
{
}

/* <3336b8> ../cstrike/dlls/player.h:496 */
void CBasePlayer::IsNetClient(void)
{
}

/* <333690> ../cstrike/dlls/player.h:490 */
void CBasePlayer::IsPlayer(void)
{
}

/* <333668> ../cstrike/dlls/player.h:489 */
void CBasePlayer::ShouldFadeOnDeath(void)
{
}

/* <333640> ../cstrike/dlls/player.h:488 */
void CBasePlayer::IsAlive(void)
{
}

/* <333618> ../cstrike/dlls/player.h:487 */
void CBasePlayer::IsSneaking(void)
{
}

/* <3335f0> ../cstrike/dlls/player.h:486 */
void CBasePlayer::StopSneaking(void)
{
}

/* <3335c8> ../cstrike/dlls/player.h:485 */
void CBasePlayer::StartSneaking(void)
{
}

/* <333507> ../cstrike/dlls/player.h:484 */
void CBasePlayer::BodyTarget(Vector &posSrc)
{
//	operator*(const Vector *const this,
//			float fl);  //   484
//	operator+(const Vector *const this,
//			const Vector &v);  //   484
}

/* <3334df> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <3334b2> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <33348a> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <33345d> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <3333c1> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <333186> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <33315e> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <333126> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <3330c1> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <333089> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <333060> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <333038> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <333001> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <332fca> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <332fa2> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <332f04> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <332ed0> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <332e40> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <332e09> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <332de1> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <332db9> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <332d8e> ../game_shared/bot/bot_manager.h:68 */
inline void CBotManager::~CBotManager( int const __in_chrg)
{
}

/* <332d38> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<ActiveGrenade*, std::allocator<ActiveGrenade*>>::~list( int const __in_chrg)
{
}

/* <332d15> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::~_List_base( int const __in_chrg)
{
}

/* <332ccf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <332caa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<ActiveGrenade*>(ActiveGrenade *&const __r)
{
}

/* <332c91> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_get_Tp_allocator(void)
{
}

/* <332c73> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_get_Node_allocator(void)
{
}

/* <332c47> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<ActiveGrenade*>::allocator<std::_List_node<ActiveGrenade*>>(allocator<std::_List_node<ActiveGrenade*>> &const)
{
}

/* <332c23> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<ActiveGrenade*>::new_allocator(void)
{
}

/* <332bf8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<ActiveGrenade*, std::allocator<ActiveGrenade*>>::_M_put_node(_List_node<ActiveGrenade*> *__p)
{
}

/* <332bcf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::deallocate( pointer __p, size_type)
{
}

/* <332ba7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<ActiveGrenade*>::~allocator( int const __in_chrg)
{
}

/* <332b84> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<ActiveGrenade*>::~new_allocator( int const __in_chrg)
{
}

/* <332b5b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<ActiveGrenade*>::destroy( pointer __p)
{
}

/* <332b2f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <332b07> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<ActiveGrenade*>>::~allocator( int const __in_chrg)
{
}

/* <332adf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<ActiveGrenade*>>::~new_allocator( int const __in_chrg)
{
}

/* <332ac1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <332aa3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <332a81> ../cstrike/dlls/bot/cs_bot.h:282 */
inline void UseEntityState::UseEntityState(void)
{
}

/* <332a5a> ../cstrike/dlls/bot/cs_bot.h:243 */
inline void FollowState::FollowState(void)
{
}

/* <332a33> ../cstrike/dlls/bot/cs_bot.h:234 */
inline void EscapeFromBombState::EscapeFromBombState(void)
{
}

/* <332a0c> ../cstrike/dlls/bot/cs_bot.h:197 */
inline void HideState::HideState(void)
{
}

/* <3329e5> ../cstrike/dlls/bot/cs_bot.h:188 */
inline void DefuseBombState::DefuseBombState(void)
{
}

/* <3329be> ../cstrike/dlls/bot/cs_bot.h:179 */
inline void PlantBombState::PlantBombState(void)
{
}

/* <332997> ../cstrike/dlls/bot/cs_bot.h:171 */
inline void FetchBombState::FetchBombState(void)
{
}

/* <332970> ../cstrike/dlls/bot/cs_bot.h:154 */
inline void MoveToState::MoveToState(void)
{
}

/* <332949> ../cstrike/dlls/bot/cs_bot.h:133 */
inline void BuyState::BuyState(void)
{
}

/* <332922> ../cstrike/dlls/bot/cs_bot.h:120 */
inline void InvestigateNoiseState::InvestigateNoiseState(void)
{
}

/* <3328fb> ../cstrike/dlls/bot/cs_bot.h:75 */
inline void AttackState::AttackState(void)
{
}

/* <3328d9> ../cstrike/dlls/bot/cs_bot.h:61 */
inline void HuntState::HuntState(void)
{
}

/* <3328b8> ../cstrike/dlls/bot/cs_bot.h:53 */
inline void IdleState::IdleState(void)
{
}

/* <332850> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <332828> ../game_shared/bot/bot_util.h:146 */
inline void IntervalTimer::Invalidate(void)
{
}

/* <332806> ../cstrike/dlls/bot/cs_bot.h:780 */
inline void ConnectInfo::ConnectInfo(void)
{
}

/* <3327e2> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <3327c9> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <3327a8> ../cstrike/dlls/bot/cs_bot.h:44 */
inline void BotState::BotState(void)
{
}

/* <33278a> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <33276c> ../cstrike/dlls/bot/cs_bot.h:69 */
inline void HuntState::ClearHuntArea(void)
{
}

/* <332748> ../cstrike/dlls/bot/cs_bot_manager.h:61 */
inline void CCSBotManager::SetLearningMapFlag(void)
{
}

/* <332724> ../cstrike/dlls/bot/cs_bot_manager.h:60 */
inline void CCSBotManager::IsLearningMap(void)
{
}

/* <3326fb> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <3326dd> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <3326b4> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <332696> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <332647> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <33260f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <3325f1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <332578> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <332515> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <3324ee> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <3324c7> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <332493> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <33246c> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <332440> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <332422> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <31d087> ../cstrike/dlls/bot/cs_bot_event.cpp:22 */
void CCSBot::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CCSBotManager *ctrl;                           //    63
//		class CBasePlayer *player;                           //    65
//		float range;                                          //   363
//		enum PriorityType priority;                           //   364
//		bool isHostile;                                       //   365
//		const Vector *newNoisePosition;               //   419
//		float newNoiseDist;                                   //   420
//		{
//			class CBasePlayer *killer;                   //    81
//			{
//				float const knifeAmbushChance;         //    91
//				Hurry(CCSBot *const this,
//					float duration);  //    88
//			}
//		}
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //   221
//		{
//			float const bombBeepHearRangeSq;               //   242
//			operator-(const Vector *const this,
//					const Vector &v);  //   243
//			LengthSquared(const Vector *const this);  //   243
//			{
//				const class Zone *zone;             //   248
//			}
//		}
//		{
//			float const bombPickupHearRangeSq;             //   229
//			operator-(const Vector *const this,
//					const Vector &v);  //   230
//			LengthSquared(const Vector *const this);  //   230
//		}
//		{
//			class CBasePlayer *victim;                   //   111
//			class CBasePlayer *killer;                   //   113
//			GetNearbyEnemyCount(const class CCSBot *const this);  //   175
//			{
//				float delay;                          //   185
//			}
//			GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   155
//			SetTask(CCSBot *const this,
//				enum TaskType task,
//				class CBaseEntity *entity);  //   164
//			GetEnemy(CCSBot *const this);  //   164
//			Say(BotChatterInterface *const this,
//				const char *phraseName,
//				float lifetime,
//				float delay);  //   118
//			entindex(CBaseEntity *const this);  //   124
//		}
//		GetEnemy(CCSBot *const this);  //   292
//		ForceRun(CCSBot *const this,
//			float duration);  //   294
//		{
//			float const hearCallRange;                     //   329
//			Vector vecCenter;                       //   334
//			operator-(const Vector *const this,
//					const Vector &v);  //   330
//			IsLengthGreaterThan(const Vector *const this,
//						float length);  //   330
//			{
//				enum RouteType route;                 //   343
//				SetTask(CCSBot *const this,
//					enum TaskType task,
//					class CBaseEntity *entity);  //   338
//				SetGoalEntity(CCSBot *const this,
//						class CBaseEntity *entity);  //   340
//			}
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   376
//		IsLengthGreaterThan(const Vector *const this,
//					float length);  //   376
//		{
//			float const headOffChance;                     //   390
//			SetTask(CCSBot *const this,
//				enum TaskType task,
//				class CBaseEntity *entity);  //   396
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   420
//		Length(const Vector *const this);  //   420
//		{
//			float const veryCloseRange;                    //   434
//			class CNavArea *noiseArea;                   //   461
//			float const maxErrorRadius;                    //   481
//			float const maxHearingRange;                   //   482
//			float errorRadius;                            //   483
//			{
//				float const shortTermMemoryTime;       //   445
//				{
//					float oldNoiseDist;           //   452
//					operator-(const Vector *const this,
//							const Vector &v);  //   452
//					Length(const Vector *const this);  //   452
//				}
//			}
//		}
//	}
}

/* <31d026> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //   611
//	}
}

/* <31cfd4> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <31cf96> ../cstrike/dlls/bot/cs_bot.h:580 */
inline void CCSBot::SetGoalEntity( CBaseEntity *entity)
{
}

/* <31cf72> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <31cf4d> ../cstrike/dlls/bot/cs_bot.h:586 */
inline void CCSBot::ForceRun( float duration)
{
}

/* <31cf26> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <31cf0d> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <31cef4> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <31cedb> ../cstrike/dlls/bot/cs_bot.h:542 */
inline void CCSBot::GetLastKnownEnemyPosition(void)
{
}

/* <31ceaa> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <31ce8b> ../cstrike/dlls/bot/cs_bot.h:513 */
inline void CCSBot::GetEnemy(void)
{
}

/* <31ce6c> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <31ce42> ../cstrike/dlls/bot/cs_bot.h:320 */
inline void CCSBot::Hurry( float duration)
{
}

/* <31ce29> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <31ce10> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <31cdf7> ../cstrike/dlls/bot/cs_bot.h:539 */
inline void CCSBot::GetTimeSinceLastSawEnemy(void)
{
}

/* <31cdde> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <31cdc0> ../cstrike/dlls/bot/cs_bot.h:369 */
inline void CCSBot::IsFollowing(void)
{
}

/* <31cd8c> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <31cd62> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <31cd3c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <31cd15> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <31ccee> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <31ccd5> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <31ccb7> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <31cc68> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <31cc1e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <31cbe3> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <31cb94> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <31cb33> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <31cb07> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <31cadf> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <30cacd> (null):27581 */
void _GLOBAL__sub_I__Z20GetRandomSpotAtPlacej(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  2450
}

/* <30c1fc> ../cstrike/dlls/bot/cs_bot_chatter.cpp:443 */
void BotPhraseManager::Initialize(const char *filename, int bankIndex)
{
//	{
//		bool isDefault;                                       //   445
//		int phraseDataLength;                                 //   446
//		char *phraseDataFile;                                //   447
//		char *phraseData;                                    //   448
//		unsigned int nextID;                                  //   459
//		int const RadioPathLen;                                //   461
//		char baseDir;                                         //   462
//		char compositeFilename;                               //   463
//		{
//			char *token;                                 //   474
//			{
//				bool isPlace;                         //   492
//				class BotPhrase *phrase;             //   495
//				PlaceCriteria placeCriteria;          //   533
//				CountCriteria countCriteria;          //   534
//				enum GameEventType radioEvent;        //   535
//				bool isImportant;                     //   536
//				{
//					class BotSpeakable *speak;   //   635
//					BotSpeakableVector *speakables;  //   657
//					operator[](vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this,
//							size_type __n);  //   657
//					{
//						enum GameEventType event;   //   610
//					}
//					BotSpeakable(BotSpeakable *const this);  //   635
//					CloneString(const char *str);  //   639
//					push_back(vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this,
//							const value_type &__x);  //   658
//					operator[](vector<int, std::allocator<int>> *const this,
//							size_type __n);  //   660
//					NameToID(const class BotPhraseManager *const this,
//						const char *name);  //   572
//					atoi(const char *__nptr);  //   593
//					CloneString(const char *str);  //   643
//				}
//				GetPlace(const class BotPhraseManager *const this,
//					const char *name);  //   517
//				GetPhrase(const class BotPhraseManager *const this,
//						const char *name);  //   521
//				BotPhrase(BotPhrase *const this,
//						unsigned int id,
//						bool isPlace);  //   498
//				CloneString(const char *str);  //   511
//				push_back(list<BotPhrase*, std::allocator<BotPhrase*>> *const this,
//						const value_type &__x);  //   671
//				push_back(list<BotPhrase*, std::allocator<BotPhrase*>> *const this,
//						const value_type &__x);  //   673
//			}
//			{
//				char *token;                         //   486
//			}
//		}
//	}
}

/* <30c1cf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::push_back(const value_type &__x)
{
}

/* <30bb98> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_insert_aux(iterator __position, const BotSpeakable * &__x)
{
//	{
//		class BotSpeakable *__x_copy;                        //   308
//		construct(new_allocator<BotSpeakable*> *const this,
//				pointer __p,
//				const class BotSpeakable * &__val);  //   303
//		copy_backward<BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first,
//								class BotSpeakable ** __last,
//								class BotSpeakable ** __result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<BotSpeakable**, std::vector<BotSpeakable*>>(const class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__lhs,
//									const class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<BotSpeakable*> *const this,
//				pointer __p,
//				const class BotSpeakable * &__val);  //   332
//		__uninitialized_move_a<BotSpeakable**, BotSpeakable**, std::allocator<BotSpeakable*>>(BotSpeakable ** __first,
//													class BotSpeakable ** __last,
//													class BotSpeakable ** __result,
//													class allocator<BotSpeakable*> &__alloc);  //   340
//		__uninitialized_move_a<BotSpeakable**, BotSpeakable**, std::allocator<BotSpeakable*>>(BotSpeakable ** __first,
//													class BotSpeakable ** __last,
//													class BotSpeakable ** __result,
//													class allocator<BotSpeakable*> &__alloc);  //   346
//		_M_deallocate(_Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <30ba3b> ../cstrike/dlls/bot/cs_bot_chatter.cpp:303 */
void BotPhrase::BotPhrase(unsigned int id, bool isPlace)
{
//	vector(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this);  //   303
//	vector(vector<int, std::allocator<int>> *const this);  //   303
//	vector(vector<int, std::allocator<int>> *const this);  //   303
//	ClearCriteria(const class BotPhrase *const this);  //   309
}

/* <30ba05> ../cstrike/dlls/bot/cs_bot_chatter.cpp:303 */
void BotPhrase::BotPhrase(unsigned int id, bool isPlace)
{
}

/* <30b837> ../cstrike/dlls/bot/cs_bot_chatter.cpp:326 */
void BotPhrase::InitVoiceBank(int bankIndex)
{
//	push_back(vector<int, std::allocator<int>> *const this,
//			const value_type &__x);  //   330
//	push_back(vector<int, std::allocator<int>> *const this,
//			const value_type &__x);  //   331
//	vector(vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this);  //   332
//	push_back(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this,
//			const value_type &__x);  //   332
}

/* <30b200> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void _M_insert_aux(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this, iterator __position, const vector<BotSpeakable*, std::allocator<BotSpeakable*>> * &__x)
{
//	{
//		class vector<BotSpeakable*, std::allocator<BotSpeakable*>> *__x_copy;                 //   308
//		construct(new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> *const this,
//				pointer __p,
//				const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> * &__val);  //   303
//		copy_backward<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first,
//												class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last,
//												class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<std::vector<BotSpeakable*>**, std::vector<std::vector<BotSpeakable*>*>>(const class __normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakablconst __lhs,
//													const class __normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakablconst __rhs);  //   323
//		_M_allocate(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this,
//				size_t __n);  //   324
//		construct(new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> *const this,
//				pointer __p,
//				const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> * &__val);  //   332
//		__uninitialized_move_a<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**, std::allocator<std::vector<BotSpeakable*>*>>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first,
//																class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last,
//																class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result,
//																class allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> &__alloc);  //   340
//		__uninitialized_move_a<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**, std::allocator<std::vector<BotSpeakable*>*>>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first,
//																class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last,
//																class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result,
//																class allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> &__alloc);  //   346
//		_M_deallocate(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <30abc9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<int, std::allocator<int>>::_M_insert_aux(iterator __position, const int &__x)
{
//	{
//		int __x_copy;                                         //   308
//		construct(new_allocator<int> *const this,
//				pointer __p,
//				const int &__val);  //   303
//		copy_backward<int*, int*>(int *__first,
//						int *__last,
//						int *__result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<int, std::allocator<int>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<int*, std::vector<int>>(const class __normal_iterator<int*, std::vector<int, std::allocator<int>> > &__lhs,
//							const class __normal_iterator<int*, std::vector<int, std::allocator<int>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<int, std::allocator<int>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<int> *const this,
//				pointer __p,
//				const int &__val);  //   332
//		__uninitialized_move_a<int*, int*, std::allocator<int>>(int *__first,
//									int *__last,
//									int *__result,
//									class allocator<int> &__alloc);  //   340
//		__uninitialized_move_a<int*, int*, std::allocator<int>>(int *__first,
//									int *__last,
//									int *__result,
//									class allocator<int> &__alloc);  //   346
//		_M_deallocate(_Vector_base<int, std::allocator<int>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <30aa67> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2440 */
void BotChatterInterface::FriendlyFire(void)
{
//	{
//		class BotStatement *say;                             //  2442
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2442
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2444
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2444
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2447
//	}
}

/* <30a905> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2427 */
void BotChatterInterface::KilledFriend(void)
{
//	{
//		class BotStatement *say;                             //  2429
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2429
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2431
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2431
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2434
//	}
}

/* <30a708> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2414 */
void BotChatterInterface::Encourage(const char *phraseName, float repeatInterval, float lifetime)
{
//	{
//		class CCSBotManager *ctrl;                           //  2416
//		IsElapsed(const class CountdownTimer *const this);  //  2418
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //  2420
//		Start(CountdownTimer *const this,
//			float duration);  //  2421
//	}
}

/* <30a5b9> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2400 */
void BotChatterInterface::HostageDown(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2402
//		class BotStatement *say;                             //  2406
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2406
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2408
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2408
//	}
}

/* <30a56e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:246 */
void BotRequestReportMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
}

/* <309851> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1788 */
void BotChatterInterface::ReportingIn(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  1790
//		class BotStatement *say;                             //  1792
//		Place place;                                          //  1795
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1792
//		SayWhere(BotStatement *say,
//			Place place);  //  1796
//		GoingToPlantTheBomb(BotChatterInterface *const this,
//					Place place);  //  1803
//		{
//			float const recentTime;                        //  1874
//			SetStartTime(BotStatement *const this,
//					float timestamp);  //  1872
//			GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //  1875
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  1878
//			AppendPhrase(BotStatement *const this,
//					const class BotPhrase *phrase);  //  1888
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  1888
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  1883
//		}
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1860
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1860
//		BotHelpMeme(BotHelpMeme *const this,
//				Place place);  //  1861
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  1861
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1866
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //  1809
//		GuardingHostages(BotChatterInterface *const this,
//				Place place,
//				bool isPlan);  //  1825
//		GuardingHostageEscapeZone(BotChatterInterface *const this,
//						bool isPlan);  //  1831
//		GetLooseBomb(CCSBotManager *const this);  //  1815
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1817
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1817
//		GetLooseBomb(CCSBotManager *const this);  //  1818
//		BotBombStatusMeme(BotBombStatusMeme *const this,
//					enum BombState state,
//					const Vector *pos);  //  1818
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  1818
//	}
}

/* <3096bc> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2380 */
void BotChatterInterface::EscortingHostages(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2382
//		IsElapsed(const class CountdownTimer *const this);  //  2386
//		{
//			class BotStatement *say;                     //  2391
//			Start(CountdownTimer *const this,
//				float duration);  //  2389
//			BotStatement(BotStatement *const this,
//					class BotChatterInterface *chatter,
//					enum BotStatementType type,
//					float expireDuration);  //  2391
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  2393
//			AppendPhrase(BotStatement *const this,
//					const class BotPhrase *phrase);  //  2393
//		}
//	}
}

/* <309691> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2375 */
void BotChatterInterface::TalkingToHostages(void)
{
}

/* <309542> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2361 */
void BotChatterInterface::HostagesTaken(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2363
//		class BotStatement *say;                             //  2367
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2367
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2369
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2369
//	}
}

/* <3093a9> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2346 */
void BotChatterInterface::HostagesBeingTaken(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2348
//		class BotStatement *say;                             //  2352
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2352
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2354
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2354
//		BotHostageBeingTakenMeme(BotHostageBeingTakenMeme *const this);  //  2355
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2355
//	}
}

/* <3091eb> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2329 */
void BotChatterInterface::GuardingHostageEscapeZone(bool isPlan)
{
//	{
//		class CCSBotManager *ctrl;                           //  2331
//		float const minInterval;                               //  2335
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  2336
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //  2342
//	}
}

/* <3091a4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2329 */
void BotChatterInterface::GuardingHostageEscapeZone(bool isPlan)
{
//	{
//		class CCSBotManager *ctrl;                           //  2331
//		float const minInterval;                               //  2335
//	}
}

/* <308fdd> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2312 */
void BotChatterInterface::GuardingHostages(Place place, bool isPlan)
{
//	{
//		class CCSBotManager *ctrl;                           //  2314
//		float const minInterval;                               //  2318
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  2319
//		Say(BotChatterInterface *const this,
//			const char *phraseName,
//			float lifetime,
//			float delay);  //  2325
//	}
}

/* <308e52> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2294 */
void BotChatterInterface::AnnouncePlan(const char *phraseName, Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2296
//		class BotStatement *say;                             //  2300
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2300
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2302
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2302
//		SetPlace(BotStatement *const this,
//			Place where);  //  2303
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2306
//	}
}

/* <308b60> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2259 */
void BotChatterInterface::CelebrateWin(void)
{
//	{
//		class BotStatement *say;                             //  2261
//		float const quickRound;                                //  2266
//		class CCSBotManager *ctrl;                           //  2267
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2261
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2264
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //  2272
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2282
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2286
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2286
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2273
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2275
//	}
}

/* <308852> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1549 */
void BotChatterInterface::Update(void)
{
//	{
//		class BotStatement *say;                             //  1565
//		const class BotStatement *friendSay;                //  1586
//		class BotStatement *nextSay;                         //  1590
//		ShouldSpeak(const class BotChatterInterface *const this);  //  1555
//		GetOwner(const class BotStatement *const this);  //  1570
//		GetOwner(const class BotStatement *const this);  //  1587
//		IsValid(const class BotStatement *const this);  //  1596
//		RemoveStatement(BotChatterInterface *const this,
//				class BotStatement *statement);  //  1598
//		RemoveStatement(BotChatterInterface *const this,
//				class BotStatement *statement);  //  1625
//		IsObsolete(const class BotStatement *const this);  //  1607
//		IsRedundant(const class BotStatement *const this,
//				const class BotStatement *say);  //  1621
//		{
//			float const longTime;                          //  1557
//			GetRadioSilenceDuration(BotChatterInterface *const this);  //  1558
//		}
//		RemoveStatement(BotChatterInterface *const this,
//				class BotStatement *statement);  //  1575
//	}
}

/* <3087ee> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1479 */
void BotChatterInterface::ReportEnemies(void)
{
//	GetNearbyEnemyCount(const class CCSBot *const this);  //  1484
}

/* <3084cf> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1896 */
void BotChatterInterface::NeedBackup(void)
{
//	{
//		float const minRequestInterval;                        //  1898
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  1899
//		{
//			class BotStatement *say;                     //  1913
//			Place place;                                  //  1916
//			BotStatement(BotStatement *const this,
//					class BotChatterInterface *chatter,
//					enum BotStatementType type,
//					float expireDuration);  //  1913
//			SayWhere(BotStatement *say,
//				Place place);  //  1917
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  1919
//			AppendPhrase(BotStatement *const this,
//					const class BotPhrase *phrase);  //  1919
//			BotHelpMeme(BotHelpMeme *const this,
//					Place place);  //  1920
//			AttachMeme(BotStatement *const this,
//					class BotMeme *meme);  //  1920
//		}
//		Reset(IntervalTimer *const this);  //  1902
//	}
}

/* <308308> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2242 */
void BotChatterInterface::Scared(void)
{
//	{
//		float const minInterval;                               //  2244
//		class BotStatement *say;                             //  2250
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  2245
//		Reset(IntervalTimer *const this);  //  2248
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2250
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2252
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2252
//		AddCondition(BotStatement *const this,
//				enum ConditionType condition);  //  2253
//	}
}

/* <3082a5> ../cstrike/dlls/bot/cs_bot_chatter.cpp:234 */
void BotWhereBombMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		int zone;                                             //   236
//	}
}

/* <3080b8> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2223 */
void BotChatterInterface::FoundPlantedBomb(int zoneIndex)
{
//	{
//		class CCSBotManager *ctrl;                           //  2225
//		const class Zone *zone;                             //  2226
//		class BotStatement *say;                             //  2230
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2230
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2232
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2232
//		SetPlace(BotStatement *const this,
//			Place where);  //  2233
//		BotBombsiteStatusMeme(BotBombsiteStatusMeme *const this,
//					int zoneIndex,
//					enum StatusType status);  //  2235
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2235
//	}
}

/* <307de2> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2205 */
void BotChatterInterface::BombsiteClear(int zoneIndex)
{
//	{
//		class CCSBotManager *ctrl;                           //  2207
//		const class Zone *zone;                             //  2208
//		class BotStatement *say;                             //  2212
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2212
//		SayWhere(BotStatement *say,
//			Place place);  //  2214
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2215
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2215
//		BotBombsiteStatusMeme(BotBombsiteStatusMeme *const this,
//					int zoneIndex,
//					enum StatusType status);  //  2217
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2217
//	}
}

/* <307c56> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2186 */
void BotChatterInterface::RequestBombLocation(void)
{
//	{
//		class BotStatement *say;                             //  2195
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2195
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2197
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2197
//		BotWhereBombMeme(BotWhereBombMeme *const this);  //  2199
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2199
//	}
}

/* <30795b> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2157 */
void BotChatterInterface::GuardingLooseBomb(CBaseEntity *bomb)
{
//	{
//		class CCSBotManager *ctrl;                           //  2163
//		class BotStatement *say;                             //  2171
//		Place place;                                          //  2174
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2171
//		SayWhere(BotStatement *say,
//			Place place);  //  2175
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2177
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2177
//		GetLooseBomb(CCSBotManager *const this);  //  2179
//		BotBombStatusMeme(BotBombStatusMeme *const this,
//					enum BombState state,
//					const Vector *pos);  //  2180
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2180
//	}
}

/* <30761a> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2122 */
void BotChatterInterface::SpottedLooseBomb(CBaseEntity *bomb)
{
//	{
//		class CCSBotManager *ctrl;                           //  2124
//		IsElapsed(const class CountdownTimer *const this);  //  2135
//		{
//			class BotStatement *say;                     //  2141
//			Place place;                                  //  2144
//			Start(CountdownTimer *const this,
//				float duration);  //  2138
//			BotStatement(BotStatement *const this,
//					class BotChatterInterface *chatter,
//					enum BotStatementType type,
//					float expireDuration);  //  2141
//			SayWhere(BotStatement *say,
//				Place place);  //  2145
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  2147
//			AppendPhrase(BotStatement *const this,
//					const class BotPhrase *phrase);  //  2147
//			GetLooseBomb(CCSBotManager *const this);  //  2149
//			BotBombStatusMeme(BotBombStatusMeme *const this,
//						enum BombState state,
//						const Vector *pos);  //  2150
//			AttachMeme(BotStatement *const this,
//					class BotMeme *meme);  //  2150
//		}
//	}
}

/* <307272> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2090 */
void BotChatterInterface::SpottedBomber(CBasePlayer *bomber)
{
//	{
//		class BotStatement *say;                             //  2105
//		Place place;                                          //  2108
//		{
//			const Vector *bomberPos;              //  2095
//			float const closeRangeSq;                      //  2096
//			operator-(const Vector *const this,
//					const Vector &v);  //  2097
//			LengthSquared(const Vector *const this);  //  2097
//		}
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2105
//		SayWhere(BotStatement *say,
//			Place place);  //  2109
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2111
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2111
//		entindex(CBaseEntity *const this);  //  2113
//		SetSubject(BotStatement *const this,
//				int playerID);  //  2113
//		BotBombStatusMeme(BotBombStatusMeme *const this,
//					enum BombState state,
//					const Vector *pos);  //  2116
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2116
//	}
}

/* <3070c8> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2066 */
void BotChatterInterface::TheyPickedUpTheBomb(void)
{
//	{
//		class CCSBotManager *ctrl;                           //  2068
//		class BotStatement *say;                             //  2080
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2080
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2082
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2082
//		BotBombStatusMeme(BotBombStatusMeme *const this,
//					enum BombState state,
//					const Vector *pos);  //  2084
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2084
//	}
}

/* <306ef6> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2050 */
void BotChatterInterface::PlantingTheBomb(Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2052
//		class BotStatement *say;                             //  2056
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2056
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2058
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2058
//		SetPlace(BotStatement *const this,
//			Place where);  //  2059
//		BotDefendHereMeme(BotDefendHereMeme *const this,
//					const Vector *pos);  //  2060
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2060
//	}
}

/* <306cf4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2028 */
void BotChatterInterface::GoingToPlantTheBomb(Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2030
//		float const minInterval;                               //  2034
//		class BotStatement *say;                             //  2040
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  2035
//		Reset(IntervalTimer *const this);  //  2038
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2040
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2042
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2042
//		SetPlace(BotStatement *const this,
//			Place where);  //  2043
//		BotFollowMeme(BotFollowMeme *const this);  //  2044
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  2044
//	}
}

/* <306bb2> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2018 */
void BotChatterInterface::Negative(void)
{
//	{
//		class BotStatement *say;                             //  2020
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2020
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2022
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2022
//	}
}

/* <306b4f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:114 */
void BotBombsiteStatusMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	Interpret(const class BotBombsiteStatusMeme *const this,
//			class CCSBot *sender,
//			class CCSBot *receiver);  //   114
}

/* <306ab6> ../cstrike/dlls/bot/cs_bot_chatter.cpp:137 */
void BotBombStatusMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	Interpret(const class BotBombStatusMeme *const this,
//			class CCSBot *sender,
//			class CCSBot *receiver);  //   137
}

/* <306974> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2008 */
void BotChatterInterface::Affirmative(void)
{
//	{
//		class BotStatement *say;                             //  2010
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2010
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2012
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2012
//	}
}

/* <306853> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1993 */
void BotChatterInterface::EnemiesRemaining(void)
{
//	{
//		class BotStatement *say;                             //  1999
//		GetNearbyEnemyCount(const class CCSBot *const this);  //  1996
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1999
//		AppendPhrase(BotStatement *const this,
//				enum ContextType contextPhrase);  //  2000
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2001
//	}
}

/* <3066a7> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1978 */
void BotChatterInterface::KilledMyEnemy(int victimID)
{
//	{
//		class BotStatement *say;                             //  1984
//		GetNearbyEnemyCount(const class CCSBot *const this);  //  1981
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1984
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1986
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1986
//		SetSubject(BotStatement *const this,
//				int playerID);  //  1987
//	}
}

/* <3064e2> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1952 */
void BotChatterInterface::HeardNoise(const Vector *pos)
{
//	{
//		class CCSBotManager *ctrl;                           //  1954
//		IsElapsed(const class CountdownTimer *const this);  //  1958
//		Start(CountdownTimer *const this,
//			float duration);  //  1961
//		{
//			class BotStatement *say;                     //  1966
//			BotStatement(BotStatement *const this,
//					class BotChatterInterface *chatter,
//					enum BotStatementType type,
//					float expireDuration);  //  1966
//			GetPhrase(const class BotPhraseManager *const this,
//					const char *name);  //  1968
//			AppendPhrase(BotStatement *const this,
//					const class BotPhrase *phrase);  //  1968
//			SetPlace(BotStatement *const this,
//				Place where);  //  1969
//		}
//	}
}

/* <3061a8> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1929 */
void BotChatterInterface::PinnedDown(void)
{
//	{
//		float const minRequestInterval;                        //  1932
//		class BotStatement *say;                             //  1938
//		Place place;                                          //  1941
//		IsLessThen(const class IntervalTimer *const this,
//				float duration);  //  1933
//		Reset(IntervalTimer *const this);  //  1936
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1938
//		SayWhere(BotStatement *say,
//			Place place);  //  1942
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1944
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1944
//		BotHelpMeme(BotHelpMeme *const this,
//				Place place);  //  1945
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  1945
//		AddCondition(BotStatement *const this,
//				enum ConditionType condition);  //  1946
//	}
}

/* <305ffa> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1773 */
void BotChatterInterface::ReportIn(void)
{
//	{
//		class BotStatement *say;                             //  1775
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1775
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1777
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1777
//		AddCondition(BotStatement *const this,
//				enum ConditionType condition);  //  1778
//		BotRequestReportMeme(BotRequestReportMeme *const this);  //  1779
//		AttachMeme(BotStatement *const this,
//				class BotMeme *meme);  //  1779
//	}
}

/* <305da4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1759 */
void BotChatterInterface::Clear(Place place)
{
//	{
//		class BotStatement *say;                             //  1761
//		SayWhere(BotStatement *say,
//			Place place);  //  1763
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1761
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1764
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1764
//	}
}

/* <305d7b> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1732 */
inline void SayWhere(BotStatement *say, Place place)
{
}

/* <305b50> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1740 */
void BotChatterInterface::EnemySpotted(void)
{
//	{
//		Place place;                                          //  1743
//		class BotStatement *say;                             //  1745
//		GetPlace(const class BotPhraseManager *const this,
//			PlaceCriteria place);  //  1748
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  1745
//		AppendPhrase(BotStatement *const this,
//				enum ContextType contextPhrase);  //  1751
//		AppendPhrase(BotStatement *const this,
//				enum ContextType contextPhrase);  //  1752
//		AddCondition(BotStatement *const this,
//				enum ConditionType condition);  //  1753
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  1748
//	}
}

/* <305b15> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1714 */
void BotChatterInterface::ResetRadioSilenceDuration(void)
{
//	Reset(IntervalTimer *const this);  //  1716
}

/* <305a8f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1708 */
void BotChatterInterface::GetRadioSilenceDuration(void)
{
//	GetElapsedTime(const class IntervalTimer *const this);  //  1710
}

/* <305a35> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1694 */
void BotChatterInterface::ShouldSpeak(void)
{
//	GetNearbyFriendCount(const class CCSBot *const this);  //  1701
}

/* <305a17> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1694 */
void BotChatterInterface::ShouldSpeak(void)
{
}

/* <305915> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1635 */
void BotChatterInterface::GetActiveStatement(void)
{
//	{
//		class BotStatement *earliest;                        //  1638
//		float earlyTime;                                      //  1639
//		{
//			int i;                                        //  1641
//			{
//				class CBasePlayer *player;           //  1643
//				class CCSBot *bot;                   //  1667
//				FNullEnt(entvars_t *pev);  //  1648
//				{
//					class BotStatement *say;     //  1669
//				}
//			}
//		}
//	}
}

/* <30579e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1524 */
void BotChatterInterface::OnDeath(void)
{
//	{
//		const class BotPhrase *pain;                        //  1532
//		GetSpeakable(const class BotPhrase *const this,
//				int bankIndex,
//				float *duration);  //  1535
//		ResetRadioSilenceDuration(BotChatterInterface *const this);  //  1536
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1532
//	}
//	IsTalking(const class BotChatterInterface *const this);  //  1526
//	GetVerbosity(const class BotChatterInterface *const this);  //  1528
//	GetVerbosity(const class BotChatterInterface *const this);  //  1529
}

/* <305743> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1515 */
void BotChatterInterface::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
}

/* <3056fa> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1462 */
void BotChatterInterface::RemoveStatement(BotStatement *statement)
{
//	~BotStatement(BotStatement *const this,
//			int const __in_chrg);  //  1472
}

/* <305661> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1381 */
void BotChatterInterface::AddStatement(BotStatement *statement, bool mustAdd)
{
//	{
//		class BotStatement *s;                               //  1403
//		class BotStatement *earlier;                         //  1428
//		GetVerbosity(const class BotChatterInterface *const this);  //  1384
//		IsImportant(const class BotStatement *const this);  //  1388
//	}
}

/* <305543> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1308 */
void BotChatterInterface::BotChatterInterface(CCSBot *me)
{
//	IntervalTimer(IntervalTimer *const this);  //  1308
//	IntervalTimer(IntervalTimer *const this);  //  1308
//	IntervalTimer(IntervalTimer *const this);  //  1308
//	IntervalTimer(IntervalTimer *const this);  //  1308
//	CountdownTimer(CountdownTimer *const this);  //  1308
//	CountdownTimer(CountdownTimer *const this);  //  1308
//	CountdownTimer(CountdownTimer *const this);  //  1308
}

/* <305519> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1308 */
void BotChatterInterface::BotChatterInterface(CCSBot *me)
{
}

/* <305386> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1347 */
void BotChatterInterface::Reset(void)
{
//	{
//		class BotStatement *msg;                             //  1349
//		class BotStatement *nextMsg;                         //  1349
//		RemoveStatement(BotChatterInterface *const this,
//				class BotStatement *statement);  //  1357
//		ResetRadioSilenceDuration(BotChatterInterface *const this);  //  1365
//		Invalidate(CountdownTimer *const this);  //  1373
//		Invalidate(IntervalTimer *const this);  //  1367
//		Invalidate(IntervalTimer *const this);  //  1368
//		Invalidate(CountdownTimer *const this);  //  1369
//		Invalidate(CountdownTimer *const this);  //  1370
//		Invalidate(IntervalTimer *const this);  //  1371
//		Invalidate(IntervalTimer *const this);  //  1372
//		Invalidate(CountdownTimer *const this);  //  1374
//	}
}

/* <30535c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1462 */
void BotChatterInterface::RemoveStatement(BotStatement *statement)
{
}

/* <305307> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1334 */
void BotChatterInterface::~BotChatterInterface(void)
{
//	{ /* ~BotChatterInterface+0x4 */
//		class BotStatement *msg;                             //  1337
//		~BotStatement(BotStatement *const this,
//				int const __in_chrg);  //  1339
//	}
}

/* <3052ce> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1334 */
void BotChatterInterface::~BotChatterInterface(int const __in_chrg)
{
//	{
//		class BotStatement *msg;                             //  1337
//	}
}

/* <305289> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1283 */
void BotStatement::HasCount(void)
{
//	{
//		int i;                                                //  1285
//	}
}

/* <30523c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1266 */
void BotStatement::GetPlace(void)
{
//	GetPlace(const class BotStatement *const this);  //  1266
}

/* <304b22> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1065 */
void BotStatement::Update(void)
{
//	{
//		class CCSBot *me;                                    //  1067
//		GetOwner(const class BotStatement *const this);  //  1067
//		{
//			float const reportTime;                        //  1083
//			GetNearbyEnemyCount(const class CCSBot *const this);  //  1084
//		}
//		{
//			float duration;                               //  1105
//			const class BotPhrase *phrase;              //  1106
//			{
//				const char *const speak;             //  1138
//				int enemyCount;                       //  1143
//				GetPhrase(const class BotPhraseManager *const this,
//						const char *name);  //  1152
//			}
//			{
//				int enemyCount;                       //  1120
//				GetNearbyEnemyCount(const class CCSBot *const this);  //  1120
//				GetNearbyFriendCount(const class CCSBot *const this);  //  1123
//				GetPhrase(const class BotPhraseManager *const this,
//						const char *name);  //  1130
//				SetCountCriteria(const class BotPhrase *const this,
//						CountCriteria count);  //  1131
//				GetPhrase(const class BotPhraseManager *const this,
//						const char *name);  //  1125
//				BotHelpMeme(BotHelpMeme *const this,
//						Place place);  //  1126
//				AttachMeme(BotStatement *const this,
//						class BotMeme *meme);  //  1126
//			}
//			{
//				float const gap;                       //  1249
//				GetVerbosity(const class BotChatterInterface *const this);  //  1181
//				{
//					enum GameEventType radioEvent;//  1183
//					ResetRadioSilenceDuration(BotChatterInterface *const this);  //  1192
//				}
//				{
//					const char *filename;       //  1202
//					bool sayIt;                   //  1205
//					{
//						enum GameEventType radioEvent;        //  1226
//						ResetRadioSilenceDuration(BotChatterInterface *const this);  //  1236
//					}
//					ResetRadioSilenceDuration(BotChatterInterface *const this);  //  1243
//					SetPlaceCriteria(const class BotPhrase *const this,
//							PlaceCriteria place);  //  1200
//					GetSpeakable(const class BotPhrase *const this,
//							int bankIndex,
//							float *duration);  //  1202
//					{
//						float timeSince;      //  1210
//						float const minRepeatTime;   //  1211
//						GetPlaceStatementInterval(const class BotPhraseManager *const this,
//										Place place);  //  1210
//						ResetPlaceStatementInterval(BotPhraseManager *const this,
//										Place place);  //  1218
//					}
//				}
//			}
//		}
//	}
}

/* <304acf> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1052 */
void BotStatement::AppendPhrase(ContextType contextPhrase)
{
//	AppendPhrase(BotStatement *const this,
//			enum ContextType contextPhrase);  //  1052
}

/* <304a7c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1037 */
void BotStatement::AppendPhrase(const class BotPhrase *phrase)
{
//	AppendPhrase(BotStatement *const this,
//			const class BotPhrase *phrase);  //  1037
}

/* <3049b6> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1008 */
void BotStatement::Convert(const class BotStatement *say)
{
//	{
//		const class BotPhrase *meToo;                       //  1012
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  1012
//	}
}

/* <304977> ../cstrike/dlls/bot/cs_bot_chatter.cpp:990 */
void BotStatement::IsObsolete(void)
{
//	GetOwner(const class BotStatement *const this);  //   993
}

/* <304959> ../cstrike/dlls/bot/cs_bot_chatter.cpp:990 */
void BotStatement::IsObsolete(void)
{
}

/* <30492d> ../cstrike/dlls/bot/cs_bot_chatter.cpp:950 */
void BotStatement::IsRedundant(BotStatement *say)
{
}

/* <3048bc> ../cstrike/dlls/bot/cs_bot_chatter.cpp:911 */
void BotStatement::IsValid(void)
{
//	{
//		int i;                                                //   913
//		GetOwner(const class BotStatement *const this);  //   919
//		GetOwner(const class BotStatement *const this);  //   935
//	}
}

/* <304890> ../cstrike/dlls/bot/cs_bot_chatter.cpp:911 */
void BotStatement::IsValid(void)
{
//	{
//		int i;                                                //   913
//	}
}

/* <30485b> ../cstrike/dlls/bot/cs_bot_chatter.cpp:891 */
void BotStatement::IsImportant(void)
{
//	{
//		int i;                                                //   894
//	}
}

/* <30482f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:881 */
void BotStatement::AddCondition(ConditionType condition)
{
}

/* <304803> ../cstrike/dlls/bot/cs_bot_chatter.cpp:872 */
void BotStatement::AttachMeme(BotMeme *meme)
{
}

/* <3047e0> ../cstrike/dlls/bot/cs_bot_chatter.cpp:863 */
void BotStatement::GetOwner(void)
{
}

/* <3047bd> ../cstrike/dlls/bot/cs_bot_chatter.cpp:855 */
void BotStatement::~BotStatement(void)
{
}

/* <30477e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:830 */
void BotStatement::BotStatement(BotChatterInterface *chatter, BotStatementType type, float expireDuration)
{
}

/* <3046eb> ../cstrike/dlls/bot/cs_bot_chatter.cpp:811 */
void BotPhraseManager::GetPlace( PlaceCriteria place)
{
//	{
//		const_iterator iter;                                  //   816
//		end(const class list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   816
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   816
//		{
//			const class BotPhrase *phrase;              //   818
//		}
//	}
}

/* <304654> ../cstrike/dlls/bot/cs_bot_chatter.cpp:793 */
void BotPhraseManager::GetPlace(const char *name)
{
//	{
//		const_iterator iter;                                  //   798
//		end(const class list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   798
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   798
//		{
//			const class BotPhrase *phrase;              //   800
//		}
//	}
}

/* <30460a> ../cstrike/dlls/bot/cs_bot_chatter.cpp:793 */
void BotPhraseManager::GetPlace(const char *name)
{
//	{
//		const_iterator iter;                                  //   798
//		{
//			const class BotPhrase *phrase;              //   800
//		}
//	}
}

/* <304597> ../cstrike/dlls/bot/cs_bot_chatter.cpp:758 */
void BotPhraseManager::GetPhrase(const char *name)
{
//	{
//		const_iterator iter;                                  //   760
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   760
//		{
//			const class BotPhrase *phrase;              //   762
//		}
//	}
}

/* <3044b4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:732 */
void BotPhraseManager::IDToName( unsigned int id)
{
//	{
//		const_iterator iter;                                  //   734
//		{
//			const class BotPhrase *phrase;              //   746
//		}
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   744
//		end(const class list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   736
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   736
//		{
//			const class BotPhrase *phrase;              //   738
//		}
//	}
}

/* <3043ec> ../cstrike/dlls/bot/cs_bot_chatter.cpp:708 */
void BotPhraseManager::NameToID(const char *name)
{
//	{
//		const_iterator iter;                                  //   710
//		{
//			const class BotPhrase *phrase;              //   721
//		}
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   719
//		end(const class list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   712
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   712
//		{
//			const class BotPhrase *phrase;              //   714
//		}
//	}
}

/* <30438e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:708 */
void BotPhraseManager::NameToID(const char *name)
{
//	{
//		const_iterator iter;                                  //   710
//		{
//			const class BotPhrase *phrase;              //   714
//		}
//		{
//			const class BotPhrase *phrase;              //   721
//		}
//	}
}

/* <30409e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:682 */
void BotPhraseManager::~BotPhraseManager(void)
{
//	~list(list<BotPhrase*, std::allocator<BotPhrase*>>::~BotPhraseManager(//		int const __in_chrg);  //   682
//	{
//		iterator iter;                                        //   684
//		{ /* ~BotPhraseManager+0x20 */
//			class BotPhrase *phrase;                     //   689
//		}
//		operator++(_List_iterator<BotPhrase*> *const this);  //   687
//		end(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   694
//		{ /* ~BotPhraseManager+0x50 */
//			class BotPhrase *phrase;                     //   696
//		}
//		operator++(_List_iterator<BotPhrase*> *const this);  //   694
//		clear(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   701
//		clear(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   702
//	}
}

/* <304041> ../cstrike/dlls/bot/cs_bot_chatter.cpp:682 */
void BotPhraseManager::~BotPhraseManager(int const __in_chrg)
{
//	{
//		iterator iter;                                        //   684
//		{
//			class BotPhrase *phrase;                     //   689
//		}
//		{
//			class BotPhrase *phrase;                     //   696
//		}
//	}
}

/* <304026> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::clear(void)
{
}

/* <303c70> ../cstrike/dlls/bot/cs_bot_chatter.cpp:425 */
void BotPhraseManager::OnRoundRestart(void)
{
//	{
//		const_iterator iter;                                  //   431
//		end(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   433
//		Randomize(BotPhrase *const this);  //   434
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   433
//		Randomize(BotPhrase *const this);  //   437
//		operator++(_List_const_iterator<BotPhrase*> *const this);  //   436
//	}
}

/* <303c45> ../cstrike/dlls/bot/cs_bot_chatter.cpp:417 */
void BotPhraseManager::OnMapChange(void)
{
}

/* <303b3f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:409 */
void BotPhraseManager::BotPhraseManager(void)
{
//	list(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   409
//	list(list<BotPhrase*, std::allocator<BotPhrase*>> *const this);  //   409
//	PlaceTimeInfo(PlaceTimeInfo *const this);  //   409
}

/* <303b21> ../cstrike/dlls/bot/cs_bot_chatter.cpp:409 */
void BotPhraseManager::BotPhraseManager(void)
{
}

/* <303986> ../cstrike/dlls/bot/cs_bot_chatter.cpp:395 */
void BotPhrase::Randomize(void)
{
//	{
//		int i;                                                //   397
//		size(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this);  //   397
//		end(vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this);  //   399
//		begin(vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this);  //   399
//		random_shuffle<__gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>> >(__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __first,
//														class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __last);  //   399
//	}
}

/* <30395a> ../cstrike/dlls/bot/cs_bot_chatter.cpp:395 */
void BotPhrase::Randomize(void)
{
//	{
//		int i;                                                //   397
//	}
}

/* <303917> ../cstrike/dlls/bot/cs_bot_chatter.cpp:340 */
void BotPhrase::GetSpeakable( int bankIndex, float *duration)
{
//	{
//		int start;                                            //   351
//	}
}

/* <3036c2> ../cstrike/dlls/bot/cs_bot_chatter.cpp:314 */
void BotPhrase::~BotPhrase(void)
{
//	{ /* ~BotPhrase+0xb */
//		int bank;                                             //   316
//		size(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this);  //   316
//		{ /* ~BotPhrase+0x30 */
//			int speakable;                                //   318
//			operator[](vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this,
//					size_type __n);  //   318
//			size(const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this);  //   318
//			~BotSpeakable(BotSpeakable *const this,
//					int const __in_chrg);  //   320
//		}
//		~vector(vector<BotSpeakable*, std::allocator<BotSpeakable*>> *const this,
//			int const __in_chrg);  //   322
//	}
//	~vector(vector<int, std::allocator<int>> *const this,
//		int const __in_chrg);  //   314
//	~vector(vector<int, std::allocator<int>> *const this,
//		int const __in_chrg);  //   314
//	~vector(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this,
//		int const __in_chrg);  //   314
}

/* <303679> ../cstrike/dlls/bot/cs_bot_chatter.cpp:314 */
void BotPhrase::~BotPhrase(int const __in_chrg)
{
//	{
//		int bank;                                             //   316
//		{
//			int speakable;                                //   318
//		}
//	}
}

/* <303655> ../cstrike/dlls/bot/cs_bot_chatter.cpp:291 */
void BotSpeakable::~BotSpeakable(void)
{
}

/* <30362c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:291 */
void BotSpeakable::~BotSpeakable(int const __in_chrg)
{
}

/* <303609> ../cstrike/dlls/bot/cs_bot_chatter.cpp:285 */
void BotSpeakable::BotSpeakable(void)
{
}

/* <303541> ../cstrike/dlls/bot/cs_bot_chatter.cpp:62 */
void BotMeme::Transmit(CCSBot *sender)
{
//	{
//		int i;                                                //    64
//		{
//			class CBasePlayer *player;                   //    66
//			class CCSBot *bot;                           //    93
//			FNullEnt(entvars_t *pev);  //    71
//		}
//	}
}

/* <303469> ../cstrike/dlls/bot/cs_bot_chatter.cpp:32 */
/* linkage=_Z20GetRandomSpotAtPlacej */
const Vector *GetRandomSpotAtPlace(Place place)
{
//	{
//		int count;                                            //    34
//		iterator iter;                                        //    35
//		int which;                                            //    46
//		{
//			class CNavArea *area;                        //    38
//		}
//		operator++(_List_iterator<CNavArea*> *const this);  //    36
//		operator++(_List_iterator<CNavArea*> *const this);  //    47
//		{
//			class CNavArea *area;                        //    49
//		}
//	}
}

/* <302c87> ../cstrike/dlls/bot/cs_bot_chatter.cpp:167 */
void BotFollowMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		class PathCost pathCost;                              //   178
//		float travelDistance;                                 //   179
//		float const tooFar;                                    //   185
//	}
//	Interpret(const class BotFollowMeme *const this,
//			class CCSBot *sender,
//			class CCSBot *receiver);  //   167
}

/* <302b74> ../cstrike/dlls/bot/cs_bot.h:1120 */
inline void PathCost::operator()(CNavArea *area, class CNavArea *fromArea, const CNavLadder *ladder)
{
//	{
//		float baseDangerFactor;                               //  1122
//		float dangerFactor;                                   //  1125
//		{
//			float dist;                                   //  1143
//			float cost;                                   //  1160
//			{
//				float const ladderPenalty;             //  1147
//			}
//			{
//				float fallDistance;                   //  1170
//				float fallDamage;                     //  1171
//				{
//					float const deathFallMargin;   //  1176
//					float const painTolerance;     //  1181
//				}
//			}
//			{
//				float crouchPenalty;                  //  1195
//			}
//			{
//				float const jumpPenalty;               //  1209
//			}
//			{
//				float size;                           //  1224
//				{
//					float const costPerFriendPerUnit;  //  1230
//				}
//			}
//		}
//	}
}

/* <3029a9> ../cstrike/dlls/bot/cs_bot_chatter.cpp:269 */
void BotHostageBeingTakenMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	HostageWasTaken(CSGameState *const this);  //   271
//	Interpret(const class BotHostageBeingTakenMeme *const this,
//			class CCSBot *sender,
//			class CCSBot *receiver);  //   269
}

/* <302759> ../cstrike/dlls/bot/cs_bot_chatter.cpp:200 */
void BotDefendHereMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		Place place;                                          //   209
//	}
//	Interpret(const class BotDefendHereMeme *const this,
//			class CCSBot *sender,
//			class CCSBot *receiver);  //   200
}

/* <3025b5> ../cstrike/dlls/bot/cs_bot_chatter.cpp:256 */
void BotAllHostagesGoneMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	Say(class BotChatterInterface *const this,
//		const char *phraseName,
//		float lifetime,
//		float delay);  //   261
}

/* <302429> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2294 */
void BotChatterInterface::AnnouncePlan(const char *phraseName, Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2296
//		class BotStatement *say;                             //  2300
//		BotStatement(BotStatement *const this,
//				class BotChatterInterface *chatter,
//				enum BotStatementType type,
//				float expireDuration);  //  2300
//		GetPhrase(const class BotPhraseManager *const this,
//				const char *name);  //  2302
//		AppendPhrase(BotStatement *const this,
//				const class BotPhrase *phrase);  //  2302
//		SetPlace(BotStatement *const this,
//			Place where);  //  2303
//		SetStartTime(BotStatement *const this,
//				float timestamp);  //  2306
//	}
}

/* <3023df> ../cstrike/dlls/bot/cs_bot_chatter.cpp:758 */
void BotPhraseManager::GetPhrase(const char *name)
{
//	{
//		const_iterator iter;                                  //   760
//		{
//			const class BotPhrase *phrase;              //   762
//		}
//	}
}

/* <302346> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1381 */
void BotChatterInterface::AddStatement(BotStatement *statement, bool mustAdd)
{
//	{
//		class BotStatement *s;                               //  1403
//		class BotStatement *earlier;                         //  1428
//		GetVerbosity(const class BotChatterInterface *const this);  //  1384
//		IsImportant(const class BotStatement *const this);  //  1388
//	}
}

/* <30231a> ../cstrike/dlls/bot/cs_bot_chatter.cpp:891 */
void BotStatement::IsImportant(void)
{
//	{
//		int i;                                                //   894
//	}
}

/* <302288> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1381 */
void BotChatterInterface::AddStatement(BotStatement *statement, bool mustAdd)
{
//	{
//		class BotStatement *s;                               //  1403
//		class BotStatement *earlier;                         //  1428
//		IsRedundant(const class BotStatement *const this,
//				const class BotStatement *say);  //  1406
//		~BotStatement(BotStatement *const this,
//				int const __in_chrg);  //  1409
//	}
}

/* <30225f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:855 */
void BotStatement::~BotStatement(int const __in_chrg)
{
}

/* <30200e> ../cstrike/dlls/bot/cs_bot_chatter.cpp:950 */
void BotStatement::IsRedundant(BotStatement *say)
{
//	HasPlace(const class BotStatement *const this);  //   963
//	HasPlace(const class BotStatement *const this);  //   970
//	GetPlace(const class BotStatement *const this);  //   970
//	HasPlace(const class BotStatement *const this);  //   963
//	HasPlace(const class BotStatement *const this);  //   970
//	GetPlace(const class BotStatement *const this);  //   970
}

/* <301f6b> ../cstrike/dlls/bot/cs_bot_chatter.cpp:340 */
void BotPhrase::GetSpeakable( int bankIndex, float *duration)
{
//	{
//		int start;                                            //   351
//		{
//			BotSpeakableVector *speakables;              //   354
//			int &index;                             //   355
//			const class BotSpeakable *speak;            //   356
//			operator[](vector<int, std::allocator<int>> *const this,
//					size_type __n);  //   358
//		}
//		operator[](vector<int, std::allocator<int>> *const this,
//				size_type __n);  //   351
//	}
}

/* <301f03> ../cstrike/dlls/bot/cs_bot_chatter.cpp:104 */
void BotHelpMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		float const maxHelpRange;                              //   106
//	}
}

/* <301e97> ../cstrike/dlls/bot/cs_bot_chatter.h:604 */
inline void BotChatterInterface::Say(const char *phraseName, float lifetime, float delay)
{
//	{
//		class BotStatement *say;                             //   606
//	}
}

/* <301e44> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2312 */
void BotChatterInterface::GuardingHostages(Place place, bool isPlan)
{
//	{
//		class CCSBotManager *ctrl;                           //  2314
//		float const minInterval;                               //  2318
//	}
}

/* <301df1> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2294 */
void BotChatterInterface::AnnouncePlan(const char *phraseName, Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2296
//		class BotStatement *say;                             //  2300
//	}
}

/* <301cab> ../game_shared/bot/nav_area.h:679 */
bool NavAreaBuildPath<PathCost>(CNavArea *startArea, class CNavArea *goalArea, const Vector *goalPos, class PathCost &costFunc, class CNavArea ** closestArea)
{
//	{
//		Vector actualGoalPos;                           //   710
//		float initCost;                                       //   719
//		float closestAreaDist;                                //   729
//		{
//			class CNavArea *area;                        //   735
//			bool searchFloor;                             //   747
//			int dir;                                      //   748
//			const NavConnectList *floorList;            //   749
//			const_iterator floorIter;                     //   750
//			bool ladderUp;                                //   752
//			const NavLadderList *ladderList;            //   753
//			const_iterator ladderIter;                    //   754
//			int ladderTopDir;                             //   756
//			{
//				class CNavArea *newArea;             //   760
//				enum NavTraverseType how;             //   761
//				const class CNavLadder *ladder;     //   762
//				float newCostSoFar;                   //   859
//				{
//					float newCostRemaining;       //   873
//				}
//			}
//		}
//	}
}

/* <301c57> ../cstrike/dlls/bot/cs_bot_chatter.cpp:2028 */
void BotChatterInterface::GoingToPlantTheBomb(Place place)
{
//	{
//		class CCSBotManager *ctrl;                           //  2030
//		float const minInterval;                               //  2034
//		class BotStatement *say;                             //  2040
//	}
}

/* <301c32> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <301c05> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::push_back(const value_type &__x)
{
}

/* <301be7> ../cstrike/dlls/bot/cs_bot_chatter.cpp:285 */
void BotSpeakable::BotSpeakable(void)
{
}

/* <301b9d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <301b5b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
}

/* <301aff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<BotSpeakable**, BotSpeakable**, std::allocator<BotSpeakable*>>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result, class allocator<BotSpeakable*> &__alloc)
{
}

/* <301aaa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<BotSpeakable**, BotSpeakable**, BotSpeakable*>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result, class allocator<BotSpeakable*> &const)
{
}

/* <301a66> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
//	{
//	}
}

/* <301a24> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
}

/* <3019e2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
}

/* <301996> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
}

/* <30193a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <3018f1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<BotSpeakable*>(const class BotSpeakable **__first, const BotSpeakable **__last, class BotSpeakable ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <3018d6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<int, std::allocator<int>>::vector(void)
{
}

/* <3018bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this)
{
}

/* <30188e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void push_back(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this, const value_type &__x)
{
}

/* <301873> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::vector(void)
{
}

/* <301858> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void end(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this)
{
}

/* <301818> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<std::vector<BotSpeakable*>**, std::vector<std::vector<BotSpeakable*>*>>(const class __normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakablconst __lhs, const __normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakablconst __rhs)
{
}

/* <3017f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void begin(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this)
{
}

/* <3017ad> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void _M_check_len(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this, size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <301750> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
}

/* <3016f4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**, std::allocator<std::vector<BotSpeakable*>*>>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result, class allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> &__alloc)
{
}

/* <30169f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>*>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result, class allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> &const)
{
}

/* <30165b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
//	{
//	}
}

/* <301619> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
}

/* <3015d7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
}

/* <30158b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
}

/* <30152f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <3014e6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<std::vector<BotSpeakable*>*>(const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> **__first, const vector<BotSpeakable*, std::allocator<BotSpeakable*>> **__last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <3014b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<int, std::allocator<int>>::push_back(const value_type &__x)
{
}

/* <30149e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<int, std::allocator<int>>::end(void)
{
}

/* <30145e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<int*, std::vector<int>>(const class __normal_iterator<int*, std::vector<int, std::allocator<int>> > &__lhs, const __normal_iterator<int*, std::vector<int, std::allocator<int>> > &__rhs)
{
}

/* <30143d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<int, std::allocator<int>>::begin(void)
{
}

/* <3013f3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<int, std::allocator<int>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <301396> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<int*, int*>(int *__first, int *__last, int *__result)
{
}

/* <30133a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<int*, int*, std::allocator<int>>(int *__first, int *__last, int *__result, class allocator<int> &__alloc)
{
}

/* <3012e5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<int*, int*, int>(int *__first, int *__last, int *__result, class allocator<int> &const)
{
}

/* <3012a1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<int*, int*>(int *__first, int *__last, int *__result)
{
//	{
//	}
}

/* <30125f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<int*, int*>(int *__first, int *__last, int *__result)
{
}

/* <30121d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<int*, int*>(int *__first, int *__last, int *__result)
{
}

/* <3011d1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, int*, int*>(int *__first, int *__last, int *__result)
{
}

/* <301175> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, int*, int*>(int *__first, int *__last, int *__result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <30112c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<int>(const int *__first, const int *__last, int *__result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <3010e3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <3010a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <30108b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_get_node(void)
{
}

/* <30105f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<BotPhrase*>>::allocate( size_type __n, const void *)
{
}

/* <30103f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<BotPhrase*>>::max_size(void)
{
}

/* <300ff3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
}

/* <300fd2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<BotSpeakable**>(BotSpeakable ** __it)
{
}

/* <300f76> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, BotSpeakable**, BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last, class BotSpeakable ** __result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <300f55> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<BotSpeakable**>(BotSpeakable ** __it)
{
}

/* <300f0c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<BotSpeakable*>(const class BotSpeakable **__first, const BotSpeakable **__last, class BotSpeakable ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <300ec0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
}

/* <300e9f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __it)
{
}

/* <300e43> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <300e22> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __it)
{
}

/* <300dd9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<std::vector<BotSpeakable*>*>(const class vector<BotSpeakable*, std::allocator<BotSpeakable*>> **__first, const vector<BotSpeakable*, std::allocator<BotSpeakable*>> **__last, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <300d8d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, int*, int*>(int *__first, int *__last, int *__result)
{
}

/* <300d6c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<int*>(int *__it)
{
}

/* <300d10> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, int*, int*>(int *__first, int *__last, int *__result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <300cef> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<int*>(int *__it)
{
}

/* <300ca1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<int>(const int *__first, const int *__last, int *__result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <300c7a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_allocate( size_t __n)
{
}

/* <300c4e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<BotSpeakable*>::allocate( size_type __n, const void *)
{
}

/* <300c33> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::max_size(void)
{
}

/* <300c13> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_get_Tp_allocator(void)
{
}

/* <300bf3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<BotSpeakable*>::max_size(void)
{
}

/* <300bdb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(BotSpeakable ** __it)
{
}

/* <300bb2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:429 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::~list( int const __in_chrg)
{
}

/* <300b86> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<BotPhrase*>::operator!=(const _Self &__x)
{
}

/* <300b6b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<BotPhrase*>::operator++(void)
{
}

/* <300b30> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<BotPhrase*>::_List_iterator(void)
{
}

/* <300b0a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:371 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::~_List_base( int const __in_chrg)
{
}

/* <300ac0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <300a9a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<BotPhrase*>(BotPhrase *&const __r)
{
}

/* <300a7f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_get_Tp_allocator(void)
{
}

/* <300a5f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_get_Node_allocator(void)
{
}

/* <300a31> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<BotPhrase*>::allocator<std::_List_node<BotPhrase*>>(allocator<std::_List_node<BotPhrase*>> &const)
{
}

/* <300a0b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<BotPhrase*>::new_allocator(void)
{
}

/* <3009e8> ../cstrike/dlls/bot/cs_bot_chatter.h:288 */
inline void PlaceTimeInfo::PlaceTimeInfo(void)
{
}

/* <3009c7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::list(void)
{
}

/* <3009ac> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_List_base(void)
{
}

/* <300991> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_init(void)
{
}

/* <300976> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <30095b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<BotPhrase*>>::allocator(void)
{
}

/* <300940> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<BotPhrase*>>::new_allocator(void)
{
}

/* <300919> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _M_allocate(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this, size_t __n)
{
}

/* <3008ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::allocate( size_type __n, const void *)
{
}

/* <3008d2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void max_size(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this)
{
}

/* <3008b2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _M_get_Tp_allocator(const class _Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*,const this)
{
}

/* <300892> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::max_size(void)
{
}

/* <30087a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __it)
{
}

/* <30085f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::_Vector_base(void)
{
}

/* <300844> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <300829> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<BotSpeakable*>::allocator(void)
{
}

/* <30080e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<BotSpeakable*>::new_allocator(void)
{
}

/* <3007e7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<int, std::allocator<int>>::_M_allocate( size_t __n)
{
}

/* <3007bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<int>::allocate( size_type __n, const void *)
{
}

/* <300784> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:210 */
inline void max<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <300763> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<int, std::allocator<int>>::max_size(void)
{
}

/* <300743> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<int, std::allocator<int>>::_M_get_Tp_allocator(void)
{
}

/* <300723> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<int>::max_size(void)
{
}

/* <30070b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(int *__it)
{
}

/* <3006f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<int, std::allocator<int>>::_Vector_base(void)
{
}

/* <3006d5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <3006ba> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<int>::allocator(void)
{
}

/* <30069f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<int>::new_allocator(void)
{
}

/* <300684> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this)
{
}

/* <300669> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <30064e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::allocator(void)
{
}

/* <300633> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::new_allocator(void)
{
}

/* <3005fb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<BotPhrase*>::construct( pointer __p, const BotPhrase * &__val)
{
}

/* <3005ce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<BotPhrase*, std::allocator<BotPhrase*>>::_M_put_node(_List_node<BotPhrase*> *__p)
{
}

/* <3005a2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<BotPhrase*>>::deallocate( pointer __p, size_type)
{
}

/* <300577> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<BotPhrase*>::~allocator( int const __in_chrg)
{
}

/* <300551> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<BotPhrase*>::~new_allocator( int const __in_chrg)
{
}

/* <300536> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::end(void)
{
}

/* <30050a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:218 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(const iterator &__x)
{
}

/* <3004cd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algo.h:5065 */
inline void random_shuffle<__gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>> >(__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __first, class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __last)
{
//	{
//		class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __i;                                                   //  5073
//	}
}

/* <3004b2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::begin(void)
{
}

/* <300497> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::end(void)
{
}

/* <30047c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:740 */
inline void __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> >::operator++(void)
{
}

/* <300444> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:118 */
inline void iter_swap<__gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>>, __gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>> >(__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __a, class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __b)
{
//	{
//	}
}

/* <300404> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<BotSpeakable**, std::vector<BotSpeakable*>>(const class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__lhs, const __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__rhs)
{
}

/* <3003c4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:817 */
inline void operator!=<BotSpeakable**, std::vector<BotSpeakable*>>(const class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__lhs, const __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > &__rhs)
{
}

/* <300388> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:100 */
inline void iter_swap<__gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>>, __gnu_cxx::__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*>> >(__normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __a, class __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> > __b)
{
}

/* <300342> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:122 */
inline void swap<BotSpeakable*>(BotSpeakable *&const __a, class BotSpeakable *&const __b)
{
//	{
//		class BotSpeakable *__tmp;                           //   127
//	}
}

/* <30030c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<int, std::allocator<int>>::size(void)
{
}

/* <3002e6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void ~vector(vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this, int const __in_chrg)
{
}

/* <3002c0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<int, std::allocator<int>>::~vector( int const __in_chrg)
{
}

/* <30029a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::~vector( int const __in_chrg)
{
}

/* <30027f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_get_Tp_allocator(void)
{
}

/* <30023f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<BotSpeakable**, BotSpeakable*>(BotSpeakable ** __first, class BotSpeakable ** __last, class allocator<BotSpeakable*> &const)
{
}

/* <30020c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<BotSpeakable**>(BotSpeakable ** __first, class BotSpeakable ** __last)
{
}

/* <3001ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<BotSpeakable**>(BotSpeakable **, class BotSpeakable **)
{
}

/* <3001c7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::~_Vector_base( int const __in_chrg)
{
}

/* <30018f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<BotSpeakable*, std::allocator<BotSpeakable*>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <300163> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<BotSpeakable*>::deallocate( pointer __p, size_type)
{
}

/* <300136> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <30010b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<BotSpeakable*>::~allocator( int const __in_chrg)
{
}

/* <3000e5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<BotSpeakable*>::~new_allocator( int const __in_chrg)
{
}

/* <3000ca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<int, std::allocator<int>>::_M_get_Tp_allocator(void)
{
}

/* <30008a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<int*, int>(int *__first, int *__last, class allocator<int> &const)
{
}

/* <300057> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<int*>(int *__first, int *__last)
{
}

/* <300038> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<int*>(int *, int *)
{
}

/* <300012> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<int, std::allocator<int>>::~_Vector_base( int const __in_chrg)
{
}

/* <2fffda> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<int, std::allocator<int>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <2fffae> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<int>::deallocate( pointer __p, size_type)
{
}

/* <2fff81> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <2fff56> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<int>::~allocator( int const __in_chrg)
{
}

/* <2fff30> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<int>::~new_allocator( int const __in_chrg)
{
}

/* <2fff15> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _M_get_Tp_allocator(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this)
{
}

/* <2ffed5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<std::vector<BotSpeakable*>**, std::vector<BotSpeakable*>*>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last, class allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*> &const)
{
}

/* <2ffea2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __first, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** __last)
{
}

/* <2ffe83> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<std::vector<BotSpeakable*>**>(vector<BotSpeakable*, std::allocator<BotSpeakable*>> **, class vector<BotSpeakable*, std::allocator<BotSpeakable*>> **)
{
}

/* <2ffe5d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void ~_Vector_base(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this, int const __in_chrg)
{
}

/* <2ffe25> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _M_deallocate(_Vector_base<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this, pointer __p, size_t __n)
{
}

/* <2ffdf9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::deallocate( pointer __p, size_type)
{
}

/* <2ffdcc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <2ffda1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::~allocator( int const __in_chrg)
{
}

/* <2ffd7b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::~new_allocator( int const __in_chrg)
{
}

/* <2ffd1c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:167 */
void BotFollowMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		class PathCost pathCost;                              //   178
//		float travelDistance;                                 //   179
//		float const tooFar;                                    //   185
//	}
}

/* <2ffcb1> ../game_shared/bot/nav_area.h:914 */
float NavAreaTravelDistance<PathCost>(CNavArea *startArea, class CNavArea *endArea, class PathCost &costFunc)
{
//	{
//		float distance;                                       //   930
//		{
//			class CNavArea *area;                        //   931
//		}
//	}
}

/* <2ffc78> ../cstrike/dlls/bot/cs_bot.h:1114 */
inline void PathCost::PathCost(CCSBot *bot, RouteType route)
{
}

/* <2ffc6f> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <2ffc52> ../game_shared/bot/nav_area.h:468 */
inline void CNavArea::AddToClosedList(void)
{
}

/* <2ffc35> ../game_shared/bot/nav_area.h:460 */
inline void CNavArea::IsClosed(void)
{
}

/* <2ffc1a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <2ffbcd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<CNavLadder*>::operator==(const _Self &__x)
{
}

/* <2ffbb2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <2ffb97> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <2ffb55> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <2ffb23> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:262 */
inline void _List_const_iterator<NavConnect>::operator==(const _Self &__x)
{
}

/* <2ffb08> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <2ffaed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <2ffac6> ../game_shared/bot/nav_area.h:240 */
inline void CNavArea::GetAdjacentList(NavDirType dir)
{
}

/* <2ffaa8> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <2ffa88> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <2ffa5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2ffa30> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<BotPhrase*>::destroy( pointer __p)
{
}

/* <2ffa02> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:309 */
inline void _List_impl::~_List_impl( int const __in_chrg)
{
}

/* <2ff9d7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::_List_node<BotPhrase*>>::~allocator( int const __in_chrg)
{
}

/* <2ff9ac> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::_List_node<BotPhrase*>>::~new_allocator( int const __in_chrg)
{
}

/* <2ff991> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> >::base(void)
{
}

/* <2ff95f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator(__normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakable*, stconst this, const vector<BotSpeakable*, std::allocator<BotSpeakable*>> ** &__i)
{
}

/* <2ff93f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void base(const class __normal_iterator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>**, std::vector<std::vector<BotSpeakablconst this)
{
}

/* <2ff90d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<int*, std::vector<int, std::allocator<int>> >::__normal_iterator(const int * &__i)
{
}

/* <2ff8ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<int*, std::vector<int, std::allocator<int>> >::base(void)
{
}

/* <2ff8d2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(void)
{
}

/* <2ff8b4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1708 */
void BotChatterInterface::GetRadioSilenceDuration(void)
{
}

/* <2ff876> ../cstrike/dlls/bot/cs_bot_chatter.h:335 */
inline void BotPhraseManager::ResetPlaceStatementInterval( Place place)
{
//	{
//		int index;                                            //   337
//	}
}

/* <2ff83d> ../cstrike/dlls/bot/cs_bot_chatter.h:319 */
inline void BotPhraseManager::GetPlaceStatementInterval(Place place)
{
//	{
//		int index;                                            //   321
//	}
}

/* <2ff81b> ../cstrike/dlls/bot/cs_bot_chatter.h:130 */
inline void BotRequestReportMeme::BotRequestReportMeme(void)
{
}

/* <2ff7ef> ../cstrike/dlls/bot/cs_bot_chatter.h:53 */
inline void BotHelpMeme::BotHelpMeme( Place place)
{
}

/* <2ff7b7> ../cstrike/dlls/bot/cs_bot_chatter.cpp:114 */
void BotBombsiteStatusMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
}

/* <2ff77f> ../cstrike/dlls/bot/cs_bot_chatter.cpp:137 */
void BotBombStatusMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
}

/* <2ff75d> ../cstrike/dlls/bot/cs_bot_chatter.h:101 */
inline void BotFollowMeme::BotFollowMeme(void)
{
}

/* <2ff731> ../cstrike/dlls/bot/cs_bot_chatter.h:111 */
inline void BotDefendHereMeme::BotDefendHereMeme(Vector *pos)
{
}

/* <2ff716> ../cstrike/dlls/vector.h:119 */
inline void Vector::LengthSquared(void)
{
}

/* <2ff6de> ../cstrike/dlls/bot/cs_bot_chatter.h:87 */
inline void BotBombStatusMeme::BotBombStatusMeme(BombState state, const Vector *pos)
{
}

/* <2ff6be> ../cstrike/dlls/bot/cs_bot_manager.h:164 */
inline void CCSBotManager::GetLooseBomb(void)
{
}

/* <2ff696> ../cstrike/dlls/bot/cs_bot_chatter.h:123 */
inline void BotWhereBombMeme::BotWhereBombMeme(void)
{
}

/* <2ff65e> ../cstrike/dlls/bot/cs_bot_chatter.h:70 */
inline void BotBombsiteStatusMeme::BotBombsiteStatusMeme( int zoneIndex, StatusType status)
{
}

/* <2ff639> ../cstrike/dlls/bot/cs_bot_manager.h:106 */
inline void CCSBotManager::GetZone(int i)
{
}

/* <2ff607> ../game_shared/bot/bot_util.h:162 */
inline void IntervalTimer::IsLessThen(float duration)
{
}

/* <2ff5dd> ../cstrike/dlls/bot/cs_bot_chatter.cpp:872 */
void BotStatement::AttachMeme(BotMeme *meme)
{
}

/* <2ff5bb> ../cstrike/dlls/bot/cs_bot_chatter.h:144 */
inline void BotHostageBeingTakenMeme::BotHostageBeingTakenMeme(void)
{
}

/* <2ff565> ../cstrike/dlls/bot/cs_bot_chatter.cpp:200 */
void BotDefendHereMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
//	{
//		Place place;                                          //   209
//		{
//			const Vector *spot;                   //   213
//		}
//	}
}

/* <2ff532> ../cstrike/dlls/bot/cs_bot.h:426 */
inline void CCSBot::SetTask(TaskType task, CBaseEntity *entity)
{
}

/* <2ff4f4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:269 */
void BotHostageBeingTakenMeme::Interpret(CCSBot *sender, class CCSBot *receiver)
{
}

/* <2ff4cd> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <2ff4a3> ../cstrike/dlls/bot/cs_bot_chatter.cpp:881 */
void BotStatement::AddCondition(ConditionType condition)
{
}

/* <2ff459> ../cstrike/dlls/bot/cs_bot_chatter.cpp:811 */
void BotPhraseManager::GetPlace( PlaceCriteria place)
{
//	{
//		const_iterator iter;                                  //   816
//		{
//			const class BotPhrase *phrase;              //   818
//		}
//	}
}

/* <2ff42c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotPhrase*>::operator!=(const _Self &__x)
{
}

/* <2ff411> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::end(void)
{
}

/* <2ff3f6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotPhrase*>::operator++(void)
{
}

/* <2ff3b6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::begin(void)
{
}

/* <2ff38a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2ff34d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<BotSpeakable*>::construct( pointer __p, const BotSpeakable * &__val)
{
}

/* <2ff32d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::begin(void)
{
}

/* <2ff301> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<BotPhrase*>::_List_iterator(_List_node_base *__x)
{
}

/* <2ff2cf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:772 */
inline void __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> >::operator+(const difference_type &__n)
{
}

/* <2ff29d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<BotSpeakable**, std::vector<BotSpeakable*, std::allocator<BotSpeakable*>> >::__normal_iterator(BotSpeakable ** &__i)
{
}

/* <2ff260> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*>::construct( pointer __p, const vector<BotSpeakable*, std::allocator<BotSpeakable*>> * &__val)
{
}

/* <2ff223> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<int>::construct( pointer __p, const int &__val)
{
}

/* <2ff1f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CNavArea*>::operator!=(const _Self &__x)
{
}

/* <2ff1dc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::end(void)
{
}

/* <2ff1c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CNavArea*>::operator++(void)
{
}

/* <2ff186> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CNavArea*>::_List_iterator(void)
{
}

/* <2ff166> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::begin(void)
{
}

/* <2ff13a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CNavArea*>::_List_iterator(_List_node_base *__x)
{
}

/* <2ff11a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <2ff0ee> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2ff068> ../cstrike/dlls/bot/cs_bot_chatter.cpp:340 */
void BotPhrase::GetSpeakable( int bankIndex, float *duration)
{
//	{
//		int start;                                            //   351
//		{
//			BotSpeakableVector *speakables;              //   354
//			int &index;                             //   355
//			const class BotSpeakable *speak;            //   356
//		}
//	}
}

/* <2ff03b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:695 */
inline void vector<int, std::allocator<int>>::operator[]( size_type __n)
{
}

/* <2ff00e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:710 */
inline void vector<int, std::allocator<int>>::operator[](size_type __n)
{
}

/* <2fefe6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:695 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::operator[]( size_type __n)
{
}

/* <2fefc6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<BotSpeakable*, std::allocator<BotSpeakable*>>::size(void)
{
}

/* <2fef99> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:695 */
inline void operator[](vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::allocaconst this, size_type __n)
{
}

/* <2fef79> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void size(const class vector<std::vector<BotSpeakable*, std::allocator<BotSpeakable*>>*, std::allocator<std::vector<BotSpeakable*, std::const this)
{
}

/* <2fef37> ../cstrike/dlls/bot/cs_bot_chatter.cpp:830 */
void BotStatement::BotStatement(BotChatterInterface *chatter, BotStatementType type, float expireDuration)
{
}

/* <2fef19> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1714 */
void BotChatterInterface::ResetRadioSilenceDuration(void)
{
}

/* <2feefe> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <2feea8> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1381 */
void BotChatterInterface::AddStatement(BotStatement *statement, bool mustAdd)
{
//	{
//		class BotStatement *s;                               //  1403
//		class BotStatement *earlier;                         //  1428
//	}
}

/* <2fee7d> ../cstrike/dlls/bot/cs_bot_chatter.cpp:950 */
void BotStatement::IsRedundant(BotStatement *say)
{
}

/* <2fee62> ../cstrike/dlls/bot/cs_bot_chatter.h:373 */
inline void BotStatement::HasPlace(void)
{
}

/* <2fee36> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1266 */
void BotStatement::GetPlace(void)
{
//	{
//		int i;                                                //  1273
//	}
}

/* <2fee0c> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1052 */
void BotStatement::AppendPhrase(ContextType contextPhrase)
{
}

/* <2fede2> ../cstrike/dlls/bot/cs_bot_chatter.cpp:1037 */
void BotStatement::AppendPhrase(const class BotPhrase *phrase)
{
}

/* <2fedc2> ../cstrike/dlls/bot/cs_bot.h:394 */
inline void CCSBot::GetGameState(void)
{
}

/* <2feda4> ../cstrike/dlls/bot/cs_bot_chatter.cpp:863 */
void BotStatement::GetOwner(void)
{
}

/* <2fed6a> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <2fed4f> ../cstrike/dlls/bot/cs_bot.h:698 */
inline void CCSBot::GetHostageEscortCount(void)
{
}

/* <2fed34> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <2fed19> ../cstrike/dlls/bot/cs_bot.h:544 */
inline void CCSBot::GetEnemyDeathTimestamp(void)
{
}

/* <2fecfe> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <2fece3> ../cstrike/dlls/bot/cs_bot.h:539 */
inline void CCSBot::GetTimeSinceLastSawEnemy(void)
{
}

/* <2fecc8> ../cstrike/dlls/bot/cs_bot.h:519 */
inline void CCSBot::GetNearbyFriendCount(void)
{
}

/* <2fecad> ../cstrike/dlls/bot/cs_bot.h:515 */
inline void CCSBot::GetEnemyPlace(void)
{
}

/* <2fec92> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <2fec72> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <2fec4a> ../cstrike/dlls/bot/cs_bot_chatter.h:590 */
inline void BotChatterInterface::IsTalking(void)
{
}

/* <2fec2d> ../cstrike/dlls/bot/cs_bot_chatter.h:572 */
inline void BotChatterInterface::GetVerbosity(void)
{
}

/* <2fec0d> ../cstrike/dlls/bot/cs_bot_chatter.h:482 */
inline void BotChatterInterface::GetOwner(void)
{
}

/* <2febf2> ../cstrike/dlls/bot/cs_bot_chatter.h:412 */
inline void BotStatement::GetTimestamp(void)
{
}

/* <2febd7> ../cstrike/dlls/bot/cs_bot_chatter.h:411 */
inline void BotStatement::IsSpeaking(void)
{
}

/* <2febbc> ../cstrike/dlls/bot/cs_bot_chatter.h:386 */
inline void BotStatement::GetStartTime(void)
{
}

/* <2feb95> ../cstrike/dlls/bot/cs_bot_chatter.h:385 */
inline void BotStatement::SetStartTime( float timestamp)
{
}

/* <2feb6e> ../cstrike/dlls/bot/cs_bot_chatter.h:375 */
inline void BotStatement::SetPlace( Place where)
{
}

/* <2feb53> ../cstrike/dlls/bot/cs_bot_chatter.h:371 */
inline void BotStatement::GetSubject(void)
{
}

/* <2feb27> ../cstrike/dlls/bot/cs_bot_chatter.h:370 */
inline void BotStatement::SetSubject( int playerID)
{
}

/* <2feb0c> ../cstrike/dlls/bot/cs_bot_chatter.h:369 */
inline void BotStatement::HasSubject(void)
{
}

/* <2feaec> ../cstrike/dlls/bot/cs_bot_chatter.h:366 */
inline void BotStatement::GetType(void)
{
}

/* <2fead1> ../game_shared/bot/bot_util.h:136 */
inline void IntervalTimer::Reset(void)
{
}

/* <2fea95> ../cstrike/dlls/bot/cs_bot_chatter.h:298 */
inline void BotPhraseManager::FindPlaceIndex(Place where)
{
//	{
//		int i;                                                //   300
//	}
}

/* <2fea7a> ../game_shared/bot/bot_util.h:146 */
inline void IntervalTimer::Invalidate(void)
{
}

/* <2fea52> ../cstrike/dlls/bot/cs_bot_chatter.h:250 */
inline void BotPhrase::SetCountCriteria(CountCriteria count)
{
}

/* <2fea2a> ../cstrike/dlls/bot/cs_bot_chatter.h:245 */
inline void BotPhrase::SetPlaceCriteria(PlaceCriteria place)
{
}

/* <2fea0e> ../cstrike/dlls/bot/cs_bot_chatter.h:239 */
inline void BotPhrase::ClearCriteria(void)
{
}

/* <2fe9f3> ../cstrike/dlls/bot/cs_bot_chatter.h:211 */
inline void BotPhrase::IsPlace(void)
{
}

/* <2fe9d8> ../cstrike/dlls/bot/cs_bot_chatter.h:209 */
inline void BotPhrase::IsImportant(void)
{
}

/* <2fe9bd> ../cstrike/dlls/bot/cs_bot_chatter.h:208 */
inline void BotPhrase::GetRadioEquivalent(void)
{
}

/* <2fe99d> ../cstrike/dlls/bot/cs_bot_chatter.h:207 */
inline void BotPhrase::GetID(void)
{
}

/* <2fe97b> ../cstrike/dlls/bot/cs_bot_chatter.h:42 */
inline void BotMeme::BotMeme(void)
{
}

/* <2fe95b> ../cstrike/dlls/bot/cs_gamestate.h:82 */
inline void CSGameState::HostageWasTaken(void)
{
}

/* <2fe940> ../cstrike/dlls/bot/cs_gamestate.h:46 */
inline void CSGameState::IsBombLoose(void)
{
}

/* <2fe920> ../cstrike/dlls/bot/cs_gamestate.h:45 */
inline void CSGameState::IsBombMoving(void)
{
}

/* <2fe905> ../cstrike/dlls/bot/cs_bot_manager.h:198 */
inline void CCSBotManager::IsRoundOver(void)
{
}

/* <2fe8ea> ../cstrike/dlls/bot/cs_bot_manager.h:178 */
inline void CCSBotManager::GetElapsedRoundTime(void)
{
}

/* <2fe8ca> ../cstrike/dlls/bot/cs_bot_manager.h:177 */
inline void CCSBotManager::GetRoundStartTime(void)
{
}

/* <2fe8a4> ../game_shared/bot/bot_profile.h:81 */
inline void BotProfile::GetVoiceBank(void)
{
}

/* <2fe889> ../game_shared/bot/bot_profile.h:78 */
inline void BotProfile::GetVoicePitch(void)
{
}

/* <2fe869> ../game_shared/bot/bot_profile.h:65 */
inline void BotProfile::GetAggression(void)
{
}

/* <2fe84c> ../game_shared/bot/nav_area.h:473 */
inline void CNavArea::RemoveFromClosedList(void)
{
}

/* <2fe82f> ../game_shared/bot/nav_area.h:435 */
inline void CNavArea::IsOpen(void)
{
}

/* <2fe814> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <2fe7ed> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <2fe7d2> ../game_shared/bot/nav_area.h:308 */
inline void CNavArea::GetTotalCost(void)
{
}

/* <2fe7ab> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <2fe790> ../game_shared/bot/nav_area.h:291 */
inline void CNavArea::GetParent(void)
{
}

/* <2fe75c> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <2fe741> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <2fe726> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <2fe70b> ../game_shared/bot/nav_area.h:267 */
inline void CNavArea::GetSizeY(void)
{
}

/* <2fe6f0> ../game_shared/bot/nav_area.h:266 */
inline void CNavArea::GetSizeX(void)
{
}

/* <2fe6d5> ../game_shared/bot/nav_area.h:219 */
inline void CNavArea::GetPlace(void)
{
}

/* <2fe6b5> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <2fe68b> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2fe661> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2fe637> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2fe61c> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2fe5fc> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <2fe5d1> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <2fe5b6> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <2fe596> ../game_shared/bot/bot_util.h:131 */
inline void IntervalTimer::IntervalTimer(void)
{
}

/* <2fe576> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <2fe55b> ../game_shared/bot/bot_util.h:157 */
inline void IntervalTimer::GetElapsedTime(void)
{
}

/* <2fe53b> ../game_shared/bot/bot_util.h:151 */
inline void IntervalTimer::HasStarted(void)
{
}

/* <2fe4de> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2fe48c> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2fe43c> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2fe3fd> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2fe3a8> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2fe2e8> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2fe2b9> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2fe299> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2fe24a> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2eaa1d> ../cstrike/dlls/bot/cs_bot.cpp:1116 */
void CCSBot::GetRangeToFarthestEscortedHostage(void)
{
//	{
//		class FarthestHostage away;                           //  1118
//		ForEachHostage<FarthestHostage>(const class CHostageManager *const this,
//						class FarthestHostage &func);  //  1120
//	}
}

/* <2e9c1f> ../cstrike/dlls/bot/cs_bot.cpp:1066 */
/* linkage=_Z21FindNearbyRetreatSpotP6CCSBotf */
const Vector *FindNearbyRetreatSpot(CCSBot *me, float maxRange)
{
//	{
//		class CNavArea *area;                                //  1068
//		class CollectRetreatSpotsFunctor collector;           //  1073
//		int which;                                            //  1080
//		SearchSurroundingAreas<CollectRetreatSpotsFunctor>(CNavArea *startArea,
//									const Vector *startPos,
//									class CollectRetreatSpotsFunctor &func,
//									float maxRange);  //  1074
//	}
}

/* <2e9bbc> ../cstrike/dlls/bot/cs_bot.cpp:1013 */
inline void CollectRetreatSpotsFunctor::operator()(CNavArea *area)
{
//	{
//		const HidingSpotList *list;                         //  1016
//		{
//			const_iterator iter;                          //  1018
//			{
//				const class HidingSpot *spot;       //  1020
//				class CBasePlayer *owner;            //  1040
//			}
//		}
//	}
}

/* <2e9b26> ../cstrike/dlls/bot/cs_bot.cpp:980 */
void CCSBot::GuardRandomZone(float range)
{
//	{
//		class CCSBotManager *ctrl;                           //   982
//		const class Zone *zone;                             //   984
//		GetRandomZone(const class CCSBotManager *const this);  //   984
//		{
//			class CNavArea *rescueArea;                  //   987
//		}
//	}
}

/* <2e9ad0> ../cstrike/dlls/bot/cs_bot.cpp:970 */
void CCSBot::HasNotSeenEnemyForLongTime(void)
{
//	{
//		float const longTime;                                  //   972
//		GetTimeSinceLastSawEnemy(const class CCSBot *const this);  //   973
//	}
}

/* <2e9a8f> ../cstrike/dlls/bot/cs_bot.cpp:954 */
void CCSBot::AdjustSafeTime(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   956
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //   959
//	}
}

/* <2e9a3e> ../cstrike/dlls/bot/cs_bot.cpp:943 */
void CCSBot::GetSafeTimeRemaining(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   945
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //   947
//	}
}

/* <2e99d8> ../cstrike/dlls/bot/cs_bot.cpp:934 */
void CCSBot::IsEndOfSafeTime(void)
{
//	IsSafe(const class CCSBot *const this);  //   936
}

/* <2e9987> ../cstrike/dlls/bot/cs_bot.cpp:920 */
void CCSBot::IsWellPastSafe(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   922
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //   924
//	}
}

/* <2e9942> ../cstrike/dlls/bot/cs_bot.cpp:906 */
void CCSBot::IsSafe(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   908
//		GetElapsedRoundTime(const class CCSBotManager *const this);  //   910
//	}
}

/* <2e98f1> ../cstrike/dlls/bot/cs_bot.cpp:882 */
void CCSBot::IsHurrying(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   887
//		IsElapsed(const class CountdownTimer *const this);  //   884
//	}
}

/* <2e984c> ../cstrike/dlls/bot/cs_bot.cpp:857 */
void CCSBot::IsRogue(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   859
//		AllowRogues(const class CCSBotManager *const this);  //   860
//		IsElapsed(const class CountdownTimer *const this);  //   864
//		{
//			float const rogueChance;                       //   869
//			Start(CountdownTimer *const this,
//				float duration);  //   866
//		}
//	}
}

/* <2e9824> ../cstrike/dlls/bot/cs_bot.cpp:845 */
void CCSBot::DecreaseMorale(void)
{
}

/* <2e97fc> ../cstrike/dlls/bot/cs_bot.cpp:835 */
void CCSBot::IncreaseMorale(void)
{
}

/* <2e979b> ../cstrike/dlls/bot/cs_bot.cpp:826 */
void CCSBot::IgnoreEnemies(float duration)
{
//	Start(CountdownTimer *const this,
//		float duration);  //   828
}

/* <2e9762> ../cstrike/dlls/bot/cs_bot.cpp:814 */
void CCSBot::GetDisposition(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //   816
}

/* <2e9719> ../cstrike/dlls/bot/cs_bot.cpp:801 */
void CCSBot::SetDisposition(DispositionType disposition)
{
//	Invalidate(CountdownTimer *const this);  //   806
}

/* <2e95cb> ../cstrike/dlls/bot/cs_bot.cpp:744 */
void CCSBot::GetImportantEnemy( bool checkVisibility)
{
//	{
//		class CCSBotManager *ctrl;                           //   746
//		class CBasePlayer *nearEnemy;                        //   747
//		float nearDist;                                       //   748
//		{
//			int i;                                        //   750
//			{
//				class CBaseEntity *entity;           //   752
//				class CBasePlayer *player;           //   767
//				Vector d;                       //   782
//				float distSq;                         //   783
//				FNullEnt(entvars_t *pev);  //   757
//				operator-(const Vector *const this,
//						const Vector &v);  //   782
//			}
//		}
//	}
}

/* <2e94a0> ../cstrike/dlls/bot/cs_bot.cpp:731 */
void CCSBot::OutnumberedCount(void)
{
//	IsOutnumbered(const class CCSBot *const this);  //   733
//	GetNearbyEnemyCount(const class CCSBot *const this);  //   734
//	GetNearbyFriendCount(const class CCSBot *const this);  //   734
}

/* <2e940d> ../cstrike/dlls/bot/cs_bot.cpp:722 */
void CCSBot::IsOutnumbered(void)
{
//	GetNearbyFriendCount(const class CCSBot *const this);  //   724
//	GetNearbyEnemyCount(const class CCSBot *const this);  //   724
}

/* <2e93f4> ../cstrike/dlls/bot/cs_bot.cpp:722 */
void CCSBot::IsOutnumbered(void)
{
}

/* <2e92b8> ../cstrike/dlls/bot/cs_bot.cpp:693 */
void CCSBot::UpdateHostageEscortCount(void)
{
//	{
//		float const updateInterval;                            //   695
//		{
//			class CHostage *hostage;                     //   704
//			IsValid(CHostage *const this);  //   709
//			IsFollowing(CHostage *const this,
//					const class CBaseEntity *entity);  //   713
//			edict(CBaseEntity *const this);  //   705
//			FNullEnt(const edict_t *pent);  //   705
//		}
//	}
}

/* <2e9240> ../cstrike/dlls/bot/cs_bot.cpp:651 */
void CCSBot::SetHidingSpotCheckTimestamp(HidingSpot *spot)
{
//	{
//		int leastRecent;                                      //   653
//		float leastRecentTime;                                //   654
//		{
//			int i;                                        //   656
//		}
//	}
}

/* <2e91f1> ../cstrike/dlls/bot/cs_bot.cpp:637 */
void CCSBot::GetHidingSpotCheckTimestamp(HidingSpot *spot)
{
//	{
//		int i;                                                //   639
//	}
}

/* <2e91b7> ../cstrike/dlls/bot/cs_bot.cpp:622 */
void CCSBot::GetOffLadder(void)
{
//	DestroyPath(CCSBot *const this);  //   627
}

/* <2e918e> ../cstrike/dlls/bot/cs_bot.cpp:610 */
void CCSBot::GetAttacker(void)
{
}

/* <2e9140> ../cstrike/dlls/bot/cs_bot.cpp:588 */
void CCSBot::CanSeePlantedBomb(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   590
//		const Vector *bombPos;                        //   598
//	}
}

/* <2e90d4> ../cstrike/dlls/bot/cs_bot.cpp:566 */
void CCSBot::CanSeeLooseBomb(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   568
//		class CBaseEntity *bomb;                             //   573
//		GetLooseBomb(CCSBotManager *const this);  //   573
//	}
}

/* <2e9070> ../cstrike/dlls/bot/cs_bot.cpp:544 */
void CCSBot::NoticeLooseBomb(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   546
//		class CBaseEntity *bomb;                             //   551
//		GetLooseBomb(CCSBotManager *const this);  //   551
//	}
}

/* <2e9047> ../cstrike/dlls/bot/cs_bot.cpp:527 */
void CCSBot::IsDoingScenario(void)
{
}

/* <2e8e39> ../cstrike/dlls/bot/cs_bot.cpp:97 */
void CCSBot::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		class CBaseEntity *attacker;                         //    99
//		GetClassPtr<CBaseEntity>(CBaseEntity *a);  //    99
//		{
//			class CBasePlayer *player;                   //   104
//		}
//		{
//			class CBasePlayer *lastAttacker;             //   113
//			float lastAttackedTimestamp;                  //   114
//			AdjustSafeTime(CCSBot *const this);  //   121
//			IsSurprised(const class CCSBot *const this);  //   124
//			{
//				class CBasePlayer *enemy;            //   126
//				bool panic;                           //   127
//				{
//					float invSkill;               //   148
//					float panicChance;            //   149
//				}
//			}
//		}
//	}
}

/* <2e8e10> ../cstrike/dlls/bot/cs_bot.cpp:954 */
void CCSBot::AdjustSafeTime(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   956
//	}
}

/* <2e8c56> ../cstrike/dlls/bot/cs_bot.cpp:450 */
void CCSBot::Panic(CBasePlayer *enemy)
{
//	{
//		class Vector2D dir;                                   //   456
//		class Vector2D perp;                                  //   457
//		Vector spot;                                    //   459
//		IsSurprised(const class CCSBot *const this);  //   453
//		{
//			class Vector2D toEnemy;                       //   473
//			float along;                                  //   476
//			float c45;                                    //   477
//			float size;                                   //   478
//			float shift;                                  //   479
//			NormalizeInPlace(Vector2D *const this);  //   474
//			DotProduct(const class Vector2D &a,
//					const class Vector2D &b);  //   476
//			{
//				float side;                           //   495
//				DotProduct(const class Vector2D &a,
//						const class Vector2D &b);  //   495
//			}
//		}
//		{
//			float const offset;                            //   464
//			float side;                                   //   465
//		}
//	}
}

/* <2e8af6> ../cstrike/dlls/bot/cs_bot.cpp:400 */
void CCSBot::StayOnNavMesh(void)
{
//	{
//		class CNavArea *goalArea;                            //   408
//		{
//			Vector pos;                             //   422
//			Vector to;                              //   426
//			float const stepInDist;                        //   429
//			operator-(const Vector *const this,
//					const Vector &v);  //   426
//			NormalizeInPlace(Vector *const this);  //   427
//			operator*(float fl,
//					const Vector &v);  //   430
//			operator+(const Vector *const this,
//					const Vector &v);  //   430
//		}
//	}
}

/* <2e8abd> ../cstrike/dlls/bot/cs_bot.cpp:385 */
void CCSBot::SetEnemy(CBasePlayer *enemy)
{
}

/* <2e8a34> ../cstrike/dlls/bot/cs_bot.cpp:358 */
void CCSBot::FindNearbyPlayer(void)
{
//	{
//		class CBaseEntity *pEntity;                          //   360
//		Vector vecSrc;                                  //   361
//		float flRadius;                                       //   362
//		Vector(Vector *const this,
//			const Vector &v);  //   361
//	}
}

/* <2e8a0c> ../cstrike/dlls/bot/cs_bot.cpp:351 */
void CCSBot::BotDeathThink(void)
{
}

/* <2e89e3> ../cstrike/dlls/bot/cs_bot.cpp:335 */
void CCSBot::IsBusy(void)
{
}

/* <2e87d9> ../cstrike/dlls/bot/cs_bot.cpp:253 */
void CCSBot::BotTouch(CBaseEntity *other)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   297
//	{
//		Vector center;                                  //   299
//		class Extent extent;                                  //   301
//		bool breakIt;                                         //   307
//		operator+(const Vector *const this,
//				const Vector &v);  //   299
//		{
//			Vector goal;                            //   312
//			Vector(Vector *const this,
//				const Vector &v);  //   312
//			IsIntersectingBox(const Vector *start,
//						const Vector *end,
//						const Vector *boxMin,
//						const Vector *boxMax);  //   314
//		}
//		operator/(const Vector *const this,
//				float fl);  //   299
//	}
//	{
//		class CBasePlayer *player;                           //   269
//		unsigned int otherPri;                                //   272
//		unsigned int myPri;                                   //   275
//		{
//			unsigned int avoidPri;                        //   284
//		}
//	}
}

/* <2e8769> ../cstrike/dlls/bot/cs_bot.cpp:171 */
void CCSBot::Killed(entvars_t *pevAttacker, int iGib)
{
//	{
//		float const deathDanger;                               //   178
//		float const deathDangerRadius;                         //   179
//	}
}

/* <2e8732> ../cstrike/dlls/bot/cs_bot.cpp:80 */
void CCSBot::Jump(bool mustJump)
{
}

/* <2e86df> ../cstrike/dlls/bot/cs_bot.cpp:62 */
void CCSBot::Walk(void)
{
//	IsElapsed(const class CountdownTimer *const this);  //    64
//	Walk(CBot *const this);  //    66
}

/* <2e85c8> ../cstrike/dlls/bot/cs_bot.cpp:24 */
/* linkage=_Z17GetBotFollowCountP11CBasePlayer */
int GetBotFollowCount(CBasePlayer *leader)
{
//	{
//		int count;                                            //    26
//		{
//			int i;                                        //    28
//			{
//				class CBaseEntity *entity;           //    30
//				class CBasePlayer *player;           //    41
//				class CCSBot *bot;                   //    49
//				FNullEnt(entvars_t *pev);  //    35
//				GetFollowLeader(CCSBot *const this);  //    50
//			}
//		}
//	}
}

/* <2e8587> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2e849c> ../game_shared/bot/nav_area.h:1028 */
void SearchSurroundingAreas<CollectRetreatSpotsFunctor>(CNavArea *startArea, const Vector *startPos, class CollectRetreatSpotsFunctor &func, float maxRange)
{
//	{
//		class CNavArea *area;                                //  1045
//		{
//			const_iterator ladderIt;                      //  1064
//			const NavLadderList *ladderList;            //  1067
//			{
//				int dir;                              //  1051
//				{
//					int count;                    //  1053
//					{
//						int i;                //  1054
//						{
//							class CNavArea *adjArea;           //  1056
//						}
//					}
//				}
//			}
//			{
//				const class CNavLadder *ladder;     //  1072
//			}
//			{
//				const class CNavLadder *ladder;     //  1093
//			}
//		}
//	}
}

/* <2e8465> ../cstrike/dlls/bot/cs_bot.cpp:1004 */
inline void CollectRetreatSpotsFunctor::CollectRetreatSpotsFunctor(CCSBot *me, float range)
{
}

/* <2e845c> ../game_shared/bot/nav_area.h:440 */
inline void IsOpenListEmpty(void)
{
}

/* <2e8431> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<CNavLadder*>::operator!=(const _Self &__x)
{
}

/* <2e8418> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::end(void)
{
}

/* <2e83ff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<CNavLadder*>::operator++(void)
{
}

/* <2e83bd> ../game_shared/bot/nav_area.h:244 */
inline void CNavArea::GetLadderList(LadderDirectionType dir)
{
}

/* <2e83a4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(void)
{
}

/* <2e8360> ../game_shared/bot/nav_area.h:422 */
inline void CNavArea::GetAdjacentArea(NavDirType dir, int i)
{
//	{
//		const_iterator iter;                                  //   424
//	}
}

/* <2e833c> ../game_shared/bot/nav_area.h:236 */
inline void CNavArea::GetAdjacentCount(NavDirType dir)
{
}

/* <2e831e> ../game_shared/bot/nav_area.h:445 */
inline void PopOpenList(void)
{
//	{
//		class CNavArea *area;                                //   449
//	}
}

/* <2e8317> ../game_shared/bot/nav_area.h:286 */
inline void MakeNewMarker(void)
{
}

/* <2e82f9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<CNavLadder*, std::allocator<CNavLadder*>>::begin(void)
{
}

/* <2e82d0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<CNavLadder*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2e82b7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:845 */
inline void list<NavConnect, std::allocator<NavConnect>>::size(void)
{
}

/* <2e828a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:113 */
inline void distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last)
{
}

/* <2e8249> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_funcs.h:73 */
inline void __distance<std::_List_const_iterator<NavConnect>>(_List_const_iterator<NavConnect> __first, class _List_const_iterator<NavConnect> __last, class input_iterator_tag)
{
//	{
//		difference_type __n;                                  //    79
//	}
}

/* <2e822a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:202 */
inline void __iterator_category<std::_List_const_iterator<NavConnect>>(const class _List_const_iterator<NavConnect> &const)
{
}

/* <2e81f9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<HidingSpot*>::operator!=(const _Self &__x)
{
}

/* <2e81e0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::end(void)
{
}

/* <2e81c7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<HidingSpot*>::operator++(void)
{
}

/* <2e81a8> ../cstrike/dlls/bot/cs_bot_manager.h:24 */
inline int OtherTeam(int team)
{
}

/* <2e8183> ../cstrike/dlls/vector.h:149 */
inline void Vector::IsLengthGreaterThan(float length)
{
}

/* <2e816a> ../game_shared/bot/nav_area.h:136 */
inline void HidingSpot::GetPosition(void)
{
}

/* <2e8133> ../game_shared/bot/nav_area.h:255 */
inline void CNavArea::GetHidingSpotList(void)
{
}

/* <2e8115> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<HidingSpot*, std::allocator<HidingSpot*>>::begin(void)
{
}

/* <2e80ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<HidingSpot*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2e80c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<NavConnect>::operator!=(const _Self &__x)
{
}

/* <2e80a8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<NavConnect, std::allocator<NavConnect>>::end(void)
{
}

/* <2e808f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<NavConnect>::operator++(void)
{
}

/* <2e8058> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:211 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(void)
{
}

/* <2e803a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<NavConnect, std::allocator<NavConnect>>::begin(void)
{
}

/* <2e8011> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<NavConnect>::_List_const_iterator(_List_node_base *__x)
{
}

/* <2e7fca> ../cstrike/dlls/hostage/hostage.h:293 */
inline void CHostageManager::ForEachHostage<FarthestHostage>(FarthestHostage &func)
{
//	{
//		int i;                                                //   295
//	}
}

/* <2e7f9f> ../cstrike/dlls/bot/cs_bot.cpp:1088 */
inline void FarthestHostage::FarthestHostage(CCSBot *me)
{
}

/* <2e7f64> ../cstrike/dlls/bot/cs_bot.cpp:1094 */
inline void FarthestHostage::operator()(CHostage *hostage)
{
//	{
//		float range;                                          //  1098
//	}
}

/* <2e7eb2> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2e7e6e> ../cstrike/dlls/hostage/hostage.h:104 */
inline void CHostage::IsFollowing(CBaseEntity *entity)
{
}

/* <2e7e39> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <2e7e05> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <2e7dd0> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <2e7db7> ../cstrike/dlls/bot/cs_bot_manager.h:150 */
inline void CCSBotManager::GetRandomZone(void)
{
}

/* <2e7d83> ../cstrike/dlls/bot/cs_bot.cpp:906 */
void CCSBot::IsSafe(void)
{
//	{
//		class CCSBotManager *ctrl;                           //   908
//	}
}

/* <2e7d5e> ../game_shared/bot/bot_util.h:194 */
inline void CountdownTimer::Start( float duration)
{
}

/* <2e7d45> ../cstrike/dlls/bot/cs_bot.h:395 */
inline void CCSBot::GetGameState(void)
{
}

/* <2e7d27> ../cstrike/dlls/bot/cs_bot_manager.h:164 */
inline void CCSBotManager::GetLooseBomb(void)
{
}

/* <2e7cc4> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <2e7c99> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <2e7c11> ../cstrike/dlls/bot/cs_bot.cpp:200 */
inline bool IsIntersectingBox(const Vector *start, const Vector *end, const Vector *boxMin, const Vector *boxMax)
{
//	{
//		unsigned char startFlags;                             //   202
//		unsigned char endFlags;                               //   203
//	}
}

/* <2e7bee> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <2e7bce> ../game_shared/bot/nav.h:104 */
inline void Extent::Extent(void)
{
}

/* <2e7baf> ../cstrike/dlls/bot/cs_bot.h:491 */
inline void CCSBot::GetChatter(void)
{
}

/* <2e7b91> ../game_shared/bot/bot.h:275 */
inline void CBot::Walk(void)
{
}

/* <2e7b5c> ../cstrike/dlls/bot/cs_bot.h:370 */
inline void CCSBot::GetFollowLeader(void)
{
//	{
//		class CBaseEntity *entity;                           //   372
//	}
}

/* <2e7b1f> ../cstrike/dlls/bot/cs_bot.h:577 */
inline void CCSBot::IsUsingLadder(void)
{
}

/* <2e7b06> ../cstrike/dlls/bot/cs_bot.h:567 */
inline void CCSBot::GetLastKnownArea(void)
{
}

/* <2e7ae8> ../cstrike/dlls/bot/cs_bot.h:551 */
inline void CCSBot::DestroyPath(void)
{
}

/* <2e7acf> ../cstrike/dlls/bot/cs_bot.h:550 */
inline void CCSBot::HasPath(void)
{
}

/* <2e7ab6> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <2e7a9d> ../cstrike/dlls/bot/cs_bot.h:539 */
inline void CCSBot::GetTimeSinceLastSawEnemy(void)
{
}

/* <2e7a84> ../cstrike/dlls/bot/cs_bot.h:519 */
inline void CCSBot::GetNearbyFriendCount(void)
{
}

/* <2e7a6b> ../cstrike/dlls/bot/cs_bot.h:514 */
inline void CCSBot::GetNearbyEnemyCount(void)
{
}

/* <2e7a52> ../cstrike/dlls/bot/cs_bot.h:427 */
inline void CCSBot::GetTask(void)
{
}

/* <2e7a34> ../cstrike/dlls/bot/cs_bot.h:385 */
inline void CCSBot::IsSurprised(void)
{
}

/* <2e7a16> ../cstrike/dlls/bot/cs_gamestate.h:47 */
inline void CSGameState::IsBombPlanted(void)
{
}

/* <2e79fd> ../cstrike/dlls/bot/cs_bot_manager.h:180 */
inline void CCSBotManager::AllowRogues(void)
{
}

/* <2e79e4> ../cstrike/dlls/bot/cs_bot_manager.h:178 */
inline void CCSBotManager::GetElapsedRoundTime(void)
{
}

/* <2e79cb> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <2e79ad> ../cstrike/dlls/bot/cs_bot_manager.h:88 */
inline void CCSBotManager::GetScenario(void)
{
}

/* <2e7989> ../game_shared/bot/bot_profile.h:67 */
inline void BotProfile::GetTeamwork(void)
{
}

/* <2e796b> ../game_shared/bot/bot_profile.h:66 */
inline void BotProfile::GetSkill(void)
{
}

/* <2e7944> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2e792b> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2e790d> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <2e78e4> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <2e78c6> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <2e78a1> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <2e7877> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <2e784f> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <2e7825> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <2e77f5> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <2e777b> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <2e7722> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <2e76c9> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <2e7688> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <2e765e> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <2e7605> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <2e7572> ../game_shared/bot/nav_area.h:990 */
inline void AddAreaToOpenList(CNavArea *area, class CNavArea *parent, const Vector *startPos, float maxRange)
{
//	{
//		Vector closePos;                                //  1004
//		{
//			float distAlong;                              //  1009
//		}
//	}
}

/* <2e7559> ../game_shared/bot/nav_area.h:269 */
inline void CNavArea::GetCenter(void)
{
}

/* <2e7534> ../cstrike/dlls/vector.h:52 */
inline void Vector2D::IsLengthLessThan(float length)
{
}

/* <2e750d> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2e74f4> ../game_shared/bot/nav_area.h:311 */
inline void CNavArea::GetCostSoFar(void)
{
}

/* <2e74ce> ../game_shared/bot/nav_area.h:310 */
inline void CNavArea::SetCostSoFar( float value)
{
}

/* <2e74a8> ../game_shared/bot/nav_area.h:307 */
inline void CNavArea::SetTotalCost( float value)
{
}

/* <2e7475> ../game_shared/bot/nav_area.h:290 */
inline void CNavArea::SetParent(CNavArea *parent, NavTraverseType how)
{
}

/* <2e745c> ../game_shared/bot/nav_area.h:288 */
inline void CNavArea::IsMarked(void)
{
}

/* <2e7443> ../game_shared/bot/nav_area.h:287 */
inline void CNavArea::Mark(void)
{
}

/* <2e7425> ../game_shared/bot/nav_area.h:216 */
inline void CNavArea::GetAttributes(void)
{
}

/* <2e7407> ../game_shared/bot/nav_area.h:137 */
inline void HidingSpot::GetID(void)
{
}

/* <2e73e9> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <2e73cb> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <2e73ad> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2e735d> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2e7336> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2e72f9> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2e72a9> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2e71d9> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <2e71a5> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2e7179> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2e715b> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2e711f> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <2e70f7> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <2e70cd> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <2e70a5> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2e707d> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <2d4e40> ../game_shared/shared_util.cpp:247 */
/* linkage=_Z18SharedTokenWaitingPKc */
bool SharedTokenWaiting(const char *buffer)
{
//	{
//		const char *p;                                      //   249
//	}
}

/* <2d4de7> ../game_shared/shared_util.cpp:173 */
/* linkage=_Z11SharedParsePKc */
const char *SharedParse(const char *data)
{
//	
//skipwhite:                                                            //   185
//	{
//		int c;                                                //   175
//		int len;                                              //   176
//	}
}

/* <2d4dbf> ../game_shared/shared_util.cpp:164 */
/* linkage=_Z18SharedSetQuoteCharc */
void SharedSetQuoteChar(char c)
{
}

/* <2d4da4> ../game_shared/shared_util.cpp:155 */
/* linkage=_Z14SharedGetTokenv */
char *SharedGetToken(void)
{
}

/* <2d4d11> ../game_shared/shared_util.cpp:137 */
/* linkage=_Z11NumAsStringi */
const char *NumAsString(int val)
{
//	{
//		int const BufLen;                                      //   139
//		int const NumBuffers;                                  //   140
//		char string;                                          //   141
//		int curstring;                                        //   142
//		int len;                                              //   146
//	}
}

/* <2d4c7e> ../game_shared/shared_util.cpp:122 */
/* linkage=_Z12NumAsWStringi */
const wchar_t *NumAsWString(int val)
{
//	{
//		int const BufLen;                                      //   124
//		int const NumBuffers;                                  //   125
//		wchar_t string;                                       //   126
//		int curstring;                                        //   127
//		int len;                                              //   131
//	}
}

/* <2d4c0d> ../game_shared/shared_util.cpp:106 */
/* linkage=_Z10BufWPrintfPwRiPKwz */
wchar_t *BufWPrintf(wchar_t *buf, int &len, const wchar_t *fmt, ...)
{
//	{
//		va_list argptr;                                       //   111
//	}
}

/* <2d4ba1> ../game_shared/shared_util.cpp:90 */
/* linkage=_Z9BufPrintfPcRiPKcz */
char *BufPrintf(char *buf, int &len, const char *fmt, ...)
{
//	{
//		va_list argptr;                                       //    95
//	}
}

/* <2d4b0a> ../game_shared/shared_util.cpp:68 */
/* linkage=_Z13SharedVarArgsPcz */
char *SharedVarArgs(char *format, ...)
{
//	{
//		va_list argptr;                                       //    70
//		int const BufLen;                                      //    71
//		int const NumBuffers;                                  //    72
//		char string;                                          //    73
//		int curstring;                                        //    74
//	}
}

/* <2d4a66> ../game_shared/shared_util.cpp:50 */
/* linkage=_Z14SharedWVarArgsPwz */
wchar_t *SharedWVarArgs(wchar_t *format, ...)
{
//	{
//		va_list argptr;                                       //    52
//		int const BufLen;                                      //    53
//		int const NumBuffers;                                  //    54
//		wchar_t string;                                       //    55
//		int curstring;                                        //    56
//	}
}

/* <2d44ba> (null):27581 */
void _GLOBAL__sub_I_g_PlayerModEnable(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //   274
}

/* <2d4486> ../game_shared/voice_gamemgr.cpp:129 */
void CVoiceGameMgr::Update(double frametime)
{
}

/* <2d416b> ../game_shared/voice_gamemgr.cpp:215 */
void CVoiceGameMgr::UpdateMasks(void)
{
//	{
//		bool bAllTalk;                                        //   219
//		{
//			int iClient;                                  //   221
//			{
//				class CBaseEntity *pEnt;             //   223
//				class CBasePlayer *pPlayer;          //   234
//				CPlayerBitVec gameRulesMask;          //   236
//				operator uint32(CBitVecAccessor *const this);  //   228
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //   230
//				CBitVec(CBitVec<32> *const this);  //   236
//				{
//					int iOtherClient;             //   240
//					{
//						class CBaseEntity *pEnt;   //   242
//						operator=(CBitVecAccessor *const this,
//								int val);  //   245
//					}
//				}
//				operator!=(CBitVec<32> *const this,
//						const class CBitVec<32> &other);  //   251
//				operator!=(CBitVec<32> *const this,
//						const class CBitVec<32> &other);  //   252
//				{
//					int dw;                       //   258
//					operator=(CBitVec<32> *const this,
//							const class CBitVec<32> &other);  //   254
//					operator=(CBitVec<32> *const this,
//							const class CBitVec<32> &other);  //   255
//					MESSAGE_BEGIN(int msg_dest,
//							int msg_type,
//							const float *pOrigin,
//							entvars_t *ent);  //   257
//				}
//				{
//					int iOtherClient;             //   268
//					{
//						bool bCanHear;        //   270
//						operator uint32(CBitVecAccessor *const this);  //   270
//						operator uint32(CBitVecAccessor *const this);  //   270
//					}
//				}
//			}
//		}
//	}
}

/* <2d3ec5> ../game_shared/voice_gamemgr.cpp:152 */
void CVoiceGameMgr::PlayerHasBlockedPlayer(CBasePlayer *pReceiver, CBasePlayer *pSender)
{
//	{
//		int iReceiverIndex;                                   //   154
//		int iSenderIndex;                                     //   154
//		entindex(CBaseEntity *const this);  //   159
//		entindex(CBaseEntity *const this);  //   160
//		operator uint32(CBitVecAccessor *const this);  //   165
//	}
}

/* <2d3d82> ../game_shared/voice_gamemgr.cpp:140 */
void CVoiceGameMgr::ClientConnected(edict_t *pEdict)
{
//	{
//		int index;                                            //   142
//		ENTINDEX(edict_t *pEdict);  //   142
//		operator=(CBitVecAccessor *const this,
//				int val);  //   145
//		Init(CBitVec<32> *const this,
//			int val);  //   146
//		Init(CBitVec<32> *const this,
//			int val);  //   147
//	}
}

/* <2d3d4e> ../game_shared/voice_gamemgr.cpp:123 */
void CVoiceGameMgr::SetHelper(IVoiceGameMgrHelper *pHelper)
{
}

/* <2d3d0b> ../game_shared/voice_gamemgr.cpp:101 */
void CVoiceGameMgr::Init(IVoiceGameMgrHelper *pHelper, int maxClients)
{
}

/* <2d3cea> ../game_shared/voice_gamemgr.cpp:89 */
void CVoiceGameMgr::CVoiceGameMgr(void)
{
}

/* <2d3cd1> ../game_shared/voice_gamemgr.cpp:89 */
void CVoiceGameMgr::CVoiceGameMgr(void)
{
}

/* <2d3c98> ../game_shared/voice_gamemgr.cpp:96 */
void CVoiceGameMgr::~CVoiceGameMgr(void)
{
//	~CVoiceGameMgr(CVoiceGameMgr::~CVoiceGameMgr(//			int const __in_chrg);  //    98
}

/* <2d3c38> ../game_shared/voice_gamemgr.cpp:68 */
void VoiceServerDebug(const char *pFmt, ...)
{
//	{
//		char msg;                                             //    70
//		va_list marker;                                       //    71
//	}
}

/* <2d3c17> ../game_shared/voice_gamemgr.cpp:96 */
void CVoiceGameMgr::~CVoiceGameMgr(void)
{
}

/* <2d3bf3> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <2d3bd1> ../game_shared/bitvec.h:165 */
inline void GetDWord(CBitVec<32> *const this, int i)
{
}

/* <2d3ba8> ../game_shared/bitvec.h:125 */
inline void operator=(CBitVec<32> *const this, const CBitVec<32> &other)
{
}

/* <2d3b7f> ../game_shared/bitvec.h:152 */
inline void operator!=(CBitVec<32> *const this, const CBitVec<32> &other)
{
}

/* <2d3b11> ../game_shared/bitvec.h:141 */
inline void operator==(CBitVec<32> *const this, const CBitVec<32> &other)
{
//	{
//		int i;                                                //   143
//	}
}

/* <2d3ae2> ../game_shared/bitvec.h:115 */
inline void Init(CBitVec<32> *const this, int val)
{
//	{
//		int i;                                                //   117
//	}
}

/* <2d3ac9> ../game_shared/bitvec.h:100 */
inline void GetNumBits(CBitVec<32> *const this)
{
}

/* <2d3a7d> ../game_shared/bitvec.h:173 */
inline void SetDWord(CBitVec<32> *const this, int i, uint32 val)
{
}

/* <2d3a63> ../game_shared/bitvec.h:88 */
inline void operator uint32(CBitVecAccessor *const this)
{
}

/* <2d3a41> ../game_shared/bitvec.h:133 */
inline void operator[](CBitVec<32> *const this, int i)
{
}

/* <2d3a28> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2d39f8> ../game_shared/bitvec.h:73 */
inline void CBitVecAccessor::CBitVecAccessor( uint32 *pDWords, int iBit)
{
}

/* <2d39cf> ../game_shared/bitvec.h:107 */
inline void CBitVec(CBitVec<32> *const this)
{
//	{
//		int i;                                                //   109
//	}
}

/* <2d39b1> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2d3962> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2d3918> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2d38dd> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2d388e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2d382d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2d3801> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2d37d7> ../game_shared/bitvec.h:80 */
inline void CBitVecAccessor::operator=( int val)
{
}

/* <2d37af> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2d3787> ../game_shared/voice_gamemgr.cpp:96 */
void CVoiceGameMgr::~CVoiceGameMgr(int const __in_chrg)
{
}

/* <2d03e9> ../cstrike/pm_shared/pm_debug.c:260 */
void PM_ViewEntity(void)
{
//	vec3_t forward;                                               //   262
//	vec3_t right;                                                 //   262
//	vec3_t up;                                                    //   262
//	float raydist;                                                //   263
//	vec3_t origin;                                                //   264
//	vec3_t end;                                                   //   265
//	int i;                                                        //   266
//	pmtrace_t trace;                                              //   267
//	int pcolor;                                                   //   268
//	float fup;                                                    //   269
//	PM_DrawPhysEntBBox(int num,
//				int pcolor,
//				float life);  //   294
}

/* <2d030c> ../cstrike/pm_shared/pm_debug.c:218 */
void PM_DrawBBox(vec_t *mins, vec_t *maxs, vec_t *origin, int pcolor, float life)
{
//	int j;                                                        //   220
//	vec3_t tmp;                                                   //   222
//	vec_t p;                                                      //   223
//	float gap;                                                    //   224
//	PM_DrawRectangle(vec_t *tl,
//			vec_t *bl,
//			vec_t *tr,
//			vec_t *br,
//			int pcolor,
//			float life);  //   238
}

/* <2d0197> ../cstrike/pm_shared/pm_debug.c:114 */
void PM_DrawRectangle(vec_t *tl, vec_t *bl, vec_t *tr, vec_t *br, int pcolor, float life)
{
}

/* <2d0110> ../cstrike/pm_shared/pm_debug.c:43 */
void PM_ShowClipBox(void)
{
}

/* <2d0012> ../cstrike/pm_shared/pm_debug.c:82 */
void PM_ParticleLine(vec_t *start, vec_t *end, int pcolor, float life, float vert)
{
//	float linestep;                                               //    84
//	float curdist;                                                //    85
//	float len;                                                    //    86
//	vec3_t curpos;                                                //    87
//	vec3_t diff;                                                  //    88
//	int i;                                                        //    89
}

/* <2cff57> ../cstrike/pm_shared/pm_debug.c:128 */
void PM_DrawPhysEntBBox(int num, int pcolor, float life)
{
//	physent_t *pe;                                               //   130
//	vec3_t org;                                                   //   131
//	int j;                                                        //   132
//	vec3_t tmp;                                                   //   133
//	vec_t p;                                                      //   134
//	float gap;                                                    //   135
//	vec3_t modelmins;                                             //   136
//	vec3_t modelmaxs;                                             //   136
//	{
//		vec3_t forward;                                       //   161
//		vec3_t right;                                         //   161
//		vec3_t up;                                            //   161
//	}
}

/* <2cee68> ../cstrike/pm_shared/pm_math.c:398 */
void VectorAngles(const vec_t *forward, vec_t *angles)
{
//	float tmp;                                                    //   400
//	float yaw;                                                    //   400
//	float pitch;                                                  //   400
}

/* <2ced4d> ../cstrike/pm_shared/pm_math.c:374 */
void VectorMatrix(vec_t *forward, vec_t *right, vec_t *up)
{
//	vec3_t tmp;                                                   //   376
//	CrossProduct(const vec_t *v1,
//			const vec_t *v2,
//			vec_t *cross);  //   390
//	VectorNormalize(vec_t *v);  //   391
//	CrossProduct(const vec_t *v1,
//			const vec_t *v2,
//			vec_t *cross);  //   392
//	VectorNormalize(vec_t *v);  //   393
}

/* <2ced0f> ../cstrike/pm_shared/pm_math.c:366 */
int Q_log2(int val)
{
//	int answer;                                                   //   368
}

/* <2cecc9> ../cstrike/pm_shared/pm_math.c:358 */
void VectorScale(const vec_t *in, vec_t scale, vec_t *out)
{
}

/* <2ceca2> ../cstrike/pm_shared/pm_math.c:351 */
void VectorInverse(vec_t *v)
{
}

/* <2cec3c> ../cstrike/pm_shared/pm_math.c:332 */
float VectorNormalize(vec_t *v)
{
//	float length;                                                 //   334
//	float ilength;                                                //   334
}

/* <2cebc2> ../cstrike/pm_shared/pm_math.c:325 */
float Distance(const vec_t *v1, const vec_t *v2)
{
//	vec3_t d;                                                     //   327
//	Length(const vec_t *v);  //   329
}

/* <2ceafc> ../cstrike/pm_shared/pm_math.c:297 */
void _VectorCopy(vec_t *in, vec_t *out)
{
}

/* <2ceab5> ../cstrike/pm_shared/pm_math.c:290 */
void _VectorAdd(vec_t *veca, vec_t *vecb, vec_t *out)
{
}

/* <2cea6e> ../cstrike/pm_shared/pm_math.c:283 */
void _VectorSubtract(vec_t *veca, vec_t *vecb, vec_t *out)
{
}

/* <2cea34> ../cstrike/pm_shared/pm_math.c:278 */
vec_t _DotProduct(vec_t *v1, vec_t *v2)
{
}

/* <2ce9de> ../cstrike/pm_shared/pm_math.c:270 */
void VectorMA(const vec_t *veca, float scale, const vec_t *vecb, vec_t *vecc)
{
}

/* <2ce996> ../cstrike/pm_shared/pm_math.c:259 */
int VectorCompare(const vec_t *v1, const vec_t *v2)
{
//	int i;                                                        //   261
}

/* <2ce953> ../cstrike/pm_shared/pm_math.c:251 */
void VectorTransform(const vec_t *in1, float *in2, vec_t *out)
{
}

/* <2ce893> ../cstrike/pm_shared/pm_math.c:235 */
float AngleBetweenVectors(const vec_t *v1, const vec_t *v2)
{
//	float angle;                                                  //   237
//	float l1;                                                     //   238
//	float l2;                                                     //   239
//	Length(const vec_t *v);  //   238
//	Length(const vec_t *v);  //   239
}

/* <2ce85f> ../cstrike/pm_shared/pm_math.c:313 */
float Length(const vec_t *v)
{
//	int i;                                                        //   315
//	float length;                                                 //   316
}

/* <2ce75f> ../cstrike/pm_shared/pm_math.c:198 */
void InterpolateAngles(float *start, float *end, float *output, float frac)
{
//	int i;                                                        //   200
//	float ang1;                                                   //   201
//	float ang2;                                                   //   201
//	float d;                                                      //   202
//	NormalizeAngles(float *angles);  //   204
//	NormalizeAngles(float *angles);  //   205
//	NormalizeAngles(float *angles);  //   225
}

/* <2ce710> ../cstrike/pm_shared/pm_math.c:172 */
void NormalizeAngles(float *angles)
{
//	int i;                                                        //   174
}

/* <2ce67b> ../cstrike/pm_shared/pm_math.c:142 */
void AngleIMatrix(const vec_t *angles, float *matrix)
{
//	float angle;                                                  //   144
//	float sr;                                                     //   145
//	float sp;                                                     //   145
//	float sy;                                                     //   145
//	float cr;                                                     //   145
//	float cp;                                                     //   145
//	float cy;                                                     //   145
}

/* <2ce5d0> ../cstrike/pm_shared/pm_math.c:112 */
void AngleMatrix(const vec_t *angles, float *matrix)
{
//	float angle;                                                  //   114
//	float sr;                                                     //   115
//	float sp;                                                     //   115
//	float sy;                                                     //   115
//	float cr;                                                     //   115
//	float cp;                                                     //   115
//	float cy;                                                     //   115
}

/* <2ce521> ../cstrike/pm_shared/pm_math.c:76 */
void AngleVectorsTranspose(const vec_t *angles, vec_t *forward, vec_t *right, vec_t *up)
{
//	float angle;                                                  //    78
//	float sr;                                                     //    79
//	float sp;                                                     //    79
//	float sy;                                                     //    79
//	float cr;                                                     //    79
//	float cp;                                                     //    79
//	float cy;                                                     //    79
}

/* <2ce461> ../cstrike/pm_shared/pm_math.c:41 */
void AngleVectors(const vec_t *angles, vec_t *forward, vec_t *right, vec_t *up)
{
//	float angle;                                                  //    43
//	float sr;                                                     //    44
//	float sp;                                                     //    44
//	float sy;                                                     //    44
//	float cr;                                                     //    44
//	float cp;                                                     //    44
//	float cy;                                                     //    44
}

/* <2ce436> ../cstrike/pm_shared/pm_math.c:35 */
float anglemod(float a)
{
}

/* <2ce21b> ../cstrike/pm_shared/pm_shared.c:3638 */
void PM_Init(struct playermove_s *ppmove)
{
}

/* <2ce1ee> ../cstrike/pm_shared/pm_shared.c:3629 */
int PM_GetPhysEntInfo(int ent)
{
}

/* <2ce1c1> ../cstrike/pm_shared/pm_shared.c:3620 */
int PM_GetVisEntInfo(int ent)
{
}

/* <2ce182> ../cstrike/pm_shared/pm_shared.c:3596 */
void PM_Move(struct playermove_s *ppmove, int server)
{
}

/* <2ce101> ../cstrike/pm_shared/pm_shared.c:3479 */
void PM_CreateStuckTable(void)
{
//	float x;                                                      //  3481
//	float y;                                                      //  3481
//	float z;                                                      //  3481
//	int idx;                                                      //  3482
//	int i;                                                        //  3483
//	float zi;                                                     //  3484
}

/* <2cdfe9> ../cstrike/pm_shared/pm_shared.c:3225 */
void PM_PlayerMove(qboolean server)
{
//	physent_t *pLadder;                                          //  3227
//	PM_ShouldDoSpectMode(void);  //  3251
//	PM_InWater(void);  //  3457
//	PM_Jump(void);  //  3392
//	PM_AddCorrectGravity(void);  //  3360
//	PM_Jump(void);  //  3343
//	PM_FixupGravityVelocity(void);  //  3459
}

/* <2cdfc3> ../cstrike/pm_shared/pm_shared.c:3136 */
void PM_ReduceTimers(void)
{
}

/* <2cdeb8> ../cstrike/pm_shared/pm_shared.c:3069 */
void PM_CheckParamters(void)
{
//	float spd;                                                    //  3071
//	float maxspeed;                                               //  3072
//	vec3_t v_angle;                                               //  3073
//	PM_DropPunchAngle(vec_t *punchangle);  //  3105
//	{
//		float fRatio;                                         //  3089
//	}
//	PM_CalcRoll(vec_t *angles,
//			vec_t *velocity,
//			float rollangle,
//			float rollspeed);  //  3114
}

/* <2cde69> ../cstrike/pm_shared/pm_shared.c:3053 */
void PM_DropPunchAngle(vec_t *punchangle)
{
//	float len;                                                    //  3055
}

/* <2cdd76> ../cstrike/pm_shared/pm_shared.c:3018 */
float PM_CalcRoll(vec_t *angles, vec_t *velocity, float rollangle, float rollspeed)
{
//	float sign;                                                   //  3020
//	float side;                                                   //  3021
//	float value;                                                  //  3022
//	vec3_t forward;                                               //  3023
//	vec3_t right;                                                 //  3023
//	vec3_t up;                                                    //  3023
}

/* <2cdd60> ../cstrike/pm_shared/pm_shared.c:2988 */
void PM_PlayWaterSounds(void)
{
}

/* <2cdcd3> ../cstrike/pm_shared/pm_shared.c:2933 */
void PM_CheckFalling(void)
{
//	{
//		float fvol;                                           //  2939
//		PM_MapTextureTypeStepType(char chTextureType);  //  2963
//		PM_PlayStepSound(int step,
//				float fvol);  //  2963
//	}
}

/* <2cdc4b> ../cstrike/pm_shared/pm_shared.c:2869 */
void PM_CheckWaterJump(void)
{
//	vec3_t vecStart;                                              //  2871
//	vec3_t vecEnd;                                                //  2871
//	vec3_t flatforward;                                           //  2872
//	vec3_t flatvelocity;                                          //  2873
//	float curspeed;                                               //  2874
//	pmtrace_t tr;                                                 //  2875
//	int savehull;                                                 //  2876
}

/* <2cdba2> ../cstrike/pm_shared/pm_shared.c:2674 */
void PM_NoClip(void)
{
//	int i;                                                        //  2676
//	vec3_t wishvel;                                               //  2677
//	float fmove;                                                  //  2678
//	float smove;                                                  //  2678
}

/* <2cdb13> ../cstrike/pm_shared/pm_shared.c:2569 */
void PM_Physics_Toss(void)
{
//	pmtrace_t trace;                                              //  2571
//	vec3_t move;                                                  //  2572
//	float backoff;                                                //  2573
//	PM_AddGravity(void);  //  2594
//	{
//		float vel;                                            //  2636
//		vec3_t base;                                          //  2637
//	}
}

/* <2cdac6> ../cstrike/pm_shared/pm_shared.c:2541 */
pmtrace_t PM_PushEntity(vec_t *push)
{
//	pmtrace_t trace;                                              //  2543
//	vec3_t end;                                                   //  2544
}

/* <2cda8d> ../cstrike/pm_shared/pm_shared.c:2519 */
void PM_AddGravity(void)
{
//	float ent_gravity;                                            //  2521
}

/* <2cda77> ../cstrike/pm_shared/pm_shared.c:2491 */
void PM_WaterJump(void)
{
}

/* <2cda06> ../cstrike/pm_shared/pm_shared.c:2457 */
physent_t *PM_Ladder(void)
{
//	int i;                                                        //  2459
//	physent_t *pe;                                               //  2460
//	hull_t *hull;                                                //  2461
//	int num;                                                      //  2462
//	vec3_t test;                                                  //  2463
}

/* <2cd8c2> ../cstrike/pm_shared/pm_shared.c:2332 */
void PM_LadderMove(physent_t *pLadder)
{
//	vec3_t ladderCenter;                                          //  2334
//	trace_t trace;                                                //  2335
//	qboolean onFloor;                                             //  2336
//	vec3_t floor;                                                 //  2337
//	vec3_t modelmins;                                             //  2338
//	vec3_t modelmaxs;                                             //  2338
//	{
//		float forward;                                        //  2364
//		float right;                                          //  2364
//		vec3_t vpn;                                           //  2365
//		vec3_t v_right;                                       //  2365
//		float flSpeed;                                        //  2366
//		{
//			vec3_t velocity;                              //  2407
//			vec3_t perp;                                  //  2407
//			vec3_t cross;                                 //  2407
//			vec3_t lateral;                               //  2407
//			vec3_t tmp;                                   //  2407
//			float normal;                                 //  2408
//		}
//	}
}

/* <2cd7cd> ../cstrike/pm_shared/pm_shared.c:1983 */
void PM_Duck(void)
{
//	float duckFraction;                                           //  1986
//	int buttonsChanged;                                           //  1988
//	int nButtonPressed;                                           //  1989
//	int duckchange;                                               //  1991
//	int duckpressed;                                              //  1992
//	{
//		float fMore;                                          //  2063
//		float time;                                           //  2064
//	}
//	{
//		pmtrace_t trace;                                      //  2074
//		vec3_t newOrigin;                                     //  2075
//	}
//	PM_FixPlayerCrouchStuck(int direction);  //  2055
}

/* <2cd757> ../cstrike/pm_shared/pm_shared.c:1952 */
float PM_SimpleSpline(float value)
{
//	float valueSquared;                                           //  1954
}

/* <2cd61f> ../cstrike/pm_shared/pm_shared.c:1807 */
void PM_SpectatorMove(void)
{
//	float speed;                                                  //  1809
//	float drop;                                                   //  1809
//	float friction;                                               //  1809
//	float control;                                                //  1809
//	float newspeed;                                               //  1809
//	float currentspeed;                                           //  1811
//	float addspeed;                                               //  1811
//	float accelspeed;                                             //  1811
//	int i;                                                        //  1812
//	vec3_t wishvel;                                               //  1813
//	float fmove;                                                  //  1814
//	float smove;                                                  //  1814
//	vec3_t wishdir;                                               //  1815
//	float wishspeed;                                              //  1816
//	{
//		int target;                                           //  1905
//	}
}

/* <2cd3cf> ../cstrike/pm_shared/pm_shared.c:1681 */
int PM_CheckStuck(void)
{
//	vec3_t base;                                                  //  1683
//	vec3_t offset;                                                //  1684
//	vec3_t test;                                                  //  1685
//	int hitent;                                                   //  1686
//	int idx;                                                      //  1687
//	float fTime;                                                  //  1688
//	int i;                                                        //  1689
//	pmtrace_t traceresult;                                        //  1690
//	float rgStuckCheckTime;                                       //  1692
//	{
//		int nReps;                                            //  1713
//		PM_ResetStuckOffsets(int nIndex,
//					int server);  //  1714
//		PM_GetRandomStuckOffsets(int nIndex,
//					int server,
//					vec_t *offset);  //  1717
//		PM_ResetStuckOffsets(int nIndex,
//					int server);  //  1722
//	}
//	{
//		float x;                                              //  1769
//		float y;                                              //  1769
//		float z;                                              //  1769
//		float xystep;                                         //  1770
//		float zstep;                                          //  1771
//		float xyminmax;                                       //  1772
//		float zminmax;                                        //  1773
//	}
//	PM_GetRandomStuckOffsets(int nIndex,
//				int server,
//				vec_t *offset);  //  1750
//	PM_ResetStuckOffsets(int nIndex,
//				int server);  //  1757
//	PM_ResetStuckOffsets(int nIndex,
//				int server);  //  1698
}

/* <2cd33a> ../cstrike/pm_shared/pm_shared.c:1593 */
void PM_CatagorizePosition(void)
{
//	vec3_t point;                                                 //  1595
//	pmtrace_t tr;                                                 //  1596
}

/* <2cd2a7> ../cstrike/pm_shared/pm_shared.c:1522 */
qboolean PM_CheckWater(void)
{
//	vec3_t point;                                                 //  1524
//	int cont;                                                     //  1525
//	int truecont;                                                 //  1526
//	float height;                                                 //  1527
//	float heightover2;                                            //  1528
//	{
//		vec_t current_table;                                  //  1575
//	}
}

/* <2cd220> ../cstrike/pm_shared/pm_shared.c:1464 */
void PM_AirMove(void)
{
//	int i;                                                        //  1466
//	vec3_t wishvel;                                               //  1467
//	float fmove;                                                  //  1468
//	float smove;                                                  //  1468
//	vec3_t wishdir;                                               //  1469
//	float wishspeed;                                              //  1470
}

/* <2cd14b> ../cstrike/pm_shared/pm_shared.c:1368 */
void PM_WaterMove(void)
{
//	int i;                                                        //  1370
//	vec3_t wishvel;                                               //  1371
//	float wishspeed;                                              //  1372
//	vec3_t wishdir;                                               //  1373
//	vec3_t start;                                                 //  1374
//	vec3_t dest;                                                  //  1374
//	vec3_t temp;                                                  //  1375
//	pmtrace_t trace;                                              //  1376
//	float speed;                                                  //  1378
//	float newspeed;                                               //  1378
//	float addspeed;                                               //  1378
//	float accelspeed;                                             //  1378
}

/* <2cd0ba> ../cstrike/pm_shared/pm_shared.c:1326 */
void PM_AirAccelerate(vec_t *wishdir, float wishspeed, float accel)
{
//	int i;                                                        //  1328
//	float addspeed;                                               //  1329
//	float accelspeed;                                             //  1329
//	float currentspeed;                                           //  1329
//	float wishspd;                                                //  1329
}

/* <2ccffb> ../cstrike/pm_shared/pm_shared.c:1249 */
void PM_Friction(void)
{
//	float *vel;                                                  //  1251
//	float speed;                                                  //  1252
//	float newspeed;                                               //  1252
//	float control;                                                //  1252
//	float friction;                                               //  1253
//	float drop;                                                   //  1254
//	vec3_t newvel;                                                //  1255
//	{
//		vec3_t start;                                         //  1278
//		vec3_t stop;                                          //  1278
//		pmtrace_t trace;                                      //  1279
//	}
}

/* <2cceaf> ../cstrike/pm_shared/pm_shared.c:1071 */
void PM_WalkMove(void)
{
//	int clip;                                                     //  1073
//	int oldonground;                                              //  1074
//	int i;                                                        //  1075
//	vec3_t wishvel;                                               //  1077
//	float spd;                                                    //  1078
//	float fmove;                                                  //  1079
//	float smove;                                                  //  1079
//	vec3_t wishdir;                                               //  1080
//	float wishspeed;                                              //  1081
//	vec3_t dest;                                                  //  1083
//	vec3_t start;                                                 //  1083
//	vec3_t original;                                              //  1084
//	vec3_t originalvel;                                           //  1084
//	vec3_t down;                                                  //  1085
//	vec3_t downvel;                                               //  1085
//	float downdist;                                               //  1086
//	float updist;                                                 //  1086
//	pmtrace_t trace;                                              //  1088
//	
//usedown:                                                              //  1234
//	{
//		float flRatio;                                        //  1092
//	}
}

/* <2cce2e> ../cstrike/pm_shared/pm_shared.c:1027 */
void PM_Accelerate(vec_t *wishdir, float wishspeed, float accel)
{
//	int i;                                                        //  1029
//	float addspeed;                                               //  1030
//	float accelspeed;                                             //  1030
//	float currentspeed;                                           //  1030
}

/* <2ccd08> ../cstrike/pm_shared/pm_shared.c:831 */
int PM_FlyMove(void)
{
//	int bumpcount;                                                //   833
//	int numbumps;                                                 //   833
//	vec3_t dir;                                                   //   834
//	float d;                                                      //   835
//	int numplanes;                                                //   836
//	vec_t planes;                                                 //   837
//	vec3_t primal_velocity;                                       //   838
//	vec3_t original_velocity;                                     //   838
//	vec3_t new_velocity;                                          //   839
//	int i;                                                        //   840
//	int j;                                                        //   840
//	pmtrace_t trace;                                              //   841
//	vec3_t end;                                                   //   842
//	float time_left;                                              //   843
//	float allFraction;                                            //   843
//	int blocked;                                                  //   844
}

/* <2ccc93> ../cstrike/pm_shared/pm_shared.c:784 */
void PM_AddCorrectGravity(void)
{
//	float ent_gravity;                                            //   786
}

/* <2ccbe9> ../cstrike/pm_shared/pm_shared.c:752 */
int PM_ClipVelocity(vec_t *in, vec_t *normal, vec_t *out, float overbounce)
{
//	float backoff;                                                //   754
//	float change;                                                 //   755
//	float angle;                                                  //   756
//	int i;                                                        //   757
//	int blocked;                                                  //   757
}

/* <2ccab0> ../cstrike/pm_shared/pm_shared.c:2711 */
void PM_PreventMegaBunnyJumping(void)
{
//	float spd;                                                    //  2714
//	float fraction;                                               //  2716
//	float maxscaledspeed;                                         //  2718
}

/* <2cca88> ../cstrike/pm_shared/pm_shared.c:707 */
void PM_CheckVelocity(void)
{
//	int i;                                                        //   709
}

/* <2cca3d> ../cstrike/pm_shared/pm_shared.c:679 */
qboolean PM_AddToTouched(pmtrace_t tr, vec_t *impactvelocity)
{
//	int i;                                                        //   681
}

/* <2cc93c> ../cstrike/pm_shared/pm_shared.c:546 */
void PM_UpdateStepSound(void)
{
//	float fvol;                                                   //   548
//	vec3_t knee;                                                  //   549
//	vec3_t feet;                                                  //   550
//	vec3_t center;                                                //   551
//	float height;                                                 //   552
//	float speed;                                                  //   553
//	int fLadder;                                                  //   554
//	int step;                                                     //   555
//	int onground;                                                 //   556
//	PM_PlayStepSound(int step,
//			float fvol);  //   669
//	PM_MapTextureTypeStepType(char chTextureType);  //   615
}

/* <2cc8af> ../cstrike/pm_shared/pm_shared.c:512 */
void PM_CatagorizeTextureType(void)
{
//	vec3_t start;                                                 //   514
//	vec3_t end;                                                   //   514
//	const char *pTextureName;                                   //   515
//	PM_FindTextureType(char *name);  //   543
}

/* <2cc7c5> ../cstrike/pm_shared/pm_shared.c:283 */
char PM_FindTextureType(char *name)
{
//	int left;                                                     //   285
//	int right;                                                    //   285
//	int pivot;                                                    //   285
//	int val;                                                      //   286
}

/* <2cc720> ../cstrike/pm_shared/pm_shared.c:213 */
void PM_InitTextureTypes(void)
{
//	char buffer;                                                  //   215
//	int i;                                                        //   216
//	int j;                                                        //   216
//	byte *pMemFile;                                              //   217
//	int fileSize;                                                 //   218
//	int filePos;                                                  //   218
//	qboolean bTextureTypeInit;                                    //   219
//	{
//		int __res;                                            //   252
//	}
}

/* <2cc6bb> ../cstrike/pm_shared/pm_shared.c:193 */
void PM_SortTextures(void)
{
//	int i;                                                        //   197
//	int j;                                                        //   197
//	PM_SwapTextures(int i,
//			int j);  //   207
}

/* <2cc691> ../cstrike/pm_shared/pm_shared.c:180 */
int PM_IsThereGrassTexture(void)
{
//	int i;                                                        //   182
}

/* <2cc613> ../cstrike/pm_shared/pm_shared.c:165 */
void PM_SwapTextures(int i, int j)
{
//	char chTemp;                                                  //   167
//	char szTemp;                                                  //   168
}

/* <2cc595> ../cstrike/pm_shared/pm_shared.c:1959 */
void PM_FixPlayerCrouchStuck(int direction)
{
//	int hitent;                                                   //  1961
//	int i;                                                        //  1962
//	vec3_t test;                                                  //  1963
}

/* <2cc586> ../cstrike/pm_shared/pm_shared.c:1510 */
qboolean PM_InWater(void)
{
}

/* <2cc577> ../cstrike/pm_shared/pm_shared.c:3203 */
qboolean PM_ShouldDoSpectMode(void)
{
}

/* <2cc541> ../cstrike/pm_shared/pm_shared.c:2741 */
void PM_Jump(void)
{
//	float fvol;                                                   //  2743
//	float fvel;                                                   //  2744
//	{
//		float flRatio;                                        //  2847
//	}
}

/* <2cc509> ../cstrike/pm_shared/pm_shared.c:1941 */
float PM_SplineFraction(float value, float scale)
{
//	float valueSquared;                                           //  1943
}

/* <2cc4c5> ../cstrike/pm_shared/pm_shared.c:1654 */
int PM_GetRandomStuckOffsets(int nIndex, int server, vec_t *offset)
{
//	int idx;                                                      //  1657
}

/* <2cc49d> ../cstrike/pm_shared/pm_shared.c:1665 */
void PM_ResetStuckOffsets(int nIndex, int server)
{
}

/* <2cc482> ../cstrike/pm_shared/pm_shared.c:806 */
void PM_FixupGravityVelocity(void)
{
//	float ent_gravity;                                            //   808
}

/* <2cc462> ../cstrike/pm_shared/pm_shared.c:489 */
int PM_MapTextureTypeStepType(char chTextureType)
{
}

/* <2cc416> ../cstrike/pm_shared/pm_shared.c:315 */
void PM_PlayStepSound(int step, float fvol)
{
//	int iSkipStep;                                                //   317
//	int irand;                                                    //   318
//	vec3_t hvel;                                                  //   319
}

/* <2cadb2> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:51 */
void weapon_xm1014(entvars_t *pev)
{
//	GetClassPtr<CXM1014>(CXM1014 *a);  //    51
}

/* <2cad77> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:182 */
void CXM1014::Reload(void)
{
//	CXM1014::Reload(void);  //   182
}

/* <2cad3c> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:231 */
void CXM1014::WeaponIdle(void)
{
//	WeaponIdle(CXM1014 *const this);  //   231
}

/* <2caced> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2cacc6> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:53 */
void CXM1014::Spawn(void)
{
}

/* <2cac9f> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:100 */
void CXM1014::Deploy(void)
{
}

/* <2cab36> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:106 */
void CXM1014::PrimaryAttack(void)
{
//	{
//		Vector vecAiming;                               //   144
//		Vector vecSrc;                                  //   145
//		int flag;                                             //   149
//		operator+(const Vector *const this,
//				const Vector &v);  //   142
//		Vector(Vector *const this,
//			const Vector &v);  //   144
//		Vector(Vector *const this,
//			const Vector &v);  //   146
//		Vector(Vector *const this,
//			const Vector &v);  //   146
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   146
//		edict(CBaseEntity *const this);  //   156
//	}
}

/* <2cab03> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:81 */
void CXM1014::GetItemInfo(ItemInfo *p)
{
}

/* <2caadc> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:65 */
void CXM1014::Precache(void)
{
}

/* <2caab6> ../cstrike/dlls/weapons.h:1158 */
void CXM1014::UseDecrement(void)
{
}

/* <2caa90> ../cstrike/dlls/weapons.h:1157 */
void CXM1014::GetMaxSpeed(void)
{
}

/* <2caa6a> ../cstrike/dlls/weapons.h:1150 */
void CXM1014::iItemSlot(void)
{
}

/* <2caa44> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2caa18> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2ca9f2> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2ca9cc> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <2ca9a6> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2ca97f> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2ca959> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2ca933> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2ca90d> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2ca8d8> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2ca8ac> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2ca871> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2ca697> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2ca671> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2ca63c> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2ca5dd> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2ca5a8> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2ca582> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2ca55c> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2ca536> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2ca510> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2ca4e9> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2ca4c3> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2ca49d> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2ca477> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2ca443> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2ca41d> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2ca3f7> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2ca3c3> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2ca39d> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2ca309> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2ca2b9> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2ca285> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2ca251> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2ca20f> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2ca1cd> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2ca1a7> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2ca181> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2ca14f> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2ca10f> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2ca0e3> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2ca0af> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2ca089> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2ca063> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2ca042> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2ca01c> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2c9fea> ../cstrike/dlls/cbase.h:800 */
CXM1014 *GetClassPtr<CXM1014>(CXM1014 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2c9fce> ../cstrike/dlls/weapons.h:1141 */
inline void CXM1014::CXM1014(void)
{
}

/* <2c9f52> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2c9f2c> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2c9e5e> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2c9def> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2c9db0> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2c9d8a> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2c9d63> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2c9d4a> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2c9d2c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2c9cdd> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2c9c99> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2c9c7b> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2c9c3a> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:182 */
void CXM1014::Reload(void)
{
}

/* <2c9bf9> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2c9baf> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2c9b7b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2c9b54> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2c9b28> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2c9b0a> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2c9ae2> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2c9ac4> ../cstrike/dlls/wpn_shared/wpn_xm1014.cpp:231 */
void CXM1014::WeaponIdle(void)
{
}

/* <2c5ae6> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:129 */
void CGalil::GalilFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   165
//		Vector vecSrc;                                  //   167
//		Vector vecDir;                                  //   169
//		int flag;                                             //   172
//		operator+(const Vector *const this,
//				const Vector &v);  //   164
//		Vector(Vector *const this,
//			const Vector &v);  //   170
//		Vector(Vector *const this,
//			const Vector &v);  //   170
//		Length2D(const Vector *const this);  //   199
//	}
}

/* <2c5a1c> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:50 */
void weapon_galil(entvars_t *pev)
{
//	GetClassPtr<CGalil>(CGalil *a);  //    50
}

/* <2c59d2> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:111 */
void CGalil::PrimaryAttack(void)
{
//	PrimaryAttack(CGalil *const this);  //   111
}

/* <2c58c1> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:129 */
void CGalil::GalilFire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   165
//		Vector vecSrc;                                  //   167
//		int flag;                                             //   172
//		Vector vecDir;                                  //   169
//		operator+(const Vector *const this,
//				const Vector &v);  //   164
//		Vector(Vector *const this,
//			const Vector &v);  //   170
//		Vector(Vector *const this,
//			const Vector &v);  //   170
//		Length2D(const Vector *const this);  //   199
//	}
}

/* <2c5861> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:210 */
void CGalil::Reload(void)
{
//	{
//		int iResult;                                          //   215
//	}
//	Reload(CGalil *const this);  //   210
}

/* <2c5826> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:232 */
void CGalil::WeaponIdle(void)
{
//	WeaponIdle(CGalil *const this);  //   232
}

/* <2c57d7> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2c57b0> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:52 */
void CGalil::Spawn(void)
{
}

/* <2c5789> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:98 */
void CGalil::Deploy(void)
{
}

/* <2c5763> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:107 */
void CGalil::SecondaryAttack(void)
{
}

/* <2c5730> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:81 */
void CGalil::GetItemInfo(ItemInfo *p)
{
}

/* <2c5709> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:65 */
void CGalil::Precache(void)
{
}

/* <2c56e3> ../cstrike/dlls/weapons.h:1286 */
void CGalil::UseDecrement(void)
{
}

/* <2c56bd> ../cstrike/dlls/weapons.h:1283 */
void CGalil::GetMaxSpeed(void)
{
}

/* <2c5697> ../cstrike/dlls/weapons.h:1274 */
void CGalil::iItemSlot(void)
{
}

/* <2c5671> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2c5645> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2c561f> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2c55f9> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2c55d2> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2c55ac> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2c5586> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2c5560> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2c552b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2c54ff> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2c54c4> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2c52ea> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2c52c4> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2c528f> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2c5230> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2c51fb> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2c51d5> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2c51af> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2c5189> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2c5163> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2c513c> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2c5116> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2c50f0> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2c50ca> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2c5096> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2c5070> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2c504a> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2c5016> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2c4ff0> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2c4f5c> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2c4f0c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2c4ed8> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2c4ea4> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2c4e62> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2c4e20> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2c4dfa> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2c4dd4> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2c4da2> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2c4d62> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2c4d36> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2c4d02> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2c4cdc> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2c4cb6> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2c4c95> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2c4c6f> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2c4c07> ../cstrike/dlls/wpn_shared/wpn_galil.cpp:129 */
void CGalil::GalilFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   165
//		Vector vecSrc;                                  //   167
//		Vector vecDir;                                  //   169
//		int flag;                                             //   172
//	}
}

/* <2c4bd5> ../cstrike/dlls/cbase.h:800 */
CGalil *GetClassPtr<CGalil>(CGalil *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2c4bb9> ../cstrike/dlls/weapons.h:1269 */
inline void CGalil::CGalil(void)
{
}

/* <2c4b3d> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2c4b17> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2c4a49> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2c49da> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2c499b> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2c495c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2c4935> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2c490e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2c48f5> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2c48d7> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2c4888> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2c484d> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2c47e4> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2c47cb> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2c4781> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2c474d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2c4726> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2c46fa> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2c46dc> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2c46b4> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2c0613> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:152 */
void CFamas::FamasFire(float flSpread, float flCycleTime, BOOL fUseAutoAim, BOOL bFireBurst)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		Vector vecDir;                                  //   207
//		int flag;                                             //   213
//		int mask;                                             //   221
//		operator+(const Vector *const this,
//				const Vector &v);  //   202
//		Vector(Vector *const this,
//			const Vector &v);  //   211
//		Vector(Vector *const this,
//			const Vector &v);  //   211
//		Length2D(const Vector *const this);  //   243
//		Vector(Vector *const this,
//			const Vector &v);  //   209
//		Vector(Vector *const this,
//			const Vector &v);  //   209
//	}
}

/* <2c0549> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:50 */
void weapon_famas(entvars_t *pev)
{
//	GetClassPtr<CFamas>(CFamas *a);  //    50
}

/* <2c04fe> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:129 */
void CFamas::PrimaryAttack(void)
{
//	{
//		bool bFireBurst;                                      //   139
//		Length2D(const Vector *const this);  //   145
//	}
}

/* <2c0394> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:152 */
void CFamas::FamasFire(float flSpread, BOOL bFireBurst, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		int flag;                                             //   213
//		Vector vecDir;                                  //   207
//		int mask;                                             //   221
//		operator+(const Vector *const this,
//				const Vector &v);  //   202
//		Vector(Vector *const this,
//			const Vector &v);  //   211
//		Vector(Vector *const this,
//			const Vector &v);  //   211
//		Length2D(const Vector *const this);  //   243
//		Vector(Vector *const this,
//			const Vector &v);  //   209
//		Vector(Vector *const this,
//			const Vector &v);  //   209
//	}
}

/* <2c0336> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:262 */
void CFamas::Reload(void)
{
//	{
//		int iResult;                                          //   267
//	}
//	Reload(CFamas *const this);  //   262
}

/* <2c02fa> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:284 */
void CFamas::WeaponIdle(void)
{
//	WeaponIdle(CFamas *const this);  //   284
}

/* <2c02ab> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2c0284> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:52 */
void CFamas::Spawn(void)
{
}

/* <2c025d> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:102 */
void CFamas::Deploy(void)
{
}

/* <2c0236> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:114 */
void CFamas::SecondaryAttack(void)
{
}

/* <2c0203> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:85 */
void CFamas::GetItemInfo(ItemInfo *p)
{
}

/* <2c01dc> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:66 */
void CFamas::Precache(void)
{
}

/* <2c01b6> ../cstrike/dlls/weapons.h:1310 */
void CFamas::UseDecrement(void)
{
}

/* <2c0190> ../cstrike/dlls/weapons.h:1306 */
void CFamas::GetMaxSpeed(void)
{
}

/* <2c016a> ../cstrike/dlls/weapons.h:1298 */
void CFamas::iItemSlot(void)
{
}

/* <2c0144> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2c0118> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2c00f2> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2c00cc> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2c00a5> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2c007f> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2c0059> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2c0033> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2bfffe> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2bffd2> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2bff97> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2bfdbd> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2bfd97> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2bfd62> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2bfd03> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2bfcce> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2bfca8> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2bfc82> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2bfc5c> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2bfc36> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2bfc0f> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2bfbe9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2bfbc3> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2bfb9d> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2bfb69> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2bfb43> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2bfb1d> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2bfae9> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2bfac3> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2bfa2f> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2bf9df> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2bf9ab> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2bf977> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2bf935> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2bf8f3> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2bf8cd> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2bf8a7> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2bf875> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2bf835> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2bf809> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2bf7d5> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2bf7af> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2bf789> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2bf768> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2bf742> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2bf6c4> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:152 */
void CFamas::FamasFire(float flSpread, float flCycleTime, BOOL fUseAutoAim, BOOL bFireBurst)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		Vector vecDir;                                  //   207
//		int flag;                                             //   213
//		int mask;                                             //   221
//	}
}

/* <2bf692> ../cstrike/dlls/cbase.h:800 */
CFamas *GetClassPtr<CFamas>(CFamas *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2bf676> ../cstrike/dlls/weapons.h:1293 */
inline void CFamas::CFamas(void)
{
}

/* <2bf5fa> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2bf5d4> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2bf506> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2bf497> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2bf458> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2bf432> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2bf40b> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2bf3e4> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2bf3cb> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2bf3ad> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2bf35e> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2bf323> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2bf2ba> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2bf2a1> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2bf257> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2bf223> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2bf1fc> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2bf1d0> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2bf1b2> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2bf18a> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2bf163> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:262 */
void CFamas::Reload(void)
{
//	{
//		int iResult;                                          //   267
//	}
}

/* <2bf145> ../cstrike/dlls/wpn_shared/wpn_famas.cpp:284 */
void CFamas::WeaponIdle(void)
{
}

/* <2bb10f> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:200 */
void CUSP::USPFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		int flag;                                             //   258
//		Vector vecAiming;                               //   266
//		Vector vecSrc;                                  //   268
//		Vector vecDir;                                  //   270
//		operator+(const Vector *const this,
//				const Vector &v);  //   253
//		Vector(Vector *const this,
//			const Vector &v);  //   272
//		Vector(Vector *const this,
//			const Vector &v);  //   272
//		Vector(Vector *const this,
//			const Vector &v);  //   274
//		Vector(Vector *const this,
//			const Vector &v);  //   274
//	}
}

/* <2bb045> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:68 */
void weapon_usp(entvars_t *pev)
{
//	GetClassPtr<CUSP>(CUSP *a);  //    68
}

/* <2bb000> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:173 */
void CUSP::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   179
//	Length2D(const Vector *const this);  //   190
}

/* <2baeb2> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:200 */
void CUSP::USPFire(float flSpread, BOOL fUseSemi, float flCycleTime)
{
//	{
//		int flag;                                             //   258
//		Vector vecAiming;                               //   266
//		Vector vecSrc;                                  //   268
//		Vector vecDir;                                  //   270
//		operator+(const Vector *const this,
//				const Vector &v);  //   253
//		Vector(Vector *const this,
//			const Vector &v);  //   272
//		Vector(Vector *const this,
//			const Vector &v);  //   272
//		Vector(Vector *const this,
//			const Vector &v);  //   274
//		Vector(Vector *const this,
//			const Vector &v);  //   274
//	}
}

/* <2bae77> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:147 */
void CUSP::SecondaryAttack(void)
{
//	SecondaryAttack(CUSP *const this);  //   147
}

/* <2bae19> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:297 */
void CUSP::Reload(void)
{
//	{
//		int iResult;                                          //   302
//	}
//	Reload(CUSP *const this);  //   297
}

/* <2badcb> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:318 */
void CUSP::WeaponIdle(void)
{
//	WeaponIdle(CUSP *const this);  //   318
}

/* <2bad7c> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2bad55> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:70 */
void CUSP::Spawn(void)
{
}

/* <2bad2e> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:124 */
void CUSP::Deploy(void)
{
}

/* <2bacfb> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:107 */
void CUSP::GetItemInfo(ItemInfo *p)
{
}

/* <2bacd4> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:85 */
void CUSP::Precache(void)
{
}

/* <2bacae> ../cstrike/dlls/weapons.h:591 */
void CUSP::IsPistol(void)
{
}

/* <2bac88> ../cstrike/dlls/weapons.h:590 */
void CUSP::UseDecrement(void)
{
}

/* <2bac62> ../cstrike/dlls/weapons.h:589 */
void CUSP::GetMaxSpeed(void)
{
}

/* <2bac3c> ../cstrike/dlls/weapons.h:578 */
void CUSP::iItemSlot(void)
{
}

/* <2bac16> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2babea> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2babc4> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2bab9e> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2bab77> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2bab51> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2bab2b> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2bab05> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2baad0> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2baaa4> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2baa69> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2ba88f> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2ba869> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2ba834> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2ba7d5> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2ba7a0> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2ba77a> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2ba754> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2ba72e> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2ba708> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2ba6e1> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2ba6bb> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2ba695> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2ba66f> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2ba63b> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2ba615> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2ba5ef> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2ba5bb> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2ba595> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2ba501> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2ba4b1> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2ba47d> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2ba449> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2ba407> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2ba3c5> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2ba39f> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2ba379> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2ba347> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2ba307> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2ba2db> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2ba2a7> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2ba281> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2ba25b> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2ba23a> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2ba214> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2ba1a8> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:200 */
void CUSP::USPFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		int flag;                                             //   258
//		Vector vecAiming;                               //   266
//		Vector vecSrc;                                  //   268
//		Vector vecDir;                                  //   270
//	}
}

/* <2ba176> ../cstrike/dlls/cbase.h:800 */
CUSP *GetClassPtr<CUSP>(CUSP *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2ba15a> ../cstrike/dlls/weapons.h:573 */
inline void CUSP::CUSP(void)
{
}

/* <2ba0de> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2ba0b8> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2b9fea> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2b9f7b> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2b9f3c> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2b9f16> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2b9eef> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2b9ec8> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2b9eaf> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2b9e91> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2b9e42> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2b9e07> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2b9d9e> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2b9d85> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2b9d3b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2b9d07> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2b9ce0> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2b9cb4> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2b9c96> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2b9c56> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:297 */
void CUSP::Reload(void)
{
//	{
//		int iResult;                                          //   302
//	}
}

/* <2b9c2a> ../cstrike/dlls/wpn_shared/wpn_usp.cpp:318 */
void CUSP::WeaponIdle(void)
{
//	{
//		int iAnim;                                            //   339
//	}
}

/* <2b5bf0> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:116 */
void CUMP45::UMP45Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		int flag;                                             //   153
//		Vector vecAiming;                               //   160
//		Vector vecSrc;                                  //   162
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   151
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   191
//	}
}

/* <2b5b26> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:50 */
void weapon_ump45(entvars_t *pev)
{
//	GetClassPtr<CUMP45>(CUMP45 *a);  //    50
}

/* <2b5aec> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:108 */
void CUMP45::PrimaryAttack(void)
{
//	PrimaryAttack(CUMP45 *const this);  //   108
}

/* <2b59db> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:116 */
void CUMP45::UMP45Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		int flag;                                             //   153
//		Vector vecAiming;                               //   160
//		Vector vecSrc;                                  //   162
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   151
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   191
//	}
}

/* <2b59a1> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:200 */
void CUMP45::Reload(void)
{
//	Reload(CUMP45 *const this);  //   200
}

/* <2b5966> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:214 */
void CUMP45::WeaponIdle(void)
{
//	WeaponIdle(CUMP45 *const this);  //   214
}

/* <2b5917> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2b58f0> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:52 */
void CUMP45::Spawn(void)
{
}

/* <2b58c9> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:99 */
void CUMP45::Deploy(void)
{
}

/* <2b5896> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:82 */
void CUMP45::GetItemInfo(ItemInfo *p)
{
}

/* <2b586f> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:66 */
void CUMP45::Precache(void)
{
}

/* <2b5849> ../cstrike/dlls/weapons.h:1235 */
void CUMP45::UseDecrement(void)
{
}

/* <2b5823> ../cstrike/dlls/weapons.h:1232 */
void CUMP45::GetMaxSpeed(void)
{
}

/* <2b57fd> ../cstrike/dlls/weapons.h:1224 */
void CUMP45::iItemSlot(void)
{
}

/* <2b57d7> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2b57ab> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2b5785> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2b575f> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <2b5739> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2b5712> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2b56ec> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2b56c6> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2b56a0> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2b566b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2b563f> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2b5604> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2b542a> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2b5404> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2b53cf> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2b5370> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2b533b> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2b5315> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2b52ef> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2b52c9> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2b52a3> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2b527c> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2b5256> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2b5230> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2b520a> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2b51d6> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2b51b0> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2b518a> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2b5156> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2b5130> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2b509c> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2b504c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2b5018> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2b4fe4> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2b4fa2> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2b4f60> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2b4f3a> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2b4f14> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2b4ee2> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2b4ea2> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2b4e76> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2b4e42> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2b4e1c> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2b4df6> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2b4dd5> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2b4daf> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2b4d47> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:116 */
void CUMP45::UMP45Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		int flag;                                             //   153
//		Vector vecAiming;                               //   160
//		Vector vecSrc;                                  //   162
//		Vector vecDir;                                  //   164
//	}
}

/* <2b4d15> ../cstrike/dlls/cbase.h:800 */
CUMP45 *GetClassPtr<CUMP45>(CUMP45 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2b4cf9> ../cstrike/dlls/weapons.h:1219 */
inline void CUMP45::CUMP45(void)
{
}

/* <2b4c7d> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2b4c57> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2b4b89> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2b4b1a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2b4adb> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2b4ac2> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:108 */
void CUMP45::PrimaryAttack(void)
{
}

/* <2b4a9c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2b4a75> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2b4a4e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2b4a35> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2b4a17> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2b49c8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2b498d> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2b4924> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2b490b> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2b48c1> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2b488d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2b4866> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2b483a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2b481c> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2b47f4> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2b47db> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:200 */
void CUMP45::Reload(void)
{
}

/* <2b47bd> ../cstrike/dlls/wpn_shared/wpn_ump45.cpp:214 */
void CUMP45::WeaponIdle(void)
{
}

/* <2b07ba> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:116 */
void CTMP::TMPFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   155
//		Vector vecSrc;                                  //   157
//		Vector vecDir;                                  //   159
//		int flag;                                             //   163
//		operator+(const Vector *const this,
//				const Vector &v);  //   150
//		Vector(Vector *const this,
//			const Vector &v);  //   160
//		Vector(Vector *const this,
//			const Vector &v);  //   160
//		Length2D(const Vector *const this);  //   188
//	}
}

/* <2b06f0> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:50 */
void weapon_tmp(entvars_t *pev)
{
//	GetClassPtr<CTMP>(CTMP *a);  //    50
}

/* <2b06b6> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:108 */
void CTMP::PrimaryAttack(void)
{
//	PrimaryAttack(CTMP *const this);  //   108
}

/* <2b05a5> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:116 */
void CTMP::TMPFire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   155
//		Vector vecSrc;                                  //   157
//		int flag;                                             //   163
//		Vector vecDir;                                  //   159
//		operator+(const Vector *const this,
//				const Vector &v);  //   150
//		Vector(Vector *const this,
//			const Vector &v);  //   160
//		Vector(Vector *const this,
//			const Vector &v);  //   160
//		Length2D(const Vector *const this);  //   188
//	}
}

/* <2b056b> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:197 */
void CTMP::Reload(void)
{
//	Reload(CTMP *const this);  //   197
}

/* <2b0530> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:211 */
void CTMP::WeaponIdle(void)
{
//	WeaponIdle(CTMP *const this);  //   211
}

/* <2b04e1> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2b04ba> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:52 */
void CTMP::Spawn(void)
{
}

/* <2b0493> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:98 */
void CTMP::Deploy(void)
{
}

/* <2b0460> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:81 */
void CTMP::GetItemInfo(ItemInfo *p)
{
}

/* <2b0439> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:67 */
void CTMP::Precache(void)
{
}

/* <2b0413> ../cstrike/dlls/weapons.h:1130 */
void CTMP::UseDecrement(void)
{
}

/* <2b03ed> ../cstrike/dlls/weapons.h:1129 */
void CTMP::GetMaxSpeed(void)
{
}

/* <2b03c7> ../cstrike/dlls/weapons.h:1121 */
void CTMP::iItemSlot(void)
{
}

/* <2b03a1> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2b0375> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2b034f> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2b0329> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <2b0303> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2b02dc> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2b02b6> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2b0290> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2b026a> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2b0235> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2b0209> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2b01ce> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2afff4> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2affce> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2aff99> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2aff3a> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2aff05> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2afedf> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2afeb9> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2afe93> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2afe6d> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2afe46> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2afe20> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2afdfa> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2afdd4> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2afda0> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2afd7a> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2afd54> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2afd20> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2afcfa> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2afc66> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2afc16> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2afbe2> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2afbae> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2afb6c> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2afb2a> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2afb04> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2afade> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2afaac> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2afa6c> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2afa40> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2afa0c> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2af9e6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2af9c0> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2af99f> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2af979> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2af911> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:116 */
void CTMP::TMPFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   155
//		Vector vecSrc;                                  //   157
//		Vector vecDir;                                  //   159
//		int flag;                                             //   163
//	}
}

/* <2af8df> ../cstrike/dlls/cbase.h:800 */
CTMP *GetClassPtr<CTMP>(CTMP *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2af8c3> ../cstrike/dlls/weapons.h:1116 */
inline void CTMP::CTMP(void)
{
}

/* <2af847> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2af821> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2af753> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2af6e4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2af6a5> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2af68c> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:108 */
void CTMP::PrimaryAttack(void)
{
}

/* <2af666> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2af63f> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2af618> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2af5ff> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2af5e1> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2af592> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2af557> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2af4ee> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2af4d5> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2af48b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2af457> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2af430> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2af404> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2af3e6> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2af3be> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2af3a5> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:197 */
void CTMP::Reload(void)
{
}

/* <2af387> ../cstrike/dlls/wpn_shared/wpn_tmp.cpp:211 */
void CTMP::WeaponIdle(void)
{
}

/* <2ab451> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:189 */
void CSmokeGrenade::ResetPlayerShieldAnim(void)
{
}

/* <2ab42f> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:178 */
void CSmokeGrenade::SetPlayerShieldAnim(void)
{
}

/* <2ab3fd> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:135 */
void CSmokeGrenade::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <2ab333> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:38 */
void weapon_smokegrenade(entvars_t *pev)
{
//	GetClassPtr<CSmokeGrenade>(CSmokeGrenade *a);  //    38
}

/* <2ab135> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:199 */
void CSmokeGrenade::WeaponIdle(void)
{
//	WeaponIdle(CSmokeGrenade *const this);  //   199
}

/* <2ab11c> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:189 */
void CSmokeGrenade::ResetPlayerShieldAnim(void)
{
}

/* <2ab103> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:178 */
void CSmokeGrenade::SetPlayerShieldAnim(void)
{
}

/* <2ab0b2> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:173 */
void CSmokeGrenade::SecondaryAttack(void)
{
//	ShieldSecondaryFire(CSmokeGrenade::SecondaryAttack(//				int iUpAnim,
//				int iDownAnim);  //   175
}

/* <2ab077> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:89 */
void CSmokeGrenade::Deploy(void)
{
//	Deploy(CSmokeGrenade *const this);  //    89
}

/* <2ab03d> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:120 */
void CSmokeGrenade::PrimaryAttack(void)
{
//	PrimaryAttack(CSmokeGrenade *const this);  //   120
}

/* <2aafee> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2aafc7> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:40 */
void CSmokeGrenade::Spawn(void)
{
}

/* <2aaf92> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:104 */
void CSmokeGrenade::Holster(int skiplocal)
{
}

/* <2aaf6c> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:310 */
void CSmokeGrenade::CanDeploy(void)
{
}

/* <2aaf39> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:71 */
void CSmokeGrenade::GetItemInfo(ItemInfo *p)
{
}

/* <2aaf12> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:59 */
void CSmokeGrenade::Precache(void)
{
}

/* <2aaeec> ../cstrike/dlls/weapons.h:1104 */
void CSmokeGrenade::UseDecrement(void)
{
}

/* <2aaec6> ../cstrike/dlls/weapons.h:1102 */
void CSmokeGrenade::CanDrop(void)
{
}

/* <2aaea0> ../cstrike/dlls/weapons.h:1101 */
void CSmokeGrenade::GetMaxSpeed(void)
{
}

/* <2aae7a> ../cstrike/dlls/weapons.h:1094 */
void CSmokeGrenade::iItemSlot(void)
{
}

/* <2aae54> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2aae28> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2aae02> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2aaddc> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <2aadb6> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2aad8f> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2aad69> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2aad43> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2aad0e> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2aace2> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2aaca7> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2aaacd> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2aaaa7> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2aaa72> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2aaa13> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2aa9de> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2aa9b8> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2aa992> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2aa96c> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2aa946> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2aa91f> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2aa8f9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2aa8d3> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2aa8ad> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2aa879> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2aa853> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2aa82d> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2aa7f9> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2aa7d3> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2aa73f> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2aa6ef> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2aa6bb> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2aa687> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2aa645> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2aa603> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2aa5dd> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2aa5b7> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2aa585> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2aa545> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2aa519> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2aa4e5> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2aa4bf> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2aa499> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2aa478> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2aa452> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2aa423> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:135 */
void CSmokeGrenade::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <2aa3f1> ../cstrike/dlls/cbase.h:800 */
CSmokeGrenade *GetClassPtr<CSmokeGrenade>(CSmokeGrenade *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2aa3d5> ../cstrike/dlls/weapons.h:1089 */
inline void CSmokeGrenade::CSmokeGrenade(void)
{
}

/* <2aa359> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2aa333> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2aa28e> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2aa21f> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2aa1e0> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2aa17b> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:199 */
void CSmokeGrenade::WeaponIdle(void)
{
//	{
//		Vector angThrow;                                //   211
//		float flVel;                                          //   218
//		Vector vecSrc;                                  //   224
//		Vector vecThrow;                                //   227
//	}
//	{
//		int iAnim;                                            //   277
//		float flRand;                                         //   278
//	}
}

/* <2aa154> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2aa136> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2aa0e2> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2aa048> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2aa014> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2a9fed> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2a9fc1> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2a9fa3> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2a9f8a> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:89 */
void CSmokeGrenade::Deploy(void)
{
}

/* <2a9f6c> ../cstrike/dlls/wpn_shared/wpn_smokegrenade.cpp:120 */
void CSmokeGrenade::PrimaryAttack(void)
{
}

/* <2a63eb> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:130 */
void CSG552::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   134
//	PrimaryAttack(CSG552 *const this);  //   130
}

/* <2a62a3> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:143 */
void CSG552::SG552Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		int flag;                                             //   181
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		Vector vecDir;                                  //   194
//		operator+(const Vector *const this,
//				const Vector &v);  //   189
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//		Length2D(const Vector *const this);  //   214
//	}
}

/* <2a61d9> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:50 */
void weapon_sg552(entvars_t *pev)
{
//	GetClassPtr<CSG552>(CSG552 *a);  //    50
}

/* <2a617c> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:225 */
void CSG552::Reload(void)
{
//	{
//		int iResult;                                          //   230
//	}
//	Reload(CSG552 *const this);  //   225
}

/* <2a6141> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:244 */
void CSG552::WeaponIdle(void)
{
//	WeaponIdle(CSG552 *const this);  //   244
}

/* <2a60f2> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2a60cb> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:52 */
void CSG552::Spawn(void)
{
}

/* <2a60a4> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:100 */
void CSG552::Deploy(void)
{
}

/* <2a607e> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:259 */
void CSG552::GetMaxSpeed(void)
{
}

/* <2a6058> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:109 */
void CSG552::SecondaryAttack(void)
{
}

/* <2a6025> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:83 */
void CSG552::GetItemInfo(ItemInfo *p)
{
}

/* <2a5ffe> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:66 */
void CSG552::Precache(void)
{
}

/* <2a5fd8> ../cstrike/dlls/weapons.h:641 */
void CSG552::UseDecrement(void)
{
}

/* <2a5fb2> ../cstrike/dlls/weapons.h:629 */
void CSG552::iItemSlot(void)
{
}

/* <2a5f8c> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2a5f60> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2a5f3a> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2a5f14> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2a5eed> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2a5ec7> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2a5ea1> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2a5e7b> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2a5e46> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2a5e1a> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2a5ddf> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2a5c05> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2a5bdf> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2a5baa> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2a5b4b> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2a5b16> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2a5af0> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2a5aca> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2a5aa4> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2a5a7e> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2a5a57> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2a5a31> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2a5a0b> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2a59e5> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2a59b1> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2a598b> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2a5965> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2a5931> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2a590b> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2a5877> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2a5827> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2a57f3> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2a57bf> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2a577d> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2a573b> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2a5715> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2a56ef> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2a56bd> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2a567d> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2a5651> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2a561d> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2a55f7> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2a55d1> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2a55b0> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2a558a> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2a5558> ../cstrike/dlls/cbase.h:800 */
CSG552 *GetClassPtr<CSG552>(CSG552 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2a553c> ../cstrike/dlls/weapons.h:624 */
inline void CSG552::CSG552(void)
{
}

/* <2a54c0> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2a549a> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2a53cc> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2a535d> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2a531e> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2a5305> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:130 */
void CSG552::PrimaryAttack(void)
{
}

/* <2a52df> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2a52b8> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2a5291> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2a5278> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2a525a> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2a520b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2a51d0> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2a5167> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2a514e> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2a5104> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2a50d0> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2a50a9> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2a507d> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2a505f> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2a5037> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2a5011> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:225 */
void CSG552::Reload(void)
{
//	{
//		int iResult;                                          //   230
//	}
}

/* <2a4ff3> ../cstrike/dlls/wpn_shared/wpn_sg552.cpp:244 */
void CSG552::WeaponIdle(void)
{
}

/* <2a1003> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:144 */
void CSG550::SG550Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   195
//		Vector vecDir;                                  //   196
//		int flag;                                             //   200
//		operator+(const Vector *const this,
//				const Vector &v);  //   187
//		Vector(Vector *const this,
//			const Vector &v);  //   197
//		Vector(Vector *const this,
//			const Vector &v);  //   197
//	}
}

/* <2a0f39> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:48 */
void weapon_sg550(entvars_t *pev)
{
//	GetClassPtr<CSG550>(CSG550 *a);  //    48
}

/* <2a0eef> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:132 */
void CSG550::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   136
//	PrimaryAttack(CSG550 *const this);  //   132
}

/* <2a0df0> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:144 */
void CSG550::SG550Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   195
//		int flag;                                             //   200
//		Vector vecDir;                                  //   196
//		operator+(const Vector *const this,
//				const Vector &v);  //   187
//		Vector(Vector *const this,
//			const Vector &v);  //   197
//		Vector(Vector *const this,
//			const Vector &v);  //   197
//	}
}

/* <2a0d98> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:227 */
void CSG550::Reload(void)
{
//	{
//		int iResult;                                          //   232
//	}
//	Reload(CSG550 *const this);  //   227
}

/* <2a0d5e> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:248 */
void CSG550::WeaponIdle(void)
{
//	WeaponIdle(CSG550 *const this);  //   248
}

/* <2a0d0f> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <2a0ce8> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:50 */
void CSG550::Spawn(void)
{
}

/* <2a0cc1> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:96 */
void CSG550::Deploy(void)
{
}

/* <2a0c5d> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:101 */
void CSG550::SecondaryAttack(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   128
}

/* <2a0c37> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:265 */
void CSG550::GetMaxSpeed(void)
{
}

/* <2a0c04> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:79 */
void CSG550::GetItemInfo(ItemInfo *p)
{
}

/* <2a0bdd> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:63 */
void CSG550::Precache(void)
{
}

/* <2a0bb7> ../cstrike/dlls/weapons.h:1261 */
void CSG550::UseDecrement(void)
{
}

/* <2a0b91> ../cstrike/dlls/weapons.h:1249 */
void CSG550::iItemSlot(void)
{
}

/* <2a0b6b> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2a0b3f> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2a0b19> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2a0af3> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2a0acc> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <2a0aa6> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2a0a80> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2a0a5a> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2a0a25> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2a09f9> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2a09be> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2a07e4> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2a07be> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2a0789> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2a072a> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2a06f5> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2a06cf> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2a06a9> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2a0683> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2a065d> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2a0636> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2a0610> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2a05ea> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2a05c4> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2a0590> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2a056a> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2a0544> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2a0510> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2a04ea> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2a0456> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2a0406> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2a03d2> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2a039e> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2a035c> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2a031a> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2a02f4> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2a02ce> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2a029c> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2a025c> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2a0230> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2a01fc> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2a01d6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2a01b0> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2a018f> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2a0169> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2a0101> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:144 */
void CSG550::SG550Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   195
//		Vector vecDir;                                  //   196
//		int flag;                                             //   200
//	}
}

/* <2a00cf> ../cstrike/dlls/cbase.h:800 */
CSG550 *GetClassPtr<CSG550>(CSG550 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2a00b3> ../cstrike/dlls/weapons.h:1244 */
inline void CSG550::CSG550(void)
{
}

/* <2a0037> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2a0011> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <29ff43> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <29fed4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <29fe95> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <29fe7c> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:132 */
void CSG550::PrimaryAttack(void)
{
}

/* <29fe56> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <29fe2f> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <29fe08> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <29fdef> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <29fdd1> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <29fd82> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <29fd47> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <29fc93> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <29fc7a> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <29fc30> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <29fbfc> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <29fbd5> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <29fba9> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <29fb8b> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <29fb63> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <29fb3d> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:227 */
void CSG550::Reload(void)
{
//	{
//		int iResult;                                          //   232
//	}
}

/* <29fb1f> ../cstrike/dlls/wpn_shared/wpn_sg550.cpp:248 */
void CSG550::WeaponIdle(void)
{
}

/* <29bb45> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:154 */
void CSCOUT::SCOUTFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   197
//		Vector vecSrc;                                  //   200
//		Vector vecDir;                                  //   202
//		int flag;                                             //   206
//		operator+(const Vector *const this,
//				const Vector &v);  //   188
//		Vector(Vector *const this,
//			const Vector &v);  //   203
//		Vector(Vector *const this,
//			const Vector &v);  //   203
//	}
}

/* <29ba7b> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:48 */
void weapon_scout(entvars_t *pev)
{
//	GetClassPtr<CSCOUT>(CSCOUT *a);  //    48
}

/* <29ba31> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:140 */
void CSCOUT::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   144
//	PrimaryAttack(CSCOUT *const this);  //   140
}

/* <29b932> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:154 */
void CSCOUT::SCOUTFire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   197
//		Vector vecSrc;                                  //   200
//		int flag;                                             //   206
//		Vector vecDir;                                  //   202
//		operator+(const Vector *const this,
//				const Vector &v);  //   188
//		Vector(Vector *const this,
//			const Vector &v);  //   203
//		Vector(Vector *const this,
//			const Vector &v);  //   203
//	}
}

/* <29b8f7> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:96 */
void CSCOUT::Deploy(void)
{
//	Deploy(CSCOUT *const this);  //    96
}

/* <29b89e> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:232 */
void CSCOUT::Reload(void)
{
//	{
//		int iResult;                                          //   234
//	}
//	Reload(CSCOUT *const this);  //   232
}

/* <29b864> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:250 */
void CSCOUT::WeaponIdle(void)
{
//	WeaponIdle(CSCOUT *const this);  //   250
}

/* <29b815> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <29b7ee> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:50 */
void CSCOUT::Spawn(void)
{
}

/* <29b78a> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:109 */
void CSCOUT::SecondaryAttack(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   136
}

/* <29b764> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:267 */
void CSCOUT::GetMaxSpeed(void)
{
}

/* <29b731> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:79 */
void CSCOUT::GetItemInfo(ItemInfo *p)
{
}

/* <29b70a> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:62 */
void CSCOUT::Precache(void)
{
}

/* <29b6e4> ../cstrike/dlls/weapons.h:1079 */
void CSCOUT::UseDecrement(void)
{
}

/* <29b6be> ../cstrike/dlls/weapons.h:1068 */
void CSCOUT::iItemSlot(void)
{
}

/* <29b698> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <29b66c> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <29b646> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <29b620> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <29b5f9> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <29b5d3> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <29b5ad> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <29b587> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <29b552> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <29b526> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <29b4eb> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <29b311> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <29b2eb> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <29b2b6> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <29b257> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <29b222> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <29b1fc> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <29b1d6> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <29b1b0> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <29b18a> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <29b163> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <29b13d> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <29b117> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <29b0f1> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <29b0bd> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <29b097> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <29b071> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <29b03d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <29b017> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <29af83> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <29af33> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <29aeff> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <29aecb> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <29ae89> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <29ae47> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <29ae21> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <29adfb> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <29adc9> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <29ad89> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <29ad5d> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <29ad29> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <29ad03> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <29acdd> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <29acbc> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <29ac96> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <29ac2e> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:154 */
void CSCOUT::SCOUTFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   197
//		Vector vecSrc;                                  //   200
//		Vector vecDir;                                  //   202
//		int flag;                                             //   206
//	}
}

/* <29abfc> ../cstrike/dlls/cbase.h:800 */
CSCOUT *GetClassPtr<CSCOUT>(CSCOUT *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <29abe0> ../cstrike/dlls/weapons.h:1063 */
inline void CSCOUT::CSCOUT(void)
{
}

/* <29ab64> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <29ab3e> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <29aa70> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <29aa01> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <29a9c2> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <29a9a9> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:140 */
void CSCOUT::PrimaryAttack(void)
{
}

/* <29a983> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <29a95c> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <29a935> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <29a91c> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <29a8fe> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <29a8af> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <29a874> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <29a7c0> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <29a7a7> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <29a75d> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <29a729> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <29a702> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <29a6d6> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <29a6b8> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <29a690> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <29a677> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:96 */
void CSCOUT::Deploy(void)
{
}

/* <29a651> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:232 */
void CSCOUT::Reload(void)
{
//	{
//		int iResult;                                          //   234
//	}
}

/* <29a633> ../cstrike/dlls/wpn_shared/wpn_scout.cpp:250 */
void CSCOUT::WeaponIdle(void)
{
}

/* <296647> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:120 */
void CP90::P90Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		int flag;                                             //   168
//		operator+(const Vector *const this,
//				const Vector &v);  //   155
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   193
//	}
}

/* <29657d> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:49 */
void weapon_p90(entvars_t *pev)
{
//	GetClassPtr<CP90>(CP90 *a);  //    49
}

/* <296533> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:110 */
void CP90::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   114
//	PrimaryAttack(CP90 *const this);  //   110
}

/* <296422> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:120 */
void CP90::P90Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		int flag;                                             //   168
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   155
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   193
//	}
}

/* <2963e8> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:202 */
void CP90::Reload(void)
{
//	Reload(CP90 *const this);  //   202
}

/* <2963ad> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:216 */
void CP90::WeaponIdle(void)
{
//	WeaponIdle(CP90 *const this);  //   216
}

/* <29635e> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <296337> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:51 */
void CP90::Spawn(void)
{
}

/* <296310> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:100 */
void CP90::Deploy(void)
{
}

/* <2962dd> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:83 */
void CP90::GetItemInfo(ItemInfo *p)
{
}

/* <2962b6> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:66 */
void CP90::Precache(void)
{
}

/* <296290> ../cstrike/dlls/weapons.h:1053 */
void CP90::UseDecrement(void)
{
}

/* <29626a> ../cstrike/dlls/weapons.h:1052 */
void CP90::GetMaxSpeed(void)
{
}

/* <296244> ../cstrike/dlls/weapons.h:1044 */
void CP90::iItemSlot(void)
{
}

/* <29621e> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2961f2> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2961cc> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2961a6> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <296180> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <296159> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <296133> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <29610d> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2960e7> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2960b2> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <296086> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <29604b> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <295e71> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <295e4b> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <295e16> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <295db7> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <295d82> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <295d5c> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <295d36> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <295d10> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <295cea> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <295cc3> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <295c9d> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <295c77> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <295c51> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <295c1d> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <295bf7> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <295bd1> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <295b9d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <295b77> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <295ae3> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <295a93> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <295a5f> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <295a2b> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2959e9> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2959a7> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <295981> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <29595b> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <295929> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2958e9> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2958bd> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <295889> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <295863> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <29583d> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <29581c> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2957f6> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <29578e> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:120 */
void CP90::P90Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		int flag;                                             //   168
//	}
}

/* <29575c> ../cstrike/dlls/cbase.h:800 */
CP90 *GetClassPtr<CP90>(CP90 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <295740> ../cstrike/dlls/weapons.h:1039 */
inline void CP90::CP90(void)
{
}

/* <2956c4> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <29569e> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2955d0> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <295561> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <295522> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <295509> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:110 */
void CP90::PrimaryAttack(void)
{
}

/* <2954e3> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2954bc> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <295495> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <29547c> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <29545e> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <29540f> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2953d4> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <29536b> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <295352> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <295308> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2952d4> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2952ad> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <295281> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <295263> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <29523b> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <295222> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:202 */
void CP90::Reload(void)
{
}

/* <295204> ../cstrike/dlls/wpn_shared/wpn_p90.cpp:216 */
void CP90::WeaponIdle(void)
{
}

/* <291213> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:147 */
void CP228::P228Fire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		Vector vecDir;                                  //   206
//		int flag;                                             //   210
//		operator+(const Vector *const this,
//				const Vector &v);  //   196
//		Vector(Vector *const this,
//			const Vector &v);  //   207
//		Vector(Vector *const this,
//			const Vector &v);  //   207
//	}
}

/* <291149> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:63 */
void weapon_p228(entvars_t *pev)
{
//	GetClassPtr<CP228>(CP228 *a);  //    63
}

/* <2910ff> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:130 */
void CP228::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   134
//	PrimaryAttack(CP228 *const this);  //   130
}

/* <291001> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:147 */
void CP228::P228Fire(float flSpread, BOOL fUseSemi, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		int flag;                                             //   210
//		Vector vecDir;                                  //   206
//		operator+(const Vector *const this,
//				const Vector &v);  //   196
//		Vector(Vector *const this,
//			const Vector &v);  //   207
//		Vector(Vector *const this,
//			const Vector &v);  //   207
//	}
}

/* <290fc6> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:115 */
void CP228::Deploy(void)
{
//	Deploy(CP228 *const this);  //   115
}

/* <290f69> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:241 */
void CP228::Reload(void)
{
//	{
//		int iResult;                                          //   246
//	}
//	Reload(CP228 *const this);  //   241
}

/* <290f2e> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:261 */
void CP228::WeaponIdle(void)
{
//	WeaponIdle(CP228 *const this);  //   261
}

/* <290edf> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <290eb8> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:65 */
void CP228::Spawn(void)
{
}

/* <290e91> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:142 */
void CP228::SecondaryAttack(void)
{
}

/* <290e5e> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:98 */
void CP228::GetItemInfo(ItemInfo *p)
{
}

/* <290e37> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:80 */
void CP228::Precache(void)
{
}

/* <290e11> ../cstrike/dlls/weapons.h:1029 */
void CP228::IsPistol(void)
{
}

/* <290deb> ../cstrike/dlls/weapons.h:1028 */
void CP228::UseDecrement(void)
{
}

/* <290dc5> ../cstrike/dlls/weapons.h:1027 */
void CP228::GetMaxSpeed(void)
{
}

/* <290d9f> ../cstrike/dlls/weapons.h:1016 */
void CP228::iItemSlot(void)
{
}

/* <290d79> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <290d4d> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <290d27> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <290d01> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <290cda> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <290cb4> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <290c8e> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <290c68> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <290c33> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <290c07> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <290bcc> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2909f2> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2909cc> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <290997> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <290938> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <290903> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2908dd> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2908b7> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <290891> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <29086b> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <290844> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <29081e> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2907f8> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2907d2> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <29079e> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <290778> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <290752> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <29071e> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2906f8> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <290664> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <290614> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2905e0> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2905ac> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <29056a> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <290528> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <290502> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2904dc> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2904aa> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <29046a> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <29043e> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <29040a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2903e4> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2903be> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <29039d> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <290377> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <29030f> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:147 */
void CP228::P228Fire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   203
//		Vector vecSrc;                                  //   205
//		Vector vecDir;                                  //   206
//		int flag;                                             //   210
//	}
}

/* <2902dd> ../cstrike/dlls/cbase.h:800 */
CP228 *GetClassPtr<CP228>(CP228 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2902c1> ../cstrike/dlls/weapons.h:1011 */
inline void CP228::CP228(void)
{
}

/* <290245> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <29021f> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <290151> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2900e2> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2900a3> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <29008a> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:130 */
void CP228::PrimaryAttack(void)
{
}

/* <290064> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <29003d> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <290016> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <28fffd> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <28ffdf> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <28ff90> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <28ff55> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <28feec> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <28fed3> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <28fe89> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <28fe55> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <28fe2e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <28fe02> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <28fde4> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <28fdbc> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <28fda3> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:115 */
void CP228::Deploy(void)
{
}

/* <28fd7d> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:241 */
void CP228::Reload(void)
{
//	{
//		int iResult;                                          //   246
//	}
}

/* <28fd5f> ../cstrike/dlls/wpn_shared/wpn_p228.cpp:261 */
void CP228::WeaponIdle(void)
{
}

/* <28bcc0> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:117 */
void CMP5N::MP5NFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		int flag;                                             //   154
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   152
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   192
//	}
}

/* <28bbf6> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:50 */
void weapon_mp5navy(entvars_t *pev)
{
//	GetClassPtr<CMP5N>(CMP5N *a);  //    50
}

/* <28bbbc> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:109 */
void CMP5N::PrimaryAttack(void)
{
//	PrimaryAttack(CMP5N *const this);  //   109
}

/* <28baab> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:117 */
void CMP5N::MP5NFire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		int flag;                                             //   154
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   152
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   192
//	}
}

/* <28ba71> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:201 */
void CMP5N::Reload(void)
{
//	Reload(CMP5N *const this);  //   201
}

/* <28ba36> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:215 */
void CMP5N::WeaponIdle(void)
{
//	WeaponIdle(CMP5N *const this);  //   215
}

/* <28b9e7> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <28b9c0> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:52 */
void CMP5N::Spawn(void)
{
}

/* <28b999> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:100 */
void CMP5N::Deploy(void)
{
}

/* <28b966> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:83 */
void CMP5N::GetItemInfo(ItemInfo *p)
{
}

/* <28b93f> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:66 */
void CMP5N::Precache(void)
{
}

/* <28b919> ../cstrike/dlls/weapons.h:615 */
void CMP5N::UseDecrement(void)
{
}

/* <28b8f3> ../cstrike/dlls/weapons.h:612 */
void CMP5N::GetMaxSpeed(void)
{
}

/* <28b8cd> ../cstrike/dlls/weapons.h:604 */
void CMP5N::iItemSlot(void)
{
}

/* <28b8a7> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <28b87b> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <28b855> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <28b82f> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <28b809> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <28b7e2> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <28b7bc> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <28b796> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <28b770> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <28b73b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <28b70f> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <28b6d4> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <28b4fa> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <28b4d4> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <28b49f> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <28b440> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <28b40b> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <28b3e5> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <28b3bf> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <28b399> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <28b373> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <28b34c> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <28b326> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <28b300> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <28b2da> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <28b2a6> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <28b280> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <28b25a> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <28b226> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <28b200> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <28b16c> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <28b11c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <28b0e8> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <28b0b4> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <28b072> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <28b030> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <28b00a> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <28afe4> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <28afb2> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <28af72> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <28af46> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <28af12> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <28aeec> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <28aec6> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <28aea5> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <28ae7f> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <28ae17> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:117 */
void CMP5N::MP5NFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		int flag;                                             //   154
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//	}
}

/* <28ade5> ../cstrike/dlls/cbase.h:800 */
CMP5N *GetClassPtr<CMP5N>(CMP5N *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <28adc9> ../cstrike/dlls/weapons.h:599 */
inline void CMP5N::CMP5N(void)
{
}

/* <28ad4d> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <28ad27> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <28ac59> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <28abea> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <28abab> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <28ab92> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:109 */
void CMP5N::PrimaryAttack(void)
{
}

/* <28ab6c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <28ab45> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <28ab1e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <28ab05> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <28aae7> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <28aa98> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <28aa5d> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <28a9f4> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <28a9db> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <28a991> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <28a95d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <28a936> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <28a90a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <28a8ec> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <28a8c4> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <28a8ab> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:201 */
void CMP5N::Reload(void)
{
}

/* <28a88d> ../cstrike/dlls/wpn_shared/wpn_mp5navy.cpp:215 */
void CMP5N::WeaponIdle(void)
{
}

/* <28688a> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:116 */
void CMAC10::MAC10Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   159
//		Vector vecSrc;                                  //   161
//		Vector vecDir;                                  //   162
//		int flag;                                             //   165
//		operator+(const Vector *const this,
//				const Vector &v);  //   153
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Length2D(const Vector *const this);  //   190
//	}
}

/* <2867c0> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:50 */
void weapon_mac10(entvars_t *pev)
{
//	GetClassPtr<CMAC10>(CMAC10 *a);  //    50
}

/* <286786> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:108 */
void CMAC10::PrimaryAttack(void)
{
//	PrimaryAttack(CMAC10 *const this);  //   108
}

/* <286675> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:116 */
void CMAC10::MAC10Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   159
//		Vector vecSrc;                                  //   161
//		int flag;                                             //   165
//		Vector vecDir;                                  //   162
//		operator+(const Vector *const this,
//				const Vector &v);  //   153
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Length2D(const Vector *const this);  //   190
//	}
}

/* <28663b> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:199 */
void CMAC10::Reload(void)
{
//	Reload(CMAC10 *const this);  //   199
}

/* <286600> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:213 */
void CMAC10::WeaponIdle(void)
{
//	WeaponIdle(CMAC10 *const this);  //   213
}

/* <2865b1> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <28658a> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:52 */
void CMAC10::Spawn(void)
{
}

/* <286563> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:99 */
void CMAC10::Deploy(void)
{
}

/* <286530> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:82 */
void CMAC10::GetItemInfo(ItemInfo *p)
{
}

/* <286509> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:66 */
void CMAC10::Precache(void)
{
}

/* <2864e3> ../cstrike/dlls/weapons.h:1001 */
void CMAC10::UseDecrement(void)
{
}

/* <2864bd> ../cstrike/dlls/weapons.h:1000 */
void CMAC10::GetMaxSpeed(void)
{
}

/* <286497> ../cstrike/dlls/weapons.h:992 */
void CMAC10::iItemSlot(void)
{
}

/* <286471> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <286445> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <28641f> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2863f9> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <2863d3> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <2863ac> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <286386> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <286360> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <28633a> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <286305> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2862d9> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <28629e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2860c4> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <28609e> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <286069> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <28600a> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <285fd5> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <285faf> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <285f89> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <285f63> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <285f3d> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <285f16> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <285ef0> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <285eca> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <285ea4> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <285e70> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <285e4a> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <285e24> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <285df0> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <285dca> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <285d36> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <285ce6> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <285cb2> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <285c7e> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <285c3c> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <285bfa> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <285bd4> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <285bae> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <285b7c> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <285b3c> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <285b10> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <285adc> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <285ab6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <285a90> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <285a6f> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <285a49> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2859e1> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:116 */
void CMAC10::MAC10Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   159
//		Vector vecSrc;                                  //   161
//		Vector vecDir;                                  //   162
//		int flag;                                             //   165
//	}
}

/* <2859af> ../cstrike/dlls/cbase.h:800 */
CMAC10 *GetClassPtr<CMAC10>(CMAC10 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <285993> ../cstrike/dlls/weapons.h:987 */
inline void CMAC10::CMAC10(void)
{
}

/* <285917> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2858f1> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <285823> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2857b4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <285775> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <28575c> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:108 */
void CMAC10::PrimaryAttack(void)
{
}

/* <285736> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <28570f> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2856e8> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2856cf> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2856b1> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <285662> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <285627> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2855be> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2855a5> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <28555b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <285527> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <285500> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2854d4> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2854b6> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <28548e> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <285475> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:199 */
void CMAC10::Reload(void)
{
}

/* <285457> ../cstrike/dlls/wpn_shared/wpn_mac10.cpp:213 */
void CMAC10::WeaponIdle(void)
{
}

/* <28140c> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:173 */
void CM4A1::M4A1Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   210
//		Vector vecSrc;                                  //   212
//		Vector vecDir;                                  //   213
//		int flag;                                             //   223
//		operator+(const Vector *const this,
//				const Vector &v);  //   204
//		Vector(Vector *const this,
//			const Vector &v);  //   220
//		Vector(Vector *const this,
//			const Vector &v);  //   220
//		Length2D(const Vector *const this);  //   246
//		Vector(Vector *const this,
//			const Vector &v);  //   216
//		Vector(Vector *const this,
//			const Vector &v);  //   216
//	}
}

/* <281342> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:60 */
void weapon_m4a1(entvars_t *pev)
{
//	GetClassPtr<CM4A1>(CM4A1 *a);  //    60
}

/* <2812fd> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:149 */
void CM4A1::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   155
//	Length2D(const Vector *const this);  //   164
}

/* <2811a4> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:173 */
void CM4A1::M4A1Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   210
//		Vector vecSrc;                                  //   212
//		int flag;                                             //   223
//		Vector vecDir;                                  //   213
//		operator+(const Vector *const this,
//				const Vector &v);  //   204
//		Vector(Vector *const this,
//			const Vector &v);  //   220
//		Vector(Vector *const this,
//			const Vector &v);  //   220
//		Length2D(const Vector *const this);  //   246
//		Vector(Vector *const this,
//			const Vector &v);  //   216
//		Vector(Vector *const this,
//			const Vector &v);  //   216
//	}
}

/* <281169> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:114 */
void CM4A1::Deploy(void)
{
//	Deploy(CM4A1 *const this);  //   114
}

/* <28110b> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:257 */
void CM4A1::Reload(void)
{
//	{
//		int iResult;                                          //   262
//	}
//	Reload(CM4A1 *const this);  //   257
}

/* <2810cf> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:279 */
void CM4A1::WeaponIdle(void)
{
//	WeaponIdle(CM4A1 *const this);  //   279
}

/* <281080> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <281059> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:62 */
void CM4A1::Spawn(void)
{
}

/* <281032> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:127 */
void CM4A1::SecondaryAttack(void)
{
}

/* <28100c> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:296 */
void CM4A1::GetMaxSpeed(void)
{
}

/* <280fd9> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:97 */
void CM4A1::GetItemInfo(ItemInfo *p)
{
}

/* <280fb2> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:77 */
void CM4A1::Precache(void)
{
}

/* <280f8c> ../cstrike/dlls/weapons.h:979 */
void CM4A1::UseDecrement(void)
{
}

/* <280f66> ../cstrike/dlls/weapons.h:966 */
void CM4A1::iItemSlot(void)
{
}

/* <280f40> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <280f14> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <280eee> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <280ec8> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <280ea1> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <280e7b> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <280e55> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <280e2f> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <280dfa> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <280dce> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <280d93> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <280bb9> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <280b93> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <280b5e> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <280aff> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <280aca> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <280aa4> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <280a7e> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <280a58> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <280a32> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <280a0b> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2809e5> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2809bf> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <280999> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <280965> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <28093f> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <280919> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2808e5> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2808bf> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <28082b> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2807db> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2807a7> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <280773> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <280731> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2806ef> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2806c9> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2806a3> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <280671> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <280631> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <280605> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2805d1> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2805ab> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <280585> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <280564> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <28053e> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2804d6> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:173 */
void CM4A1::M4A1Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   210
//		Vector vecSrc;                                  //   212
//		Vector vecDir;                                  //   213
//		int flag;                                             //   223
//	}
}

/* <2804a4> ../cstrike/dlls/cbase.h:800 */
CM4A1 *GetClassPtr<CM4A1>(CM4A1 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <280488> ../cstrike/dlls/weapons.h:961 */
inline void CM4A1::CM4A1(void)
{
}

/* <28040c> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2803e6> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <280318> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2802a9> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <28026a> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <280244> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <28021d> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2801f6> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2801dd> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2801bf> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <280170> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <280135> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2800cc> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2800b3> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <280069> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <280035> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <28000e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <27ffe2> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <27ffc4> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <27ff9c> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <27ff83> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:114 */
void CM4A1::Deploy(void)
{
}

/* <27ff5c> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:257 */
void CM4A1::Reload(void)
{
//	{
//		int iResult;                                          //   262
//	}
}

/* <27ff3e> ../cstrike/dlls/wpn_shared/wpn_m4a1.cpp:279 */
void CM4A1::WeaponIdle(void)
{
}

/* <27bf59> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:52 */
void weapon_m3(entvars_t *pev)
{
//	GetClassPtr<CM3>(CM3 *a);  //    52
}

/* <27bf1e> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:182 */
void CM3::Reload(void)
{
//	Reload(CM3 *const this);  //   182
}

/* <27bee3> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:228 */
void CM3::WeaponIdle(void)
{
//	WeaponIdle(CM3 *const this);  //   228
}

/* <27be94> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <27be6d> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:54 */
void CM3::Spawn(void)
{
}

/* <27be46> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:103 */
void CM3::Deploy(void)
{
}

/* <27bcdd> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:109 */
void CM3::PrimaryAttack(void)
{
//	{
//		Vector vecAiming;                               //   147
//		Vector vecSrc;                                  //   148
//		int flag;                                             //   152
//		operator+(const Vector *const this,
//				const Vector &v);  //   146
//		Vector(Vector *const this,
//			const Vector &v);  //   147
//		Vector(Vector *const this,
//			const Vector &v);  //   149
//		Vector(Vector *const this,
//			const Vector &v);  //   149
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   149
//		edict(CBaseEntity *const this);  //   159
//	}
}

/* <27bcaa> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:84 */
void CM3::GetItemInfo(ItemInfo *p)
{
}

/* <27bc83> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:66 */
void CM3::Precache(void)
{
}

/* <27bc5d> ../cstrike/dlls/weapons.h:951 */
void CM3::UseDecrement(void)
{
}

/* <27bc37> ../cstrike/dlls/weapons.h:950 */
void CM3::GetMaxSpeed(void)
{
}

/* <27bc11> ../cstrike/dlls/weapons.h:943 */
void CM3::iItemSlot(void)
{
}

/* <27bbeb> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <27bbbf> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <27bb99> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <27bb73> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <27bb4d> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <27bb26> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <27bb00> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <27bada> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <27bab4> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <27ba7f> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <27ba53> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <27ba18> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <27b83e> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <27b818> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <27b7e3> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <27b784> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <27b74f> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <27b729> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <27b703> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <27b6dd> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <27b6b7> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <27b690> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <27b66a> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <27b644> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <27b61e> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <27b5ea> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <27b5c4> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <27b59e> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <27b56a> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <27b544> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <27b4b0> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <27b460> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <27b42c> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <27b3f8> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <27b3b6> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <27b374> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <27b34e> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <27b328> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <27b2f6> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <27b2b6> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <27b28a> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <27b256> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <27b230> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <27b20a> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <27b1e9> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <27b1c3> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <27b191> ../cstrike/dlls/cbase.h:800 */
CM3 *GetClassPtr<CM3>(CM3 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <27b175> ../cstrike/dlls/weapons.h:934 */
inline void CM3::CM3(void)
{
}

/* <27b0f9> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <27b0d3> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <27b005> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <27af96> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <27af57> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <27af31> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <27af0a> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <27aef1> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <27aed3> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <27ae84> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <27ae40> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <27ae22> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <27adb9> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <27ad6f> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <27ad3b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <27ad14> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <27ace8> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <27acca> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <27aca2> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <27ac89> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:182 */
void CM3::Reload(void)
{
}

/* <27ac6b> ../cstrike/dlls/wpn_shared/wpn_m3.cpp:228 */
void CM3::WeaponIdle(void)
{
}

/* <276c87> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:121 */
void CM249::M249Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		int flag;                                             //   167
//		operator+(const Vector *const this,
//				const Vector &v);  //   156
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   192
//	}
}

/* <276bbd> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:49 */
void weapon_m249(entvars_t *pev)
{
//	GetClassPtr<CM249>(CM249 *a);  //    49
}

/* <276b73> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:111 */
void CM249::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   115
//	PrimaryAttack(CM249 *const this);  //   111
}

/* <276a62> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:121 */
void CM249::M249Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		int flag;                                             //   167
//		Vector vecDir;                                  //   164
//		operator+(const Vector *const this,
//				const Vector &v);  //   156
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Vector(Vector *const this,
//			const Vector &v);  //   165
//		Length2D(const Vector *const this);  //   192
//	}
}

/* <276a02> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:201 */
void CM249::Reload(void)
{
//	{
//		int iResult;                                          //   206
//	}
//	Reload(CM249 *const this);  //   201
}

/* <2769c7> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:222 */
void CM249::WeaponIdle(void)
{
//	WeaponIdle(CM249 *const this);  //   222
}

/* <276978> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <276951> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:51 */
void CM249::Spawn(void)
{
}

/* <27692a> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:101 */
void CM249::Deploy(void)
{
}

/* <2768f7> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:84 */
void CM249::GetItemInfo(ItemInfo *p)
{
}

/* <2768d0> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:65 */
void CM249::Precache(void)
{
}

/* <2768aa> ../cstrike/dlls/weapons.h:924 */
void CM249::UseDecrement(void)
{
}

/* <276884> ../cstrike/dlls/weapons.h:923 */
void CM249::GetMaxSpeed(void)
{
}

/* <27685e> ../cstrike/dlls/weapons.h:915 */
void CM249::iItemSlot(void)
{
}

/* <276838> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <27680c> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2767e6> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <2767c0> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <27679a> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <276773> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <27674d> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <276727> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <276701> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2766cc> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2766a0> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <276665> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <27648b> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <276465> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <276430> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2763d1> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <27639c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <276376> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <276350> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <27632a> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <276304> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2762dd> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2762b7> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <276291> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <27626b> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <276237> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <276211> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2761eb> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2761b7> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <276191> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2760fd> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2760ad> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <276079> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <276045> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <276003> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <275fc1> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <275f9b> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <275f75> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <275f43> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <275f03> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <275ed7> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <275ea3> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <275e7d> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <275e57> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <275e36> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <275e10> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <275da8> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:121 */
void CM249::M249Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   161
//		Vector vecSrc;                                  //   163
//		Vector vecDir;                                  //   164
//		int flag;                                             //   167
//	}
}

/* <275d76> ../cstrike/dlls/cbase.h:800 */
CM249 *GetClassPtr<CM249>(CM249 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <275d5a> ../cstrike/dlls/weapons.h:910 */
inline void CM249::CM249(void)
{
}

/* <275cde> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <275cb8> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <275bea> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <275b7b> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <275b3c> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <275b23> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:111 */
void CM249::PrimaryAttack(void)
{
}

/* <275afd> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <275ad6> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <275aaf> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <275a96> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <275a78> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <275a29> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2759ee> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <275985> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <27596c> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <275922> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2758ee> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2758c7> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <27589b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <27587d> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <275855> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <27582f> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:201 */
void CM249::Reload(void)
{
//	{
//		int iResult;                                          //   206
//	}
}

/* <275811> ../cstrike/dlls/wpn_shared/wpn_m249.cpp:222 */
void CM249::WeaponIdle(void)
{
}

/* <2714e1> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:468 */
void CKnife::Stab(int fFirst)
{
//	{
//		int fDidHit;                                          //   470
//		TraceResult tr;                                       //   472
//		Vector vecSrc;                                  //   475
//		Vector vecEnd;                                  //   476
//		operator*(const Vector *const this,
//				float fl);  //   476
//		operator+(const Vector *const this,
//				const Vector &v);  //   476
//		{
//			class CBaseEntity *pHit;                     //   487
//			Instance(edict_t *pent);  //   487
//			edict(CBaseEntity *const this);  //   489
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   489
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   489
//		}
//		{
//			float flVol;                                  //   521
//			int fHitWorld;                                //   522
//			class CBaseEntity *pEntity;                  //   527
//			float flDamage;                               //   532
//			Instance(edict_t *pent);  //   527
//			{
//				class Vector2D vec2LOS;               //   536
//				float flDot;                          //   537
//				Vector vMyForward;              //   538
//				Normalize(const class Vector2D *const this);  //   543
//				Vector(Vector *const this,
//					const Vector &v);  //   538
//				DotProduct(const class Vector2D &a,
//						const class Vector2D &b);  //   545
//			}
//			Vector(Vector *const this,
//				const Vector &v);  //   555
//			{
//				float fvolbar;                        //   580
//				operator-(const Vector *const this,
//						const Vector &v);  //   580
//				operator*(const Vector *const this,
//						float fl);  //   580
//				operator+(const Vector *const this,
//						const Vector &v);  //   580
//				Vector(Vector *const this,
//					const Vector &v);  //   580
//			}
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   562
//		}
//	}
}

/* <2714ba> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:185 */
void CKnife::PrimaryAttack(void)
{
}

/* <271493> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:260 */
void CKnife::SwingAgain(void)
{
}

/* <270fa7> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:283 */
void CKnife::Swing(int fFirst)
{
//	{
//		int fDidHit;                                          //   285
//		TraceResult tr;                                       //   287
//		Vector vecSrc;                                  //   290
//		Vector vecEnd;                                  //   291
//		operator*(const Vector *const this,
//				float fl);  //   291
//		operator+(const Vector *const this,
//				const Vector &v);  //   291
//		{
//			class CBaseEntity *pHit;                     //   302
//			Instance(edict_t *pent);  //   302
//			edict(CBaseEntity *const this);  //   304
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   304
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   304
//		}
//		{
//			float flVol;                                  //   379
//			int fHitWorld;                                //   380
//			class CBaseEntity *pEntity;                  //   385
//			Instance(edict_t *pent);  //   385
//			SetPlayerShieldAnim(CKnife *const this);  //   387
//			Vector(Vector *const this,
//				const Vector &v);  //   396
//			{
//				float fvolbar;                        //   436
//				operator-(const Vector *const this,
//						const Vector &v);  //   436
//				operator*(const Vector *const this,
//						float fl);  //   436
//				operator+(const Vector *const this,
//						const Vector &v);  //   436
//				Vector(Vector *const this,
//					const Vector &v);  //   436
//			}
//			ResetPlayerShieldAnim(CKnife *const this);  //   461
//			Vector(Vector *const this,
//				const Vector &v);  //   401
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   419
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   417
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   415
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   413
//		}
//	}
}

/* <270f75> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:211 */
void CKnife::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <270f53> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:201 */
void CKnife::ResetPlayerShieldAnim(void)
{
}

/* <270f3a> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:201 */
void CKnife::ResetPlayerShieldAnim(void)
{
}

/* <270f18> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:190 */
void CKnife::SetPlayerShieldAnim(void)
{
}

/* <270eff> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:190 */
void CKnife::SetPlayerShieldAnim(void)
{
}

/* <270d70> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:124 */
void CKnife::WeaponAnimation(int iAnimation)
{
//	{
//		int flag;                                             //   126
//		edict(CBaseEntity *const this);  //   133
//	}
}

/* <270ca6> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:28 */
void weapon_knife(entvars_t *pev)
{
//	GetClassPtr<CKnife>(CKnife *a);  //    28
}

/* <270826> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:245 */
void CKnife::SecondaryAttack(void)
{
//	ShieldSecondaryFire(CKnife::SecondaryAttack(//				int iUpAnim,
//				int iDownAnim);  //   247
//	SecondaryAttack(CKnife *const this);  //   245
}

/* <2707c0> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:102 */
void CKnife::Deploy(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   104
}

/* <2705fc> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:265 */
void CKnife::WeaponIdle(void)
{
//	WeaponIdle(CKnife *const this);  //   265
}

/* <2705ad> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <270586> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:53 */
void CKnife::Spawn(void)
{
}

/* <27055f> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:254 */
void CKnife::Smack(void)
{
}

/* <27052b> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:119 */
void CKnife::Holster(int skiplocal)
{
}

/* <2704f9> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:85 */
void CKnife::GetItemInfo(ItemInfo *p)
{
}

/* <2704d2> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:66 */
void CKnife::Precache(void)
{
}

/* <2704ac> ../cstrike/dlls/weapons.h:896 */
void CKnife::UseDecrement(void)
{
}

/* <270486> ../cstrike/dlls/weapons.h:895 */
void CKnife::CanDrop(void)
{
}

/* <270460> ../cstrike/dlls/weapons.h:894 */
void CKnife::GetMaxSpeed(void)
{
}

/* <27043a> ../cstrike/dlls/weapons.h:883 */
void CKnife::iItemSlot(void)
{
}

/* <270414> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2703e8> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <2703c2> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <27039c> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <270376> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <27034f> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <270329> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <270303> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2702ce> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2702a2> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <270267> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <27008d> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <270067> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <270032> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <26ffd3> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <26ff9e> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <26ff78> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <26ff52> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <26ff2c> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <26ff06> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <26fedf> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <26feb9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <26fe93> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <26fe6d> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <26fe39> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <26fe13> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <26fded> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <26fdb9> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <26fd93> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <26fcff> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <26fcaf> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <26fc7b> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <26fc47> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <26fc05> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <26fbc3> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <26fb9d> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <26fb77> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <26fb45> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <26fb05> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <26fadf> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <26faab> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <26fa85> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <26fa5f> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <26fa3e> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <26fa18> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <26f9e9> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:211 */
void CKnife::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <26f917> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:468 */
void CKnife::Stab(int fFirst)
{
//	{
//		int fDidHit;                                          //   470
//		TraceResult tr;                                       //   472
//		Vector vecSrc;                                  //   475
//		Vector vecEnd;                                  //   476
//		{
//			class CBaseEntity *pHit;                     //   487
//		}
//		{
//			float flVol;                                  //   521
//			int fHitWorld;                                //   522
//			class CBaseEntity *pEntity;                  //   527
//			float flDamage;                               //   532
//			{
//				class Vector2D vec2LOS;               //   536
//				float flDot;                          //   537
//				Vector vMyForward;              //   538
//			}
//			{
//				float fvolbar;                        //   580
//			}
//		}
//	}
}

/* <26f852> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:140 */
void FindHullIntersection(Vector &vecSrc, TraceResult &tr, float *mins, float *maxs, edict_t *pEntity)
{
//	{
//		int i;                                                //   142
//		int j;                                                //   142
//		int k;                                                //   142
//		float distance;                                       //   143
//		float *minmaxs;                                      //   144
//		TraceResult tmpTrace;                                 //   145
//		Vector vecHullEnd;                              //   146
//		Vector vecEnd;                                  //   147
//		{
//			float thisDistance;                           //   172
//		}
//	}
}

/* <26f820> ../cstrike/dlls/cbase.h:800 */
CKnife *GetClassPtr<CKnife>(CKnife *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <26f804> ../cstrike/dlls/weapons.h:878 */
inline void CKnife::CKnife(void)
{
}

/* <26f7a5> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <26f77f> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <26f6da> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <26f66b> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <26f62c> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <26f613> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:245 */
void CKnife::SecondaryAttack(void)
{
}

/* <26f5ae> ../cstrike/dlls/vector.h:35 */
inline void Normalize(const class Vector2D *const this)
{
//	{
//		class Vector2D vec2;                                  //    37
//		float flLen;                                          //    39
//	}
}

/* <26f595> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <26f570> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <26f551> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <26f52a> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <26f503> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <26f4e5> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <26f496> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <26f478> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <26f3c8> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <26f37e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <26f34a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <26f323> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <26f2f7> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <26f2d7> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <26f2b9> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <26f28e> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <26f270> ../cstrike/dlls/vector.h:32 */
inline void Length(const class Vector2D *const this)
{
}

/* <26f252> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <26f234> ../cstrike/dlls/wpn_shared/wpn_knife.cpp:265 */
void CKnife::WeaponIdle(void)
{
}

/* <26b4eb> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:192 */
void CHEGrenade::ResetPlayerShieldAnim(void)
{
}

/* <26b4c9> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:181 */
void CHEGrenade::SetPlayerShieldAnim(void)
{
}

/* <26b497> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:138 */
void CHEGrenade::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <26b3cd> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:38 */
void weapon_hegrenade(entvars_t *pev)
{
//	GetClassPtr<CHEGrenade>(CHEGrenade *a);  //    38
}

/* <26b1ea> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:202 */
void CHEGrenade::WeaponIdle(void)
{
//	WeaponIdle(CHEGrenade *const this);  //   202
}

/* <26b1d1> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:192 */
void CHEGrenade::ResetPlayerShieldAnim(void)
{
}

/* <26b1b8> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:181 */
void CHEGrenade::SetPlayerShieldAnim(void)
{
}

/* <26b167> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:176 */
void CHEGrenade::SecondaryAttack(void)
{
//	ShieldSecondaryFire(CHEGrenade::SecondaryAttack(//				int iUpAnim,
//				int iDownAnim);  //   178
}

/* <26b12c> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:92 */
void CHEGrenade::Deploy(void)
{
//	Deploy(CHEGrenade *const this);  //    92
}

/* <26b0f2> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:123 */
void CHEGrenade::PrimaryAttack(void)
{
//	PrimaryAttack(CHEGrenade *const this);  //   123
}

/* <26b0a3> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <26b07c> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:40 */
void CHEGrenade::Spawn(void)
{
}

/* <26b047> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:107 */
void CHEGrenade::Holster(int skiplocal)
{
}

/* <26b021> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:303 */
void CHEGrenade::CanDeploy(void)
{
}

/* <26afee> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:74 */
void CHEGrenade::GetItemInfo(ItemInfo *p)
{
}

/* <26afc7> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:59 */
void CHEGrenade::Precache(void)
{
}

/* <26afa1> ../cstrike/dlls/weapons.h:867 */
void CHEGrenade::UseDecrement(void)
{
}

/* <26af7b> ../cstrike/dlls/weapons.h:865 */
void CHEGrenade::CanDrop(void)
{
}

/* <26af55> ../cstrike/dlls/weapons.h:864 */
void CHEGrenade::GetMaxSpeed(void)
{
}

/* <26af2f> ../cstrike/dlls/weapons.h:857 */
void CHEGrenade::iItemSlot(void)
{
}

/* <26af09> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <26aedd> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <26aeb7> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <26ae91> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <26ae6b> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <26ae44> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <26ae1e> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <26adf8> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <26adc3> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <26ad97> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <26ad5c> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <26ab82> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <26ab5c> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <26ab27> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <26aac8> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <26aa93> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <26aa6d> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <26aa47> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <26aa21> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <26a9fb> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <26a9d4> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <26a9ae> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <26a988> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <26a962> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <26a92e> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <26a908> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <26a8e2> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <26a8ae> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <26a888> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <26a7f4> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <26a7a4> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <26a770> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <26a73c> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <26a6fa> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <26a6b8> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <26a692> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <26a66c> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <26a63a> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <26a5fa> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <26a5ce> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <26a59a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <26a574> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <26a54e> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <26a52d> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <26a507> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <26a4d8> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:138 */
void CHEGrenade::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <26a4a6> ../cstrike/dlls/cbase.h:800 */
CHEGrenade *GetClassPtr<CHEGrenade>(CHEGrenade *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <26a48a> ../cstrike/dlls/weapons.h:852 */
inline void CHEGrenade::CHEGrenade(void)
{
}

/* <26a40e> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <26a3e8> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <26a343> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <26a2d4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <26a295> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <26a24e> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:202 */
void CHEGrenade::WeaponIdle(void)
{
//	{
//		Vector angThrow;                                //   214
//		float flVel;                                          //   221
//		Vector vecSrc;                                  //   227
//		Vector vecThrow;                                //   230
//	}
}

/* <26a227> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <26a209> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <26a1b5> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <26a11b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <26a0e7> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <26a0c0> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <26a094> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <26a076> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <26a05d> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:92 */
void CHEGrenade::Deploy(void)
{
}

/* <26a03f> ../cstrike/dlls/wpn_shared/wpn_hegrenade.cpp:123 */
void CHEGrenade::PrimaryAttack(void)
{
}

/* <2664c3> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:175 */
void CGLOCK18::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   181
//	Length2D(const Vector *const this);  //   192
}

/* <266385> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:201 */
void CGLOCK18::GLOCK18Fire(float flSpread, float flCycleTime, BOOL bFireBurst)
{
//	{
//		Vector vecAiming;                               //   264
//		Vector vecSrc;                                  //   266
//		Vector vecDir;                                  //   268
//		int flag;                                             //   272
//		operator+(const Vector *const this,
//				const Vector &v);  //   257
//		Vector(Vector *const this,
//			const Vector &v);  //   269
//		Vector(Vector *const this,
//			const Vector &v);  //   269
//	}
}

/* <2662bb> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:68 */
void weapon_glock18(entvars_t *pev)
{
//	GetClassPtr<CGLOCK18>(CGLOCK18 *a);  //    68
}

/* <266281> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:129 */
void CGLOCK18::Deploy(void)
{
//	Deploy(CGLOCK18 *const this);  //   129
}

/* <266246> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:156 */
void CGLOCK18::SecondaryAttack(void)
{
//	SecondaryAttack(CGLOCK18 *const this);  //   156
}

/* <2661e8> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:307 */
void CGLOCK18::Reload(void)
{
//	{
//		int iResult;                                          //   312
//	}
//	Reload(CGLOCK18 *const this);  //   307
}

/* <266190> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:329 */
void CGLOCK18::WeaponIdle(void)
{
//	WeaponIdle(CGLOCK18 *const this);  //   329
}

/* <266141> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <26611a> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:70 */
void CGLOCK18::Spawn(void)
{
}

/* <2660e7> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:112 */
void CGLOCK18::GetItemInfo(ItemInfo *p)
{
}

/* <2660c0> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:88 */
void CGLOCK18::Precache(void)
{
}

/* <26609a> ../cstrike/dlls/weapons.h:844 */
void CGLOCK18::IsPistol(void)
{
}

/* <266074> ../cstrike/dlls/weapons.h:843 */
void CGLOCK18::UseDecrement(void)
{
}

/* <26604e> ../cstrike/dlls/weapons.h:842 */
void CGLOCK18::GetMaxSpeed(void)
{
}

/* <266028> ../cstrike/dlls/weapons.h:833 */
void CGLOCK18::iItemSlot(void)
{
}

/* <266002> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <265fd6> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <265fb0> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <265f8a> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <265f63> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <265f3d> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <265f17> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <265ef1> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <265ebc> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <265e90> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <265e55> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <265c7b> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <265c55> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <265c20> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <265bc1> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <265b8c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <265b66> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <265b40> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <265b1a> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <265af4> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <265acd> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <265aa7> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <265a81> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <265a5b> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <265a27> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <265a01> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2659db> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2659a7> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <265981> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2658ed> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <26589d> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <265869> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <265835> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2657f3> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2657b1> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <26578b> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <265765> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <265733> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2656f3> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2656c7> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <265693> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <26566d> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <265647> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <265626> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <265600> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2655ce> ../cstrike/dlls/cbase.h:800 */
CGLOCK18 *GetClassPtr<CGLOCK18>(CGLOCK18 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2655b2> ../cstrike/dlls/weapons.h:828 */
inline void CGLOCK18::CGLOCK18(void)
{
}

/* <265536> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <265510> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <265442> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2653d3> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <265394> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <26536e> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <265347> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <265320> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <265307> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2652e9> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <26529a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <26525f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2651f6> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2651dd> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <265193> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <26515f> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <265138> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <26510c> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2650ee> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2650c6> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2650ad> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:129 */
void CGLOCK18::Deploy(void)
{
}

/* <265094> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:156 */
void CGLOCK18::SecondaryAttack(void)
{
}

/* <26506d> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:307 */
void CGLOCK18::Reload(void)
{
//	{
//		int iResult;                                          //   312
//	}
}

/* <265035> ../cstrike/dlls/wpn_shared/wpn_glock18.cpp:329 */
void CGLOCK18::WeaponIdle(void)
{
//	{
//		int iAnim;                                            //   350
//		float flRand;                                         //   351
//	}
}

/* <260fbe> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:145 */
void CG3SG1::G3SG1Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   199
//		Vector vecSrc;                                  //   201
//		Vector vecDir;                                  //   203
//		int flag;                                             //   206
//		operator+(const Vector *const this,
//				const Vector &v);  //   193
//		Vector(Vector *const this,
//			const Vector &v);  //   204
//		Vector(Vector *const this,
//			const Vector &v);  //   204
//	}
}

/* <260ef4> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:48 */
void weapon_g3sg1(entvars_t *pev)
{
//	GetClassPtr<CG3SG1>(CG3SG1 *a);  //    48
}

/* <260eaa> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:133 */
void CG3SG1::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   137
//	PrimaryAttack(CG3SG1 *const this);  //   133
}

/* <260dab> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:145 */
void CG3SG1::G3SG1Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   199
//		Vector vecSrc;                                  //   201
//		int flag;                                             //   206
//		Vector vecDir;                                  //   203
//		operator+(const Vector *const this,
//				const Vector &v);  //   193
//		Vector(Vector *const this,
//			const Vector &v);  //   204
//		Vector(Vector *const this,
//			const Vector &v);  //   204
//	}
}

/* <260d53> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:234 */
void CG3SG1::Reload(void)
{
//	{
//		int iResult;                                          //   239
//	}
//	Reload(CG3SG1 *const this);  //   234
}

/* <260d18> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:260 */
void CG3SG1::WeaponIdle(void)
{
//	WeaponIdle(CG3SG1 *const this);  //   260
}

/* <260cc9> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <260ca2> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:50 */
void CG3SG1::Spawn(void)
{
}

/* <260c7b> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:96 */
void CG3SG1::Deploy(void)
{
}

/* <260c17> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:102 */
void CG3SG1::SecondaryAttack(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   129
}

/* <260bf1> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:277 */
void CG3SG1::GetMaxSpeed(void)
{
}

/* <260bbe> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:79 */
void CG3SG1::GetItemInfo(ItemInfo *p)
{
}

/* <260b97> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:63 */
void CG3SG1::Precache(void)
{
}

/* <260b71> ../cstrike/dlls/weapons.h:820 */
void CG3SG1::UseDecrement(void)
{
}

/* <260b4b> ../cstrike/dlls/weapons.h:808 */
void CG3SG1::iItemSlot(void)
{
}

/* <260b25> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <260af9> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <260ad3> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <260aad> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <260a86> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <260a60> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <260a3a> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <260a14> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2609df> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2609b3> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <260978> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <26079e> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <260778> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <260743> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2606e4> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2606af> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <260689> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <260663> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <26063d> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <260617> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2605f0> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2605ca> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2605a4> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <26057e> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <26054a> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <260524> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2604fe> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2604ca> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2604a4> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <260410> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2603c0> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <26038c> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <260358> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <260316> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2602d4> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2602ae> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <260288> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <260256> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <260216> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2601ea> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2601b6> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <260190> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <26016a> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <260149> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <260123> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2600bb> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:145 */
void CG3SG1::G3SG1Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   199
//		Vector vecSrc;                                  //   201
//		Vector vecDir;                                  //   203
//		int flag;                                             //   206
//	}
}

/* <260089> ../cstrike/dlls/cbase.h:800 */
CG3SG1 *GetClassPtr<CG3SG1>(CG3SG1 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <26006d> ../cstrike/dlls/weapons.h:803 */
inline void CG3SG1::CG3SG1(void)
{
}

/* <25fff1> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <25ffcb> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <25fefd> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <25fe8e> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <25fe4f> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <25fe36> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:133 */
void CG3SG1::PrimaryAttack(void)
{
}

/* <25fe10> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <25fde9> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <25fdc2> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <25fda9> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <25fd8b> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <25fd3c> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <25fd01> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <25fc4d> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <25fc34> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <25fbea> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <25fbb6> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <25fb8f> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <25fb63> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <25fb45> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <25fb1d> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <25faf7> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:234 */
void CG3SG1::Reload(void)
{
//	{
//		int iResult;                                          //   239
//	}
}

/* <25fad9> ../cstrike/dlls/wpn_shared/wpn_g3sg1.cpp:260 */
void CG3SG1::WeaponIdle(void)
{
}

/* <25bbb9> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:187 */
void CFlashbang::ResetPlayerShieldAnim(void)
{
}

/* <25bb97> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:176 */
void CFlashbang::SetPlayerShieldAnim(void)
{
}

/* <25bb65> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:133 */
void CFlashbang::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <25ba9b> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:37 */
void weapon_flashbang(entvars_t *pev)
{
//	GetClassPtr<CFlashbang>(CFlashbang *a);  //    37
}

/* <25b89d> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:198 */
void CFlashbang::WeaponIdle(void)
{
//	WeaponIdle(CFlashbang *const this);  //   198
}

/* <25b884> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:187 */
void CFlashbang::ResetPlayerShieldAnim(void)
{
}

/* <25b86b> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:176 */
void CFlashbang::SetPlayerShieldAnim(void)
{
}

/* <25b81a> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:171 */
void CFlashbang::SecondaryAttack(void)
{
//	ShieldSecondaryFire(CFlashbang::SecondaryAttack(//				int iUpAnim,
//				int iDownAnim);  //   173
}

/* <25b7df> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:87 */
void CFlashbang::Deploy(void)
{
//	Deploy(CFlashbang *const this);  //    87
}

/* <25b7a5> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:118 */
void CFlashbang::PrimaryAttack(void)
{
//	PrimaryAttack(CFlashbang *const this);  //   118
}

/* <25b756> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <25b72f> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:39 */
void CFlashbang::Spawn(void)
{
}

/* <25b6fa> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:102 */
void CFlashbang::Holster(int skiplocal)
{
}

/* <25b6d4> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:315 */
void CFlashbang::CanDeploy(void)
{
}

/* <25b6a1> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:69 */
void CFlashbang::GetItemInfo(ItemInfo *p)
{
}

/* <25b67a> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:58 */
void CFlashbang::Precache(void)
{
}

/* <25b654> ../cstrike/dlls/weapons.h:794 */
void CFlashbang::IsPistol(void)
{
}

/* <25b62e> ../cstrike/dlls/weapons.h:793 */
void CFlashbang::UseDecrement(void)
{
}

/* <25b608> ../cstrike/dlls/weapons.h:791 */
void CFlashbang::CanDrop(void)
{
}

/* <25b5e2> ../cstrike/dlls/weapons.h:790 */
void CFlashbang::GetMaxSpeed(void)
{
}

/* <25b5bc> ../cstrike/dlls/weapons.h:783 */
void CFlashbang::iItemSlot(void)
{
}

/* <25b596> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <25b56a> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <25b544> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <25b51e> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <25b4f8> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <25b4d1> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <25b4ab> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <25b485> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <25b450> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <25b424> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <25b3e9> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <25b20f> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <25b1e9> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <25b1b4> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <25b155> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <25b120> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <25b0fa> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <25b0d4> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <25b0ae> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <25b088> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <25b061> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <25b03b> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <25b015> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <25afef> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <25afbb> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <25af95> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <25af6f> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <25af3b> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <25af15> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <25ae81> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <25ae31> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <25adfd> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <25adc9> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <25ad87> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <25ad45> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <25ad1f> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <25acf9> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <25acc7> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <25ac87> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <25ac5b> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <25ac27> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <25ac01> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <25abdb> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <25abba> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <25ab94> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <25ab65> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:133 */
void CFlashbang::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <25ab33> ../cstrike/dlls/cbase.h:800 */
CFlashbang *GetClassPtr<CFlashbang>(CFlashbang *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <25ab17> ../cstrike/dlls/weapons.h:778 */
inline void CFlashbang::CFlashbang(void)
{
}

/* <25aa9b> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <25aa75> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <25a9d0> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <25a961> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <25a922> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <25a8bd> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:198 */
void CFlashbang::WeaponIdle(void)
{
//	{
//		Vector angThrow;                                //   210
//		float flVel;                                          //   217
//		Vector vecSrc;                                  //   223
//		Vector vecThrow;                                //   226
//	}
//	{
//		int iAnim;                                            //   282
//		float flRand;                                         //   283
//	}
}

/* <25a896> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <25a878> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <25a824> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <25a78a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <25a756> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <25a72f> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <25a703> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <25a6e5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <25a6cc> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:87 */
void CFlashbang::Deploy(void)
{
}

/* <25a6ae> ../cstrike/dlls/wpn_shared/wpn_flashbang.cpp:118 */
void CFlashbang::PrimaryAttack(void)
{
}

/* <256a57> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:134 */
void CFiveSeven::FiveSevenFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		Vector vecDir;                                  //   194
//		int flag;                                             //   197
//		operator+(const Vector *const this,
//				const Vector &v);  //   183
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//	}
}

/* <25698d> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:49 */
void weapon_fiveseven(entvars_t *pev)
{
//	GetClassPtr<CFiveSeven>(CFiveSeven *a);  //    49
}

/* <256943> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:117 */
void CFiveSeven::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   121
//	PrimaryAttack(CFiveSeven *const this);  //   117
}

/* <256845> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:134 */
void CFiveSeven::FiveSevenFire(float flSpread, BOOL fUseSemi, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		int flag;                                             //   197
//		Vector vecDir;                                  //   194
//		operator+(const Vector *const this,
//				const Vector &v);  //   183
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//	}
}

/* <25680a> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:101 */
void CFiveSeven::Deploy(void)
{
//	Deploy(CFiveSeven *const this);  //   101
}

/* <2567d0> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:225 */
void CFiveSeven::Reload(void)
{
//	Reload(CFiveSeven *const this);  //   225
}

/* <256796> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:238 */
void CFiveSeven::WeaponIdle(void)
{
//	WeaponIdle(CFiveSeven *const this);  //   238
}

/* <256747> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <256720> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:51 */
void CFiveSeven::Spawn(void)
{
}

/* <2566f9> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:129 */
void CFiveSeven::SecondaryAttack(void)
{
}

/* <2566c6> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:84 */
void CFiveSeven::GetItemInfo(ItemInfo *p)
{
}

/* <25669f> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:66 */
void CFiveSeven::Precache(void)
{
}

/* <256679> ../cstrike/dlls/weapons.h:1210 */
void CFiveSeven::IsPistol(void)
{
}

/* <256653> ../cstrike/dlls/weapons.h:1209 */
void CFiveSeven::UseDecrement(void)
{
}

/* <25662d> ../cstrike/dlls/weapons.h:1208 */
void CFiveSeven::GetMaxSpeed(void)
{
}

/* <256607> ../cstrike/dlls/weapons.h:1197 */
void CFiveSeven::iItemSlot(void)
{
}

/* <2565e1> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2565b5> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <25658f> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <256569> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <256542> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <25651c> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2564f6> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2564d0> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <25649b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <25646f> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <256434> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <25625a> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <256234> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2561ff> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2561a0> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <25616b> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <256145> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <25611f> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2560f9> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2560d3> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2560ac> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <256086> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <256060> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <25603a> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <256006> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <255fe0> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <255fba> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <255f86> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <255f60> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <255ecc> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <255e7c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <255e48> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <255e14> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <255dd2> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <255d90> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <255d6a> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <255d44> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <255d12> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <255cd2> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <255ca6> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <255c72> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <255c4c> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <255c26> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <255c05> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <255bdf> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <255b77> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:134 */
void CFiveSeven::FiveSevenFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		Vector vecDir;                                  //   194
//		int flag;                                             //   197
//	}
}

/* <255b45> ../cstrike/dlls/cbase.h:800 */
CFiveSeven *GetClassPtr<CFiveSeven>(CFiveSeven *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <255b29> ../cstrike/dlls/weapons.h:1192 */
inline void CFiveSeven::CFiveSeven(void)
{
}

/* <255aad> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <255a87> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2559b9> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <25594a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <25590b> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2558f2> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:117 */
void CFiveSeven::PrimaryAttack(void)
{
}

/* <2558cc> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2558a5> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <25587e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <255865> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <255847> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2557f8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2557bd> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <255754> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <25573b> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2556f1> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2556bd> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <255696> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <25566a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <25564c> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <255624> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <25560b> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:101 */
void CFiveSeven::Deploy(void)
{
}

/* <2555f2> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:225 */
void CFiveSeven::Reload(void)
{
}

/* <2555d4> ../cstrike/dlls/wpn_shared/wpn_fiveseven.cpp:238 */
void CFiveSeven::WeaponIdle(void)
{
}

/* <251449> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:126 */
void CELITE::ELITEFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		float flTimeDiff;                                     //   135
//		int flag;                                             //   182
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		operator+(const Vector *const this,
//				const Vector &v);  //   178
//		{
//			Vector vecDir;                          //   202
//			Vector(Vector *const this,
//				const Vector &v);  //   203
//			operator*(const Vector *const this,
//					float fl);  //   201
//			operator-(const Vector *const this,
//					const Vector &v);  //   201
//			Vector(Vector *const this,
//				const Vector &v);  //   203
//		}
//		{
//			Vector vecDir;                          //   219
//			edict(CBaseEntity *const this);  //   221
//			Vector(Vector *const this,
//				const Vector &v);  //   220
//			operator*(const Vector *const this,
//					float fl);  //   218
//			operator+(const Vector *const this,
//					const Vector &v);  //   218
//			Vector(Vector *const this,
//				const Vector &v);  //   220
//		}
//	}
}

/* <25137f> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:52 */
void weapon_elite(entvars_t *pev)
{
//	GetClassPtr<CELITE>(CELITE *a);  //    52
}

/* <251335> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:114 */
void CELITE::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   118
//	PrimaryAttack(CELITE *const this);  //   114
}

/* <251132> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:126 */
void CELITE::ELITEFire(float flSpread, BOOL fUseSemi, float flCycleTime)
{
//	{
//		float flTimeDiff;                                     //   135
//		int flag;                                             //   182
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		operator+(const Vector *const this,
//				const Vector &v);  //   178
//		{
//			Vector vecDir;                          //   202
//			Vector(Vector *const this,
//				const Vector &v);  //   203
//			operator*(const Vector *const this,
//					float fl);  //   201
//			operator-(const Vector *const this,
//					const Vector &v);  //   201
//			Vector(Vector *const this,
//				const Vector &v);  //   203
//		}
//		{
//			Vector vecDir;                          //   219
//			edict(CBaseEntity *const this);  //   221
//			Vector(Vector *const this,
//				const Vector &v);  //   220
//			operator*(const Vector *const this,
//					float fl);  //   218
//			operator+(const Vector *const this,
//					const Vector &v);  //   218
//			Vector(Vector *const this,
//				const Vector &v);  //   220
//		}
//	}
}

/* <2510f8> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:239 */
void CELITE::Reload(void)
{
//	Reload(CELITE *const this);  //   239
}

/* <2510aa> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:251 */
void CELITE::WeaponIdle(void)
{
//	WeaponIdle(CELITE *const this);  //   251
}

/* <25105b> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <251034> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:54 */
void CELITE::Spawn(void)
{
}

/* <25100d> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:103 */
void CELITE::Deploy(void)
{
}

/* <250fda> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:86 */
void CELITE::GetItemInfo(ItemInfo *p)
{
}

/* <250fb3> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:67 */
void CELITE::Precache(void)
{
}

/* <250f8d> ../cstrike/dlls/weapons.h:1182 */
void CELITE::IsPistol(void)
{
}

/* <250f67> ../cstrike/dlls/weapons.h:1181 */
void CELITE::UseDecrement(void)
{
}

/* <250f41> ../cstrike/dlls/weapons.h:1180 */
void CELITE::GetMaxSpeed(void)
{
}

/* <250f1b> ../cstrike/dlls/weapons.h:1172 */
void CELITE::iItemSlot(void)
{
}

/* <250ef5> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <250ec9> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <250ea3> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <250e7d> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <250e57> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <250e30> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <250e0a> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <250de4> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <250dbe> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <250d89> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <250d5d> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <250d22> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <250b48> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <250b22> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <250aed> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <250a8e> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <250a59> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <250a33> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <250a0d> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2509e7> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2509c1> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <25099a> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <250974> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <25094e> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <250928> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2508f4> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2508ce> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2508a8> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <250874> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <25084e> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2507ba> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <25076a> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <250736> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <250702> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2506c0> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <25067e> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <250658> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <250632> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <250600> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2505c0> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <250594> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <250560> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <25053a> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <250514> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2504f3> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2504cd> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <250447> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:126 */
void CELITE::ELITEFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		float flTimeDiff;                                     //   135
//		int flag;                                             //   182
//		Vector vecAiming;                               //   190
//		Vector vecSrc;                                  //   192
//		{
//			Vector vecDir;                          //   202
//		}
//		{
//			Vector vecDir;                          //   219
//		}
//	}
}

/* <250415> ../cstrike/dlls/cbase.h:800 */
CELITE *GetClassPtr<CELITE>(CELITE *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <2503f9> ../cstrike/dlls/weapons.h:1167 */
inline void CELITE::CELITE(void)
{
}

/* <25037d> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <250357> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <250289> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <25021a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <2501db> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2501c2> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:114 */
void CELITE::PrimaryAttack(void)
{
}

/* <25019c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <250175> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <25014e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <250135> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <250117> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2500c8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <25008d> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <250024> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <25000b> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <24ffc1> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <24ff8d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <24ff66> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <24ff3a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <24ff1c> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <24ff03> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:239 */
void CELITE::Reload(void)
{
}

/* <24fed7> ../cstrike/dlls/wpn_shared/wpn_elite.cpp:251 */
void CELITE::WeaponIdle(void)
{
//	{
//		int iAnim;                                            //   263
//	}
}

/* <24bf1c> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:137 */
void CDEAGLE::DEAGLEFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   196
//		Vector vecDir;                                  //   198
//		int flag;                                             //   202
//		operator+(const Vector *const this,
//				const Vector &v);  //   188
//		Vector(Vector *const this,
//			const Vector &v);  //   199
//		Vector(Vector *const this,
//			const Vector &v);  //   199
//	}
}

/* <24be52> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:49 */
void weapon_deagle(entvars_t *pev)
{
//	GetClassPtr<CDEAGLE>(CDEAGLE *a);  //    49
}

/* <24be08> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:119 */
void CDEAGLE::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   123
//	PrimaryAttack(CDEAGLE *const this);  //   119
}

/* <24bd0a> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:137 */
void CDEAGLE::DEAGLEFire(float flSpread, BOOL fUseSemi, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   196
//		int flag;                                             //   202
//		Vector vecDir;                                  //   198
//		operator+(const Vector *const this,
//				const Vector &v);  //   188
//		Vector(Vector *const this,
//			const Vector &v);  //   199
//		Vector(Vector *const this,
//			const Vector &v);  //   199
//	}
}

/* <24bccf> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:103 */
void CDEAGLE::Deploy(void)
{
//	Deploy(CDEAGLE *const this);  //   103
}

/* <24bc95> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:231 */
void CDEAGLE::Reload(void)
{
//	Reload(CDEAGLE *const this);  //   231
}

/* <24bc5b> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:243 */
void CDEAGLE::WeaponIdle(void)
{
//	WeaponIdle(CDEAGLE *const this);  //   243
}

/* <24bc0c> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <24bbe5> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:51 */
void CDEAGLE::Spawn(void)
{
}

/* <24bbbe> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:131 */
void CDEAGLE::SecondaryAttack(void)
{
}

/* <24bb8b> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:86 */
void CDEAGLE::GetItemInfo(ItemInfo *p)
{
}

/* <24bb64> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:68 */
void CDEAGLE::Precache(void)
{
}

/* <24bb3e> ../cstrike/dlls/weapons.h:768 */
void CDEAGLE::IsPistol(void)
{
}

/* <24bb18> ../cstrike/dlls/weapons.h:767 */
void CDEAGLE::UseDecrement(void)
{
}

/* <24baf2> ../cstrike/dlls/weapons.h:766 */
void CDEAGLE::GetMaxSpeed(void)
{
}

/* <24bacc> ../cstrike/dlls/weapons.h:755 */
void CDEAGLE::iItemSlot(void)
{
}

/* <24baa6> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <24ba7a> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <24ba54> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <24ba2e> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <24ba07> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <24b9e1> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <24b9bb> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <24b995> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <24b960> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <24b934> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <24b8f9> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <24b71f> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <24b6f9> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <24b6c4> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <24b665> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <24b630> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <24b60a> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <24b5e4> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <24b5be> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <24b598> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <24b571> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <24b54b> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <24b525> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <24b4ff> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <24b4cb> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <24b4a5> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <24b47f> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <24b44b> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <24b425> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <24b391> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <24b341> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <24b30d> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <24b2d9> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <24b297> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <24b255> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <24b22f> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <24b209> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <24b1d7> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <24b197> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <24b16b> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <24b137> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <24b111> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <24b0eb> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <24b0ca> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <24b0a4> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <24b03c> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:137 */
void CDEAGLE::DEAGLEFire(float flSpread, float flCycleTime, BOOL fUseSemi)
{
//	{
//		Vector vecAiming;                               //   193
//		Vector vecSrc;                                  //   196
//		Vector vecDir;                                  //   198
//		int flag;                                             //   202
//	}
}

/* <24b00a> ../cstrike/dlls/cbase.h:800 */
CDEAGLE *GetClassPtr<CDEAGLE>(CDEAGLE *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <24afee> ../cstrike/dlls/weapons.h:750 */
inline void CDEAGLE::CDEAGLE(void)
{
}

/* <24af72> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <24af4c> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <24ae7e> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <24ae0f> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <24add0> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <24adb7> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:119 */
void CDEAGLE::PrimaryAttack(void)
{
}

/* <24ad91> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <24ad6a> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <24ad43> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <24ad2a> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <24ad0c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <24acbd> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <24ac82> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <24ac19> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <24ac00> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <24abb6> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <24ab82> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <24ab5b> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <24ab2f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <24ab11> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <24aae9> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <24aad0> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:103 */
void CDEAGLE::Deploy(void)
{
}

/* <24aab7> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:231 */
void CDEAGLE::Reload(void)
{
}

/* <24aa99> ../cstrike/dlls/wpn_shared/wpn_deagle.cpp:243 */
void CDEAGLE::WeaponIdle(void)
{
}

/* <246a03> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:48 */
void weapon_c4(entvars_t *pev)
{
//	GetClassPtr<CC4>(CC4 *a);  //    48
}

/* <2469b9> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:50 */
void CC4::Spawn(void)
{
//	Spawn(CC4 *const this);  //    50
}

/* <2468b7> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:399 */
void CC4::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   401
//	FStrEq(const char *sz1,
//		const char *sz2);  //   406
//	KeyValue(CC4 *const this,
//		KeyValueData *pkvd);  //   399
//	atof(const char *__nptr);  //   403
}

/* <24674f> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:419 */
void CC4::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *pPlayer;                          //   423
//		edict_t *m_pentOldCurBombTarget;                     //   426
//		class CGrenade *pC4;                                 //   435
//	}
//	Use(CC4 *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   419
}

/* <2466fc> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:123 */
void CC4::Holster(int skiplocal)
{
//	Holster(CC4 *const this,
//		int skiplocal);  //   123
}

/* <2466d5> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:105 */
void CC4::Deploy(void)
{
}

/* <2464e8> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:152 */
void CC4::PrimaryAttack(void)
{
//	{
//		BOOL PlaceBomb;                                       //   154
//		class CGrenade *pBomb;                               //   155
//		int onGround;                                         //   161
//		int inBombZone;                                       //   164
//		{
//			class CBaseEntity *pEntity;                  //   288
//			class CBasePlayer *pTempPlayer;              //   289
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   277
//			Vector(Vector *const this,
//				const Vector &v);  //   277
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //   280
//			edict(CBaseEntity *const this);  //   283
//			ENTINDEX(edict_t *pEdict);  //   283
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //   293
//			edict(CBaseEntity *const this);  //   315
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //   319
//			edict(CBaseEntity *const this);  //   315
//		}
//	}
}

/* <2464c1> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:358 */
void CC4::WeaponIdle(void)
{
}

/* <246472> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <24643f> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:88 */
void CC4::GetItemInfo(ItemInfo *p)
{
}

/* <246418> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:80 */
void CC4::Precache(void)
{
}

/* <2463f2> ../cstrike/dlls/weapons.h:736 */
void CC4::UseDecrement(void)
{
}

/* <2463cc> ../cstrike/dlls/weapons.h:732 */
void CC4::GetMaxSpeed(void)
{
}

/* <2463a6> ../cstrike/dlls/weapons.h:726 */
void CC4::iItemSlot(void)
{
}

/* <246380> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <246354> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <24632e> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <246308> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <2462e2> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <2462bc> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <246295> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <24626f> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <246249> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <246223> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2461ee> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2461c2> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <246187> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <245fad> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <245f87> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <245f52> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <245f1d> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <245ef7> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <245ed1> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <245eab> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <245e85> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <245e5e> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <245e38> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <245e12> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <245dec> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <245db8> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <245d92> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <245d6c> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <245d38> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <245d12> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <245c7e> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <245c2e> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <245bfa> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <245bc6> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <245b84> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <245b42> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <245b1c> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <245af6> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <245ac4> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <245a84> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <245a5e> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <245a2a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <245a04> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2459de> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2459bd> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <245997> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <245965> ../cstrike/dlls/cbase.h:800 */
CC4 *GetClassPtr<CC4>(CC4 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <245949> ../cstrike/dlls/weapons.h:721 */
inline void CC4::CC4(void)
{
}

/* <2458cd> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <2458a7> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2457d9> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <24576a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <24572b> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <245705> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2456de> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2456c5> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <24566d> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <24564f> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <245600> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2455ca> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:50 */
void CC4::Spawn(void)
{
}

/* <2455b1> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <24558c> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:399 */
void CC4::KeyValue(KeyValueData *pkvd)
{
}

/* <245563> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <2454d5> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:419 */
void CC4::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *pPlayer;                          //   423
//		edict_t *m_pentOldCurBombTarget;                     //   426
//		class CGrenade *pC4;                                 //   435
//	}
}

/* <2454ae> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2453fa> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2453b0> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <24537c> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <245355> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <245329> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <24530b> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2452e3> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2452ba> ../cstrike/dlls/wpn_shared/wpn_c4.cpp:123 */
void CC4::Holster(int skiplocal)
{
}

/* <23fe76> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:157 */
void CAWP::AWPFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   205
//		Vector vecSrc;                                  //   207
//		Vector vecDir;                                  //   209
//		int flag;                                             //   212
//		operator+(const Vector *const this,
//				const Vector &v);  //   194
//		Vector(Vector *const this,
//			const Vector &v);  //   210
//		Vector(Vector *const this,
//			const Vector &v);  //   210
//	}
}

/* <23fdac> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:50 */
void weapon_awp(entvars_t *pev)
{
//	GetClassPtr<CAWP>(CAWP *a);  //    50
}

/* <23fd53> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:143 */
void CAWP::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   147
//	PrimaryAttack(CAWP *const this);  //   143
}

/* <23fc54> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:157 */
void CAWP::AWPFire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   205
//		Vector vecSrc;                                  //   207
//		int flag;                                             //   212
//		Vector vecDir;                                  //   209
//		operator+(const Vector *const this,
//				const Vector &v);  //   194
//		Vector(Vector *const this,
//			const Vector &v);  //   210
//		Vector(Vector *const this,
//			const Vector &v);  //   210
//	}
}

/* <23fc19> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:100 */
void CAWP::Deploy(void)
{
//	Deploy(CAWP *const this);  //   100
}

/* <23fbc1> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:239 */
void CAWP::Reload(void)
{
//	{
//		int iResult;                                          //   244
//	}
//	Reload(CAWP *const this);  //   239
}

/* <23fb86> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:265 */
void CAWP::WeaponIdle(void)
{
//	WeaponIdle(CAWP *const this);  //   265
}

/* <23fb37> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <23fb10> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:52 */
void CAWP::Spawn(void)
{
}

/* <23faac> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:113 */
void CAWP::SecondaryAttack(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   139
}

/* <23fa86> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:283 */
void CAWP::GetMaxSpeed(void)
{
}

/* <23fa53> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:83 */
void CAWP::GetItemInfo(ItemInfo *p)
{
}

/* <23fa2c> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:64 */
void CAWP::Precache(void)
{
}

/* <23fa06> ../cstrike/dlls/weapons.h:713 */
void CAWP::UseDecrement(void)
{
}

/* <23f9e0> ../cstrike/dlls/weapons.h:702 */
void CAWP::iItemSlot(void)
{
}

/* <23f9ba> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <23f98e> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <23f968> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <23f942> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <23f91b> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <23f8f5> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <23f8cf> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <23f8a9> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <23f874> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <23f848> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <23f80d> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <23f633> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <23f60d> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <23f5d8> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <23f579> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <23f544> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <23f51e> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <23f4f8> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <23f4d2> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <23f4ac> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <23f485> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <23f45f> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <23f439> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <23f413> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <23f3df> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <23f3b9> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <23f393> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <23f35f> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <23f339> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <23f2a5> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <23f255> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <23f221> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <23f1ed> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <23f1ab> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <23f169> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <23f143> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <23f11d> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <23f0eb> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <23f0ab> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <23f07f> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <23f04b> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <23f025> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <23efff> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <23efde> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <23efb8> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <23ef50> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:157 */
void CAWP::AWPFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   205
//		Vector vecSrc;                                  //   207
//		Vector vecDir;                                  //   209
//		int flag;                                             //   212
//	}
}

/* <23ef1e> ../cstrike/dlls/cbase.h:800 */
CAWP *GetClassPtr<CAWP>(CAWP *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <23ef02> ../cstrike/dlls/weapons.h:697 */
inline void CAWP::CAWP(void)
{
}

/* <23ee86> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <23ee60> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <23ed92> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <23ed23> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <23ece4> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <23eccb> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:143 */
void CAWP::PrimaryAttack(void)
{
}

/* <23eca5> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <23ec7e> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <23ec57> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <23ec3e> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <23ec20> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <23ebd1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <23eb96> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <23eae2> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <23eac9> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <23ea7f> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <23ea4b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <23ea24> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <23e9f8> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <23e9da> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <23e9b2> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <23e999> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:100 */
void CAWP::Deploy(void)
{
}

/* <23e973> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:239 */
void CAWP::Reload(void)
{
//	{
//		int iResult;                                          //   244
//	}
}

/* <23e955> ../cstrike/dlls/wpn_shared/wpn_awp.cpp:265 */
void CAWP::WeaponIdle(void)
{
}

/* <23aa31> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:130 */
void CAUG::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   134
//	PrimaryAttack(CAUG *const this);  //   130
}

/* <23a8e9> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:143 */
void CAUG::AUGFire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   183
//		Vector vecSrc;                                  //   185
//		Vector vecDir;                                  //   187
//		int flag;                                             //   190
//		operator+(const Vector *const this,
//				const Vector &v);  //   182
//		Vector(Vector *const this,
//			const Vector &v);  //   188
//		Vector(Vector *const this,
//			const Vector &v);  //   188
//		Length2D(const Vector *const this);  //   214
//	}
}

/* <23a81f> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:50 */
void weapon_aug(entvars_t *pev)
{
//	GetClassPtr<CAUG>(CAUG *a);  //    50
}

/* <23a7c2> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:225 */
void CAUG::Reload(void)
{
//	{
//		int iResult;                                          //   230
//	}
//	Reload(CAUG *const this);  //   225
}

/* <23a787> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:245 */
void CAUG::WeaponIdle(void)
{
//	WeaponIdle(CAUG *const this);  //   245
}

/* <23a738> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <23a711> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:52 */
void CAUG::Spawn(void)
{
}

/* <23a6ea> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:100 */
void CAUG::Deploy(void)
{
}

/* <23a6c4> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:109 */
void CAUG::SecondaryAttack(void)
{
}

/* <23a691> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:83 */
void CAUG::GetItemInfo(ItemInfo *p)
{
}

/* <23a66a> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:66 */
void CAUG::Precache(void)
{
}

/* <23a644> ../cstrike/dlls/weapons.h:689 */
void CAUG::UseDecrement(void)
{
}

/* <23a61e> ../cstrike/dlls/weapons.h:685 */
void CAUG::GetMaxSpeed(void)
{
}

/* <23a5f8> ../cstrike/dlls/weapons.h:677 */
void CAUG::iItemSlot(void)
{
}

/* <23a5d2> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <23a5a6> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <23a580> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <23a55a> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <23a533> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <23a50d> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <23a4e7> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <23a4c1> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <23a48c> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <23a460> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <23a425> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <23a24b> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <23a225> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <23a1f0> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <23a191> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <23a15c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <23a136> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <23a110> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <23a0ea> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <23a0c4> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <23a09d> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <23a077> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <23a051> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <23a02b> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <239ff7> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <239fd1> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <239fab> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <239f77> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <239f51> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <239ebd> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <239e6d> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <239e39> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <239e05> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <239dc3> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <239d81> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <239d5b> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <239d35> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <239d03> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <239cc3> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <239c97> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <239c63> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <239c3d> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <239c17> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <239bf6> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <239bd0> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <239b9e> ../cstrike/dlls/cbase.h:800 */
CAUG *GetClassPtr<CAUG>(CAUG *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <239b82> ../cstrike/dlls/weapons.h:672 */
inline void CAUG::CAUG(void)
{
}

/* <239b06> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <239ae0> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <239a12> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <2399a3> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <239964> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <23994b> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:130 */
void CAUG::PrimaryAttack(void)
{
}

/* <239925> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2398fe> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <2398d7> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2398be> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <2398a0> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <239851> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <239816> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2397ad> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <239794> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <23974a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <239716> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2396ef> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2396c3> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2396a5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <23967d> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <239657> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:225 */
void CAUG::Reload(void)
{
//	{
//		int iResult;                                          //   230
//	}
}

/* <239639> ../cstrike/dlls/wpn_shared/wpn_aug.cpp:245 */
void CAUG::WeaponIdle(void)
{
}

/* <235637> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:123 */
void CAK47::AK47Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   158
//		Vector vecSrc;                                  //   160
//		Vector vecDir;                                  //   162
//		int flag;                                             //   165
//		operator+(const Vector *const this,
//				const Vector &v);  //   157
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Length2D(const Vector *const this);  //   193
//	}
}

/* <23556d> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:50 */
void weapon_ak47(entvars_t *pev)
{
//	GetClassPtr<CAK47>(CAK47 *a);  //    50
}

/* <235523> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:112 */
void CAK47::PrimaryAttack(void)
{
//	Length2D(const Vector *const this);  //   116
//	PrimaryAttack(CAK47 *const this);  //   112
}

/* <235412> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:123 */
void CAK47::AK47Fire(float flSpread, BOOL fUseAutoAim, float flCycleTime)
{
//	{
//		Vector vecAiming;                               //   158
//		Vector vecSrc;                                  //   160
//		int flag;                                             //   165
//		Vector vecDir;                                  //   162
//		operator+(const Vector *const this,
//				const Vector &v);  //   157
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Vector(Vector *const this,
//			const Vector &v);  //   163
//		Length2D(const Vector *const this);  //   193
//	}
}

/* <2353d8> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:204 */
void CAK47::Reload(void)
{
//	Reload(CAK47 *const this);  //   204
}

/* <23539d> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:219 */
void CAK47::WeaponIdle(void)
{
//	WeaponIdle(CAK47 *const this);  //   219
}

/* <23534e> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <235327> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:52 */
void CAK47::Spawn(void)
{
}

/* <235300> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:99 */
void CAK47::Deploy(void)
{
}

/* <2352da> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:108 */
void CAK47::SecondaryAttack(void)
{
}

/* <2352a7> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:82 */
void CAK47::GetItemInfo(ItemInfo *p)
{
}

/* <235280> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:66 */
void CAK47::Precache(void)
{
}

/* <23525a> ../cstrike/dlls/weapons.h:665 */
void CAK47::UseDecrement(void)
{
}

/* <235234> ../cstrike/dlls/weapons.h:662 */
void CAK47::GetMaxSpeed(void)
{
}

/* <23520e> ../cstrike/dlls/weapons.h:653 */
void CAK47::iItemSlot(void)
{
}

/* <2351e8> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <2351bc> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <235196> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <235170> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <235149> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <235123> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <2350fd> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <2350d7> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <2350a2> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <235076> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <23503b> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <234e61> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <234e3b> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <234e06> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <234da7> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <234d72> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <234d4c> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <234d26> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <234d00> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <234cda> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <234cb3> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <234c8d> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <234c67> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <234c41> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <234c0d> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <234be7> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <234bc1> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <234b8d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <234b67> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <234ad3> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <234a83> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <234a4f> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <234a1b> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2349d9> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <234997> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <234971> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <23494b> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <234919> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2348d9> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2348ad> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <234879> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <234853> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <23482d> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <23480c> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2347e6> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <23477e> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:123 */
void CAK47::AK47Fire(float flSpread, float flCycleTime, BOOL fUseAutoAim)
{
//	{
//		Vector vecAiming;                               //   158
//		Vector vecSrc;                                  //   160
//		Vector vecDir;                                  //   162
//		int flag;                                             //   165
//	}
}

/* <23474c> ../cstrike/dlls/cbase.h:800 */
CAK47 *GetClassPtr<CAK47>(CAK47 *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <234730> ../cstrike/dlls/weapons.h:648 */
inline void CAK47::CAK47(void)
{
}

/* <2346b4> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <23468e> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <2345c0> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <234551> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <234512> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <2344f9> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:112 */
void CAK47::PrimaryAttack(void)
{
}

/* <2344d3> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <2344ac> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <234485> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <23446c> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <23444e> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2343ff> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2343c4> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <23435b> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <234342> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <2342f8> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2342c4> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <23429d> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <234271> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <234253> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <23422b> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <234212> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:204 */
void CAK47::Reload(void)
{
}

/* <2341f4> ../cstrike/dlls/wpn_shared/wpn_ak47.cpp:219 */
void CAK47::WeaponIdle(void)
{
}

/* <23027d> ../cstrike/dlls/debug.cpp:247 */
/* linkage=_Z19UTIL_HostageDPrintfPcz */
void UTIL_HostageDPrintf(char *pszMsg, ...)
{
//	IsDeveloper(void);  //   249
//	{
//		va_list argptr;                                       //   254
//	}
}

/* <230229> ../cstrike/dlls/debug.cpp:229 */
/* linkage=_Z17UTIL_StatsDPrintfPcz */
void UTIL_StatsDPrintf(char *pszMsg, ...)
{
//	IsDeveloper(void);  //   231
//	{
//		va_list argptr;                                       //   236
//	}
}

/* <2301d5> ../cstrike/dlls/debug.cpp:211 */
/* linkage=_Z17UTIL_TutorDPrintfPcz */
void UTIL_TutorDPrintf(char *pszMsg, ...)
{
//	IsDeveloper(void);  //   213
//	{
//		va_list argptr;                                       //   218
//	}
}

/* <230181> ../cstrike/dlls/debug.cpp:193 */
/* linkage=_Z18UTIL_CareerDPrintfPcz */
void UTIL_CareerDPrintf(char *pszMsg, ...)
{
//	IsDeveloper(void);  //   195
//	{
//		va_list argptr;                                       //   200
//	}
}

/* <23012d> ../cstrike/dlls/debug.cpp:175 */
/* linkage=_Z15UTIL_BotDPrintfPcz */
void UTIL_BotDPrintf(char *pszMsg, ...)
{
//	IsDeveloper(void);  //   177
//	{
//		va_list argptr;                                       //   182
//	}
}

/* <2300a9> ../cstrike/dlls/debug.cpp:149 */
/* linkage=_Z20UTIL_SetDprintfFlagsPKc */
void UTIL_SetDprintfFlags(const char *flagStr)
{
//	IsDeveloper(void);  //   151
//	PrintDebugFlags(void);  //   156
}

/* <23001f> ../cstrike/dlls/debug.cpp:126 */
/* linkage=_Z14PrintDebugFlagPKc */
void PrintDebugFlag(const char *flagStr)
{
//	{
//		enum DebugOutputType flag;                            //   128
//		{
//			int i;                                        //   129
//			{
//				class DebugOutputLevel level;         //   131
//				FStrEq(const char *sz1,
//					const char *sz2);  //   132
//			}
//		}
//	}
}

/* <22ff69> ../cstrike/dlls/debug.cpp:45 */
/* linkage=_Z12UTIL_DPrintf15DebugOutputTypePcz */
void UTIL_DPrintf(DebugOutputType outputType, char *pszMsg, ...)
{
//	IsDeveloper(void);  //    47
//	{
//		va_list argptr;                                       //    52
//	}
}

/* <22fed4> ../cstrike/dlls/debug.cpp:94 */
void SetDebugFlag(const char *flagStr, bool state)
{
//	{
//		enum DebugOutputType flag;                            //    96
//		{
//			int i;                                        //    97
//			{
//				class DebugOutputLevel level;         //    99
//				FStrEq(const char *sz1,
//					const char *sz2);  //   100
//			}
//		}
//	}
}

/* <22fe97> ../cstrike/dlls/debug.cpp:78 */
void PrintDebugFlags(void)
{
//	{
//		char *tmp;                                           //    80
//		int remainder;                                        //    81
//		{
//			int i;                                        //    85
//			{
//				class DebugOutputLevel level;         //    87
//			}
//		}
//	}
}

/* <22fe8b> ../cstrike/dlls/debug.cpp:39 */
bool IsDeveloper(void)
{
}

/* <22cf97> ../cstrike/dlls/weapontype.cpp:443 */
/* linkage=_Z21CanBuyWeaponByMaptypei12WeaponIdTypeb */
bool CanBuyWeaponByMaptype(int playerTeam, WeaponIdType weaponID, bool useAssasinationRestrictions)
{
}

/* <22cf48> ../cstrike/dlls/weapontype.cpp:426 */
/* linkage=_Z13GetWeaponInfoi */
const class WeaponInfoStruct *GetWeaponInfo(int weaponID)
{
//	{
//		int i;                                                //   428
//	}
}

/* <22cf19> ../cstrike/dlls/weapontype.cpp:318 */
/* linkage=_Z17IsSecondaryWeaponi */
bool IsSecondaryWeapon(int id)
{
}

/* <22cee3> ../cstrike/dlls/weapontype.cpp:285 */
/* linkage=_Z15IsPrimaryWeaponi */
bool IsPrimaryWeapon(int id)
{
}

/* <22ce5a> ../cstrike/dlls/weapontype.cpp:276 */
/* linkage=_Z21WeaponIDToWeaponClassi */
enum WeaponClassType WeaponIDToWeaponClass(int id)
{
//	WeaponIDToAlias(int id);  //   278
//	AliasToWeaponClass(const char *alias);  //   278
}

/* <22cdfe> ../cstrike/dlls/weapontype.cpp:259 */
enum WeaponClassType AliasToWeaponClass(const char *alias)
{
//	{
//		int i;                                                //   263
//	}
}

/* <22cd70> ../cstrike/dlls/weapontype.cpp:224 */
/* linkage=_Z18BuyAliasToWeaponIDPKcR12WeaponIdType */
const char *BuyAliasToWeaponID(const char *alias, WeaponIdType &id)
{
//	{
//		int i;                                                //   228
//	}
}

/* <22cd2a> ../cstrike/dlls/weapontype.cpp:208 */
/* linkage=_Z15AliasToWeaponIDPKc */
enum WeaponIdType AliasToWeaponID(const char *alias)
{
//	{
//		int i;                                                //   212
//	}
}

/* <22cd03> ../cstrike/dlls/weapontype.cpp:246 */
const char *WeaponIDToAlias(int id)
{
//	{
//		int i;                                                //   248
//	}
}

/* <22c104> ../cstrike/dlls/tutor_cs_states.cpp:293 */
void CCSTutorBuyMenuState::HandleRoundStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <22c0e2> ../cstrike/dlls/tutor_cs_states.cpp:266 */
void CCSTutorBuyMenuState::CCSTutorBuyMenuState(void)
{
}

/* <22c0b1> ../cstrike/dlls/tutor_cs_states.cpp:257 */
void CCSTutorWaitingForStartState::HandleBuyTimeStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <22c060> ../cstrike/dlls/tutor_cs_states.cpp:230 */
void CCSTutorWaitingForStartState::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //   238
//		class CBasePlayer *player;                           //   245
//	}
}

/* <22c03e> ../cstrike/dlls/tutor_cs_states.cpp:198 */
void CCSTutorWaitingForStartState::CCSTutorWaitingForStartState(void)
{
}

/* <22bfed> ../cstrike/dlls/tutor_cs_states.cpp:163 */
void CCSTutorUndefinedState::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //   171
//		class CBasePlayer *player;                           //   178
//	}
}

/* <22bfcb> ../cstrike/dlls/tutor_cs_states.cpp:141 */
void CCSTutorUndefinedState::CCSTutorUndefinedState(void)
{
}

/* <22bf8e> ../cstrike/dlls/tutor_cs_states.cpp:53 */
void CCSTutorStateSystem::CCSTutorStateSystem(void)
{
//	CCSTutorUndefinedState(CCSTutorUndefinedState *const this);  //    55
}

/* <22bf75> ../cstrike/dlls/tutor_cs_states.cpp:53 */
void CCSTutorStateSystem::CCSTutorStateSystem(void)
{
}

/* <22beca> ../cstrike/dlls/tutor_cs_states.cpp:207 */
void CCSTutorWaitingForStartState::CheckForStateTransition(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int ret;                                              //   209
//		HandlePlayerSpawned(CCSTutorWaitingForStartState *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //   214
//	}
}

/* <22be83> ../cstrike/dlls/tutor_cs_states.cpp:230 */
void CCSTutorWaitingForStartState::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //   238
//		class CBasePlayer *player;                           //   245
//	}
}

/* <22bdd8> ../cstrike/dlls/tutor_cs_states.cpp:150 */
void CCSTutorUndefinedState::CheckForStateTransition(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int ret;                                              //   152
//		HandlePlayerSpawned(CCSTutorUndefinedState *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //   156
//	}
}

/* <22bd91> ../cstrike/dlls/tutor_cs_states.cpp:163 */
void CCSTutorUndefinedState::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //   171
//		class CBasePlayer *player;                           //   178
//	}
}

/* <22bd56> ../cstrike/dlls/tutor_cs_states.cpp:58 */
void CCSTutorStateSystem::~CCSTutorStateSystem(void)
{
//	~CCSTutorStateSystem(CCSTutorStateSystem::~CCSTutorStateSystem(//				int const __in_chrg);  //    65
}

/* <22bccf> ../cstrike/dlls/tutor_cs_states.cpp:68 */
void CCSTutorStateSystem::UpdateState(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		enum TutorStateType nextStateType;                    //    70
//		CCSTutorUndefinedState(CCSTutorUndefinedState *const this);  //    76
//	}
}

/* <22bbfe> ../cstrike/dlls/tutor_cs_states.cpp:118 */
void CCSTutorStateSystem::ConstructNewState(int stateType)
{
//	{
//		class CBaseTutorState *ret;                          //   120
//		CCSTutorWaitingForStartState(CCSTutorWaitingForStartState *const this);  //   128
//		CCSTutorBuyMenuState(CCSTutorBuyMenuState *const this);  //   132
//	}
//	ConstructNewState(CCSTutorStateSystem *const this,
//				int stateType);  //   118
}

/* <22bbe5> ../cstrike/dlls/tutor_cs_states.cpp:266 */
void CCSTutorBuyMenuState::CCSTutorBuyMenuState(void)
{
}

/* <22bbcc> ../cstrike/dlls/tutor_cs_states.cpp:198 */
void CCSTutorWaitingForStartState::CCSTutorWaitingForStartState(void)
{
}

/* <22bbb3> ../cstrike/dlls/tutor_cs_states.cpp:141 */
void CCSTutorUndefinedState::CCSTutorUndefinedState(void)
{
}

/* <22bb91> ../cstrike/dlls/tutor_cs_states.cpp:58 */
void CCSTutorStateSystem::~CCSTutorStateSystem(void)
{
}

/* <22bb6e> ../cstrike/dlls/tutor_cs_states.cpp:58 */
void CCSTutorStateSystem::~CCSTutorStateSystem(int const __in_chrg)
{
}

/* <22bb33> ../cstrike/dlls/tutor_cs_states.cpp:146 */
void CCSTutorUndefinedState::~CCSTutorUndefinedState(void)
{
//	~CCSTutorUndefinedState(CCSTutorUndefinedState::~CCSTutorUndefinedState(//				int const __in_chrg);  //   148
}

/* <22bb12> ../cstrike/dlls/tutor_cs_states.cpp:146 */
void CCSTutorUndefinedState::~CCSTutorUndefinedState(void)
{
}

/* <22bad7> ../cstrike/dlls/tutor_cs_states.cpp:203 */
void CCSTutorWaitingForStartState::~CCSTutorWaitingForStartState(void)
{
//	~CCSTutorWaitingForStartState(CCSTutorWaitingForStartState::~CCSTutorWaitingForStartState(//					int const __in_chrg);  //   205
}

/* <22bab6> ../cstrike/dlls/tutor_cs_states.cpp:203 */
void CCSTutorWaitingForStartState::~CCSTutorWaitingForStartState(void)
{
}

/* <22ba7b> ../cstrike/dlls/tutor_cs_states.cpp:271 */
void CCSTutorBuyMenuState::~CCSTutorBuyMenuState(void)
{
//	~CCSTutorBuyMenuState(CCSTutorBuyMenuState::~CCSTutorBuyMenuState(//				int const __in_chrg);  //   273
}

/* <22ba5a> ../cstrike/dlls/tutor_cs_states.cpp:271 */
void CCSTutorBuyMenuState::~CCSTutorBuyMenuState(void)
{
}

/* <22ba34> ../cstrike/dlls/tutor_cs_states.cpp:288 */
void CCSTutorBuyMenuState::GetStateString(void)
{
}

/* <22b9e1> ../cstrike/dlls/tutor_cs_states.cpp:275 */
void CCSTutorBuyMenuState::CheckForStateTransition(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
}

/* <22b9bb> ../cstrike/dlls/tutor_cs_states.cpp:224 */
void CCSTutorWaitingForStartState::GetStateString(void)
{
}

/* <22b995> ../cstrike/dlls/tutor_cs_states.cpp:190 */
void CCSTutorUndefinedState::GetStateString(void)
{
}

/* <22b96f> ../cstrike/dlls/tutor_cs_states.cpp:108 */
void CCSTutorStateSystem::GetCurrentStateString(void)
{
}

/* <22b93e> ../cstrike/dlls/tutor_cs_states.cpp:293 */
void CCSTutorBuyMenuState::HandleRoundStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <22b908> ../cstrike/dlls/tutor_cs_states.cpp:118 */
void CCSTutorStateSystem::ConstructNewState(int stateType)
{
//	{
//		class CBaseTutorState *ret;                          //   120
//	}
}

/* <22b8d7> ../cstrike/dlls/tutor_cs_states.cpp:257 */
void CCSTutorWaitingForStartState::HandleBuyTimeStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <22b8b9> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <22b888> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <22b861> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <22b83a> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <22b821> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <22b803> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <22b7b4> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <22b76a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <22b72f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <22b6e0> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <22b69f> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <22b666> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <22b63a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <22b612> ../cstrike/dlls/tutor_cs_states.cpp:146 */
void CCSTutorUndefinedState::~CCSTutorUndefinedState(int const __in_chrg)
{
}

/* <22b5ea> ../cstrike/dlls/tutor_cs_states.cpp:203 */
void CCSTutorWaitingForStartState::~CCSTutorWaitingForStartState(int const __in_chrg)
{
}

/* <22b5c2> ../cstrike/dlls/tutor_cs_states.cpp:271 */
void CCSTutorBuyMenuState::~CCSTutorBuyMenuState(int const __in_chrg)
{
}

/* <22b59a> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <21c02e> ../cstrike/dlls/tutor_base_states.cpp:36 */
void CBaseTutorState::GetType(void)
{
}

/* <21c00d> ../cstrike/dlls/tutor_base_states.cpp:28 */
void CBaseTutorState::CBaseTutorState(void)
{
}

/* <21bff4> ../cstrike/dlls/tutor_base_states.cpp:28 */
void CBaseTutorState::CBaseTutorState(void)
{
}

/* <21bfb5> ../cstrike/dlls/tutor_base_states.cpp:14 */
void CBaseTutorStateSystem::GetCurrentStateType(void)
{
//	GetType(CBaseTutorState *const this);  //    20
}

/* <21bf94> ../cstrike/dlls/tutor_base_states.cpp:6 */
void CBaseTutorStateSystem::CBaseTutorStateSystem(void)
{
}

/* <21bf7b> ../cstrike/dlls/tutor_base_states.cpp:6 */
void CBaseTutorStateSystem::CBaseTutorStateSystem(void)
{
}

/* <21bf42> ../cstrike/dlls/tutor_base_states.cpp:10 */
void CBaseTutorStateSystem::~CBaseTutorStateSystem(void)
{
//	~CBaseTutorStateSystem(CBaseTutorStateSystem::~CBaseTutorStateSystem(//				int const __in_chrg);  //    12
}

/* <21bee8> ../cstrike/dlls/tutor_base_states.cpp:32 */
void CBaseTutorState::~CBaseTutorState(void)
{
}

/* <21bec7> ../cstrike/dlls/tutor_base_states.cpp:10 */
void CBaseTutorStateSystem::~CBaseTutorStateSystem(void)
{
}

/* <21beae> ../cstrike/dlls/tutor_base_states.cpp:36 */
void CBaseTutorState::GetType(void)
{
}

/* <21be90> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <21be3c> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <21bdf2> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <21bda3> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <21bd42> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <21bd16> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <21bcee> ../cstrike/dlls/tutor_base_states.cpp:10 */
void CBaseTutorStateSystem::~CBaseTutorStateSystem(int const __in_chrg)
{
}

/* <21bcc6> ../cstrike/dlls/tutor_base_states.cpp:32 */
void CBaseTutorState::~CBaseTutorState(int const __in_chrg)
{
}

/* <21868e> ../cstrike/dlls/tutor_cs_tutor.cpp:2033 */
void CCSTutor::HandleClientCorpseSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2040
//		class ClientCorpseStruct *corpse;                    //  2042
//		push_back(vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this,
//				const value_type &__x);  //  2047
//	}
}

/* <218057> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_insert_aux(iterator __position, const ClientCorpseStruct * &__x)
{
//	{
//		class ClientCorpseStruct *__x_copy;                  //   308
//		construct(new_allocator<ClientCorpseStruct*> *const this,
//				pointer __p,
//				const class ClientCorpseStruct * &__val);  //   303
//		copy_backward<ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first,
//										class ClientCorpseStruct ** __last,
//										class ClientCorpseStruct ** __result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<ClientCorpseStruct**, std::vector<ClientCorpseStruct*>>(const class __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__lhs,
//											const class __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<ClientCorpseStruct*> *const this,
//				pointer __p,
//				const class ClientCorpseStruct * &__val);  //   332
//		__uninitialized_move_a<ClientCorpseStruct**, ClientCorpseStruct**, std::allocator<ClientCorpseStruct*>>(ClientCorpseStruct ** __first,
//															class ClientCorpseStruct ** __last,
//															class ClientCorpseStruct ** __result,
//															class allocator<ClientCorpseStruct*> &__alloc);  //   340
//		__uninitialized_move_a<ClientCorpseStruct**, ClientCorpseStruct**, std::allocator<ClientCorpseStruct*>>(ClientCorpseStruct ** __first,
//															class ClientCorpseStruct ** __last,
//															class ClientCorpseStruct ** __result,
//															class allocator<ClientCorpseStruct*> &__alloc);  //   346
//		_M_deallocate(_Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <218033> ../cstrike/dlls/tutor_cs_tutor.cpp:221 */
void CCSTutor::~CCSTutor(void)
{
}

/* <217e69> ../cstrike/dlls/tutor_cs_tutor.cpp:221 */
void CCSTutor::~CCSTutor(int const __in_chrg)
{
//	DeleteEvent(CCSTutor::~CCSTutor(//			class TutorMessageEvent *event);  //   231
//	DeleteEvent(CCSTutor *const this,
//			class TutorMessageEvent *event);  //   237
//	ClearEventList(CCSTutor *const this);  //   243
//	~vector(vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this,
//		int const __in_chrg);  //   221
//	~map(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this,
//		int const __in_chrg);  //   221
}


/* <216e45> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1058 */
void _M_erase(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Link_type __x)
{
//	{
//		_Link_type __y;                                       //  1065
//		_M_erase(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this,
//			_Link_type __x);  //  1064
//		_M_destroy_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this,
//				_Link_type __p);  //  1066
//	}
}

/* <216e0d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1058 */
void _M_erase(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Link_type __x)
{
//	{
//		_Link_type __y;                                       //  1065
//	}
}

/* <216dc2> ../cstrike/dlls/tutor_cs_tutor.cpp:3853 */
void CCSTutor::TransferDeathEvents(TutorMessageEvent *oldEvent, class TutorMessageEvent *newEvent)
{
//	{
//		int i;                                                //  3855
//	}
}

/* <216d6d> ../cstrike/dlls/tutor_cs_tutor.cpp:3795 */
void CCSTutor::ConstructRecentDeathsList(TeamName team, char *buf, int buflen, class TutorMessageEvent *event)
{
//	{
//		int i;                                                //  3804
//	}
}

/* <216d35> ../cstrike/dlls/tutor_cs_tutor.cpp:3781 */
void CCSTutor::ResetPlayerDeathInfo(void)
{
//	{
//		int i;                                                //  3785
//	}
}

/* <216d01> ../cstrike/dlls/tutor_cs_tutor.cpp:3773 */
void CCSTutor::IsBombMap(void)
{
//	{
//		class CHalfLifeMultiplay *mpRules;                   //  3775
//	}
}

/* <216cdd> ../cstrike/dlls/tutor_cs_tutor.cpp:3767 */
void CCSTutor::IsHostageMap(void)
{
}

/* <2161ea> ../cstrike/dlls/tutor_cs_tutor.cpp:1356 */
void CCSTutor::CallEventHandler(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	HandleRadioGetOutOfThere(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1536
//	HandleBombPlanted(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1395
//	HandleRadioReportingIn(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1532
//	HandleRadioInPosition(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1528
//	HandleRadioSectorClear(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1524
//	HandleRadioNeedBackup(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1520
//	HandleRadioEnemySpotted(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1516
//	HandleRadioAffirmative(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1512
//	HandleRadioReportInTeam(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1508
//	HandleRadioStormTheFront(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1504
//	HandleRadioGetInPositionAndWait(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1500
//	HandleRadioStickTogetherTeam(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1496
//	HandleRadioTeamFallBack(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1492
//	HandleRadioGoGoGo(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1488
//	HandleRadioTakingFire(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1484
//	HandleRadioFollowMe(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1480
//	HandleRadioRegroupTeam(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1476
//	HandleRadioHoldThisPosition(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1472
//	HandleRadioYouTakeThePoint(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1468
//	HandleRadioCoverMe(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1464
//	HandleCareerTaskDone(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1585
//	HandleNeedToBuyGrenade(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1581
//	HandleNeedToBuyDefuseKit(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1577
//	HandleNeedToBuyArmor(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1573
//	HandleNeedToBuySecondaryAmmo(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1569
//	HandleNeedToBuyPrimaryAmmo(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1565
//	HandleNeedToBuyPrimaryWeapon(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1561
//	HandleNotBuyingAnything(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1557
//	HandleAutoBuy(CCSTutor *const this,
//			class CBaseEntity *entity,
//			class CBaseEntity *other);  //  1553
//	HandleBuyMenuOpenned(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1549
//	HandleDeathCameraStart(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1459
//	HandleRadioNegative(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1540
//	HandlePlayerSpawned(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1378
//	HandleRoundDraw(CCSTutor *const this,
//			class CBaseEntity *entity,
//			class CBaseEntity *other);  //  1447
//	HandleCTWin(CCSTutor *const this,
//			class CBaseEntity *entith,
//			class CBaseEntity *other);  //  1451
//	HandleTWin(CCSTutor *const this,
//			class CBaseEntity *entity,
//			class CBaseEntity *other);  //  1455
//	HandleAllHostagesRescued(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1435
//	HandlePlayerBlindedByFlashbang(CCSTutor *const this,
//					class CBaseEntity *entity,
//					class CBaseEntity *other);  //  1411
//	HandleBeingShotAt(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1403
//	HandleWeaponReloaded(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1370
//	HandleWeaponFired(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1362
//	HandleRadioEnemyDown(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1544
//	HandleBombDefusing(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1415
//	HandleBombExploded(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1423
//	HandleHostageDamaged(CCSTutor *const this,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //  1439
}

/* <215ff3> ../cstrike/dlls/tutor_cs_tutor.cpp:642 */
void CCSTutor::TutorThink(float time)
{
//	CheckForWindowClose(CCSTutor *const this,
//				float time);  //   684
//	CheckForContentUpdate(CCSTutor *const this);  //   685
//	CheckInGameHintMessages(CCSTutor *const this,
//				float time);  //   659
//	CanLocalPlayerBuyStuff(CCSTutor *const this);  //   669
//	CanLocalPlayerBuyStuff(CCSTutor *const this);  //   675
//	CanLocalPlayerBuyStuff(CCSTutor *const this);  //   663
}

/* <215fbd> ../cstrike/dlls/tutor_cs_tutor.cpp:2050 */
void CCSTutor::HandleBuyMenuOpenned(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <215f88> ../cstrike/dlls/tutor_cs_tutor.cpp:2050 */
void CCSTutor::HandleBuyMenuOpenned(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <215f25> ../cstrike/dlls/tutor_cs_tutor.cpp:3714 */
void CCSTutor::CheckBuyZoneMessages(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3716
//		class CBasePlayerWeapon *primary;                    //  3729
//		class CBasePlayerWeapon *secondary;                  //  3730
//	}
}

/* <215eec> ../cstrike/dlls/tutor_cs_tutor.cpp:3696 */
void CCSTutor::CanLocalPlayerBuyStuff(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3698
//	}
}

/* <215ec1> ../cstrike/dlls/tutor_cs_tutor.cpp:3696 */
void CCSTutor::CanLocalPlayerBuyStuff(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3698
//	}
}

/* <215d16> ../cstrike/dlls/tutor_cs_tutor.cpp:3568 */
void CCSTutor::CheckExamineMessages(float time)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3570
//		{
//			int i;                                        //  3576
//			{
//				class TutorMessage *message;         //  3578
//				class CBaseEntity *entity;           //  3585
//				bool sawOne;                          //  3588
//				{
//					bool isPlayerLooking;         //  3592
//					{
//						bool validEntity;     //  3617
//						{
//							class CBasePlayer *player;             //  3627
//						}
//						{
//							class CHostage *hostage;           //  3665
//							IsFollowingSomeone(CHostage *const this);  //  3666
//							IsValid(CHostage *const this);  //  3670
//						}
//						{
//							class CBasePlayer *player;             //  3648
//						}
//					}
//				}
//			}
//		}
//	}
}

/* <215cc0> ../cstrike/dlls/tutor_cs_tutor.cpp:1594 */
void CCSTutor::HandleWeaponFired(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  1597
//		class CBasePlayer *target;                           //  1598
//		class CBasePlayer *localPlayer;                      //  1599
//	}
}

/* <215c61> ../cstrike/dlls/tutor_cs_tutor.cpp:1594 */
void CCSTutor::HandleWeaponFired(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  1597
//		class CBasePlayer *target;                           //  1598
//		class CBasePlayer *localPlayer;                      //  1599
//	}
}

/* <215b61> ../cstrike/dlls/tutor_cs_tutor.cpp:3493 */
void CCSTutor::CheckForNeedToReload(bool isPassiveCheck)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3495
//		class CBasePlayerItem *currentItem;                  //  3502
//		class CBasePlayerWeapon *currentWeapon;              //  3511
//		ItemInfo itemInfo;                                    //  3512
//		iMaxClip(CBasePlayerItem *const this);  //  3541
//		{
//			class TutorMessage *message;                 //  3543
//		}
//		{
//			class TutorMessage *message;                 //  3553
//		}
//		iMaxClip(CBasePlayerItem *const this);  //  3561
//		{
//			class TutorMessage *message;                 //  3526
//		}
//	}
}

/* <215b23> ../cstrike/dlls/tutor_cs_tutor.cpp:3456 */
void CCSTutor::CheckInGameHintMessages(float time)
{
//	{
//		class TutorMessage *message;                         //  3482
//	}
}

/* <215aeb> ../cstrike/dlls/tutor_cs_tutor.cpp:3456 */
void CCSTutor::CheckInGameHintMessages(float time)
{
//	{
//		class TutorMessage *message;                         //  3482
//	}
}

/* <215a44> ../cstrike/dlls/tutor_cs_tutor.cpp:3374 */
void CCSTutor::CheckHintMessages(float time)
{
//	{
//		bool confusingHint;                                   //  3397
//		class TutorMessage *message;                         //  3445
//		IsHostageMap(CCSTutor *const this);  //  3400
//		IsBombMap(CCSTutor *const this);  //  3417
//	}
}

/* <215938> ../cstrike/dlls/tutor_cs_tutor.cpp:3285 */
void CCSTutor::GetEntityForMessageID(int messageID, CBaseEntity *last)
{
//	{
//		class CBaseEntity *ret;                              //  3287
//		{
//			class CBasePlayer *localPlayer;              //  3323
//			class ClientCorpseStruct *lastCorpse;        //  3334
//			ClientCorpseListIter iter;                    //  3340
//			{
//				class ClientCorpseStruct *corpse;    //  3343
//				operator++(__normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > *const this,
//						int);  //  3353
//				operator++(__normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > *const this,
//						int);  //  3346
//			}
//			empty(const class vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this);  //  3329
//		}
//	}
}

/* <2158b5> ../cstrike/dlls/tutor_cs_tutor.cpp:2265 */
void CCSTutor::HandleHostageUsed(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2267
//		bool unusedHostages;                                  //  2278
//		class CBasePlayer *activator;                        //  2280
//	}
}

/* <2157fb> ../cstrike/dlls/tutor_cs_tutor.cpp:2389 */
void CCSTutor::HandleHostageKilled(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2391
//		class CBasePlayer *attacker;                         //  2410
//		bool unusedHostages;                                  //  2417
//		CheckForAllHostagesDead(CCSTutor *const this);  //  2397
//	}
}

/* <21573c> ../cstrike/dlls/tutor_cs_tutor.cpp:3242 */
void CCSTutor::CheckForAllHostagesFollowingSomeone(void)
{
//	{
//		bool foundUnusedOne;                                  //  3244
//		class CHostage *hostage;                             //  3246
//		IsFollowingSomeone(CHostage *const this);  //  3251
//	}
}

/* <2156fd> ../cstrike/dlls/tutor_cs_tutor.cpp:3218 */
void CCSTutor::CheckForAllHostagesDead(void)
{
//	{
//		bool foundLiveOne;                                    //  3220
//		class CBaseEntity *hostage;                          //  3222
//	}
}

/* <2156c5> ../cstrike/dlls/tutor_cs_tutor.cpp:3218 */
void CCSTutor::CheckForAllHostagesDead(void)
{
//	{
//		bool foundLiveOne;                                    //  3220
//		class CBaseEntity *hostage;                          //  3222
//	}
}

/* <215646> ../cstrike/dlls/tutor_cs_tutor.cpp:3168 */
void CCSTutor::CheckForTimeRunningOut(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3170
//		class CHalfLifeMultiplay *mpRules;                   //  3176
//		TimeRemaining(CHalfLifeMultiplay *const this);  //  3185
//		IsHostageMap(CCSTutor *const this);  //  3202
//	}
}

/* <2154f4> ../cstrike/dlls/tutor_cs_tutor.cpp:3102 */
void CCSTutor::CheckForHostageViewable(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3104
//		class CBaseEntity *hostageEntity;                    //  3110
//		bool sawFirst;                                        //  3111
//		{
//			bool validHostage;                            //  3117
//			class CHostage *hostage;                     //  3118
//			IsFollowingSomeone(CHostage *const this);  //  3119
//			{
//				class TutorMessage *message;         //  3151
//			}
//			{
//				class TutorMessage *message;         //  3139
//			}
//			IsValid(CHostage *const this);  //  3123
//		}
//	}
}

/* <2154b6> ../cstrike/dlls/tutor_cs_tutor.cpp:3078 */
void CCSTutor::IsBombPlantedInBombsite(CBaseEntity *bombTarget)
{
//	{
//		class CGrenade *bomb;                                //  3081
//	}
}

/* <215431> ../cstrike/dlls/tutor_cs_tutor.cpp:2959 */
void CCSTutor::CheckForBombsiteViewable(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2961
//		enum TutorMessageID mid;                              //  2967
//		class TutorMessage *definition;                      //  2991
//		class CBaseEntity *bombTarget;                       //  2998
//		bool sawFirst;                                        //  3000
//	}
}

/* <21534e> ../cstrike/dlls/tutor_cs_tutor.cpp:3026 */
void CCSTutor::CheckForInBombZone(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  3028
//		enum TutorMessageID mid;                              //  3034
//		class CBaseEntity *bombTarget;                       //  3044
//		bool sawFirst;                                        //  3046
//		IsBombPlantedInBombsite(CCSTutor *const this,
//					class CBaseEntity *bombTarget);  //  3053
//		IsBombPlantedInBombsite(CCSTutor *const this,
//					class CBaseEntity *bombTarget);  //  3067
//	}
}

/* <215316> ../cstrike/dlls/tutor_cs_tutor.cpp:3078 */
void CCSTutor::IsBombPlantedInBombsite(CBaseEntity *bombTarget)
{
//	{
//		class CGrenade *bomb;                                //  3081
//	}
}

/* <2151c1> ../cstrike/dlls/tutor_cs_tutor.cpp:2826 */
void CCSTutor::CheckForBombViewable(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2828
//		class CBaseEntity *bomb;                             //  2835
//		class CBasePlayer *bombCarrier;                      //  2870
//		{
//			class TutorMessage *message;                 //  2856
//		}
//		{
//			class TutorMessage *message;                 //  2844
//		}
//		{
//			int i;                                        //  2872
//			{
//				class CBasePlayer *player;           //  2874
//			}
//		}
//		{
//			class TutorMessage *message;                 //  2946
//		}
//		{
//			class TutorMessage *message;                 //  2934
//		}
//		{
//			class TutorMessage *message;                 //  2915
//		}
//		{
//			class TutorMessage *message;                 //  2903
//		}
//	}
}

/* <21514d> ../cstrike/dlls/tutor_cs_tutor.cpp:2787 */
void CCSTutor::CheckForLooseDefuserViewable(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2789
//		class TutorMessage *message;                         //  2797
//		class CBaseEntity *defuser;                          //  2803
//		bool sawFirst;                                        //  2804
//	}
}

/* <2150d5> ../cstrike/dlls/tutor_cs_tutor.cpp:2749 */
void CCSTutor::CheckForLooseWeaponViewable(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2751
//		class CBaseEntity *weapon;                           //  2757
//		bool sawFirst;                                        //  2758
//		class TutorMessage *message;                         //  2761
//	}
}

/* <21507d> ../cstrike/dlls/tutor_cs_tutor.cpp:2720 */
void CCSTutor::GetNumPlayersAliveOnTeams(int &numT, int &numCT)
{
//	{
//		int i;                                                //  2726
//		{
//			class CBasePlayer *player;                   //  2728
//		}
//	}
}

/* <215036> ../cstrike/dlls/tutor_cs_tutor.cpp:2627 */
void CCSTutor::HandleCareerTaskDone(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int numTasksRemaining;                                //  2629
//	}
}

/* <214ff1> ../cstrike/dlls/tutor_cs_tutor.cpp:2627 */
void CCSTutor::HandleCareerTaskDone(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		int numTasksRemaining;                                //  2629
//	}
}

/* <214fbb> ../cstrike/dlls/tutor_cs_tutor.cpp:2622 */
void CCSTutor::HandleNeedToBuyGrenade(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214f86> ../cstrike/dlls/tutor_cs_tutor.cpp:2622 */
void CCSTutor::HandleNeedToBuyGrenade(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214f50> ../cstrike/dlls/tutor_cs_tutor.cpp:2617 */
void CCSTutor::HandleNeedToBuyDefuseKit(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214f1b> ../cstrike/dlls/tutor_cs_tutor.cpp:2617 */
void CCSTutor::HandleNeedToBuyDefuseKit(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214ee5> ../cstrike/dlls/tutor_cs_tutor.cpp:2612 */
void CCSTutor::HandleNeedToBuyArmor(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214eb0> ../cstrike/dlls/tutor_cs_tutor.cpp:2612 */
void CCSTutor::HandleNeedToBuyArmor(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214e7a> ../cstrike/dlls/tutor_cs_tutor.cpp:2607 */
void CCSTutor::HandleNeedToBuySecondaryAmmo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214e45> ../cstrike/dlls/tutor_cs_tutor.cpp:2607 */
void CCSTutor::HandleNeedToBuySecondaryAmmo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214e0f> ../cstrike/dlls/tutor_cs_tutor.cpp:2602 */
void CCSTutor::HandleNeedToBuyPrimaryAmmo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214dda> ../cstrike/dlls/tutor_cs_tutor.cpp:2602 */
void CCSTutor::HandleNeedToBuyPrimaryAmmo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214da4> ../cstrike/dlls/tutor_cs_tutor.cpp:2597 */
void CCSTutor::HandleNeedToBuyPrimaryWeapon(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214d6f> ../cstrike/dlls/tutor_cs_tutor.cpp:2597 */
void CCSTutor::HandleNeedToBuyPrimaryWeapon(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214d39> ../cstrike/dlls/tutor_cs_tutor.cpp:2592 */
void CCSTutor::HandleNotBuyingAnything(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214d04> ../cstrike/dlls/tutor_cs_tutor.cpp:2592 */
void CCSTutor::HandleNotBuyingAnything(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214cce> ../cstrike/dlls/tutor_cs_tutor.cpp:2587 */
void CCSTutor::HandleRadioEnemyDown(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214c99> ../cstrike/dlls/tutor_cs_tutor.cpp:2587 */
void CCSTutor::HandleRadioEnemyDown(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214c63> ../cstrike/dlls/tutor_cs_tutor.cpp:2582 */
void CCSTutor::HandleRadioNegative(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214c2e> ../cstrike/dlls/tutor_cs_tutor.cpp:2582 */
void CCSTutor::HandleRadioNegative(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214bf8> ../cstrike/dlls/tutor_cs_tutor.cpp:2577 */
void CCSTutor::HandleRadioGetOutOfThere(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214bc3> ../cstrike/dlls/tutor_cs_tutor.cpp:2577 */
void CCSTutor::HandleRadioGetOutOfThere(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214b8d> ../cstrike/dlls/tutor_cs_tutor.cpp:2572 */
void CCSTutor::HandleRadioReportingIn(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214b58> ../cstrike/dlls/tutor_cs_tutor.cpp:2572 */
void CCSTutor::HandleRadioReportingIn(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214b22> ../cstrike/dlls/tutor_cs_tutor.cpp:2567 */
void CCSTutor::HandleRadioInPosition(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214aed> ../cstrike/dlls/tutor_cs_tutor.cpp:2567 */
void CCSTutor::HandleRadioInPosition(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214ab7> ../cstrike/dlls/tutor_cs_tutor.cpp:2562 */
void CCSTutor::HandleRadioSectorClear(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214a82> ../cstrike/dlls/tutor_cs_tutor.cpp:2562 */
void CCSTutor::HandleRadioSectorClear(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214a4c> ../cstrike/dlls/tutor_cs_tutor.cpp:2557 */
void CCSTutor::HandleRadioNeedBackup(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214a17> ../cstrike/dlls/tutor_cs_tutor.cpp:2557 */
void CCSTutor::HandleRadioNeedBackup(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2149e1> ../cstrike/dlls/tutor_cs_tutor.cpp:2552 */
void CCSTutor::HandleRadioEnemySpotted(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2149ac> ../cstrike/dlls/tutor_cs_tutor.cpp:2552 */
void CCSTutor::HandleRadioEnemySpotted(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214976> ../cstrike/dlls/tutor_cs_tutor.cpp:2547 */
void CCSTutor::HandleRadioAffirmative(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214941> ../cstrike/dlls/tutor_cs_tutor.cpp:2547 */
void CCSTutor::HandleRadioAffirmative(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21490b> ../cstrike/dlls/tutor_cs_tutor.cpp:2542 */
void CCSTutor::HandleRadioReportInTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2148d6> ../cstrike/dlls/tutor_cs_tutor.cpp:2542 */
void CCSTutor::HandleRadioReportInTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2148a0> ../cstrike/dlls/tutor_cs_tutor.cpp:2537 */
void CCSTutor::HandleRadioStormTheFront(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21486b> ../cstrike/dlls/tutor_cs_tutor.cpp:2537 */
void CCSTutor::HandleRadioStormTheFront(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214835> ../cstrike/dlls/tutor_cs_tutor.cpp:2532 */
void CCSTutor::HandleRadioGetInPositionAndWait(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214800> ../cstrike/dlls/tutor_cs_tutor.cpp:2532 */
void CCSTutor::HandleRadioGetInPositionAndWait(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2147ca> ../cstrike/dlls/tutor_cs_tutor.cpp:2527 */
void CCSTutor::HandleRadioStickTogetherTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214795> ../cstrike/dlls/tutor_cs_tutor.cpp:2527 */
void CCSTutor::HandleRadioStickTogetherTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21475f> ../cstrike/dlls/tutor_cs_tutor.cpp:2522 */
void CCSTutor::HandleRadioTeamFallBack(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21472a> ../cstrike/dlls/tutor_cs_tutor.cpp:2522 */
void CCSTutor::HandleRadioTeamFallBack(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2146f4> ../cstrike/dlls/tutor_cs_tutor.cpp:2517 */
void CCSTutor::HandleRadioGoGoGo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2146bf> ../cstrike/dlls/tutor_cs_tutor.cpp:2517 */
void CCSTutor::HandleRadioGoGoGo(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214689> ../cstrike/dlls/tutor_cs_tutor.cpp:2512 */
void CCSTutor::HandleRadioTakingFire(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214654> ../cstrike/dlls/tutor_cs_tutor.cpp:2512 */
void CCSTutor::HandleRadioTakingFire(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21461e> ../cstrike/dlls/tutor_cs_tutor.cpp:2507 */
void CCSTutor::HandleRadioFollowMe(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2145e9> ../cstrike/dlls/tutor_cs_tutor.cpp:2507 */
void CCSTutor::HandleRadioFollowMe(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2145b3> ../cstrike/dlls/tutor_cs_tutor.cpp:2502 */
void CCSTutor::HandleRadioRegroupTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21457e> ../cstrike/dlls/tutor_cs_tutor.cpp:2502 */
void CCSTutor::HandleRadioRegroupTeam(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214548> ../cstrike/dlls/tutor_cs_tutor.cpp:2497 */
void CCSTutor::HandleRadioHoldThisPosition(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214513> ../cstrike/dlls/tutor_cs_tutor.cpp:2497 */
void CCSTutor::HandleRadioHoldThisPosition(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2144dd> ../cstrike/dlls/tutor_cs_tutor.cpp:2492 */
void CCSTutor::HandleRadioYouTakeThePoint(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2144a8> ../cstrike/dlls/tutor_cs_tutor.cpp:2492 */
void CCSTutor::HandleRadioYouTakeThePoint(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <214472> ../cstrike/dlls/tutor_cs_tutor.cpp:2487 */
void CCSTutor::HandleRadioCoverMe(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21443d> ../cstrike/dlls/tutor_cs_tutor.cpp:2487 */
void CCSTutor::HandleRadioCoverMe(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <2143ed> ../cstrike/dlls/tutor_cs_tutor.cpp:2461 */
void CCSTutor::HandleDeathCameraStart(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2463
//		class CBasePlayer *player;                           //  2474
//	}
}

/* <21439b> ../cstrike/dlls/tutor_cs_tutor.cpp:2461 */
void CCSTutor::HandleDeathCameraStart(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2463
//		class CBasePlayer *player;                           //  2474
//	}
}

/* <214335> ../cstrike/dlls/tutor_cs_tutor.cpp:2453 */
void CCSTutor::HandleTWin(CBaseEntity *entity, CBaseEntity *other)
{
//	ResetPlayerDeathInfo(CCSTutor *const this);  //  2457
}

/* <214300> ../cstrike/dlls/tutor_cs_tutor.cpp:2453 */
void CCSTutor::HandleTWin(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <21429a> ../cstrike/dlls/tutor_cs_tutor.cpp:2445 */
void CCSTutor::HandleCTWin(CBaseEntity *entith, CBaseEntity *other)
{
//	ResetPlayerDeathInfo(CCSTutor *const this);  //  2449
}

/* <214265> ../cstrike/dlls/tutor_cs_tutor.cpp:2445 */
void CCSTutor::HandleCTWin(CBaseEntity *entith, CBaseEntity *other)
{
}

/* <2141f5> ../cstrike/dlls/tutor_cs_tutor.cpp:2433 */
void CCSTutor::HandleRoundDraw(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  2435
//		ResetPlayerDeathInfo(CCSTutor *const this);  //  2441
//	}
}

/* <2141b1> ../cstrike/dlls/tutor_cs_tutor.cpp:2433 */
void CCSTutor::HandleRoundDraw(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  2435
//	}
}

/* <214161> ../cstrike/dlls/tutor_cs_tutor.cpp:2361 */
void CCSTutor::HandleHostageDamaged(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2363
//		class CBasePlayer *attacker;                         //  2380
//	}
}

/* <21410f> ../cstrike/dlls/tutor_cs_tutor.cpp:2361 */
void CCSTutor::HandleHostageDamaged(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2363
//		class CBasePlayer *attacker;                         //  2380
//	}
}

/* <2140c8> ../cstrike/dlls/tutor_cs_tutor.cpp:2342 */
void CCSTutor::HandleAllHostagesRescued(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2344
//	}
}

/* <214083> ../cstrike/dlls/tutor_cs_tutor.cpp:2342 */
void CCSTutor::HandleAllHostagesRescued(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2344
//	}
}

/* <214011> ../cstrike/dlls/tutor_cs_tutor.cpp:2307 */
void CCSTutor::HandleHostageRescued(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2309
//		class CBasePlayer *rescuer;                          //  2320
//	}
}

/* <213fc1> ../cstrike/dlls/tutor_cs_tutor.cpp:2239 */
void CCSTutor::HandleBeingShotAt(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2246
//		class CBasePlayer *localPlayer;                      //  2247
//	}
}

/* <213f6f> ../cstrike/dlls/tutor_cs_tutor.cpp:2239 */
void CCSTutor::HandleBeingShotAt(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2246
//		class CBasePlayer *localPlayer;                      //  2247
//	}
}

/* <213ebd> ../cstrike/dlls/tutor_cs_tutor.cpp:2191 */
void CCSTutor::HandleRoundStart(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2194
//		IsBombMap(CCSTutor *const this);  //  2200
//		IsHostageMap(CCSTutor *const this);  //  2222
//	}
}

/* <213ea2> ../cstrike/dlls/tutor_cs_tutor.cpp:3767 */
void CCSTutor::IsHostageMap(void)
{
}

/* <213e5b> ../cstrike/dlls/tutor_cs_tutor.cpp:2172 */
void CCSTutor::HandleBombExploded(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2174
//	}
}

/* <213e16> ../cstrike/dlls/tutor_cs_tutor.cpp:2172 */
void CCSTutor::HandleBombExploded(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2174
//	}
}

/* <213dc6> ../cstrike/dlls/tutor_cs_tutor.cpp:2148 */
void CCSTutor::HandleBombDefusing(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2150
//		class CBasePlayer *player;                           //  2161
//	}
}

/* <213d74> ../cstrike/dlls/tutor_cs_tutor.cpp:2148 */
void CCSTutor::HandleBombDefusing(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2150
//		class CBasePlayer *player;                           //  2161
//	}
}

/* <213d02> ../cstrike/dlls/tutor_cs_tutor.cpp:2112 */
void CCSTutor::HandleBombDefused(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2114
//		class CBasePlayer *defuser;                          //  2120
//	}
}

/* <213cbb> ../cstrike/dlls/tutor_cs_tutor.cpp:2092 */
void CCSTutor::HandleBombPlanted(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2094
//	}
}

/* <213c76> ../cstrike/dlls/tutor_cs_tutor.cpp:2092 */
void CCSTutor::HandleBombPlanted(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2094
//	}
}

/* <213b9c> ../cstrike/dlls/tutor_cs_tutor.cpp:2074 */
void CCSTutor::HandlePlayerLeftBuyZone(CBaseEntity *entity, CBaseEntity *other)
{
//	ClearEventList(CCSTutor *const this);  //  2078
//	AddToEventList(CCSTutor *const this,
//			class TutorMessageEvent *event);  //  2083
}

/* <213b67> ../cstrike/dlls/tutor_cs_tutor.cpp:2069 */
void CCSTutor::HandleBuyTimeStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <213b32> ../cstrike/dlls/tutor_cs_tutor.cpp:2060 */
void CCSTutor::HandleAutoBuy(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <213afd> ../cstrike/dlls/tutor_cs_tutor.cpp:2060 */
void CCSTutor::HandleAutoBuy(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <213ab7> ../cstrike/dlls/tutor_cs_tutor.cpp:2008 */
void CCSTutor::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2015
//	}
}

/* <213a72> ../cstrike/dlls/tutor_cs_tutor.cpp:2008 */
void CCSTutor::HandlePlayerSpawned(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  2015
//	}
}

/* <213a21> ../cstrike/dlls/tutor_cs_tutor.cpp:1985 */
void CCSTutor::HandlePlayerBlindedByFlashbang(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  1992
//		class CBasePlayer *player;                           //  1998
//	}
}

/* <2139cf> ../cstrike/dlls/tutor_cs_tutor.cpp:1985 */
void CCSTutor::HandlePlayerBlindedByFlashbang(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  1992
//		class CBasePlayer *player;                           //  1998
//	}
}

/* <21394c> ../cstrike/dlls/tutor_cs_tutor.cpp:1945 */
void CCSTutor::HandlePlayerTookDamage(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  1947
//		class CBasePlayer *victim;                           //  1953
//		class CBasePlayer *attacker;                         //  1954
//	}
}

/* <21385d> ../cstrike/dlls/tutor_cs_tutor.cpp:1673 */
void CCSTutor::HandlePlayerDied(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *victim;                           //  1675
//		class CBasePlayer *killer;                           //  1676
//		class CBasePlayer *localPlayer;                      //  1678
//		int numT;                                             //  1717
//		int numCT;                                            //  1717
//		GetNumPlayersAliveOnTeams(CCSTutor *const this,
//						int &numT,
//						int &numCT);  //  1718
//	}
}

/* <213817> ../cstrike/dlls/tutor_cs_tutor.cpp:1654 */
void CCSTutor::HandleWeaponReloaded(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  1661
//	}
}

/* <2137d2> ../cstrike/dlls/tutor_cs_tutor.cpp:1654 */
void CCSTutor::HandleWeaponReloaded(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *player;                           //  1661
//	}
}

/* <21371d> ../cstrike/dlls/tutor_cs_tutor.cpp:1616 */
void CCSTutor::HandleWeaponFiredOnEmpty(CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //  1618
//		class CBasePlayer *player;                           //  1629
//		{
//			class CBasePlayerWeapon *currentWeapon;      //  1635
//			{
//				class TutorMessage *message;         //  1641
//			}
//		}
//	}
}

/* <21362f> ../cstrike/dlls/tutor_cs_tutor.cpp:597 */
void CCSTutor::CheckForInterruptingMessageEvent(float time)
{
//	{
//		bool newEvent;                                        //   599
//		class TutorMessageEvent *event;                      //   600
//		class TutorMessage *oldMessage;                      //   602
//		class TutorMessageEvent *oldEvent;                   //   604
//		ProcessShownDeathsForEvent(CCSTutor *const this,
//						class TutorMessageEvent *event);  //   626
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   627
//	}
}

/* <2135cc> ../cstrike/dlls/tutor_cs_tutor.cpp:1324 */
void CCSTutor::ConstructMessageAndDisplay(void)
{
//	{
//		class CBasePlayer *pLocalPlayer;                     //  1326
//		enum TutorMessageID mid;                              //  1338
//		class TutorMessage *message;                         //  1343
//	}
}

/* <213556> ../cstrike/dlls/tutor_cs_tutor.cpp:691 */
void CCSTutor::CheckForWindowClose(float time)
{
//	{
//		class TutorMessageEvent *event;                      //   700
//		GetTutorMessageUpdateEvent(CCSTutor *const this);  //   700
//	}
}

/* <21351e> ../cstrike/dlls/tutor_cs_tutor.cpp:691 */
void CCSTutor::CheckForWindowClose(float time)
{
//	{
//		class TutorMessageEvent *event;                      //   700
//	}
}

/* <2134a7> ../cstrike/dlls/tutor_cs_tutor.cpp:715 */
void CCSTutor::CheckForContentUpdate(void)
{
//	{
//		class TutorMessage *definition;                      //   722
//		class TutorMessageEvent *event;                      //   733
//		GetTutorMessageUpdateEvent(CCSTutor *const this);  //   733
//	}
}

/* <21346f> ../cstrike/dlls/tutor_cs_tutor.cpp:715 */
void CCSTutor::CheckForContentUpdate(void)
{
//	{
//		class TutorMessage *definition;                      //   722
//		class TutorMessageEvent *event;                      //   733
//	}
}

/* <213393> ../cstrike/dlls/tutor_cs_tutor.cpp:1259 */
void CCSTutor::UpdateCurrentMessage(TutorMessageEvent *event)
{
//	{
//		class TutorMessage *definition;                      //  1274
//		class CBasePlayer *localPlayer;                      //  1280
//		TransferDeathEvents(CCSTutor *const this,
//					class TutorMessageEvent *oldEvent,
//					class TutorMessageEvent *newEvent);  //  1261
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //  1266
//	}
}

/* <21333e> ../cstrike/dlls/tutor_cs_tutor.cpp:1241 */
void CCSTutor::ShouldUpdateCurrentMessage(TutorMessageID messageID)
{
//	{
//		class TutorMessage *definition;                      //  1249
//	}
}

/* <2132ca> ../cstrike/dlls/tutor_cs_tutor.cpp:1203 */
void CCSTutor::ComputeDisplayTimesForMessage(void)
{
//	{
//		float now;                                            //  1205
//		class TutorMessage *message;                         //  1207
//		int stringLength;                                     //  1218
//		float minShowTime;                                    //  1219
//	}
}

/* <213289> ../cstrike/dlls/tutor_cs_tutor.cpp:1175 */
void CCSTutor::DeleteEvent(TutorMessageEvent *event)
{
//	{
//		int i;                                                //  1177
//	}
}

/* <213215> ../cstrike/dlls/tutor_cs_tutor.cpp:1163 */
void CCSTutor::ClearEventList(void)
{
//	{
//		class TutorMessageEvent *temp;                       //  1165
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //  1169
//	}
}

/* <21314d> ../cstrike/dlls/tutor_cs_tutor.cpp:886 */
void CCSTutor::CancelEvent(TutorMessageID mid)
{
//	{
//		class TutorMessageEvent *event;                      //   895
//		{
//			class TutorMessageEvent *temp;               //   900
//			DeleteEvent(CCSTutor *const this,
//					class TutorMessageEvent *event);  //   903
//		}
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   914
//	}
}

/* <212f62> ../cstrike/dlls/tutor_cs_tutor.cpp:836 */
void CCSTutor::CheckForInactiveEvents(float time)
{
//	{
//		class TutorMessageEvent *event;                      //   838
//		class TutorMessageEvent *event1;                     //   859
//		class TutorMessageEvent *event2;                     //   860
//		bool foundDup;                                        //   861
//		{
//			class TutorMessageEvent *temp;               //   845
//			DeleteEvent(CCSTutor *const this,
//					class TutorMessageEvent *event);  //   849
//		}
//		TransferDeathEvents(CCSTutor *const this,
//					class TutorMessageEvent *oldEvent,
//					class TutorMessageEvent *newEvent);  //   868
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   870
//		TransferDeathEvents(CCSTutor *const this,
//					class TutorMessageEvent *oldEvent,
//					class TutorMessageEvent *newEvent);  //   875
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   877
//	}
}

/* <212e99> ../cstrike/dlls/tutor_cs_tutor.cpp:886 */
void CCSTutor::CancelEvent(TutorMessageID mid)
{
//	{
//		class TutorMessageEvent *event;                      //   895
//		{
//			class TutorMessageEvent *temp;               //   900
//			DeleteEvent(CCSTutor *const this,
//					class TutorMessageEvent *event);  //   903
//		}
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   914
//	}
}

/* <212e1a> ../cstrike/dlls/tutor_cs_tutor.cpp:1136 */
void CCSTutor::DeleteEventFromEventList(TutorMessageEvent *event)
{
//	{
//		class TutorMessageEvent *temp;                       //  1143
//	}
//	DeleteEventFromEventList(CCSTutor *const this,
//				class TutorMessageEvent *event);  //  1136
}

/* <212d3b> ../cstrike/dlls/tutor_cs_tutor.cpp:1108 */
void CCSTutor::CreateAndAddEventToList(TutorMessageID mid, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class TutorMessageEvent *event;                      //  1110
//		class TutorMessage *message;                         //  1117
//		AddToEventList(CCSTutor *const this,
//				class TutorMessageEvent *event);  //  1132
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //  1124
//	}
}

/* <212d0e> ../cstrike/dlls/tutor_cs_tutor.cpp:1096 */
void CCSTutor::AddToEventList(TutorMessageEvent *event)
{
}

/* <212ce6> ../cstrike/dlls/tutor_cs_tutor.cpp:1096 */
void CCSTutor::AddToEventList(TutorMessageEvent *event)
{
}

/* <212aa0> ../cstrike/dlls/tutor_cs_tutor.cpp:930 */
void CCSTutor::CreateTutorMessageEvent(TutorMessageID mid, CBaseEntity *entity, CBaseEntity *other)
{
//	{
//		class CBasePlayer *localPlayer;                      //   932
//		class TutorMessage *message;                         //   938
//		class TutorMessageEvent *event;                      //   944
//		{
//			int numT;                                     //  1018
//			int numCT;                                    //  1019
//			char numTStr;                                 //  1022
//			char numCTStr;                                //  1025
//			GetNumPlayersAliveOnTeams(CCSTutor *const this,
//							int &numT,
//							int &numCT);  //  1020
//		}
//		{
//			char enemyList;                               //  1057
//		}
//		{
//			char numLeftStr;                              //  1079
//			int numtasks;                                 //  1081
//		}
//		{
//			int numT;                                     //   958
//			int numCT;                                    //   959
//			char numTStr;                                 //   975
//			char numCTStr;                                //   978
//			GetNumPlayersAliveOnTeams(CCSTutor *const this,
//							int &numT,
//							int &numCT);  //   960
//		}
//		{
//			char teammateList;                            //  1006
//		}
//	}
}

/* <212a43> ../cstrike/dlls/tutor_cs_tutor.cpp:2720 */
void CCSTutor::GetNumPlayersAliveOnTeams(int &numT, int &numCT)
{
//	{
//		int i;                                                //  2726
//		{
//			class CBasePlayer *player;                   //  2728
//		}
//	}
}

/* <2129db> ../cstrike/dlls/tutor_cs_tutor.cpp:920 */
void CCSTutor::LookupHotKey(TutorMessageID mid, int paramNum, wchar_t *buf, int buflen)
{
}

/* <212988> ../cstrike/dlls/tutor_cs_tutor.cpp:816 */
void CCSTutor::GetDuplicateMessagesFromEventList(TutorMessageEvent *&const event1, class TutorMessageEvent *&const event2)
{
}

/* <212949> ../cstrike/dlls/tutor_cs_tutor.cpp:794 */
void CCSTutor::GetTutorMessageUpdateEvent(void)
{
//	{
//		class TutorMessage *definition;                      //   796
//		class TutorMessageEvent *event;                      //   802
//	}
}

/* <212911> ../cstrike/dlls/tutor_cs_tutor.cpp:794 */
void CCSTutor::GetTutorMessageUpdateEvent(void)
{
//	{
//		class TutorMessage *definition;                      //   796
//		class TutorMessageEvent *event;                      //   802
//	}
}

/* <2128d0> ../cstrike/dlls/tutor_cs_tutor.cpp:775 */
void CCSTutor::ProcessShownDeathsForEvent(TutorMessageEvent *event)
{
//	{
//		int i;                                                //   782
//	}
}

/* <21281f> ../cstrike/dlls/tutor_cs_tutor.cpp:744 */
void CCSTutor::ClearCurrentEvent(bool closeWindow, bool processDeathsForEvent)
{
//	{
//		class TutorMessage *oldMessage;                      //   746
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   769
//		ProcessShownDeathsForEvent(CCSTutor *const this,
//						class TutorMessageEvent *event);  //   756
//	}
}

/* <212787> ../cstrike/dlls/tutor_cs_tutor.cpp:528 */
void CCSTutor::ShouldShowMessageEvent(TutorMessageEvent *event, float time)
{
//	{
//		class TutorMessage *message;                         //   535
//		class TutorMessage *current;                         //   571
//		HasCurrentWindowBeenActiveLongEnough(CCSTutor *const this,
//							float time);  //   566
//	}
}

/* <21275b> ../cstrike/dlls/tutor_cs_tutor.cpp:511 */
void CCSTutor::HasCurrentWindowBeenActiveLongEnough(float time)
{
}

/* <2126f8> ../cstrike/dlls/tutor_cs_tutor.cpp:491 */
void CCSTutor::ApplyPersistentDecay(void)
{
//	{
//		enum TutorMessageID mid;                              //   493
//		{
//			class TutorMessage *definition;              //   497
//			{
//				int timesShown;                       //   500
//			}
//		}
//	}
}

/* <212575> ../cstrike/dlls/tutor_cs_tutor.cpp:197 */
void CCSTutor::CCSTutor(void)
{
//	map(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this);  //   197
//	vector(vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> *const this);  //   197
//	ApplyPersistentDecay(CCSTutor *const this);  //   216
//	ResetPlayerDeathInfo(CCSTutor *const this);  //   218
}

/* <21255a> ../cstrike/dlls/tutor_cs_tutor.cpp:197 */
void CCSTutor::CCSTutor(void)
{
}

/* <21250f> ../cstrike/dlls/tutor_cs_tutor.cpp:491 */
void CCSTutor::ApplyPersistentDecay(void)
{
//	{
//		enum TutorMessageID mid;                              //   493
//		{
//			class TutorMessage *definition;              //   497
//			{
//				int timesShown;                       //   500
//			}
//		}
//	}
}

/* <21164e> ../cstrike/dlls/tutor_cs_tutor.cpp:436 */
void CCSTutor::ReadTutorMessageFile(void)
{
//	{
//		int messageFileLen;                                   //   438
//		char *messageFile;                                   //   439
//		char *messageData;                                   //   440
//		class TutorMessage defaultMessage;                    //   451
//		{
//			char *token;                                 //   472
//			{
//				string identifier;                    //   476
//				class TutorMessage *tm;              //   479
//				basic_string(basic_string<char, std::char_traits<char>, std::allocator<char>> *const this);  //   476
//				operator=(basic_string<char, std::char_traits<char>, std::allocator<char>> *const this,
//						const char *__s);  //   477
//				ConstructTutorMessage(char *&const messageData,
//							class TutorMessage *defaults);  //   479
//				operator[](map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this,
//						const key_type &__k);  //   480
//				~basic_string(basic_string<char, std::char_traits<char>, std::allocator<char>> *const this,
//						int const __in_chrg);  //   476
//			}
//			ReadDefaultValues(char *&const messageData,
//						class TutorMessage *defaults);  //   484
//		}
//	}
}

/* <211626> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:1118 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::assign(const char *__s)
{
}

/* <2112d7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1254 */
void _M_insert_unique(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__v)
{
//	{
//		_Link_type __x;                                       //  1261
//		_Link_type __y;                                       //  1262
//		bool __comp;                                          //  1263
//		iterator __j;                                         //  1270
//		operator--(_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> const this);  //  1277
//		operator()(const class less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> > *const this,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__x,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__y);  //  1267
//		operator()(const class less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> > *const this,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__x,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__y);  //  1279
//		pair(pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutorconst this,
//			const class _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst __a,
//			const bool &__b);  //  1282
//		pair(pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutorconst this,
//			const class _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst __a,
//			const bool &__b);  //  1281
//		pair(pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutorconst this,
//			const class _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst __a,
//			const bool &__b);  //  1275
//	}
}

/* <210fec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:950 */
void _M_insert_(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Const_Base_ptr __x, _Const_Base_ptr __p, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__v)
{
//	{
//		bool __insert_left;                                   //   957
//		_Link_type __z;                                       //   961
//		_M_create_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this,
//				const value_type &__x);  //   961
//		_Rb_tree_iterator(_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> const this,
//					_Link_type __x);  //   967
//		operator()(const class less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> > *const this,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__x,
//				const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__y);  //   959
//	}
}

/* <210b98> ../cstrike/dlls/tutor_cs_tutor.cpp:3268 */
void CCSTutor::GetTutorMessageDefinition(int messageID)
{
//	{
//		TutorMessageMapIter iter;                             //  3275
//		find(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this,
//			const key_type &__x);  //  3275
//		~basic_string(basic_string<char, std::char_traits<char>, std::allocator<char>> *const this,
//				int const __in_chrg);  //  3275
//	}
}

/* <210b6c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:232 */
inline void _Rep::_M_dispose(allocator<char> &__a)
{
}

/* <210b46> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:533 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string( int const __in_chrg)
{
}

/* <210ae2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:2173 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::compare(const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__str)
{
//	{
//		size_typeconst __size;                                //  2175
//		size_typeconst __osize;                               //  2176
//		size_typeconst __len;                                 //  2177
//		int __r;                                              //  2179
//	}
}

/* <210a17> ../cstrike/dlls/tutor_cs_tutor.cpp:1189 */
void CCSTutor::PurgeMessages(void)
{
//	ClearEventList(CCSTutor *const this);  //  1192
//	DeleteEvent(CCSTutor *const this,
//			class TutorMessageEvent *event);  //  1196
}

/* <2109ec> ../cstrike/dlls/tutor_cs_tutor.cpp:1163 */
void CCSTutor::ClearEventList(void)
{
//	{
//		class TutorMessageEvent *temp;                       //  1165
//	}
}

/* <2108c4> ../cstrike/dlls/tutor_cs_tutor.cpp:2650 */
void CCSTutor::HandleShotFired(Vector source, Vector target)
{
//	{
//		class CBasePlayer *localPlayer;                      //  2652
//		float d1;                                             //  2659
//		float d;                                              //  2666
//		float angle;                                          //  2667
//		float FiringLineDistanceToPlayer;                     //  2668
//		operator-(const Vector *const this,
//				const Vector &v);  //  2659
//		Length(const Vector *const this);  //  2659
//		operator-(const Vector *const this,
//				const Vector &v);  //  2670
//		Length(const Vector *const this);  //  2670
//	}
}

/* <210812> ../cstrike/dlls/tutor_cs_tutor.cpp:744 */
void CCSTutor::ClearCurrentEvent(bool processDeathsForEvent, bool closeWindow)
{
//	{
//		class TutorMessage *oldMessage;                      //   746
//		ProcessShownDeathsForEvent(CCSTutor *const this,
//						class TutorMessageEvent *event);  //   756
//		DeleteEvent(CCSTutor *const this,
//				class TutorMessageEvent *event);  //   769
//	}
}

/* <21079b> ../cstrike/dlls/tutor_cs_tutor.cpp:3795 */
void CCSTutor::ConstructRecentDeathsList(TeamName team, char *buf, class TutorMessageEvent *event, int buflen)
{
//	{
//		int i;                                                //  3804
//		{
//			class CBasePlayer *player;                   //  3807
//			char scratch;                                 //  3834
//		}
//	}
}

/* <21066a> ../cstrike/dlls/tutor_cs_tutor.cpp:246 */
void ParseMessageParameters(char *&const messageData, class TutorMessage *ret)
{
//	{
//		char *token;                                         //   248
//		atof(const char *__nptr);  //   397
//		atoi(const char *__nptr);  //   267
//		atoi(const char *__nptr);  //   274
//		atoi(const char *__nptr);  //   313
//		atoi(const char *__nptr);  //   362
//		atoi(const char *__nptr);  //   369
//		atof(const char *__nptr);  //   390
//	}
}

/* <21060a> ../cstrike/dlls/tutor_cs_tutor.cpp:1299 */
void CCSTutor::ShowTutorMessage(TutorMessageEvent *event)
{
//	{
//		enum TutorMessageID mid;                              //  1301
//		class TutorMessage *message;                         //  1307
//	}
}

/* <2105ef> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2105aa> ../cstrike/dlls/tutor_cs_tutor.cpp:744 */
void CCSTutor::ClearCurrentEvent(bool closeWindow, bool processDeathsForEvent)
{
//	{
//		class TutorMessage *oldMessage;                      //   746
//	}
}

/* <21054c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1315 */
void _M_insert_unique_(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const_iterator __position, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__v)
{
//	{
//		const_iterator __before;                              //  1336
//	}
//	{
//		const_iterator __after;                               //  1358
//	}
}

/* <2104e8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:950 */
void _M_insert_(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Const_Base_ptr __x, _Const_Base_ptr __p, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__v)
{
//	{
//		bool __insert_left;                                   //   957
//		_Link_type __z;                                       //   961
//	}
}

/* <210484> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1254 */
void _M_insert_unique(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__v)
{
//	{
//		_Link_type __x;                                       //  1261
//		_Link_type __y;                                       //  1262
//		bool __comp;                                          //  1263
//		iterator __j;                                         //  1270
//	}
}

/* <21043c> ../cstrike/dlls/tutor_cs_tutor.cpp:886 */
void CCSTutor::CancelEvent(TutorMessageID mid)
{
//	{
//		class TutorMessageEvent *event;                      //   895
//		{
//			class TutorMessageEvent *temp;               //   900
//		}
//	}
}

/* <21040f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::push_back(const value_type &__x)
{
}

/* <2103cd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<ClientCorpseStruct**, std::vector<ClientCorpseStruct*>>(const class __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__lhs, const __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__rhs)
{
}

/* <210383> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <21033e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
}

/* <2102de> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<ClientCorpseStruct**, ClientCorpseStruct**, std::allocator<ClientCorpseStruct*>>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result, class allocator<ClientCorpseStruct*> &__alloc)
{
}

/* <210286> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<ClientCorpseStruct**, ClientCorpseStruct**, ClientCorpseStruct*>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result, class allocator<ClientCorpseStruct*> &const)
{
}

/* <210242> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
//	{
//	}
}

/* <210200> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
}

/* <2101bb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
}

/* <21016c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
}

/* <21010d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <2100c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<ClientCorpseStruct*>(const class ClientCorpseStruct **__first, const ClientCorpseStruct **__last, class ClientCorpseStruct ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <2100a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::vector(void)
{
}

/* <21008b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:152 */
inline void map(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this)
{
}

/* <21005d> ../cstrike/dlls/tutor_cs_tutor.cpp:431 */
void ReadDefaultValues(char *&const messageData, class TutorMessage *defaults)
{
}

/* <210020> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:445 */
inline void operator[](map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this, const key_type &__k)
{
//	{
//		iterator __i;                                         //   450
//	}
}

/* <20ffde> ../cstrike/dlls/tutor_cs_tutor.cpp:405 */
TutorMessage *ConstructTutorMessage(char *&const messageData, class TutorMessage *defaults)
{
//	{
//		class TutorMessage *ret;                             //   407
//	}
}

/* <20ffb6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:549 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(const char *__s)
{
}

/* <20ff96> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:432 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(void)
{
}

/* <20ff5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:569 */
inline void insert(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this, iterator __position, const value_type &__x)
{
}

/* <20ff1f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_pair.h:103 */
inline void pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>::pair(basic_string<char, std::char_traits<char>, std::allocator<char>> &__a, const TutorMessage * &__b)
{
}

/* <20fed7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:778 */
inline void lower_bound(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this, const key_type &__x)
{
}

/* <20feab> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:249 */
inline void _Rb_tree_const_iterator(_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst this, const iterator &__it)
{
}

/* <20fe8b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:253 */
inline void _M_const_cast(const class _Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutconst this)
{
}

/* <20fe70> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:267 */
inline void operator++(_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst this)
{
}

/* <20fe50> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:282 */
inline void operator--(_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst this)
{
}

/* <20fe35> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:476 */
inline void _M_leftmost(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20fe1a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:484 */
inline void _M_rightmost(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20fdff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:201 */
inline void operator--(_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> const this)
{
}

/* <20fdbd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_pair.h:103 */
inline void pair(pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutorconst this, const _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst __a, const bool &__b)
{
}

/* <20fd80> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:377 */
inline void _M_create_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const value_type &__x)
{
//	{
//		_Link_type __tmp;                                     //   379
//	}
}

/* <20fd65> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:368 */
inline void _M_get_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20fd39> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void allocate(new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, const this, size_type __n, const void *)
{
}

/* <20fd19> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void max_size(const class new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<chaconst this)
{
}

/* <20fcca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
}

/* <20fca8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<ClientCorpseStruct**>(ClientCorpseStruct ** __it)
{
}

/* <20fc49> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, ClientCorpseStruct**, ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class ClientCorpseStruct ** __result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <20fc27> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<ClientCorpseStruct**>(ClientCorpseStruct ** __it)
{
}

/* <20fbd6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<ClientCorpseStruct*>(const class ClientCorpseStruct **__first, const ClientCorpseStruct **__last, class ClientCorpseStruct ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <20fb9e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::construct( pointer __p, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__val)
{
}

/* <20fb77> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_pair.h:87 */
inline void pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>::pair(pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &const)
{
}

/* <20fb4f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:88 */
inline void ~map(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this, int const __in_chrg)
{
}

/* <20fb29> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::~vector( int const __in_chrg)
{
}

/* <20fb03> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:638 */
inline void ~_Rb_tree(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, int const __in_chrg)
{
}

/* <20fadb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:392 */
inline void _M_destroy_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Link_type __p)
{
}

/* <20fac0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:363 */
inline void get_allocator(const class _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<const this)
{
}

/* <20faa5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:359 */
inline void _M_get_Node_allocator(const class _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<const this)
{
}

/* <20fa77> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char>, TutorMessage*>> >(allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>const)
{
}

/* <20fa51> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::new_allocator(void)
{
}

/* <20fa24> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:817 */
inline void lower_bound(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const key_type &__k)
{
}

/* <20fa09> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:181 */
inline void operator->(const class _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst this)
{
}

/* <20f9ee> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:327 */
inline void end(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this)
{
}

/* <20f9bc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:736 */
inline void find(map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_string<chconst this, const key_type &__x)
{
}

/* <20f97f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1523 */
void find(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, const basic_string<char, std::char_traits<char>, std::allocator<char>> &__k)
{
//	{
//		iterator __j;                                         //  1526
//	}
}

/* <20f966> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:539 */
inline void _S_key(_Const_Base_ptr __x)
{
}

/* <20f935> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:216 */
inline void operator==(const class _Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessconst this, const _Self &__x)
{
}

/* <20f91a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:503 */
inline void _M_end(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20f8d3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:1075 */
void _M_lower_bound(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Link_type __x, _Link_type __y, const basic_string<char, std::char_traits<char>, std::allocator<char>> &__k)
{
}

/* <20f8ba> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:515 */
inline void _S_key(_Const_Link_type __x)
{
}

/* <20f8a1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:511 */
inline void _S_value(_Const_Link_type __x)
{
}

/* <20f87a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_allocate( size_t __n)
{
}

/* <20f84e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<ClientCorpseStruct*>::allocate( size_type __n, const void *)
{
}

/* <20f817> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:210 */
inline void max<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <20f7fc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::max_size(void)
{
}

/* <20f7dc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_get_Tp_allocator(void)
{
}

/* <20f7bc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<ClientCorpseStruct*>::max_size(void)
{
}

/* <20f7a4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(ClientCorpseStruct ** __it)
{
}

/* <20f789> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:650 */
inline void begin(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20f747> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_function.h:235 */
inline void less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> >::operator()(const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__x, const basic_string<char, std::char_traits<char>, std::allocator<char>> &__y)
{
}

/* <20f6fc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:2510 */
inline void operator<<char, std::char_traits<char>, std::allocator<char>>(const class basic_string<char, std::char_traits<char>, std::allocator<char>> &__lhs, const basic_string<char, std::char_traits<char>, std::allocator<char>> &__rhs)
{
}

/* <20f6c1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:402 */
inline void _S_compare(size_type __n1, size_type __n2)
{
//	{
//		difference_typeconst __d;                             //   404
//	}
}

/* <20f68e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/char_traits.h:256 */
inline void compare(const char_type *__s1, const char_type *__s2, size_t __n)
{
}

/* <20f673> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:1776 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::data(void)
{
}

/* <20f63c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:187 */
inline void min<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <20f61b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:710 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::size(void)
{
}

/* <20f600> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_Vector_base(void)
{
}

/* <20f5e5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <20f5ca> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<ClientCorpseStruct*>::allocator(void)
{
}

/* <20f5af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<ClientCorpseStruct*>::new_allocator(void)
{
}

/* <20f587> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:372 */
inline void _M_put_node(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this, _Link_type __p)
{
}

/* <20f55b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void deallocate(new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, const this, pointer __p, size_type)
{
}

/* <20f530> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::~allocator( int const __in_chrg)
{
}

/* <20f50a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::~new_allocator( int const __in_chrg)
{
}

/* <20f4ef> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:616 */
inline void _Rb_tree(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20f4d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:443 */
inline void _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> >, false>::_Rb_tree_impl(void)
{
}

/* <20f4b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:455 */
inline void _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> >, false>::_M_initialize(void)
{
}

/* <20f49e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator(allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutoconst this)
{
}

/* <20f483> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator(new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, const this)
{
}

/* <20f46a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:535 */
inline void _S_value(_Const_Base_ptr __x)
{
}

/* <20f44f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::size(void)
{
}

/* <20f436> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:531 */
inline void _S_right(_Const_Base_ptr __x)
{
}

/* <20f41b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:695 */
inline void size(const class _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<const this)
{
}

/* <20f3e9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_function.h:494 */
inline void operator()(const class _Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>const this, const pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__x)
{
}

/* <20f3c9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:217 */
inline void _Rep::_M_refdata(void)
{
}

/* <20f3c2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:421 */
inline void _S_empty_rep(void)
{
}

/* <20f388> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:269 */
inline void _Alloc_hider::_Alloc_hider( char *__dat, const allocator<char> &__a)
{
}

/* <20f35c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>>::destroy( pointer __p)
{
}

/* <20f32f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_pair.h:87 */
inline void pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*>::~pair( int const __in_chrg)
{
}

/* <20f314> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:1783 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(void)
{
}

/* <20f2e8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:109 */
inline void allocator<char>::allocator(allocator<char> &__a)
{
}

/* <20f2c3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:71 */
inline void new_allocator<char>::new_allocator(new_allocator<char> &const)
{
}

/* <20f2a8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_get_Tp_allocator(void)
{
}

/* <20f268> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<ClientCorpseStruct**, ClientCorpseStruct*>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last, class allocator<ClientCorpseStruct*> &const)
{
}

/* <20f235> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<ClientCorpseStruct**>(ClientCorpseStruct ** __first, class ClientCorpseStruct ** __last)
{
}

/* <20f216> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<ClientCorpseStruct**>(ClientCorpseStruct **, class ClientCorpseStruct **)
{
}

/* <20f1f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::~_Vector_base( int const __in_chrg)
{
}

/* <20f1b8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <20f18c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<ClientCorpseStruct*>::deallocate( pointer __p, size_type)
{
}

/* <20f15f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <20f134> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<ClientCorpseStruct*>::~allocator( int const __in_chrg)
{
}

/* <20f10e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<ClientCorpseStruct*>::~new_allocator( int const __in_chrg)
{
}

/* <20f0cc> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:817 */
inline void operator!=<ClientCorpseStruct**, std::vector<ClientCorpseStruct*>>(const class __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__lhs, const __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__rhs)
{
}

/* <20f08a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:805 */
inline void operator==<ClientCorpseStruct**, std::vector<ClientCorpseStruct*>>(const class __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__lhs, const __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> > &__rhs)
{
}

/* <20f069> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::end(void)
{
}

/* <20f02e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::begin(void)
{
}

/* <20f013> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:659 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::empty(void)
{
}

/* <20efd1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:805 */
inline void operator==<ClientCorpseStruct* const*, std::vector<ClientCorpseStruct*>>(const class __normal_iterator<ClientCorpseStruct* const*, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*> const __lhs, const __normal_iterator<ClientCorpseStruct* const*, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*> const __rhs)
{
}

/* <20efab> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void base(const class __normal_iterator<ClientCorpseStruct* const*, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*> const this)
{
}

/* <20ef90> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:472 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::begin(void)
{
}

/* <20ef70> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:490 */
inline void vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>>::end(void)
{
}

/* <20ef3e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<ClientCorpseStruct* const*, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> >::__normal_iterator(const const class ClientCorpseStruct ** &__i)
{
}

/* <20ef23> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:664 */
inline void end(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20eef7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:173 */
inline void _Rb_tree_iterator(_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> const this, _Link_type __x)
{
}

/* <20eed7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_map.h:712 */
inline void key_comp(const class map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*, std::less<std::basic_strconst this)
{
}

/* <20eeb7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:646 */
inline void key_comp(const class _Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<const this)
{
}

/* <20ee9e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:519 */
inline void _S_left(_Base_ptr __x)
{
}

/* <20ee85> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:527 */
inline void _S_right(_Base_ptr __x)
{
}

/* <20ee57> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:437 */
inline void _Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, std::allocator<char>> >, false>::~_Rb_tree_impl( int const __in_chrg)
{
}

/* <20ee2c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void ~allocator(allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, Tutoconst this, int const __in_chrg)
{
}

/* <20ee01> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void ~new_allocator(new_allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, const this, int const __in_chrg)
{
}

/* <20ede1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> >::base(void)
{
}

/* <20edc1> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:747 */
inline void __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> >::operator++( int)
{
}

/* <20ed8f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<ClientCorpseStruct**, std::vector<ClientCorpseStruct*, std::allocator<ClientCorpseStruct*>> >::__normal_iterator(ClientCorpseStruct ** &__i)
{
}

/* <20ed69> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<std::pair<const std::basic_string<char>, TutorMessage*>>(pair<const std::basic_string<char, std::char_traits<char>, std::allocator<char>>, TutorMessage*> &__r)
{
}

/* <20ed3b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:267 */
inline void _Alloc_hider::~_Alloc_hider( int const __in_chrg)
{
}

/* <20ed15> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<char>::~allocator( int const __in_chrg)
{
}

/* <20ecef> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<char>::~new_allocator( int const __in_chrg)
{
}

/* <20eccf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<char>::allocator(void)
{
}

/* <20ecaf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<char>::new_allocator(void)
{
}

/* <20ec72> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<ClientCorpseStruct*>::construct( pointer __p, const ClientCorpseStruct * &__val)
{
}

/* <20ec52> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_tree.h:492 */
inline void _M_begin(_Rb_tree<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<const std::basic_string<char, const this)
{
}

/* <20ec1d> ../cstrike/dlls/tutor_cs_tutor.cpp:2069 */
void CCSTutor::HandleBuyTimeStart(CBaseEntity *entity, CBaseEntity *other)
{
}

/* <20ec02> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <20ebd6> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <20eba0> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <20eb69> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <20eb26> ../cstrike/dlls/tutor_cs_tutor.cpp:3853 */
void CCSTutor::TransferDeathEvents(TutorMessageEvent *oldEvent, class TutorMessageEvent *newEvent)
{
//	{
//		int i;                                                //  3855
//	}
}

/* <20eafd> ../cstrike/dlls/tutor_cs_tutor.cpp:3781 */
void CCSTutor::ResetPlayerDeathInfo(void)
{
//	{
//		int i;                                                //  3785
//	}
}

/* <20ead2> ../cstrike/dlls/tutor_cs_tutor.cpp:3773 */
void CCSTutor::IsBombMap(void)
{
//	{
//		class CHalfLifeMultiplay *mpRules;                   //  3775
//	}
}

/* <20ea58> ../cstrike/dlls/tutor_cs_tutor.cpp:3795 */
void CCSTutor::ConstructRecentDeathsList(TeamName team, char *buf, int buflen, class TutorMessageEvent *event)
{
//	{
//		int i;                                                //  3804
//		{
//			class CBasePlayer *player;                   //  3807
//			char scratch;                                 //  3834
//		}
//	}
}

/* <20ea3b> ../cstrike/dlls/tutor_cs_tutor.h:211 */
inline void ClientCorpseStruct::ClientCorpseStruct(void)
{
}

/* <20ea05> ../cstrike/dlls/tutor_cs_tutor.cpp:775 */
void CCSTutor::ProcessShownDeathsForEvent(TutorMessageEvent *event)
{
//	{
//		int i;                                                //   782
//	}
}

/* <20e9cf> ../cstrike/dlls/tutor_cs_tutor.cpp:1175 */
void CCSTutor::DeleteEvent(TutorMessageEvent *event)
{
//	{
//		int i;                                                //  1177
//	}
}

/* <20e997> ../cstrike/dlls/tutor_cs_tutor.cpp:1136 */
void CCSTutor::DeleteEventFromEventList(TutorMessageEvent *event)
{
//	{
//		class TutorMessageEvent *temp;                       //  1143
//	}
}

/* <20e96a> ../cstrike/dlls/tutor_cs_tutor.cpp:511 */
void CCSTutor::HasCurrentWindowBeenActiveLongEnough(float time)
{
}

/* <20e94a> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <20e92a> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <20e903> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <20e8d7> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <20e8ac> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <20e87f> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <20e84c> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <20e7cf> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <20e772> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <20e715> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <20e6d2> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <20e6a5> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <20e648> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <20e5f8> ../cstrike/dlls/gamerules.h:411 */
inline void CHalfLifeMultiplay::TimeRemaining(void)
{
}

/* <20e5aa> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <20e57f> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <20e54a> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <20e520> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <20e505> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <20e4ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/char_traits.h:260 */
inline void length(const char_type *__s)
{
}

/* <20e4cc> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <20e4ac> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <20e48c> ../cstrike/dlls/weapons.h:297 */
inline void CBasePlayerItem::iMaxClip(void)
{
}

/* <20e42c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <20e3da> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <20e38a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <20e34b> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <20e2f6> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <20e27e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <20e245> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <20e216> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <20e1f6> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <20e190> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/atomicity.h:77 */
inline void __exchange_and_add_dispatch(_Atomic_word *__mem, int __val)
{
}

/* <20e15d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/atomicity.h:64 */
inline void __exchange_and_add_single(_Atomic_word *__mem, int __val)
{
//	{
//		_Atomic_word __result;                                //    66
//	}
}

/* <20e133> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/atomicity.h:47 */
inline void __exchange_and_add(volatile _Atomic_word *__mem, int __val)
{
}

/* <20e101> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/i686-valve-linux-gnu/bits/gthr-default.h:240 */
inline int __gthread_active_p(void)
{
//	{
//		void *const __gthread_active_ptr;                     //   242
//	}
}

/* <20e0d6> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <20e0ab> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <20e07e> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <20e053> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <20e038> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:295 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(void)
{
}

/* <20e018> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:287 */
inline void basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(void)
{
}

/* <20dffd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/basic_string.h:176 */
inline void _S_empty_rep(void)
{
//	{
//		void *__p;                                           //   181
//	}
}

/* <1f5c5b> ../cstrike/dlls/tutor_base_tutor.cpp:457 */
void CBaseTutor::DoMessagesHaveSameID(int id1, int id2)
{
//	{
//		class TutorMessage *message1;                        //   464
//		class TutorMessage *message2;                        //   465
//	}
}

/* <1f5c26> ../cstrike/dlls/tutor_base_tutor.cpp:307 */
void CBaseTutor::CalculatePathForObjective(CBaseEntity *player)
{
}

/* <1f5bb4> ../cstrike/dlls/tutor_base_tutor.cpp:293 */
void CBaseTutor::CloseCurrentWindow(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //   295
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   301
//	}
}

/* <1f5b4f> ../cstrike/dlls/tutor_base_tutor.cpp:275 */
void CBaseTutor::DisplayNewStateDescriptionToPlayer(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //   277
//		char *desc;                                          //   283
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   286
//	}
}

/* <1f5ad1> ../cstrike/dlls/tutor_base_tutor.cpp:264 */
void CBaseTutor::DrawLineToEntity(CBasePlayer *player, int entindex, int id)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   266
}

/* <1f5993> ../cstrike/dlls/tutor_base_tutor.cpp:192 */
void CBaseTutor::DisplayMessageToPlayer(CBasePlayer *player, int id, const char *szMessage, class TutorMessageEvent *event)
{
//	{
//		class TutorMessage *definition;                      //   196
//		unsigned char numArgs;                                //   202
//		char param;                                           //   207
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   198
//		{
//			int arg;                                      //   210
//			{
//				char *str;                           //   212
//				GetNextParameter(TutorMessageEvent *const this,
//						char *buf,
//						int buflen);  //   212
//			}
//		}
//	}
}

/* <1f58ca> ../cstrike/dlls/tutor_base_tutor.cpp:178 */
void CBaseTutor::CheckForStateTransition(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	DisplayNewStateDescriptionToPlayer(CBaseTutor *const this);  //   182
}

/* <1f5842> ../cstrike/dlls/tutor_base_tutor.cpp:172 */
void CBaseTutor::ShotFired(Vector source, Vector target)
{
//	Vector(Vector *const this,
//		const Vector &v);  //   175
//	Vector(Vector *const this,
//		const Vector &v);  //   175
}

/* <1f5766> ../cstrike/dlls/tutor_base_tutor.cpp:163 */
void CBaseTutor::OnEvent(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
//	CheckForStateTransition(CBaseTutor *const this,
//				enum GameEventType event,
//				class CBaseEntity *entity,
//				class CBaseEntity *other);  //   169
}

/* <1f5733> ../cstrike/dlls/tutor_base_tutor.cpp:275 */
void CBaseTutor::DisplayNewStateDescriptionToPlayer(void)
{
//	{
//		class CBasePlayer *localPlayer;                      //   277
//		char *desc;                                          //   283
//	}
}

/* <1f56f9> ../cstrike/dlls/tutor_base_tutor.cpp:178 */
void CBaseTutor::CheckForStateTransition(GameEventType event, CBaseEntity *entity, CBaseEntity *other)
{
}

/* <1f56d8> ../cstrike/dlls/tutor_base_tutor.cpp:144 */
void CBaseTutor::CBaseTutor(void)
{
}

/* <1f56bf> ../cstrike/dlls/tutor_base_tutor.cpp:144 */
void CBaseTutor::CBaseTutor(void)
{
}

/* <1f569e> ../cstrike/dlls/tutor_base_tutor.cpp:136 */
void TutorMessageEvent::GetNumParameters(void)
{
}

/* <1f565d> ../cstrike/dlls/tutor_base_tutor.cpp:117 */
void TutorMessageEvent::GetNextParameter(char *buf, int buflen)
{
//	{
//		class TutorMessageEventParam *param;                 //   119
//	}
}

/* <1f5604> ../cstrike/dlls/tutor_base_tutor.cpp:83 */
void TutorMessageEvent::AddParameter(char *str)
{
//	{
//		class TutorMessageEventParam *param;                 //    88
//		class TutorMessageEventParam *temp;                  //   101
//	}
}

/* <1f55e3> ../cstrike/dlls/tutor_base_tutor.cpp:78 */
void TutorMessageEvent::GetNext(void)
{
}

/* <1f55af> ../cstrike/dlls/tutor_base_tutor.cpp:73 */
void TutorMessageEvent::SetNext(TutorMessageEvent *next)
{
}

/* <1f5589> ../cstrike/dlls/tutor_base_tutor.cpp:68 */
void TutorMessageEvent::GetDuplicateID(void)
{
}

/* <1f5568> ../cstrike/dlls/tutor_base_tutor.cpp:63 */
void TutorMessageEvent::GetID(void)
{
}

/* <1f5534> ../cstrike/dlls/tutor_base_tutor.cpp:58 */
void TutorMessageEvent::SetActivationTime(float time)
{
}

/* <1f5500> ../cstrike/dlls/tutor_base_tutor.cpp:53 */
void TutorMessageEvent::GetTimeActive(float time)
{
}

/* <1f54da> ../cstrike/dlls/tutor_base_tutor.cpp:48 */
void TutorMessageEvent::GetPriority(void)
{
}

/* <1f54a6> ../cstrike/dlls/tutor_base_tutor.cpp:38 */
void TutorMessageEvent::IsActive(float time)
{
}

/* <1f545d> ../cstrike/dlls/tutor_base_tutor.cpp:22 */
void TutorMessageEvent::TutorMessageEvent(int mid, int duplicateID, float time, float lifetime, int priority)
{
}

/* <1f540d> ../cstrike/dlls/tutor_base_tutor.cpp:22 */
void TutorMessageEvent::TutorMessageEvent(int mid, int duplicateID, float time, float lifetime, int priority)
{
}

/* <1f52e6> ../cstrike/dlls/tutor_base_tutor.cpp:312 */
void CBaseTutor::IsEntityInViewOfPlayer(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector eye;                                     //   332
//		TraceResult result;                                   //   334
//		operator-(const Vector *const this,
//				const Vector &v);  //   320
//		Length(const Vector *const this);  //   320
//	}
//	IsEntityInViewOfPlayer(CBaseTutor *const this,
//				class CBaseEntity *entity,
//				class CBasePlayer *player);  //   312
}

/* <1f51b0> ../cstrike/dlls/tutor_base_tutor.cpp:402 */
void CBaseTutor::IsBombsiteInViewOfPlayer(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector bombSiteCenter;                          //   410
//		Vector eye;                                     //   426
//		TraceResult result;                                   //   428
//	}
//	IsBombsiteInViewOfPlayer(CBaseTutor *const this,
//				class CBaseEntity *entity,
//				class CBasePlayer *player);  //   402
}

/* <1f508a> ../cstrike/dlls/tutor_base_tutor.cpp:343 */
void CBaseTutor::IsPlayerLookingAtPosition(Vector *origin, CBasePlayer *player)
{
//	{
//		Vector eye;                                     //   363
//		TraceResult result;                                   //   364
//		operator-(const Vector *const this,
//				const Vector &v);  //   351
//		Length(const Vector *const this);  //   351
//	}
//	IsPlayerLookingAtPosition(CBaseTutor *const this,
//					Vector *origin,
//					class CBasePlayer *player);  //   343
}

/* <1f4e92> ../cstrike/dlls/tutor_base_tutor.cpp:373 */
void CBaseTutor::IsPlayerLookingAtEntity(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector srcVec;                                  //   380
//		Vector destVec;                                 //   386
//		TraceResult result;                                   //   389
//	}
//	IsPlayerLookingAtEntity(CBaseTutor *const this,
//				class CBaseEntity *entity,
//				class CBasePlayer *player);  //   373
}

/* <1f4e37> ../cstrike/dlls/tutor_base_tutor.cpp:436 */
void CBaseTutor::IsEntityInBombsite(CBaseEntity *bombsite, CBaseEntity *entity)
{
//	IsEntityInBombsite(CBaseTutor *const this,
//				class CBaseEntity *bombsite,
//				class CBaseEntity *entity);  //   436
}

/* <1f4d28> ../cstrike/dlls/tutor_base_tutor.cpp:152 */
void CBaseTutor::~CBaseTutor(void)
{
//	{ /* ~CBaseTutor+0xe */
//		class TutorMessageEvent *event;                      //   154
//		{ /* ~CBaseTutor+0x22 */
//			class TutorMessageEvent *temp;               //   157
//			GetNext(TutorMessageEvent *const this);  //   158
//		}
//	}
}

/* <1f4d07> ../cstrike/dlls/tutor_base_tutor.cpp:34 */
void TutorMessageEvent::~TutorMessageEvent(void)
{
}

/* <1f4ccb> ../cstrike/dlls/tutor_base_tutor.cpp:117 */
void TutorMessageEvent::GetNextParameter(char *buf, int buflen)
{
//	{
//		class TutorMessageEventParam *param;                 //   119
//	}
}

/* <1f4cb2> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1f4c99> ../cstrike/dlls/tutor_base_tutor.cpp:136 */
void TutorMessageEvent::GetNumParameters(void)
{
}

/* <1f4c46> ../cstrike/dlls/tutor_base_tutor.cpp:63 */
void TutorMessageEvent::GetID(void)
{
}

/* <1f4c1f> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1f4be2> ../cstrike/dlls/tutor_base_tutor.cpp:152 */
void CBaseTutor::~CBaseTutor(int const __in_chrg)
{
//	{
//		class TutorMessageEvent *event;                      //   154
//		{
//			class TutorMessageEvent *temp;               //   157
//		}
//	}
}

/* <1f4bc9> ../cstrike/dlls/tutor_base_tutor.cpp:78 */
void TutorMessageEvent::GetNext(void)
{
}

/* <1f4bab> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1f4b57> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1f4b00> ../cstrike/dlls/tutor_base_tutor.cpp:373 */
void CBaseTutor::IsPlayerLookingAtEntity(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector srcVec;                                  //   380
//		Vector destVec;                                 //   386
//		TraceResult result;                                   //   389
//	}
}

/* <1f4adb> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <1f4a0c> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1f4987> ../cstrike/dlls/tutor_base_tutor.cpp:312 */
void CBaseTutor::IsEntityInViewOfPlayer(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector eye;                                     //   332
//		TraceResult result;                                   //   334
//	}
}

/* <1f493c> ../cstrike/dlls/tutor_base_tutor.cpp:343 */
void CBaseTutor::IsPlayerLookingAtPosition(Vector *origin, CBasePlayer *player)
{
//	{
//		Vector eye;                                     //   363
//		TraceResult result;                                   //   364
//	}
}

/* <1f48e5> ../cstrike/dlls/tutor_base_tutor.cpp:402 */
void CBaseTutor::IsBombsiteInViewOfPlayer(CBaseEntity *entity, CBasePlayer *player)
{
//	{
//		Vector bombSiteCenter;                          //   410
//		Vector eye;                                     //   426
//		TraceResult result;                                   //   428
//	}
}

/* <1f48be> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1f4897> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1f483b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1f480f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1f47ef> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1f47d1> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1f47a9> ../cstrike/dlls/tutor_base_tutor.cpp:34 */
void TutorMessageEvent::~TutorMessageEvent(int const __in_chrg)
{
}

/* <1f4773> ../cstrike/dlls/tutor_base_tutor.cpp:436 */
void CBaseTutor::IsEntityInBombsite(CBaseEntity *bombsite, CBaseEntity *entity)
{
}

/* <1f0b81> ../cstrike/dlls/career_tasks.cpp:844 */
void CCareerTaskManager::UnlatchRoundEndMessage(void)
{
//	HandleEvent(CCareerTaskManager::UnlatchRoundEndMessage(//			enum GameEventType event,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   847
}

/* <1f0b56> ../cstrike/dlls/career_tasks.cpp:838 */
void CCareerTaskManager::LatchRoundEndMessage(void)
{
}

/* <1f0b33> ../cstrike/dlls/career_tasks.cpp:832 */
void CCareerTaskManager::GetRoundElapsedTime(void)
{
}

/* <1f0abc> ../cstrike/dlls/career_tasks.cpp:818 */
void CCareerTaskManager::GetNumRemainingTasks(void)
{
//	{
//		int ret;                                              //   820
//		{
//			CareerTaskListIt it;                          //   821
//			operator++(_List_iterator<CCareerTask*> *const this);  //   821
//		}
//	}
}

/* <1f0a5d> ../cstrike/dlls/career_tasks.cpp:805 */
void CCareerTaskManager::AreAllTasksComplete(void)
{
//	{
//		CareerTaskListIt it;                                  //   807
//		operator++(_List_iterator<CCareerTask*> *const this);  //   807
//	}
}

/* <1f094e> ../cstrike/dlls/career_tasks.cpp:784 */
void CCareerTaskManager::HandleDeath(int team, CBasePlayer *pAttacker)
{
//	{
//		int enemyTeam;                                        //   786
//		int numEnemies;                                       //   790
//		{
//			int i;                                        //   791
//			{
//				class CBasePlayer *pPlayer;          //   793
//			}
//		}
//		HandleEvent(CCareerTaskManager *const this,
//				enum GameEventType event,
//				class CBasePlayer *pAttacker,
//				class CBasePlayer *pVictim);  //   801
//	}
}

/* <1f0815> ../cstrike/dlls/career_tasks.cpp:777 */
void CCareerTaskManager::HandleEnemyInjury(const char *weaponName, bool attackerHasShield, CBasePlayer *pAttacker)
{
//	HandleWeaponInjury(CCareerTaskManager *const this,
//				int weaponId,
//				int weaponClassId,
//				bool attackerHasShield,
//				class CBasePlayer *pAttacker);  //   779
//	HandleEvent(CCareerTaskManager *const this,
//			enum GameEventType event,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   780
}

/* <1f079c> ../cstrike/dlls/career_tasks.cpp:768 */
void CCareerTaskManager::HandleWeaponInjury(int weaponId, int weaponClassId, bool attackerHasShield, CBasePlayer *pAttacker)
{
//	{
//		CareerTaskListIt it;                                  //   770
//		operator++(_List_iterator<CCareerTask*> *const this);  //   770
//	}
}

/* <1f0743> ../cstrike/dlls/career_tasks.cpp:768 */
void CCareerTaskManager::HandleWeaponInjury(int weaponId, int weaponClassId, bool attackerHasShield, CBasePlayer *pAttacker)
{
//	{
//		CareerTaskListIt it;                                  //   770
//	}
}

/* <1f04ed> ../cstrike/dlls/career_tasks.cpp:757 */
void CCareerTaskManager::HandleEnemyKill(bool wasBlind, const char *weaponName, bool headshot, bool killerHasShield, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	HandleWeaponKill(CCareerTaskManager *const this,
//			int weaponId,
//			int weaponClassId,
//			bool headshot,
//			bool killerHasShield,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   759
//	HandleEvent(CCareerTaskManager *const this,
//			enum GameEventType event,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   760
//	HandleEvent(CCareerTaskManager *const this,
//			enum GameEventType event,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   764
//	HandleEvent(CCareerTaskManager *const this,
//			enum GameEventType event,
//			class CBasePlayer *pAttacker,
//			class CBasePlayer *pVictim);  //   762
}

/* <1f0462> ../cstrike/dlls/career_tasks.cpp:748 */
void CCareerTaskManager::HandleWeaponKill(int weaponId, int weaponClassId, bool headshot, bool killerHasShield, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		CareerTaskListIt it;                                  //   750
//		operator++(_List_iterator<CCareerTask*> *const this);  //   750
//	}
}

/* <1f03f1> ../cstrike/dlls/career_tasks.cpp:748 */
void CCareerTaskManager::HandleWeaponKill(int weaponId, int weaponClassId, bool headshot, bool killerHasShield, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		CareerTaskListIt it;                                  //   750
//	}
}

/* <1f0381> ../cstrike/dlls/career_tasks.cpp:721 */
void CCareerTaskManager::HandleEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		CareerTaskListIt it;                                  //   741
//		operator++(_List_iterator<CCareerTask*> *const this);  //   741
//	}
}

/* <1f0334> ../cstrike/dlls/career_tasks.cpp:721 */
void CCareerTaskManager::HandleEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		CareerTaskListIt it;                                  //   741
//	}
}

/* <1f018b> ../cstrike/dlls/career_tasks.cpp:679 */
void CCareerTaskManager::AddTask(const char *taskName, const char *weaponName, int eventCount, bool mustLive, bool crossRounds, bool isComplete)
{
//	{
//		int i;                                                //   683
//		push_back(list<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//				const value_type &__x);  //   696
//	}
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   714
}

/* <1f014e> ../cstrike/dlls/career_tasks.cpp:671 */
void CCareerTaskManager::SetFinishedTaskTime(int val)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   674
//	}
}

/* <1effeb> ../cstrike/dlls/career_tasks.cpp:643 */
void CCareerTaskManager::Reset(bool deleteTasks)
{
//	{
//		CareerTaskListIt it;                                  //   647
//		operator++(_List_iterator<CCareerTask*> *const this);  //   647
//	}
//	clear(list<CCareerTask*, std::allocator<CCareerTask*>> *const this);  //   651
//	{
//		CareerTaskListIt it;                                  //   656
//		{
//			class CCareerTask *pTask;                    //   658
//		}
//		operator++(_List_iterator<CCareerTask*> *const this);  //   656
//	}
}

/* <1eff77> ../cstrike/dlls/career_tasks.cpp:636 */
void CCareerTaskManager::CCareerTaskManager(void)
{
//	list(list<CCareerTask*, std::allocator<CCareerTask*>> *const this);  //   636
}

/* <1efeed> ../cstrike/dlls/career_tasks.cpp:623 */
void Create(void)
{
//	CCareerTaskManager(CCareerTaskManager *const this);  //   631
}

/* <1efed1> ../cstrike/dlls/career_tasks.cpp:636 */
void CCareerTaskManager::CCareerTaskManager(void)
{
}

/* <1efe16> ../cstrike/dlls/career_tasks.cpp:348 */
void CCareerTask::OnWeaponInjury(int weaponId, int weaponClassId, bool attackerHasShield, CBasePlayer *pAttacker)
{
//	SendPartialNotification(CCareerTask *const this);  //   379
}

/* <1efc6c> ../cstrike/dlls/career_tasks.cpp:268 */
void CCareerTask::OnWeaponKill(int weaponId, int weaponClassId, bool headshot, bool killerHasShield, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		int hostages;                                         //   298
//		class CBaseEntity *hostageEntity;                    //   299
//		{
//			class CHostage *hostage;                     //   303
//			IsFollowingSomeone(CHostage *const this);  //   304
//			IsValid(CHostage *const this);  //   306
//		}
//	}
//	SendPartialNotification(CCareerTask *const this);  //   341
}

/* <1efbf8> ../cstrike/dlls/career_tasks.cpp:156 */
void CPreventDefuseTask::OnEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	OnEvent(CPreventDefuseTask *const this,
//		enum GameEventType event,
//		class CBasePlayer *pAttacker,
//		class CBasePlayer *pVictim);  //   156
}

/* <1efbba> ../cstrike/dlls/career_tasks.cpp:385 */
void CCareerTask::OnEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
}

/* <1ef79d> ../cstrike/dlls/career_tasks.cpp:385 */
void CCareerTask::OnEvent(GameEventType event, CBasePlayer *pVictim, CBasePlayer *pAttacker)
{
//	{
//		int hostages;                                         //   411
//		class CBaseEntity *hostageEntity;                    //   412
//		{
//			class CHostage *hostage;                     //   416
//			IsFollowingSomeone(CHostage *const this);  //   417
//			IsValid(CHostage *const this);  //   419
//		}
//	}
//	GetRoundElapsedTime(CCareerTaskManager *const this);  //   515
//	{
//		int hostages;                                         //   494
//		class CBaseEntity *hostageEntity;                    //   495
//		{
//			class CHostage *hostage;                     //   499
//			IsDead(CHostage *const this);  //   500
//		}
//	}
//	{
//		int hostages;                                         //   460
//		class CBaseEntity *hostageEntity;                    //   461
//		{
//			class CHostage *hostage;                     //   465
//			IsValid(CHostage *const this);  //   466
//		}
//		SendPartialNotification(CCareerTask *const this);  //   476
//	}
//	SendPartialNotification(CCareerTask *const this);  //   535
//	SendPartialNotification(CCareerTask *const this);  //   611
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   545
//	GetRoundElapsedTime(CCareerTaskManager *const this);  //   559
//	SetFinishedTaskTime(CCareerTaskManager *const this,
//				int val);  //   559
//	SendPartialNotification(CCareerTask *const this);  //   571
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   587
//	GetRoundElapsedTime(CCareerTaskManager *const this);  //   596
//	SetFinishedTaskTime(CCareerTaskManager *const this,
//				int val);  //   596
}

/* <1ef74c> ../cstrike/dlls/career_tasks.cpp:256 */
void CCareerTask::SendPartialNotification(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   258
}

/* <1ef733> ../cstrike/dlls/career_tasks.cpp:256 */
void CCareerTask::SendPartialNotification(void)
{
}

/* <1ef647> ../cstrike/dlls/career_tasks.cpp:133 */
void CPreventDefuseTask::NewTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
//	CPreventDefuseTask(//				const char *taskName,
//				enum GameEventType event,
//				const char *weaponName,
//				int n,
//				bool mustLive,
//				bool crossRounds,
//				int id,
//				bool isComplete);  //   135
}

/* <1ef5db> ../cstrike/dlls/career_tasks.cpp:139 */
void CPreventDefuseTask::CPreventDefuseTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
}

/* <1ef56d> ../cstrike/dlls/career_tasks.cpp:139 */
void CPreventDefuseTask::CPreventDefuseTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
}

/* <1ef4e1> ../cstrike/dlls/career_tasks.cpp:186 */
void NewTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
}

/* <1ef43f> ../cstrike/dlls/career_tasks.cpp:192 */
void CCareerTask::CCareerTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   217
}

/* <1ef3d1> ../cstrike/dlls/career_tasks.cpp:192 */
void CCareerTask::CCareerTask(const char *taskName, GameEventType event, const char *weaponName, int n, bool mustLive, bool crossRounds, int id, bool isComplete)
{
}

/* <1ef2bd> ../cstrike/dlls/career_tasks.cpp:643 */
void CCareerTaskManager::Reset(bool deleteTasks)
{
//	clear(list<CCareerTask*, std::allocator<CCareerTask*>> *const this);  //   651
//	{
//		CareerTaskListIt it;                                  //   647
//		operator++(_List_iterator<CCareerTask*> *const this);  //   647
//	}
}

/* <1ef296> ../cstrike/dlls/career_tasks.cpp:147 */
void CPreventDefuseTask::Reset(void)
{
}

/* <1ef211> ../cstrike/dlls/career_tasks.cpp:240 */
void CCareerTask::Reset(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   244
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   248
}

/* <1ef1e5> ../cstrike/dlls/career_tasks.h:75 */
void CPreventDefuseTask::IsTaskCompletableThisRound(void)
{
}

/* <1ef1b9> ../cstrike/dlls/career_tasks.h:46 */
void CCareerTask::IsTaskCompletableThisRound(void)
{
}

/* <1ef165> ../cstrike/dlls/career_tasks.cpp:643 */
void CCareerTaskManager::Reset(bool deleteTasks)
{
//	{
//		CareerTaskListIt it;                                  //   647
//	}
//	{
//		CareerTaskListIt it;                                  //   656
//		{
//			class CCareerTask *pTask;                    //   658
//		}
//	}
}

/* <1ef13b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:987 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::push_back(const value_type &__x)
{
}

/* <1ef0f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1513 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::_M_insert( iterator __position, const value_type &__x)
{
//	{
//		_Node *__tmp;                                        //  1515
//	}
}

/* <1ef0bf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:471 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::_M_create_node(const value_type &__x)
{
//	{
//		_Node *__p;                                          //   473
//	}
}

/* <1ef0a6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:326 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_get_node(void)
{
}

/* <1ef07d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<std::_List_node<CCareerTask*>>::allocate( size_type __n, const void *)
{
}

/* <1ef05f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<std::_List_node<CCareerTask*>>::max_size(void)
{
}

/* <1ef046> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:512 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::list(void)
{
}

/* <1ef02d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:1195 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::clear(void)
{
}

/* <1eefe9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/list.tcc:66 */
void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_clear(void)
{
//	{
//		_Node *__cur;                                        //    70
//		{
//			_Node *__tmp;                                //    73
//		}
//	}
}

/* <1eefc5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/move.h:43 */
inline void __addressof<CCareerTask*>(CCareerTask *&const __r)
{
}

/* <1eefac> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:345 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_get_Tp_allocator(void)
{
}

/* <1eef8e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:341 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_get_Node_allocator(void)
{
}

/* <1eef62> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:113 */
inline void allocator<CCareerTask*>::allocator<std::_List_node<CCareerTask*>>(allocator<std::_List_node<CCareerTask*>> &const)
{
}

/* <1eef3e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<CCareerTask*>::new_allocator(void)
{
}

/* <1eef25> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:352 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_List_base(void)
{
}

/* <1eef0c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:378 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_init(void)
{
}

/* <1eeeee> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:314 */
inline void _List_impl::_List_impl(void)
{
}

/* <1eeed0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<std::_List_node<CCareerTask*>>::allocator(void)
{
}

/* <1eeeb7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<std::_List_node<CCareerTask*>>::new_allocator(void)
{
}

/* <1eee83> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<CCareerTask*>::construct( pointer __p, const CCareerTask * &__val)
{
}

/* <1eee59> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:330 */
inline void _List_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_put_node(_List_node<CCareerTask*> *__p)
{
}

/* <1eee2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<std::_List_node<CCareerTask*>>::deallocate( pointer __p, size_type)
{
}

/* <1eee03> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<CCareerTask*>::~allocator( int const __in_chrg)
{
}

/* <1eede0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<CCareerTask*>::~new_allocator( int const __in_chrg)
{
}

/* <1eedb7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:118 */
inline void new_allocator<CCareerTask*>::destroy( pointer __p)
{
}

/* <1eed8e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CCareerTask*>::operator!=(const _Self &__x)
{
}

/* <1eed75> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::end(void)
{
}

/* <1eed5c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CCareerTask*>::operator++(void)
{
}

/* <1eed20> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::begin(void)
{
}

/* <1eecf7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CCareerTask*>::_List_iterator(_List_node_base *__x)
{
}

/* <1eecb8> ../cstrike/dlls/career_tasks.cpp:156 */
void CPreventDefuseTask::OnEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
}

/* <1eebfb> ../cstrike/dlls/career_tasks.cpp:385 */
void CCareerTask::OnEvent(GameEventType event, CBasePlayer *pAttacker, CBasePlayer *pVictim)
{
//	{
//		int hostages;                                         //   411
//		class CBaseEntity *hostageEntity;                    //   412
//		{
//			class CHostage *hostage;                     //   416
//		}
//	}
//	{
//		int hostages;                                         //   460
//		class CBaseEntity *hostageEntity;                    //   461
//		{
//			class CHostage *hostage;                     //   465
//		}
//	}
//	{
//		int hostages;                                         //   494
//		class CBaseEntity *hostageEntity;                    //   495
//		{
//			class CHostage *hostage;                     //   499
//		}
//	}
}

/* <1eebba> ../cstrike/dlls/career_tasks.cpp:671 */
void CCareerTaskManager::SetFinishedTaskTime(int val)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   674
//	}
}

/* <1eeb99> ../cstrike/dlls/career_tasks.cpp:832 */
void CCareerTaskManager::GetRoundElapsedTime(void)
{
}

/* <1eeb80> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <1eeb57> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <1eeb23> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <1eeaef> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <1eead6> ../cstrike/dlls/hostage/hostage.h:124 */
inline void CHostage::IsDead(void)
{
}

/* <1eeab8> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <1eea9a> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <1eea76> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <1eea4d> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <1eea25> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <1ee9fb> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <1ee9cb> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <1ee952> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <1ee8f9> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <1ee8a0> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <1ee861> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <1ee837> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <1ee7de> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <1ee789> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <1ee762> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1ee73b> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1ee722> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <1ee704> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <1ee6e6> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <1ee6c8> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1ee679> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1ee62f> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1ee5f4> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1ee5a5> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1ee58c> ../cstrike/dlls/career_tasks.h:32 */
inline void CCareerTask::IsComplete(void)
{
}

/* <1ee4f0> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1ee4b7> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1ee48b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1ee463> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <1ee43b> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <1ee411> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <1ee3e9> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <1ed84a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:176 */
long double strtold(const char *, char **)
{
}

/* <1ed82e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:173 */
float strtof(const char *, char **)
{
}

/* <1ed80d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:215 */
long long unsigned int strtoull(const char *, char **, int)
{
}

/* <1ed7ec> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:210 */
long long int strtoll(const char *, char **, int)
{
}

/* <1ed7d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:298 */
long long int atoll(const char *)
{
}

/* <1ed7b7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:788 */
lldiv_t lldiv(long long int, long long int)
{
}

/* <1ed79a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:861 */
int wctomb(char *, wchar_t)
{
}

/* <1ed778> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:868 */
size_t wcstombs(char *, const wchar_t *, size_t)
{
}

/* <1ed760> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:712 */
int system(const char *)
{
}

/* <1ed73f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:188 */
long unsigned int strtoul(const char *, char **, int)
{
}

/* <1ed71e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:184 */
long int strtol(const char *, char **, int)
{
}

/* <1ed702> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:165 */
double strtod(const char *, char **)
{
}

/* <1ed6ee> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:382 */
void srand(unsigned int)
{
}

/* <1ed6e0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:380 */
int rand(void)
{
}

/* <1ed6bd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:756 */
void qsort(void *, size_t, size_t, __compar_fn_t)
{
}

/* <1ed69b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:857 */
int mbtowc(wchar_t *, const char *, size_t)
{
}

/* <1ed679> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:865 */
size_t mbstowcs(wchar_t *, const char *, size_t)
{
}

/* <1ed65c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:854 */
int mblen(const char *, size_t)
{
}

/* <1ed63f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:782 */
ldiv_t ldiv(long int, long int)
{
}

/* <1ed627> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:566 */
char *getenv(const char *)
{
}

/* <1ed60a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:780 */
div_t div(int, int)
{
}

/* <1ed5de> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:750 */
void *bsearch(const void *, const void *, size_t, size_t, __compar_fn_t)
{
}

/* <1ed5c6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:289 */
long int atol(const char *)
{
}

/* <1ed57e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:517 */
int atexit(void (*)(void))
{
}

/* <1dfdff> ../cstrike/dlls/tutor.cpp:66 */
/* linkage=_Z18MonitorTutorStatusv */
void MonitorTutorStatus(void)
{
//	{
//		cvar_t *tutor_enable;                                //    68
//		bool tutor_enableCvarExists;                          //    69
//		bool shouldTutorBeOn;                                 //    82
//		int numHumans;                                        //    96
//		{
//			int i;                                        //    97
//			{
//				class CBasePlayer *pPlayer;          //    99
//			}
//		}
//		{
//			class CBasePlayer *localPlayer;              //   125
//		}
//		{
//			class CBasePlayer *localPlayer;              //   113
//		}
//	}
}

/* <1dfde7> ../cstrike/dlls/tutor.cpp:51 */
/* linkage=_Z19Tutor_RegisterCVarsv */
void Tutor_RegisterCVars(void)
{
}

/* <1dfdbc> ../cstrike/dlls/tutor.cpp:32 */
/* linkage=_Z12InstallTutorb */
void InstallTutor(bool start)
{
}

/* <1dfd9e> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1dfd4a> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1dfd00> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1dfcb1> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1dfc50> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1dfc24> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1dfc11> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/locale.h:128 */
lconv *localeconv(void)
{
}

/* <1dfbf5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/locale.h:125 */
char *setlocale(int, const char *)
{
}

/* <1dfa76> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:488 */
long long unsigned int wcstoull(const wchar_t *, wchar_t **, int)
{
}

/* <1dfa54> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:481 */
long long int wcstoll(const wchar_t *, wchar_t **, int)
{
}

/* <1dfa37> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:457 */
long double wcstold(const wchar_t *, wchar_t **)
{
}

/* <1dfa11> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:313 */
/* linkage=wmemchr */
const wchar_t *wmemchr(const wchar_t *, wchar_t, size_t)
{
}

/* <1df9f0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:270 */
/* linkage=wcsstr */
const wchar_t *wcsstr(const wchar_t *, const wchar_t *)
{
}

/* <1df9d0> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:231 */
/* linkage=wcsrchr */
const wchar_t *wcsrchr(const wchar_t *, wchar_t)
{
}

/* <1df9af> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:259 */
/* linkage=wcspbrk */
const wchar_t *wcspbrk(const wchar_t *, const wchar_t *)
{
}

/* <1df98f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:221 */
/* linkage=wcschr */
const wchar_t *wcschr(const wchar_t *, wchar_t)
{
}

/* <1df976> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:640 */
int wscanf(const wchar_t *, ...)
{
}

/* <1df95d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:599 */
int wprintf(const wchar_t *, ...)
{
}

/* <1df93b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:336 */
wchar_t *wmemset(wchar_t *, wchar_t, size_t)
{
}

/* <1df919> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:332 */
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t)
{
}

/* <1df8f7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:327 */
wchar_t *wmemcpy(wchar_t *, const wchar_t *, size_t)
{
}

/* <1df8d5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:322 */
int wmemcmp(const wchar_t *, const wchar_t *, size_t)
{
}

/* <1df8bd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:392 */
int wctob(wint_t)
{
}

/* <1df89c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:193 */
size_t wcsxfrm(wchar_t *, const wchar_t *, size_t)
{
}

/* <1df87a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:471 */
long unsigned int wcstoul(const wchar_t *, wchar_t **, int)
{
}

/* <1df858> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:466 */
long int wcstol(const wchar_t *, wchar_t **, int)
{
}

/* <1df836> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:279 */
wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **)
{
}

/* <1df819> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:455 */
float wcstof(const wchar_t *, wchar_t **)
{
}

/* <1df7f6> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:448 */
double wcstod(const wchar_t *, wchar_t **)
{
}

/* <1df7da> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:253 */
size_t wcsspn(const wchar_t *, const wchar_t *)
{
}

/* <1df7ad> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:412 */
size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *)
{
}

/* <1df78c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:147 */
wchar_t *wcsncpy(wchar_t *, const wchar_t *, size_t)
{
}

/* <1df76b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:163 */
int wcsncmp(const wchar_t *, const wchar_t *, size_t)
{
}

/* <1df74a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:155 */
wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t)
{
}

/* <1df732> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:284 */
size_t wcslen(const wchar_t *)
{
}

/* <1df65a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:853 */
size_t wcsftime(wchar_t *, size_t, const wchar_t *, const tm *)
{
}

/* <1df63e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:249 */
size_t wcscspn(const wchar_t *, const wchar_t *)
{
}

/* <1df622> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:144 */
wchar_t *wcscpy(wchar_t *, const wchar_t *)
{
}

/* <1df606> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:189 */
int wcscoll(const wchar_t *, const wchar_t *)
{
}

/* <1df5ea> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:160 */
int wcscmp(const wchar_t *, const wchar_t *)
{
}

/* <1df5ce> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:152 */
wchar_t *wcscat(wchar_t *, const wchar_t *)
{
}

/* <1df5ac> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:368 */
size_t wcrtomb(char *, wchar_t, mbstate_t *)
{
}

/* <1df58f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:695 */
int vwscanf(const wchar_t *, __gnuc_va_list)
{
}

/* <1df572> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:618 */
int vwprintf(const wchar_t *, __gnuc_va_list)
{
}

/* <1df550> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:699 */
int vswscanf(const wchar_t *, const wchar_t *, __gnuc_va_list)
{
}

/* <1df529> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:623 */
int vswprintf(wchar_t *, size_t, const wchar_t *, __gnuc_va_list)
{
}

/* <1df507> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:687 */
int vfwscanf(__FILE *, const wchar_t *, __gnuc_va_list)
{
}

/* <1df4e5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:610 */
int vfwprintf(__FILE *, const wchar_t *, __gnuc_va_list)
{
}

/* <1df4c8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:787 */
wint_t ungetwc(wint_t, __FILE *)
{
}

/* <1df4aa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:643 */
int swscanf(const wchar_t *, const wchar_t *, ...)
{
}

/* <1df487> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:602 */
int swprintf(wchar_t *, size_t, const wchar_t *, ...)
{
}

/* <1df46f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:764 */
wint_t putwchar(wchar_t)
{
}

/* <1df452> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:758 */
wint_t putwc(wchar_t, __FILE *)
{
}

/* <1df425> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:406 */
size_t mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *)
{
}

/* <1df402> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:359 */
int mbsinit(const mbstate_t *)
{
}

/* <1df3db> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:363 */
size_t mbrtowc(wchar_t *, const char *, size_t, mbstate_t *)
{
}

/* <1df3b3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:397 */
size_t mbrlen(const char *, size_t, mbstate_t *)
{
}

/* <1df3a5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:750 */
wint_t getwchar(void)
{
}

/* <1df38d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:744 */
wint_t getwc(__FILE *)
{
}

/* <1df36f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:633 */
int fwscanf(__FILE *, const wchar_t *, ...)
{
}

/* <1df351> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:592 */
int fwprintf(__FILE *, const wchar_t *, ...)
{
}

/* <1df334> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:585 */
int fwide(__FILE *, int)
{
}

/* <1df317> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:779 */
int fputws(const wchar_t *, __FILE *)
{
}

/* <1df2fa> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:757 */
wint_t fputwc(wchar_t, __FILE *)
{
}

/* <1df2d8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:772 */
wchar_t *fgetws(wchar_t *, int, __FILE *)
{
}

/* <1df2ba> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:743 */
wint_t fgetwc(__FILE *)
{
}

/* <1df2a2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/wchar.h:386 */
wint_t btowc(int)
{
}

/* <1dbfce> (null):27581 */
void _GLOBAL__sub_I_g_pBodyQueueHead(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //   799
}

/* <1dbeff> ../cstrike/dlls/world.cpp:493 */
void worldspawn(entvars_t *pev)
{
//	GetClassPtr<CWorld>(CWorld *a);  //   493
}

/* <1dbe72> ../cstrike/dlls/world.cpp:480 */
/* linkage=_Z16ResetGlobalStatev */
void ResetGlobalState(void)
{
//	ClearStates(CGlobalState *const this);  //   482
}

/* <1dbcde> ../cstrike/dlls/world.cpp:473 */
/* linkage=_Z18RestoreGlobalStateP13saverestore_s */
void RestoreGlobalState(SAVERESTOREDATA *pSaveData)
{
//	{
//		class CRestore restoreHelper;                         //   475
//		CRestore(CRestore *const this,
//			SAVERESTOREDATA *pdata);  //   475
//		Restore(CGlobalState *const this,
//			class CRestore &restore);  //   476
//		~CRestore(CRestore *const this,
//				int const __in_chrg);  //   475
//	}
}

/* <1dbc13> ../cstrike/dlls/world.cpp:466 */
/* linkage=_Z15SaveGlobalStateP13saverestore_s */
void SaveGlobalState(SAVERESTOREDATA *pSaveData)
{
//	{
//		class CSave saveHelper;                               //   468
//		Save(CGlobalState *const this,
//			class CSave &save);  //   469
//		CSave(CSave *const this,
//			SAVERESTOREDATA *pdata);  //   468
//		~CSave(CSave *const this,
//			int const __in_chrg);  //   468
//	}
}

/* <1dbbae> ../cstrike/dlls/world.cpp:453 */
void CGlobalState::ClearStates(void)
{
//	{
//		globalentity_t *pFree;                               //   455
//		{
//			globalentity_t *pNext;                       //   458
//		}
//		Reset(CGlobalState *const this);  //   462
//	}
}

/* <1dbaf2> ../cstrike/dlls/world.cpp:444 */
void CGlobalState::EntityUpdate(string_t globalname, string_t mapname)
{
//	{
//		globalentity_t *pEnt;                                //   446
//		Find(CGlobalState *const this,
//			string_t globalname);  //   446
//	}
}

/* <1dba07> ../cstrike/dlls/world.cpp:422 */
void CGlobalState::Restore(CRestore &restore)
{
//	{
//		int i;                                                //   424
//		int listCount;                                        //   424
//		globalentity_t tmpEntity;                             //   425
//		ClearStates(CGlobalState *const this);  //   428
//		EntityAdd(CGlobalState *const this,
//				string_t globalname,
//				string_t mapName,
//				GLOBALESTATE state);  //   439
//	}
}

/* <1db9c5> ../cstrike/dlls/world.cpp:402 */
void CGlobalState::Save(CSave &save)
{
//	{
//		int i;                                                //   404
//		globalentity_t *pEntity;                             //   405
//	}
}

/* <1db91c> ../cstrike/dlls/world.cpp:377 */
void CGlobalState::EntityGetState(string_t globalname)
{
//	{
//		globalentity_t *pEnt;                                //   379
//		Find(CGlobalState *const this,
//			string_t globalname);  //   379
//	}
}

/* <1db873> ../cstrike/dlls/world.cpp:369 */
void CGlobalState::EntityFromTable(string_t globalname)
{
//	{
//		globalentity_t *pEnt;                                //   371
//		Find(CGlobalState *const this,
//			string_t globalname);  //   371
//	}
}

/* <1db7b3> ../cstrike/dlls/world.cpp:360 */
void CGlobalState::EntitySetState(string_t globalname, GLOBALESTATE state)
{
//	{
//		globalentity_t *pEnt;                                //   362
//		Find(CGlobalState *const this,
//			string_t globalname);  //   362
//	}
}

/* <1db76a> ../cstrike/dlls/world.cpp:345 */
void CGlobalState::EntityAdd(string_t globalname, string_t mapName, GLOBALESTATE state)
{
//	{
//		globalentity_t *pNewEntity;                          //   349
//	}
}

/* <1db703> ../cstrike/dlls/world.cpp:329 */
void CGlobalState::DumpGlobals(void)
{
//	{
//		char *const estates;                                  //   331
//		globalentity_t *pTest;                               //   332
//	}
}

/* <1db69e> ../cstrike/dlls/world.cpp:305 */
void CGlobalState::Find(string_t globalname)
{
//	{
//		globalentity_t *pTest;                               //   310
//		const char *pEntityName;                            //   311
//		FStrEq(const char *sz1,
//			const char *sz2);  //   317
//	}
}

/* <1db65c> ../cstrike/dlls/world.cpp:305 */
void CGlobalState::Find(string_t globalname)
{
//	{
//		globalentity_t *pTest;                               //   310
//		const char *pEntityName;                            //   311
//	}
}

/* <1db63b> ../cstrike/dlls/world.cpp:299 */
void CGlobalState::Reset(void)
{
}

/* <1db601> ../cstrike/dlls/world.cpp:294 */
void CGlobalState::CGlobalState(void)
{
//	Reset(CGlobalState *const this);  //   296
}

/* <1db5e9> ../cstrike/dlls/world.cpp:275 */
/* linkage=_Z12ClearBodyQuev */
void ClearBodyQue(void)
{
}

/* <1db5bf> ../cstrike/dlls/world.cpp:242 */
/* linkage=_Z13CopyToBodyQueP9entvars_s */
void CopyToBodyQue(entvars_t *pev)
{
}

/* <1db4f5> ../cstrike/dlls/world.cpp:212 */
void bodyque(entvars_t *pev)
{
//	GetClassPtr<CCorpse>(CCorpse *a);  //   212
}

/* <1db42b> ../cstrike/dlls/world.cpp:120 */
void infodecal(entvars_t *pev)
{
//	GetClassPtr<CDecal>(CDecal *a);  //   120
}

/* <1db153> ../cstrike/dlls/world.cpp:731 */
void CWorld::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   733
//	FStrEq(const char *sz1,
//		const char *sz2);  //   739
//	atoi(const char *__nptr);  //   741
//	KeyValue(CWorld *const this,
//		KeyValueData *pkvd);  //   731
}

/* <1db104> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <1db068> ../cstrike/dlls/world.cpp:190 */
void CDecal::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   192
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   202
//	KeyValue(CDecal *const this,
//		KeyValueData *pkvd);  //   190
}

/* <1db00a> ../cstrike/dlls/world.cpp:123 */
void CDecal::Spawn(void)
{
//	Spawn(CDecal *const this);  //   123
}

/* <1daee2> ../cstrike/dlls/world.cpp:171 */
void CDecal::StaticDecal(void)
{
//	{
//		TraceResult trace;                                    //   173
//		int entityIndex;                                      //   174
//		int modelIndex;                                       //   174
//		operator+(const Vector *const this,
//				const Vector &v);  //   176
//		operator-(const Vector *const this,
//				const Vector &v);  //   176
//		ENTINDEX(edict_t *pEdict);  //   178
//		VARS(edict_t *pent);  //   180
//	}
}

/* <1dad69> ../cstrike/dlls/world.cpp:145 */
void CDecal::TriggerDecal(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		TraceResult trace;                                    //   149
//		int entityIndex;                                      //   150
//		operator+(const Vector *const this,
//				const Vector &v);  //   152
//		operator-(const Vector *const this,
//				const Vector &v);  //   152
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   154
//		ENTINDEX(edict_t *pEdict);  //   160
//		VARS(edict_t *pent);  //   163
//	}
}

/* <1dad1d> ../cstrike/dlls/world.cpp:502 */
void CWorld::Spawn(void)
{
//	{
//		int flength;                                          //   515
//		char *pFile;                                         //   516
//	}
}

/* <1dac06> ../cstrike/dlls/world.cpp:542 */
void CWorld::Precache(void)
{
//	GetClassPtr<CSoundEnt>(CSoundEnt *a);  //   566
//	InitBodyQue(void);  //   574
//	{
//		int i;                                                //   673
//	}
//	{
//		class CBaseEntity *pEntity;                          //   705
//	}
}

/* <1dabe0> ../cstrike/dlls/world.cpp:209 */
void CCorpse::ObjectCaps(void)
{
}

/* <1dabba> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1dab7f> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1da9a5> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1da97f> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1da959> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1da932> ../cstrike/dlls/cbase.h:273 */
void CBaseEntity::SUB_CallUseToggle(void)
{
}

/* <1da8fd> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <1da89e> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1da869> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1da843> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <1da81d> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1da7f7> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <1da7d1> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <1da7aa> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1da784> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <1da75e> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1da738> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1da704> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <1da6de> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1da6b8> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <1da684> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <1da65e> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1da5ca> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <1da57a> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <1da546> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1da512> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <1da4b1> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <1da46f> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <1da449> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <1da423> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1da3f1> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1da3b1> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1da38b> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <1da357> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <1da331> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <1da30b> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <1da2ea> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <1da2c1> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1da29b> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1da275> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1da24f> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <1da217> ../cstrike/dlls/world.cpp:453 */
void CGlobalState::ClearStates(void)
{
//	{
//		globalentity_t *pFree;                               //   455
//		{
//			globalentity_t *pNext;                       //   458
//		}
//	}
}

/* <1da1d2> ../cstrike/dlls/world.cpp:402 */
void CGlobalState::Save(CSave &save)
{
//	{
//		int i;                                                //   404
//		globalentity_t *pEntity;                             //   405
//	}
}

/* <1da181> ../cstrike/dlls/world.cpp:422 */
void CGlobalState::Restore(CRestore &restore)
{
//	{
//		int i;                                                //   424
//		int listCount;                                        //   424
//		globalentity_t tmpEntity;                             //   425
//	}
}

/* <1da133> ../cstrike/dlls/world.cpp:345 */
void CGlobalState::EntityAdd(string_t globalname, string_t mapName, GLOBALESTATE state)
{
//	{
//		globalentity_t *pNewEntity;                          //   349
//	}
}

/* <1da10f> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <1da107> ../cstrike/dlls/world.cpp:214 */
void InitBodyQue(void)
{
}

/* <1da0b5> ../cstrike/dlls/soundent.h:67 */
inline void CSoundEnt::CSoundEnt(void)
{
}

/* <1da071> ../cstrike/dlls/soundent.h:44 */
inline void CSound::CSound(void)
{
}

/* <1da03f> ../cstrike/dlls/cbase.h:800 */
CWorld *GetClassPtr<CWorld>(CWorld *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1da023> ../cstrike/dlls/cbase.h:861 */
inline void CWorld::CWorld(void)
{
}

/* <1d9ff1> ../cstrike/dlls/cbase.h:800 */
CCorpse *GetClassPtr<CCorpse>(CCorpse *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1d9fd1> ../cstrike/dlls/world.cpp:207 */
inline void CCorpse::CCorpse(void)
{
}

/* <1d9f9f> ../cstrike/dlls/cbase.h:800 */
CDecal *GetClassPtr<CDecal>(CDecal *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1d9f84> ../cstrike/dlls/world.cpp:111 */
inline void CDecal::CDecal(void)
{
}

/* <1d9f2b> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <1d9f06> ../cstrike/dlls/saverestore.h:82 */
inline void CRestore::~CRestore( int const __in_chrg)
{
}

/* <1d9edd> ../cstrike/dlls/saverestore.h:85 */
inline void CRestore::CRestore( SAVERESTOREDATA *pdata)
{
}

/* <1d9eb8> ../cstrike/dlls/saverestore.h:47 */
inline void CSave::~CSave( int const __in_chrg)
{
}

/* <1d9e8f> ../cstrike/dlls/saverestore.h:50 */
inline void CSave::CSave( SAVERESTOREDATA *pdata)
{
}

/* <1d9e73> ../cstrike/dlls/world.cpp:294 */
void CGlobalState::CGlobalState(void)
{
}

/* <1d9e52> ../cstrike/dlls/world.cpp:299 */
void CGlobalState::Reset(void)
{
}

/* <1d9e34> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1d9de5> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1d9dc1> ../cstrike/dlls/world.cpp:190 */
void CDecal::KeyValue(KeyValueData *pkvd)
{
}

/* <1d9d89> ../cstrike/dlls/world.cpp:731 */
void CWorld::KeyValue(KeyValueData *pkvd)
{
//	{
//		int flag;                                             //   765
//	}
}

/* <1d9d60> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <1d9d04> ../cstrike/dlls/world.cpp:123 */
void CDecal::Spawn(void)
{
}

/* <1d9c95> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <1d9c34> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1d9bc2> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1d9b8e> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1d9b67> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1d9b3b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1d9b1b> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1d9afd> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1d9ad5> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <1d48ba> ../cstrike/dlls/weapons.cpp:1652 */
void CWeaponBox::BombThink(void)
{
//	{
//		class CBaseEntity *pEntity;                          //  1656
//		{
//			class CBasePlayer *pTempPlayer;              //  1663
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  1668
//		}
//		edict(CBaseEntity *const this);  //  1659
//		FNullEnt(const edict_t *pent);  //  1659
//	}
}

/* <1d45db> ../cstrike/dlls/weapons.cpp:1732 */
void CWeaponBox::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //  1751
//		int i;                                                //  1769
//		bool bRemove;                                         //  1770
//		bool bEmitSound;                                      //  1771
//	}
//	Touch(CWeaponBox *const this,
//		class CBaseEntity *pOther);  //  1732
}

/* <1d4392> ../cstrike/dlls/weapons.cpp:2368 */
void armoury_entity(entvars_t *pev)
{
//	GetClassPtr<CArmoury>(CArmoury *a);  //  2368
}

/* <1d4354> ../cstrike/dlls/weapons.cpp:2119 */
void CWeaponBox::IsEmpty(void)
{
//	{
//		int i;                                                //  2121
//	}
}

/* <1d42d5> ../cstrike/dlls/weapons.cpp:2100 */
void CWeaponBox::HasWeapon(CBasePlayerItem *pCheckItem)
{
//	{
//		class CBasePlayerItem *pItem;                        //  2102
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  2106
//	}
}

/* <1d426b> ../cstrike/dlls/weapons.cpp:2061 */
void CWeaponBox::GiveAmmo(int iCount, char *szName, int iMax, int *pIndex)
{
//	{
//		int i;                                                //  2063
//		{
//			int iAdd;                                     //  2072
//		}
//	}
}

/* <1d4224> ../cstrike/dlls/weapons.cpp:2036 */
void CWeaponBox::PackAmmo(int iszName, int iCount)
{
//	{
//		int iMaxCarry;                                        //  2038
//	}
}

/* <1d4148> ../cstrike/dlls/weapons.cpp:1981 */
void CWeaponBox::PackWeapon(CBasePlayerItem *pWeapon)
{
//	{
//		int iWeaponSlot;                                      //  2004
//		HasWeapon(CWeaponBox *const this,
//				class CBasePlayerItem *pCheckItem);  //  1984
//		edict(CBaseEntity *const this);  //  2025
//	}
}

/* <1d4114> ../cstrike/dlls/weapons.cpp:2100 */
void CWeaponBox::HasWeapon(CBasePlayerItem *pCheckItem)
{
//	{
//		class CBasePlayerItem *pItem;                        //  2102
//	}
}

/* <1d40c4> ../cstrike/dlls/weapons.cpp:1704 */
void CWeaponBox::Kill(void)
{
//	{
//		class CBasePlayerItem *pWeapon;                      //  1706
//		int i;                                                //  1707
//	}
}

/* <1d3fe8> ../cstrike/dlls/weapons.cpp:1614 */
void weaponbox(entvars_t *pev)
{
//	GetClassPtr<CWeaponBox>(CWeaponBox *a);  //  1614
}

/* <1d3f76> ../cstrike/dlls/weapons.cpp:1580 */
void CBasePlayerWeapon::GetNextAttackDelay(float delay)
{
//	{
//		float flTimeBetweenFires;                             //  1590
//		float flCreep;                                        //  1591
//		float flNextAttack;                                   //  1598
//	}
}

/* <1d3f0c> ../cstrike/dlls/weapons.cpp:1366 */
void CBasePlayerWeapon::DefaultReload(int iClipSize, int iAnim, float fDelay)
{
//	{
//		int j;                                                //  1371
//	}
}

/* <1d3df3> ../cstrike/dlls/weapons.cpp:1333 */
void CBasePlayerWeapon::ReloadSound(void)
{
//	{
//		Vector newVector;                               //  1335
//		Vector origin;                                  //  1335
//		class CBaseEntity *pPlayer;                          //  1336
//		float distance;                                       //  1337
//		Vector(Vector *const this,
//			const Vector &v);  //  1335
//		operator-(const Vector *const this,
//				const Vector &v);  //  1345
//		Length(const Vector *const this);  //  1347
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1351
//	}
}

/* <1d3d7a> ../cstrike/dlls/weapons.cpp:1306 */
void CBasePlayerWeapon::DefaultDeploy(char *szViewModel, char *szWeaponModel, int iAnim, char *szAnimExt, int skiplocal)
{
}

/* <1d3cd7> ../cstrike/dlls/weapons.cpp:1267 */
void CBasePlayerWeapon::AddSecondaryAmmo(int iCount, char *szName, int iMax)
{
//	{
//		int iIdAmmo;                                          //  1269
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  1276
//	}
}

/* <1d3bc3> ../cstrike/dlls/weapons.cpp:1525 */
void CBasePlayerWeapon::ExtractAmmo(CBasePlayerWeapon *pWeapon)
{
//	{
//		int iReturn;                                          //  1527
//		AddSecondaryAmmo(CBasePlayerWeapon *const this,
//				int iCount,
//				char *szName,
//				int iMax);  //  1539
//		pszAmmo1(CBasePlayerItem *const this);  //  1529
//		pszAmmo2(CBasePlayerItem *const this);  //  1537
//	}
}

/* <1d3ad5> ../cstrike/dlls/weapons.cpp:1231 */
void CBasePlayerWeapon::AddPrimaryAmmo(int iCount, char *szName, int iMaxClip, int iMaxCarry)
{
//	{
//		int iIdAmmo;                                          //  1233
//		{
//			int i;                                        //  1242
//		}
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  1259
//	}
}

/* <1d3aac> ../cstrike/dlls/weapons.cpp:1069 */
void CBasePlayerItem::DestroyItem(void)
{
}

/* <1d3919> ../cstrike/dlls/weapons.cpp:915 */
void CBasePlayerWeapon::ItemPostFrame(void)
{
//	{
//		int usableButtons;                                    //   918
//		pszAmmo2(CBasePlayerItem *const this);  //   982
//		pszAmmo1(CBasePlayerItem *const this);  //   992
//		iMaxClip(CBasePlayerItem *const this);  //  1006
//		{
//			int j;                                        //   969
//			iMaxClip(CBasePlayerItem *const this);  //   969
//		}
//		FireRemaining(CBasePlayerWeapon *const this,
//				int &shotsFired,
//				float &shootTime,
//				BOOL bIsGlock);  //   923
//		FireRemaining(CBasePlayerWeapon *const this,
//				int &shotsFired,
//				float &shootTime,
//				BOOL bIsGlock);  //   925
//		iFlags(CBasePlayerItem *const this);  //  1051
//		iMaxClip(CBasePlayerItem *const this);  //   992
//	}
}

/* <1d38f0> ../cstrike/dlls/weapons.cpp:890 */
void CBasePlayerWeapon::HasSecondaryAttack(void)
{
}

/* <1d389e> ../cstrike/dlls/weapons.cpp:876 */
/* linkage=_Z9CanAttackffi */
BOOL CanAttack(float attack_time, float curtime, BOOL isPredicted)
{
}

/* <1d3835> ../cstrike/dlls/weapons.cpp:792 */
void CBasePlayerWeapon::FireRemaining(int &shotsFired, float &shootTime, BOOL bIsGlock)
{
//	{
//		float nexttime;                                       //   794
//		Vector vecSrc;                                  //   810
//		Vector vecAiming;                               //   811
//		Vector vecDir;                                  //   814
//		int flag;                                             //   828
//	}
}

/* <1d3773> ../cstrike/dlls/weapons.cpp:752 */
void CBasePlayerWeapon::KickBack(float up_base, float lateral_base, float up_modifier, float lateral_modifier, float up_max, float lateral_max, int direction_change)
{
//	{
//		float flKickUp;                                       //   754
//		float flKickLateral;                                  //   755
//	}
}

/* <1d372a> ../cstrike/dlls/weapons.cpp:717 */
void CBasePlayerWeapon::ShieldSecondaryFire(int iUpAnim, int iDownAnim)
{
}

/* <1d33c3> ../cstrike/dlls/weapons.cpp:699 */
void CBasePlayerWeapon::EjectBrassLate(void)
{
//	{
//		Vector vecShellVelocity;                        //   702
//		int soundType;                                        //   707
//		operator+(const Vector *const this,
//				const Vector &v);  //   701
//		operator*(const Vector *const this,
//				float fl);  //   705
//		operator*(const Vector *const this,
//				float fl);  //   705
//		operator*(const Vector *const this,
//				float fl);  //   705
//		operator+(const Vector *const this,
//				const Vector &v);  //   705
//		operator+(const Vector *const this,
//				const Vector &v);  //   705
//		operator+(const Vector *const this,
//				const Vector &v);  //   705
//		ENTINDEX(edict_t *pEdict);  //   714
//		operator*(const Vector *const this,
//				float fl);  //   714
//		operator*(const Vector *const this,
//				float fl);  //   714
//		operator*(const Vector *const this,
//				float fl);  //   714
//		operator+(const Vector *const this,
//				const Vector &v);  //   714
//		operator+(const Vector *const this,
//				const Vector &v);  //   714
//		operator+(const Vector *const this,
//				const Vector &v);  //   714
//		EjectBrass(Vector &vecOrigin,
//				const Vector &vecLeft,
//				const Vector &vecVelocity,
//				float rotation,
//				int model,
//				int soundtype,
//				int entityIndex);  //   714
//	}
}

/* <1d339a> ../cstrike/dlls/weapons.cpp:689 */
void CBasePlayerWeapon::ResetPlayerShieldAnim(void)
{
}

/* <1d3371> ../cstrike/dlls/weapons.cpp:678 */
void CBasePlayerWeapon::SetPlayerShieldAnim(void)
{
}

/* <1d3348> ../cstrike/dlls/weapons.cpp:584 */
void CBasePlayerItem::CheckRespawn(void)
{
}

/* <1d32bc> ../cstrike/dlls/weapons.cpp:506 */
void CBasePlayerItem::FallThink(void)
{
//	FallThink(CBasePlayerItem *const this);  //   506
}

/* <1d327b> ../cstrike/dlls/weapons.cpp:567 */
void CBasePlayerItem::AttemptToMaterialize(void)
{
//	{
//		float time;                                           //   569
//	}
}

/* <1d3252> ../cstrike/dlls/weapons.cpp:531 */
void CBasePlayerItem::Materialize(void)
{
}

/* <1d31ab> ../cstrike/dlls/weapons.cpp:485 */
void CBasePlayerItem::FallInit(void)
{
//	Vector(Vector::FallInit(//		float X,
//		float Y,
//		float Z);  //   491
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   491
}

/* <1d3191> ../cstrike/dlls/weapons.cpp:345 */
/* linkage=_Z10W_Precachev */
void W_Precache(void)
{
}

/* <1d2fc9> ../cstrike/dlls/weapons.cpp:304 */
/* linkage=_Z25UTIL_PrecacheOtherWeapon2PKc */
void UTIL_PrecacheOtherWeapon2(const char *szClassname)
{
//	{
//		edict_t *pent;                                       //   306
//		class CBaseEntity *pEntity;                          //   315
//		FNullEnt(const edict_t *pent);  //   309
//		Instance(entvars_t *pev);  //   315
//		{
//			ItemInfo II;                                  //   319
//			AddAmmoNameToAmmoRegistry(const char *szAmmoname);  //   333
//			AddAmmoNameToAmmoRegistry(const char *szAmmoname);  //   328
//		}
//	}
}

/* <1d2e01> ../cstrike/dlls/weapons.cpp:265 */
/* linkage=_Z24UTIL_PrecacheOtherWeaponPKc */
void UTIL_PrecacheOtherWeapon(const char *szClassname)
{
//	{
//		edict_t *pent;                                       //   267
//		class CBaseEntity *pEntity;                          //   276
//		FNullEnt(const edict_t *pent);  //   270
//		Instance(entvars_t *pev);  //   276
//		{
//			ItemInfo II;                                  //   280
//			AddAmmoNameToAmmoRegistry(const char *szAmmoname);  //   294
//			AddAmmoNameToAmmoRegistry(const char *szAmmoname);  //   289
//		}
//	}
}

/* <1d2cfd> ../cstrike/dlls/weapons.cpp:220 */
/* linkage=_Z11EjectBrass2RK6VectorS1_fiiP9entvars_s */
void EjectBrass2(Vector &vecOrigin, Vector &vecVelocity, float rotation, int model, int soundtype, entvars_t *pev)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   224
}

/* <1d2bfa> ../cstrike/dlls/weapons.cpp:176 */
/* linkage=_Z12DecalGunshotP11TraceResultibP9entvars_sb */
void DecalGunshot(TraceResult *pTrace, int iBulletType, bool ClientOnly, entvars_t *pShooter, bool bHitMetal)
{
}

/* <1d2bbb> ../cstrike/dlls/weapons.cpp:168 */
/* linkage=_Z11DamageDecalP11CBaseEntityi */
int DamageDecal(CBaseEntity *pEntity, int bitsDamageType)
{
}

/* <1d2b6f> ../cstrike/dlls/weapons.cpp:162 */
/* linkage=_Z10SpawnBlood6Vectorif */
void SpawnBlood(Vector vecSpot, int bloodColor, float flDamage)
{
}

/* <1d2ad3> ../cstrike/dlls/weapons.cpp:140 */
/* linkage=_Z14AddMultiDamageP9entvars_sP11CBaseEntityfi */
void AddMultiDamage(entvars_t *pevInflictor, CBaseEntity *pEntity, float flDamage, int bitsDamageType)
{
//	ApplyMultiDamage(entvars_t *pevInflictor,
//			entvars_t *pevAttacker);  //   149
}

/* <1d2a41> ../cstrike/dlls/weapons.cpp:124 */
void ApplyMultiDamage(entvars_t *pevInflictor, entvars_t *pevAttacker)
{
//	{
//		Vector vecSpot1;                                //   126
//		Vector vecDir;                                  //   127
//		TraceResult tr;                                       //   128
//	}
}

/* <1d2a29> ../cstrike/dlls/weapons.cpp:110 */
/* linkage=_Z16ClearMultiDamagev */
void ClearMultiDamage(void)
{
}

/* <1d2978> ../cstrike/dlls/weapons.cpp:1636 */
void CWeaponBox::KeyValue(KeyValueData *pkvd)
{
//	KeyValue(CWeaponBox *const this,
//		KeyValueData *pkvd);  //  1636
}

/* <1d2938> ../cstrike/dlls/weapons.cpp:2036 */
void CWeaponBox::PackAmmo(int iszName, int iCount)
{
//	{
//		int iMaxCarry;                                        //  2038
//	}
}

/* <1d284f> ../cstrike/dlls/weapons.cpp:472 */
void CBasePlayerWeapon::Restore(CRestore &restore)
{
//	Restore(CBasePlayerItem *const this,
//		class CRestore &restore);  //   472
//	Restore(CBasePlayerWeapon *const this,
//		class CRestore &restore);  //   472
}

/* <1d27b2> ../cstrike/dlls/weapons.cpp:472 */
void CBasePlayerWeapon::Save(CSave &save)
{
//	Save(CBasePlayerItem *const this,
//		class CSave &save);  //   472
//	Save(CBasePlayerWeapon *const this,
//		class CSave &save);  //   472
}

/* <1d26f0> ../cstrike/dlls/weapons.cpp:642 */
void CBasePlayerItem::DefaultTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   648
//	}
//	DefaultTouch(CBasePlayerItem *const this,
//			class CBaseEntity *pOther);  //   642
}

/* <1d2607> ../cstrike/dlls/weapons.cpp:1389 */
void CBasePlayerWeapon::PlayEmptySound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1405
//	PlayEmptySound(CBasePlayerWeapon *const this);  //  1389
}

/* <1d2598> ../cstrike/dlls/weapons.cpp:2061 */
void CWeaponBox::GiveAmmo(int iCount, char *szName, int iMax, int *pIndex)
{
//	{
//		int i;                                                //  2063
//		{
//			int iAdd;                                     //  2072
//		}
//	}
}

/* <1d242e> ../cstrike/dlls/weapons.cpp:792 */
void CBasePlayerWeapon::FireRemaining(int &shotsFired, float &shootTime, BOOL bIsGlock)
{
//	{
//		float nexttime;                                       //   794
//		Vector vecSrc;                                  //   810
//		int flag;                                             //   828
//		Vector vecAiming;                               //   811
//		Vector vecDir;                                  //   814
//		operator+(const Vector *const this,
//				const Vector &v);  //   808
//		Vector(Vector *const this,
//			const Vector &v);  //   818
//		Vector(Vector *const this,
//			const Vector &v);  //   818
//		Vector(Vector *const this,
//			const Vector &v);  //   824
//		Vector(Vector *const this,
//			const Vector &v);  //   824
//	}
}

/* <1d237f> ../cstrike/dlls/weapons.cpp:1140 */
void CBasePlayerWeapon::AddToPlayer(CBasePlayer *pPlayer)
{
//	AddToPlayer(CBasePlayerWeapon *const this,
//			class CBasePlayer *pPlayer);  //  1140
//	pszAmmo1(CBasePlayerItem *const this);  //  1148
//	pszAmmo2(CBasePlayerItem *const this);  //  1149
}

/* <1d22c7> ../cstrike/dlls/weapons.cpp:1218 */
void CBasePlayerWeapon::SendWeaponAnim(int iAnim, int skiplocal)
{
//	SendWeaponAnim(CBasePlayerWeapon *const this,
//			int iAnim,
//			int skiplocal);  //  1218
//	edict(CBaseEntity *const this);  //  1222
}

/* <1d21bd> ../cstrike/dlls/weapons.cpp:2352 */
void CArmoury::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2354
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2359
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  2364
//	atoi(const char *__nptr);  //  2356
//	KeyValue(CArmoury *const this,
//		KeyValueData *pkvd);  //  2352
}

/* <1d20fb> ../cstrike/dlls/weapons.cpp:1440 */
void CBasePlayerAmmo::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //  1444
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //  1444
//	Spawn(CBasePlayerAmmo *const this);  //  1440
}

/* <1d20a8> ../cstrike/dlls/weapons.cpp:458 */
void CBasePlayerItem::Save(CSave &save)
{
//	Save(CBasePlayerItem *const this,
//		class CSave &save);  //   458
}

/* <1d2055> ../cstrike/dlls/weapons.cpp:458 */
void CBasePlayerItem::Restore(CRestore &restore)
{
//	Restore(CBasePlayerItem *const this,
//		class CRestore &restore);  //   458
}

/* <1d2002> ../cstrike/dlls/weapons.cpp:1624 */
void CWeaponBox::Save(CSave &save)
{
//	Save(CWeaponBox *const this,
//		class CSave &save);  //  1624
}

/* <1d1faf> ../cstrike/dlls/weapons.cpp:1624 */
void CWeaponBox::Restore(CRestore &restore)
{
//	Restore(CWeaponBox *const this,
//		class CRestore &restore);  //  1624
}

/* <1d1f2f> ../cstrike/dlls/weapons.cpp:2294 */
void CArmoury::ArmouryTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2299
//	}
//	ArmouryTouch(CArmoury *const this,
//			class CBaseEntity *pOther);  //  2294
}

/* <1d1ee9> ../cstrike/dlls/weapons.cpp:2268 */
void CArmoury::Precache(void)
{
//	Precache(CArmoury *const this);  //  2268
}

/* <1d1e94> ../cstrike/dlls/weapons.cpp:1488 */
void CBasePlayerAmmo::DefaultTouch(CBaseEntity *pOther)
{
//	DefaultTouch(CBasePlayerAmmo *const this,
//			class CBaseEntity *pOther);  //  1488
}

/* <1d1e4a> ../cstrike/dlls/weapons.cpp:1126 */
void CBasePlayerWeapon::AddDuplicate(CBasePlayerItem *pOriginal)
{
//	AddDuplicate(CBasePlayerWeapon *const this,
//			class CBasePlayerItem *pOriginal);  //  1126
}

/* <1d1e09> ../cstrike/dlls/weapons.cpp:616 */
void CBasePlayerItem::Respawn(void)
{
//	{
//		class CBaseEntity *pNewWeapon;                       //   620
//	}
}

/* <1d1de0> ../cstrike/dlls/weapons.cpp:1471 */
void CBasePlayerAmmo::Materialize(void)
{
}

/* <1d1d39> ../cstrike/dlls/weapons.cpp:2167 */
void CArmoury::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //  2172
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //  2172
}

/* <1d1d10> ../cstrike/dlls/weapons.cpp:1458 */
void CBasePlayerAmmo::Respawn(void)
{
}

/* <1d1ce7> ../cstrike/dlls/weapons.cpp:1687 */
void CWeaponBox::Spawn(void)
{
}

/* <1d1c92> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <1d1bfb> ../cstrike/dlls/weapons.cpp:2207 */
void CArmoury::Restart(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  2209
//		{
//			float flRatio;                                //  2257
//		}
//		{
//			float flRatio;                                //  2239
//		}
//		{
//			float flRatio;                                //  2221
//		}
//	}
}

/* <1d1b7f> ../cstrike/dlls/weapons.cpp:2145 */
void CWeaponBox::SetObjectCollisionBox(void)
{
//	operator+(const Vector ::SetObjectCollisionBox(//			const Vector &v);  //  2147
//	operator+(const Vector *const this,
//			const Vector &v);  //  2148
}

/* <1d1b57> ../cstrike/dlls/weapons.cpp:1629 */
void CWeaponBox::Precache(void)
{
}

/* <1d1b2e> ../cstrike/dlls/weapons.cpp:1567 */
void CBasePlayerWeapon::RetireWeapon(void)
{
}

/* <1d1acc> ../cstrike/dlls/weapons.cpp:1548 */
void CBasePlayerWeapon::ExtractClipAmmo(CBasePlayerWeapon *pWeapon)
{
//	{
//		int iAmmo;                                            //  1550
//		iMaxAmmo1(CBasePlayerItem *const this);  //  1561
//	}
}

/* <1d1a94> ../cstrike/dlls/weapons.cpp:1433 */
void CBasePlayerWeapon::Holster(int skiplocal)
{
}

/* <1d1a6c> ../cstrike/dlls/weapons.cpp:1428 */
void CBasePlayerWeapon::SecondaryAmmoIndex(void)
{
}

/* <1d1a44> ../cstrike/dlls/weapons.cpp:1421 */
void CBasePlayerWeapon::PrimaryAmmoIndex(void)
{
}

/* <1d1a1c> ../cstrike/dlls/weapons.cpp:1414 */
void CBasePlayerWeapon::ResetEmptySound(void)
{
}

/* <1d19f4> ../cstrike/dlls/weapons.cpp:1301 */
void CBasePlayerWeapon::CanDeploy(void)
{
}

/* <1d19ba> ../cstrike/dlls/weapons.cpp:1287 */
void CBasePlayerWeapon::IsUseable(void)
{
//	iMaxAmmo1(CBasePlayerItem *const this);  //  1291
}

/* <1d18c7> ../cstrike/dlls/weapons.cpp:1112 */
void CBasePlayerItem::AttachToPlayer(CBasePlayer *pPlayer)
{
//	edict(CBaseEntity *const this);  //  1116
//	edict(CBaseEntity *const this);  //  1120
}

/* <1d188f> ../cstrike/dlls/weapons.cpp:1106 */
void CBasePlayerItem::Holster(int skiplocal)
{
}

/* <1d1866> ../cstrike/dlls/weapons.cpp:1099 */
void CBasePlayerItem::Kill(void)
{
}

/* <1d183d> ../cstrike/dlls/weapons.cpp:1092 */
void CBasePlayerItem::Drop(void)
{
}

/* <1d17d4> ../cstrike/dlls/weapons.cpp:1081 */
void CBasePlayerItem::AddToPlayer(CBasePlayer *pPlayer)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  1085
}

/* <1d17ac> ../cstrike/dlls/weapons.cpp:605 */
void CBasePlayerItem::Deploy(void)
{
}

/* <1d1730> ../cstrike/dlls/weapons.cpp:475 */
void CBasePlayerItem::SetObjectCollisionBox(void)
{
//	operator+(const Vector ::SetObjectCollisionBox(//			const Vector &v);  //   477
//	operator+(const Vector *const this,
//			const Vector &v);  //   478
}

/* <1d16f8> ../cstrike/dlls/weapons.h:434 */
void CBasePlayerAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <1d16d0> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <1d16a8> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <1d1680> ../cstrike/dlls/weapons.h:353 */
void CBasePlayerWeapon::UseDecrement(void)
{
}

/* <1d1658> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <1d1630> ../cstrike/dlls/weapons.h:348 */
void CBasePlayerWeapon::WeaponIdle(void)
{
}

/* <1d1608> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <1d15e0> ../cstrike/dlls/weapons.h:346 */
void CBasePlayerWeapon::SecondaryAttack(void)
{
}

/* <1d15b8> ../cstrike/dlls/weapons.h:345 */
void CBasePlayerWeapon::PrimaryAttack(void)
{
}

/* <1d1590> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <1d1567> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <1d153f> ../cstrike/dlls/weapons.h:289 */
void CBasePlayerItem::iItemSlot(void)
{
}

/* <1d1517> ../cstrike/dlls/weapons.h:280 */
void CBasePlayerItem::GetMaxSpeed(void)
{
}

/* <1d14ef> ../cstrike/dlls/weapons.h:279 */
void CBasePlayerItem::GetWeaponPtr(void)
{
}

/* <1d148f> ../cstrike/dlls/weapons.h:276 */
void CBasePlayerItem::SecondaryAmmoIndex(void)
{
}

/* <1d1467> ../cstrike/dlls/weapons.h:275 */
void CBasePlayerItem::PrimaryAmmoIndex(void)
{
}

/* <1d143f> ../cstrike/dlls/weapons.h:269 */
void CBasePlayerItem::ItemPostFrame(void)
{
}

/* <1d1417> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <1d13ef> ../cstrike/dlls/weapons.h:266 */
void CBasePlayerItem::UpdateItemInfo(void)
{
}

/* <1d13c7> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <1d139f> ../cstrike/dlls/weapons.h:262 */
void CBasePlayerItem::IsWeapon(void)
{
}

/* <1d1377> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <1d134f> ../cstrike/dlls/weapons.h:259 */
void CBasePlayerItem::CanDeploy(void)
{
}

/* <1d1319> ../cstrike/dlls/weapons.h:258 */
void CBasePlayerItem::GetItemInfo(ItemInfo *p)
{
}

/* <1d12e2> ../cstrike/dlls/weapons.h:249 */
void CBasePlayerItem::AddDuplicate(CBasePlayerItem *pItem)
{
}

/* <1d12aa> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <1d127c> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1d123e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1d1041> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1d1019> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1d0ff1> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1d0fb9> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <1d0f54> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1d0f1c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1d0ef4> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <1d0ecc> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1d0ea4> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <1d0e7c> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <1d0e53> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1d0e2b> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <1d0e03> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1d0ddb> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1d0da4> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <1d0d7c> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1d0d54> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <1d0d1d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <1d0cf5> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1d0c57> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <1d0c02> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <1d0bcb> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1d0b94> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <1d0b4e> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <1d0b08> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <1d0ae0> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <1d0ab8> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1d0a84> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1d0a4d> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1d0a25> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <1d09ee> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <1d09c6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <1d099e> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <1d097b> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <1d094f> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1d0927> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1d08ff> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1d08d7> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <1d083f> ../cstrike/dlls/weapons.cpp:1267 */
void CBasePlayerWeapon::AddSecondaryAmmo(int iCount, char *szName, int iMax)
{
//	{
//		int iIdAmmo;                                          //  1269
//	}
}

/* <1d07b3> ../cstrike/dlls/weapons.cpp:184 */
void EjectBrass(Vector &vecOrigin, Vector &vecLeft, Vector &vecVelocity, float rotation, int model, int soundtype, int entityIndex)
{
//	{
//		class CBaseEntity *ent;                              //   188
//		bool useNewBehavior;                                  //   190
//	}
}

/* <1d074f> ../cstrike/dlls/weapons.cpp:2061 */
void CWeaponBox::GiveAmmo(int iCount, char *szName, int iMax, int *pIndex)
{
//	{
//		int i;                                                //  2063
//		{
//			int iAdd;                                     //  2072
//		}
//	}
}

/* <1d0736> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1d0640> ../cstrike/dlls/weapons.cpp:1732 */
void CWeaponBox::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //  1751
//		int i;                                                //  1769
//		bool bRemove;                                         //  1770
//		bool bEmitSound;                                      //  1771
//		{
//			class CBasePlayerItem *pItem;                //  1779
//			{
//				class CCSBotManager *ctrl;           //  1795
//			}
//			{
//				class CBaseEntity *pEntity;          //  1839
//				class CBasePlayer *pTempPlayer;      //  1840
//				class CCSBotManager *csBots;         //  1864
//			}
//			{
//				class CBasePlayerWeapon *pGrenade;   //  1881
//				int playerGrenades;                   //  1889
//				int maxGrenades;                      //  1890
//				const char *grenadeName;            //  1891
//			}
//		}
//		{
//			int n;                                        //  1951
//		}
//	}
}

/* <1d0620> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <1d0600> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <1d05e0> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <1d05c0> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <1d056b> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <1d0535> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <1d0517> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <1d04e3> ../cstrike/dlls/cbase.h:800 */
CArmoury *GetClassPtr<CArmoury>(CArmoury *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1d04c6> ../cstrike/dlls/weapons.cpp:2156 */
inline void CArmoury::CArmoury(void)
{
}

/* <1d04a4> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <1d045e> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <1d0436> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <1d03de> ../cstrike/dlls/cbase.h:800 */
CWeaponBox *GetClassPtr<CWeaponBox>(CWeaponBox *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1d03c1> ../cstrike/dlls/weapons.h:508 */
inline void CWeaponBox::CWeaponBox(void)
{
}

/* <1d0383> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <1d035e> ../cstrike/dlls/weapons.cpp:1636 */
void CWeaponBox::KeyValue(KeyValueData *pkvd)
{
}

/* <1d02b5> ../cstrike/dlls/weapons.cpp:792 */
void CBasePlayerWeapon::FireRemaining(int &shotsFired, float &shootTime, BOOL bIsGlock)
{
//	{
//		float nexttime;                                       //   794
//		Vector vecSrc;                                  //   810
//		Vector vecAiming;                               //   811
//		Vector vecDir;                                  //   814
//		int flag;                                             //   828
//	}
}

/* <1d028d> ../cstrike/dlls/weapons.cpp:506 */
void CBasePlayerItem::FallThink(void)
{
//	{
//		int pitch;                                            //   516
//	}
}

/* <1d0274> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <1d020f> ../cstrike/dlls/weapons.cpp:242 */
void AddAmmoNameToAmmoRegistry(const char *szAmmoname)
{
//	{
//		int i;                                                //   245
//	}
}

/* <1d01b9> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <1d018e> ../cstrike/dlls/weapons.cpp:82 */
int MaxAmmoCarry(int iszName)
{
//	{
//		int i;                                                //    84
//	}
}

/* <1d0170> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <1d013e> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <1d0117> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1d00f0> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1d00d7> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <1d00a3> ../cstrike/dlls/weapons.cpp:642 */
void CBasePlayerItem::DefaultTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   648
//	}
}

/* <1d007b> ../cstrike/dlls/weapons.h:299 */
inline void CBasePlayerItem::iFlags(void)
{
}

/* <1d0062> ../cstrike/dlls/weapons.h:297 */
inline void CBasePlayerItem::iMaxClip(void)
{
}

/* <1d0049> ../cstrike/dlls/weapons.h:295 */
inline void CBasePlayerItem::iMaxAmmo2(void)
{
}

/* <1d0024> ../cstrike/dlls/weapons.cpp:1140 */
void CBasePlayerWeapon::AddToPlayer(CBasePlayer *pPlayer)
{
}

/* <1d000b> ../cstrike/dlls/weapons.h:294 */
inline void CBasePlayerItem::pszAmmo2(void)
{
}

/* <1cfff2> ../cstrike/dlls/weapons.h:293 */
inline void CBasePlayerItem::iMaxAmmo1(void)
{
}

/* <1cffd9> ../cstrike/dlls/weapons.h:292 */
inline void CBasePlayerItem::pszAmmo1(void)
{
}

/* <1cffbb> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1cff6b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1cff1b> ../cstrike/dlls/weapons.cpp:1218 */
void CBasePlayerWeapon::SendWeaponAnim(int iAnim, int skiplocal)
{
}

/* <1cff02> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1cfedb> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <1cfe84> ../cstrike/dlls/weapons.cpp:1389 */
void CBasePlayerWeapon::PlayEmptySound(void)
{
}

/* <1cfe35> ../cstrike/dlls/weapons.cpp:2352 */
void CArmoury::KeyValue(KeyValueData *pkvd)
{
}

/* <1cfe0b> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <1cfcd3> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1cfcac> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1cfc80> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1cfc67> ../cstrike/dlls/weapons.cpp:1440 */
void CBasePlayerAmmo::Spawn(void)
{
}

/* <1cfc33> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1cfc13> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1cfbf5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1cfbcd> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <1cfba3> ../cstrike/dlls/weapons.cpp:472 */
void CBasePlayerWeapon::Save(CSave &save)
{
}

/* <1cfb79> ../cstrike/dlls/weapons.cpp:458 */
void CBasePlayerItem::Save(CSave &save)
{
}

/* <1cfb4f> ../cstrike/dlls/weapons.cpp:472 */
void CBasePlayerWeapon::Restore(CRestore &restore)
{
}

/* <1cfb20> ../cstrike/dlls/weapons.cpp:458 */
void CBasePlayerItem::Restore(CRestore &restore)
{
}

/* <1cfaf6> ../cstrike/dlls/weapons.cpp:1624 */
void CWeaponBox::Save(CSave &save)
{
}

/* <1cfac7> ../cstrike/dlls/weapons.cpp:1624 */
void CWeaponBox::Restore(CRestore &restore)
{
}

/* <1cfa96> ../cstrike/dlls/weapons.cpp:2294 */
inline void CArmoury::ArmouryTouch( CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2299
//	}
}

/* <1cfa78> ../cstrike/dlls/weapons.cpp:2268 */
inline void CArmoury::Precache(void)
{
}

/* <1cfa4e> ../cstrike/dlls/weapons.cpp:1488 */
void CBasePlayerAmmo::DefaultTouch(CBaseEntity *pOther)
{
}

/* <1cfa24> ../cstrike/dlls/weapons.cpp:1126 */
void CBasePlayerWeapon::AddDuplicate(CBasePlayerItem *pOriginal)
{
}

/* <1bd23c> ../cstrike/dlls/vehicle.cpp:1064 */
void func_vehiclecontrols(entvars_t *pev)
{
//	GetClassPtr<CFuncVehicleControls>(CFuncVehicleControls *a);  //  1064
}

/* <1bd198> ../cstrike/dlls/vehicle.cpp:933 */
void Instance(edict_t *pent)
{
//	FClassnameIs(edict_t *pent,
//			const char *szClassname);  //   935
//	GET_PRIVATE(edict_t *pent);  //   936
}

/* <1bd0d4> ../cstrike/dlls/vehicle.cpp:810 */
void CFuncVehicle::SetControls(entvars_t *pevControls)
{
//	{
//		Vector offset;                                  //   812
//		operator-(const Vector *const this,
//				const Vector &v);  //   812
//		operator+(const Vector *const this,
//				const Vector &v);  //   814
//		operator+(const Vector *const this,
//				const Vector &v);  //   815
//	}
}

/* <1bd087> ../cstrike/dlls/vehicle.cpp:764 */
void CFuncVehicle::DeadEnd(void)
{
//	{
//		class CPathTrack *pTrack;                            //   767
//		class CPathTrack *pNext;                             //   767
//	}
}

/* <1bcf96> ../cstrike/dlls/vehicle.cpp:179 */
void CFuncVehicle::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	StopSound(CFuncVehicle *const this);  //   197
//	{
//		float delta;                                          //   210
//		float flSpeedRatio;                                   //   211
//		StopSound(CFuncVehicle *const this);  //   207
//	}
}

/* <1bc856> ../cstrike/dlls/vehicle.cpp:609 */
void CFuncVehicle::Next(void)
{
//	{
//		Vector vGravityVector;                          //   611
//		Vector forward;                                 //   615
//		Vector right;                                   //   616
//		Vector up;                                      //   617
//		float time;                                           //   633
//		Vector(Vector *const this,
//			const Vector &v);  //   611
//		operator*(const Vector *const this,
//				float fl);  //   615
//		operator*(const Vector *const this,
//				float fl);  //   615
//		operator*(const Vector *const this,
//				float fl);  //   616
//		operator*(const Vector *const this,
//				float fl);  //   616
//		operator*(const Vector *const this,
//				float fl);  //   617
//		operator+(const Vector *const this,
//				const Vector &v);  //   619
//		operator-(const Vector *const this,
//				const Vector &v);  //   619
//		operator+(const Vector *const this,
//				const Vector &v);  //   619
//		operator+(const Vector *const this,
//				const Vector &v);  //   620
//		operator+(const Vector *const this,
//				const Vector &v);  //   620
//		operator+(const Vector *const this,
//				const Vector &v);  //   620
//		operator+(const Vector *const this,
//				const Vector &v);  //   621
//		operator+(const Vector *const this,
//				const Vector &v);  //   621
//		operator-(const Vector *const this,
//				const Vector &v);  //   622
//		operator-(const Vector *const this,
//				const Vector &v);  //   622
//		operator+(const Vector *const this,
//				const Vector &v);  //   622
//		operator-(const Vector *const this,
//				const Vector &v);  //   623
//		operator+(const Vector *const this,
//				const Vector &v);  //   623
//		operator+(const Vector *const this,
//				const Vector &v);  //   623
//		operator-(const Vector *const this,
//				const Vector &v);  //   624
//		operator+(const Vector *const this,
//				const Vector &v);  //   624
//		{
//			Vector temp;                            //   737
//			operator!=(const Vector *const this,
//					const Vector &v);  //   678
//			NextThink(CFuncVehicle *const this,
//					float thinkTime,
//					BOOL alwaysThink);  //   755
//			{
//				Vector vTargetAngle;            //   683
//				Vector vAngle;                  //   683
//				float vx;                             //   684
//				float vy;                             //   684
//				CrossProduct(Vector &a,
//						const Vector &b);  //   680
//				CrossProduct(Vector &a,
//						const Vector &b);  //   681
//				FixupAngles2(Vector &v);  //   693
//				FixupAngles2(Vector &v);  //   694
//			}
//			operator!=(const Vector *const this,
//					const Vector &v);  //   746
//			Normalize(const Vector *const this);  //   748
//			operator*(float fl,
//					const Vector &v);  //   748
//			operator*(const Vector *const this,
//					float fl);  //   721
//			{
//				float flAirTime;                      //   725
//			}
//			operator*(const Vector *const this,
//					float fl);  //   734
//			operator+(const Vector *const this,
//					const Vector &v);  //   752
//			UpdateSound(CFuncVehicle *const this);  //   742
//		}
//	}
}

/* <1bc835> ../cstrike/dlls/vehicle.cpp:20 */
void FixupAngles2(Vector &v)
{
}

/* <1bc7aa> ../cstrike/dlls/vehicle.cpp:588 */
void CFuncVehicle::TerrainFollowing(void)
{
//	{
//		TraceResult tr;                                       //   590
//		operator+(const Vector *const this,
//				const Vector &v);  //   593
//	}
}

/* <1bc358> ../cstrike/dlls/vehicle.cpp:466 */
void CFuncVehicle::CollisionDetection(void)
{
//	{
//		TraceResult tr;                                       //   468
//		bool bHitSomething;                                   //   469
//		operator*(const Vector *const this,
//				float fl);  //   533
//		operator-(const Vector *const this,
//				const Vector &v);  //   533
//		operator*(const Vector *const this,
//				float fl);  //   551
//		operator-(const Vector *const this,
//				const Vector &v);  //   551
//		operator*(const Vector *const this,
//				float fl);  //   569
//		operator-(const Vector *const this,
//				const Vector &v);  //   569
//		DotProduct(Vector &a,
//				const Vector &b);  //   573
//		operator*(const Vector *const this,
//				float fl);  //   573
//		{
//			class CBaseEntity *pHit;                     //   490
//			DotProduct(Vector &a,
//					const Vector &b);  //   479
//			operator*(const Vector *const this,
//					float fl);  //   479
//			Instance(edict_t *pent);  //   490
//		}
//		operator*(const Vector *const this,
//				float fl);  //   496
//		operator+(const Vector *const this,
//				const Vector &v);  //   496
//		operator*(const Vector *const this,
//				float fl);  //   514
//		operator+(const Vector *const this,
//				const Vector &v);  //   514
//		DotProduct(Vector &a,
//				const Vector &b);  //   517
//		operator*(const Vector *const this,
//				float fl);  //   517
//		operator*(const Vector *const this,
//				float fl);  //   475
//		operator+(const Vector *const this,
//				const Vector &v);  //   475
//	}
}

/* <1bc12b> ../cstrike/dlls/vehicle.cpp:368 */
void CFuncVehicle::CheckTurning(void)
{
//	{
//		float maxspeed;                                       //   370
//		TraceResult tr;                                       //   371
//		bool bTurnIntoWall;                                   //   373
//		operator*(const Vector *const this,
//				float fl);  //   398
//		operator+(const Vector *const this,
//				const Vector &v);  //   398
//		operator*(const Vector *const this,
//				float fl);  //   387
//		operator+(const Vector *const this,
//				const Vector &v);  //   387
//		operator*(const Vector *const this,
//				float fl);  //   379
//		operator-(const Vector *const this,
//				const Vector &v);  //   379
//		operator*(const Vector *const this,
//				float fl);  //   406
//		operator-(const Vector *const this,
//				const Vector &v);  //   406
//	}
}

/* <1bc0fb> ../cstrike/dlls/vehicle.cpp:324 */
void CFuncVehicle::UpdateSound(void)
{
//	{
//		float flpitch;                                        //   326
//	}
}

/* <1bc0bd> ../cstrike/dlls/vehicle.cpp:303 */
void CFuncVehicle::StopSound(void)
{
//	{
//		short unsigned int us_encode;                         //   308
//		short unsigned int us_sound;                          //   309
//	}
}

/* <1bc08a> ../cstrike/dlls/vehicle.cpp:303 */
void CFuncVehicle::StopSound(void)
{
//	{
//		short unsigned int us_encode;                         //   308
//		short unsigned int us_sound;                          //   309
//	}
}

/* <1bc059> ../cstrike/dlls/vehicle.cpp:109 */
void CFuncVehicle::NextThink(float thinkTime, BOOL alwaysThink)
{
}

/* <1bbf8f> ../cstrike/dlls/vehicle.cpp:55 */
void func_vehicle(entvars_t *pev)
{
//	GetClassPtr<CFuncVehicle>(CFuncVehicle *a);  //    55
}

/* <1bbd36> ../cstrike/dlls/vehicle.cpp:1067 */
void CFuncVehicleControls::Find(void)
{
//	{
//		edict_t *pTarget;                                    //  1069
//		class CFuncVehicle *pvehicle;                        //  1082
//		Instance(edict_t *pent);  //  1082
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1073
//		FNullEnt(const edict_t *pent);  //  1074
//		FNullEnt(const edict_t *pent);  //  1076
//		SetControls(CFuncVehicle *const this,
//				entvars_t *pevControls);  //  1083
//		FClassnameIs(edict_t *pent,
//				const char *szClassname);  //  1074
//	}
}

/* <1bbd03> ../cstrike/dlls/vehicle.cpp:810 */
void CFuncVehicle::SetControls(entvars_t *pevControls)
{
//	{
//		Vector offset;                                  //   812
//	}
}

/* <1bbcec> ../cstrike/dlls/vehicle.cpp:933 */
void Instance(edict_t *pent)
{
}

/* <1bb9d0> ../cstrike/dlls/vehicle.cpp:120 */
void CFuncVehicle::Blocked(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   122
//		Vector vFrontLeft;                              //   150
//		Vector vFrontRight;                             //   150
//		Vector vBackLeft;                               //   150
//		Vector vBackRight;                              //   150
//		Vector forward;                                 //   151
//		Vector right;                                   //   152
//		Vector vOrigin;                                 //   159
//		float minx;                                           //   161
//		float miny;                                           //   161
//		float minz;                                           //   161
//		float maxx;                                           //   162
//		float maxy;                                           //   162
//		float maxz;                                           //   162
//		VARS(edict_t *pent);  //   125
//		operator-(const Vector *const this,
//				const Vector &v);  //   139
//		Normalize(const Vector *const this);  //   139
//		operator*(const Vector *const this,
//				float fl);  //   139
//		operator*(const Vector *const this,
//				float fl);  //   143
//		{
//			float deltaSpeed;                             //   130
//		}
//		operator*(const Vector *const this,
//				float fl);  //   151
//		operator*(const Vector *const this,
//				float fl);  //   151
//		operator*(const Vector *const this,
//				float fl);  //   152
//		operator*(const Vector *const this,
//				float fl);  //   152
//		operator+(const Vector *const this,
//				const Vector &v);  //   154
//		operator-(const Vector *const this,
//				const Vector &v);  //   154
//		operator-(const Vector *const this,
//				const Vector &v);  //   157
//		operator+(const Vector *const this,
//				const Vector &v);  //   157
//		Vector(Vector *const this,
//			const Vector &v);  //   159
//	}
}

/* <1bb840> ../cstrike/dlls/vehicle.cpp:878 */
void CFuncVehicle::NearestPath(void)
{
//	{
//		class CBaseEntity *pTrack;                           //   880
//		class CBaseEntity *pNearest;                         //   881
//		float dist;                                           //   882
//		float closest;                                        //   882
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   889
//		operator-(const Vector *const this,
//				const Vector &v);  //   891
//		Length(const Vector *const this);  //   891
//		operator-(const Vector *const this,
//				const Vector &v);  //   912
//		Length(const Vector *const this);  //   912
//		operator-(const Vector *const this,
//				const Vector &v);  //   912
//		Length(const Vector *const this);  //   912
//		NextThink(CFuncVehicle *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //   920
//	}
}

/* <1bb827> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1bb676> ../cstrike/dlls/vehicle.cpp:841 */
void CFuncVehicle::Find(void)
{
//	{
//		entvars_t *pevTarget;                                //   847
//		Vector nextPos;                                 //   855
//		Vector look;                                    //   858
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   843
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   848
//		Vector(Vector *const this,
//			const Vector &v);  //   855
//		Vector(Vector *const this,
//			const Vector &v);  //   858
//		operator-(const Vector *const this,
//				const Vector &v);  //   863
//		NextThink(CFuncVehicle *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //   870
//		UpdateSound(CFuncVehicle *const this);  //   874
//	}
}

/* <1bb408> ../cstrike/dlls/vehicle.cpp:57 */
void CFuncVehicle::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    59
//	FStrEq(const char *sz1,
//		const char *sz2);  //    64
//	FStrEq(const char *sz1,
//		const char *sz2);  //    69
//	FStrEq(const char *sz1,
//		const char *sz2);  //    74
//	FStrEq(const char *sz1,
//		const char *sz2);  //    79
//	FStrEq(const char *sz1,
//		const char *sz2);  //    84
//	FStrEq(const char *sz1,
//		const char *sz2);  //    90
//	FStrEq(const char *sz1,
//		const char *sz2);  //    95
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   105
//	atof(const char *__nptr);  //    61
//	atof(const char *__nptr);  //    66
//	atof(const char *__nptr);  //    76
//	atoi(const char *__nptr);  //    97
//	atof(const char *__nptr);  //    71
//	atoi(const char *__nptr);  //    81
//	atoi(const char *__nptr);  //    86
//	atof(const char *__nptr);  //    92
}

/* <1bb3b9> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <1bb33d> ../cstrike/dlls/vehicle.cpp:324 */
void CFuncVehicle::UpdateSound(void)
{
//	{
//		float flpitch;                                        //   326
//		{
//			short unsigned int us_encode;                 //   355
//			short unsigned int us_sound;                  //   356
//			short unsigned int us_pitch;                  //   357
//			short unsigned int us_volume;                 //   358
//		}
//	}
}

/* <1bb2f1> ../cstrike/dlls/vehicle.cpp:54 */
void CFuncVehicle::Save(CSave &save)
{
//	Save(CFuncVehicle *const this,
//		class CSave &save);  //    54
}

/* <1bb2a5> ../cstrike/dlls/vehicle.cpp:54 */
void CFuncVehicle::Restore(CRestore &restore)
{
//	Restore(CFuncVehicle *const this,
//		class CRestore &restore);  //    54
}

/* <1bb1b2> ../cstrike/dlls/vehicle.cpp:819 */
void CFuncVehicle::OnControls(entvars_t *pevTest)
{
//	{
//		Vector offset;                                  //   821
//		Vector local;                                   //   828
//		operator-(const Vector *const this,
//				const Vector &v);  //   821
//		DotProduct(Vector &a,
//				const Vector &b);  //   829
//		DotProduct(Vector &a,
//				const Vector &b);  //   830
//		DotProduct(Vector &a,
//				const Vector &b);  //   831
//	}
}

/* <1bb13e> ../cstrike/dlls/vehicle.cpp:1005 */
void CFuncVehicle::Restart(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //  1024
//	NextThink(CFuncVehicle *const this,
//			float thinkTime,
//			BOOL alwaysThink);  //  1027
}

/* <1bb0ef> ../cstrike/dlls/vehicle.cpp:956 */
void CFuncVehicle::Spawn(void)
{
//	NextThink(CFuncVehicle::Spawn(//			float thinkTime,
//			BOOL alwaysThink);  //   999
}

/* <1bb0c8> ../cstrike/dlls/vehicle.cpp:1088 */
void CFuncVehicleControls::Spawn(void)
{
}

/* <1bb0a2> ../cstrike/dlls/vehicle.cpp:1060 */
void CFuncVehicleControls::ObjectCaps(void)
{
}

/* <1bb07b> ../cstrike/dlls/vehicle.cpp:1032 */
void CFuncVehicle::Precache(void)
{
}

/* <1bb055> ../cstrike/dlls/vehicle.cpp:951 */
void CFuncVehicle::Classify(void)
{
}

/* <1bb00a> ../cstrike/dlls/vehicle.cpp:926 */
void CFuncVehicle::OverrideReset(void)
{
//	NextThink(CFuncVehicle::OverrideReset(//			float thinkTime,
//			BOOL alwaysThink);  //   928
}

/* <1bafe4> ../cstrike/dlls/trains.h:168 */
void CFuncVehicle::ObjectCaps(void)
{
}

/* <1bafbe> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1baf83> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1bada9> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1bad83> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1bad5d> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1bad28> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <1bacc9> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1bac94> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1bac6e> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <1bac48> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1bac22> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <1babfc> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <1babd5> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1babaf> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <1bab89> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1bab63> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1bab2f> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <1bab09> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1baae3> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <1baaaf> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <1baa89> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1ba9f5> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <1ba9a5> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <1ba971> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1ba93d> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <1ba8dc> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <1ba89a> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <1ba874> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <1ba84e> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1ba81c> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1ba7dc> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1ba7b6> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <1ba782> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <1ba75c> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <1ba736> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <1ba70d> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1ba6e7> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1ba6c1> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1ba667> ../cstrike/dlls/cbase.h:800 */
CFuncVehicleControls *GetClassPtr<CFuncVehicleControls>(CFuncVehicleControls *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1ba646> ../cstrike/dlls/vehicle.cpp:1057 */
inline void CFuncVehicleControls::CFuncVehicleControls(void)
{
}

/* <1ba614> ../cstrike/dlls/cbase.h:800 */
CFuncVehicle *GetClassPtr<CFuncVehicle>(CFuncVehicle *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1ba5f9> ../cstrike/dlls/trains.h:134 */
inline void CFuncVehicle::CFuncVehicle(void)
{
}

/* <1ba5bd> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <1ba548> ../cstrike/dlls/vector.h:186 */
inline Vector CrossProduct(Vector &a, Vector &b)
{
}

/* <1ba523> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <1ba4a2> ../cstrike/dlls/vehicle.cpp:324 */
void CFuncVehicle::UpdateSound(void)
{
//	{
//		float flpitch;                                        //   326
//		{
//			short unsigned int us_encode;                 //   355
//			short unsigned int us_sound;                  //   356
//			short unsigned int us_pitch;                  //   357
//			short unsigned int us_volume;                 //   358
//		}
//	}
}

/* <1ba473> ../cstrike/dlls/vehicle.cpp:109 */
void CFuncVehicle::NextThink(float thinkTime, BOOL alwaysThink)
{
}

/* <1ba405> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1ba3b6> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1ba363> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1ba312> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <1ba273> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1ba24d> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <1ba1b3> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1ba169> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1ba135> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1ba10e> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1ba0e2> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1ba0c2> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1ba0a4> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1ba07b> ../cstrike/dlls/vehicle.cpp:54 */
void CFuncVehicle::Save(CSave &save)
{
}

/* <1ba04d> ../cstrike/dlls/vehicle.cpp:54 */
void CFuncVehicle::Restore(CRestore &restore)
{
}

/* <1ba031> ../cstrike/dlls/vehicle.cpp:9 */
float Fix2(float angle)
{
}

/* <1b5470> ../cstrike/dlls/util.cpp:2802 */
/* linkage=_Z21UTIL_GetPlayerGaitYawi */
float UTIL_GetPlayerGaitYaw(int playerIndex)
{
//	{
//		class CBasePlayer *player;                           //  2804
//		UTIL_PlayerByIndex(int playerIndex);  //  2804
//	}
}

/* <1b5412> ../cstrike/dlls/util.cpp:2775 */
/* linkage=_Z11UTIL_IsGamePKc */
bool UTIL_IsGame(const char *gameName)
{
//	{
//		char gameDir;                                         //  2777
//	}
}

/* <1b5330> ../cstrike/dlls/util.cpp:2767 */
int GetPlayerTeam(int index)
{
//	{
//		class CBasePlayer *pPlayer;                          //  2769
//		UTIL_PlayerByIndex(int playerIndex);  //  2769
//	}
}

/* <1b51a7> ../cstrike/dlls/util.cpp:2715 */
/* linkage=_Z15UTIL_TextureHitP11TraceResult6VectorS1_ */
char UTIL_TextureHit(TraceResult *ptr, Vector vecSrc, Vector vecEnd)
{
//	{
//		char chTextureType;                                   //  2717
//		float rgfl1;                                          //  2718
//		float rgfl2;                                          //  2719
//		const char *pTextureName;                           //  2720
//		char szbuffer;                                        //  2721
//		class CBaseEntity *pEntity;                          //  2723
//		Instance(edict_t *pent);  //  2723
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //  2738
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //  2739
//		ENT(EOFFSET eoffset);  //  2745
//	}
}

/* <1b5144> ../cstrike/dlls/util.cpp:2700 */
void CRestore::BufferCheckZString(const char *string)
{
//	{
//		int maxLen;                                           //  2705
//		int len;                                              //  2706
//	}
}

/* <1b50bc> ../cstrike/dlls/util.cpp:2678 */
void CRestore::BufferSkipZString(void)
{
//	{
//		char *pszSearch;                                     //  2680
//		int len;                                              //  2681
//		int maxLen;                                           //  2686
//		BufferSkipBytes(CRestore *const this,
//				int bytes);  //  2695
//	}
}

/* <1b5092> ../cstrike/dlls/util.cpp:2673 */
void CRestore::BufferSkipBytes(int bytes)
{
}

/* <1b4f84> ../cstrike/dlls/util.cpp:2623 */
void CRestore::ReadNamedInt(const char *pName)
{
//	{
//		HEADER header;                                        //  2625
//		BufferReadHeader(CRestore *const this,
//				HEADER *pheader);  //  2627
//	}
}

/* <1b4a80> ../cstrike/dlls/util.cpp:2547 */
void CRestore::ReadEntVars(const char *pname, entvars_t *pev)
{
//	ReadFields(CRestore *const this,
//			const char *pname,
//			void *pBaseData,
//			TYPEDESCRIPTION *pFields,
//			int fieldCount);  //  2549
}

/* <1b4884> ../cstrike/dlls/util.cpp:2553 */
void CRestore::ReadFields(const char *pname, void *pBaseData, TYPEDESCRIPTION *pFields, int fieldCount)
{
//	{
//		short unsigned int i;                                 //  2555
//		short unsigned int token;                             //  2555
//		int lastField;                                        //  2556
//		int fileCount;                                        //  2556
//		HEADER header;                                        //  2557
//		ReadShort(CRestore *const this);  //  2559
//		ReadShort(CRestore *const this);  //  2562
//		BufferRewind(CSaveRestoreBuffer *const this,
//				int size);  //  2567
//		ReadInt(CRestore *const this);  //  2572
//		BufferReadHeader(CRestore *const this,
//				HEADER *pheader);  //  2586
//	}
}

/* <1b4776> ../cstrike/dlls/util.cpp:2631 */
void CRestore::ReadNamedString(const char *pName)
{
//	{
//		HEADER header;                                        //  2633
//		BufferReadHeader(CRestore *const this,
//				HEADER *pheader);  //  2635
//	}
}

/* <1b46b1> ../cstrike/dlls/util.cpp:2595 */
void CRestore::BufferReadHeader(HEADER *pheader)
{
//	ReadShort(CRestore *const this);  //  2598
//	ReadShort(CRestore *const this);  //  2599
//	BufferPointer(CRestore *const this);  //  2600
//	BufferSkipBytes(CRestore *const this,
//			int bytes);  //  2601
}

/* <1b4654> ../cstrike/dlls/util.cpp:2605 */
void CRestore::ReadShort(void)
{
//	{
//		short int tmp;                                        //  2607
//	}
}

/* <1b45f5> ../cstrike/dlls/util.cpp:2614 */
void CRestore::ReadInt(void)
{
//	{
//		int tmp;                                              //  2616
//	}
}

/* <1b455c> ../cstrike/dlls/util.cpp:2652 */
void CRestore::BufferReadBytes(char *pOutput, int size)
{
//	Empty(CRestore *const this);  //  2656
//	BufferReadBytes(CRestore *const this,
//			char *pOutput,
//			int size);  //  2652
}

/* <1b453a> ../cstrike/dlls/util.cpp:2644 */
void CRestore::BufferPointer(void)
{
}

/* <1b427f> ../cstrike/dlls/util.cpp:2386 */
void CRestore::ReadField(void *pBaseData, TYPEDESCRIPTION *pFields, int fieldCount, int startField, int size, char *pName, void *pData)
{
//	{
//		int i;                                                //  2388
//		int j;                                                //  2388
//		int stringCount;                                      //  2388
//		int fieldNumber;                                      //  2388
//		int entityIndex;                                      //  2388
//		TYPEDESCRIPTION *pTest;                              //  2389
//		float time;                                           //  2390
//		float timeData;                                       //  2390
//		Vector position;                                //  2391
//		edict_t *pent;                                       //  2392
//		char *pString;                                       //  2393
//		{
//			void *pOutputData;                           //  2415
//			void *pInputData;                            //  2416
//			EntityFromIndex(CSaveRestoreBuffer *const this,
//					int entityIndex);  //  2478
//			EntityFromIndex(CSaveRestoreBuffer *const this,
//					int entityIndex);  //  2462
//			EntityFromIndex(CSaveRestoreBuffer *const this,
//					int entityIndex);  //  2485
//			EntityFromIndex(CSaveRestoreBuffer *const this,
//					int entityIndex);  //  2470
//			EntityFromIndex(CSaveRestoreBuffer *const this,
//					int entityIndex);  //  2493
//			{
//				int string;                           //  2445
//			}
//			VARS(edict_t *pent);  //  2464
//			OFFSET(const edict_t *pent);  //  2495
//			Instance(edict_t *pent);  //  2472
//		}
//	}
}

/* <1b421f> ../cstrike/dlls/util.cpp:2361 */
void CSave::BufferData(const char *pdata, int size)
{
//	BufferData(CSave *const this,
//			const char *pdata,
//			int size);  //  2361
}

/* <1b4128> ../cstrike/dlls/util.cpp:2351 */
void CSave::BufferHeader(const char *pname, int size)
{
//	{
//		short int hashvalue;                                  //  2353
//		BufferData(CSave *const this,
//				const char *pdata,
//				int size);  //  2356
//		BufferData(CSave *const this,
//				const char *pdata,
//				int size);  //  2357
//	}
}

/* <1b3f9f> ../cstrike/dlls/util.cpp:2344 */
void CSave::BufferField(const char *pname, int size, const char *pdata)
{
//	BufferHeader(CSave *const this,
//			const char *pname,
//			int size);  //  2346
//	BufferData(CSave *const this,
//			const char *pdata,
//			int size);  //  2347
}

/* <1b3f5d> ../cstrike/dlls/util.cpp:2333 */
void CSave::DataEmpty(const char *pdata, int size)
{
//	{
//		int i;                                                //  2335
//	}
}

/* <1b3e49> ../cstrike/dlls/util.cpp:2324 */
void CSave::BufferString(char *pdata, int len)
{
//	{
//		char c;                                               //  2326
//		BufferData(CSave *const this,
//				const char *pdata,
//				int size);  //  2328
//		BufferData(CSave *const this,
//				const char *pdata,
//				int size);  //  2329
//	}
}

/* <1b2fc9> ../cstrike/dlls/util.cpp:2214 */
void CSave::WriteFields(const char *pname, void *pBaseData, TYPEDESCRIPTION *pFields, int fieldCount)
{
//	{
//		int i;                                                //  2216
//		int j;                                                //  2216
//		int actualCount;                                      //  2216
//		int emptyCount;                                       //  2216
//		TYPEDESCRIPTION *pTest;                              //  2217
//		int entityArray;                                      //  2218
//		{
//			void *pOutputData;                           //  2224
//			DataEmpty(CSave *const this,
//					const char *pdata,
//					int size);  //  2226
//		}
//		WriteInt(CSave *const this,
//			const char *pname,
//			const int *data,
//			int count);  //  2232
//		{
//			void *pOutputData;                           //  2236
//			DataEmpty(CSave *const this,
//					const char *pdata,
//					int size);  //  2241
//			WriteInt(CSave *const this,
//				const char *pname,
//				const int *data,
//				int count);  //  2309
//			WriteFunction(CSave *const this,
//					const char *pname,
//					void ** data,
//					int count);  //  2313
//			WriteData(CSave *const this,
//					const char *pname,
//					int size,
//					const char *pdata);  //  2304
//			WriteVector(CSave *const this,
//					const char *pname,
//					const float *value,
//					int count);  //  2291
//			EntityIndex(CSaveRestoreBuffer *const this,
//					EOFFSET eoLookup);  //  2278
//			WriteInt(CSave *const this,
//				const char *pname,
//				const int *data,
//				int count);  //  2285
//			EntityIndex(CSaveRestoreBuffer *const this,
//					edict_t *pentLookup);  //  2275
//			EntityIndex(CSaveRestoreBuffer *const this,
//					entvars_t *pevLookup);  //  2269
//			EntityIndex(CSaveRestoreBuffer *const this,
//					class CBaseEntity *pEntity);  //  2281
//			EntityIndex(CSaveRestoreBuffer *const this,
//					class CBaseEntity *pEntity);  //  2272
//			WriteData(CSave *const this,
//					const char *pname,
//					int size,
//					const char *pdata);  //  2300
//			WriteTime(CSave *const this,
//					const char *pname,
//					const float *data,
//					int count);  //  2250
//		}
//	}
}

/* <1b2f7f> ../cstrike/dlls/util.cpp:2207 */
void CSave::WriteEntVars(const char *pname, entvars_t *pev)
{
}

/* <1b2e7a> ../cstrike/dlls/util.cpp:2157 */
/* linkage=_Z15EntvarsKeyvalueP9entvars_sP14KeyValueData_s */
void EntvarsKeyvalue(entvars_t *pev, KeyValueData *pkvd)
{
//	{
//		int i;                                                //  2159
//		TYPEDESCRIPTION *pField;                             //  2160
//		UTIL_StringToVector(float *pVector,
//					const char *pString);  //  2187
//		atoi(const char *__nptr);  //  2182
//		atof(const char *__nptr);  //  2178
//	}
}

/* <1b2ca4> ../cstrike/dlls/util.cpp:2145 */
void CSave::WriteFunction(const char *pname, void ** data, int count)
{
//	{
//		const char *functionName;                           //  2147
//		BufferField(CSave *const this,
//				const char *pname,
//				int size,
//				const char *pdata);  //  2151
//	}
}

/* <1b1bde> ../cstrike/dlls/util.cpp:2126 */
void CSave::WritePositionVector(const char *pname, const float *value, int count)
{
//	{
//		int i;                                                //  2128
//		Vector tmp;                                     //  2129
//		Vector input;                                   //  2129
//		BufferHeader(CSave *const this,
//				const char *pname,
//				int size);  //  2131
//		{
//			Vector tmp;                             //  2134
//			BufferData(CSave *const this,
//					const char *pdata,
//					int size);  //  2139
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //  2134
//			operator-(const Vector *const this,
//					const Vector &v);  //  2137
//		}
//	}
}

/* <1b17b9> ../cstrike/dlls/util.cpp:2113 */
void CSave::WritePositionVector(const char *pname, Vector &value)
{
//	{
//		Vector tmp;                                     //  2118
//		WriteVector(CSave *const this,
//				const char *pname,
//				const Vector &value);  //  2119
//		operator-(const Vector *const this,
//				const Vector &v);  //  2118
//	}
//	WriteVector(CSave *const this,
//			const char *pname,
//			const Vector &value);  //  2122
}

/* <1b1630> ../cstrike/dlls/util.cpp:2105 */
void CSave::WriteVector(const char *pname, const float *value, int count)
{
//	BufferHeader(CSave *const this,
//			const char *pname,
//			int size);  //  2107
//	BufferData(CSave *const this,
//			const char *pdata,
//			int size);  //  2108
}

/* <1b1480> ../cstrike/dlls/util.cpp:2099 */
void CSave::WriteVector(const char *pname, Vector &value)
{
//	WriteVector(CSave *const this,
//			const char *pname,
//			const float *value,
//			int count);  //  2101
}

/* <1b121f> ../cstrike/dlls/util.cpp:2076 */
void CSave::WriteString(const char *pname, const int *stringId, int count)
{
//	{
//		int i;                                                //  2078
//		int size;                                             //  2078
//		BufferHeader(CSave *const this,
//				const char *pname,
//				int size);  //  2089
//		{
//			const char *pString;                        //  2092
//			BufferData(CSave *const this,
//					const char *pdata,
//					int size);  //  2093
//		}
//	}
}

/* <1b1053> ../cstrike/dlls/util.cpp:2065 */
void CSave::WriteString(const char *pname, const char *pdata)
{
//	BufferField(CSave *const this,
//			const char *pname,
//			int size,
//			const char *pdata);  //  2071
}

/* <1b0ea5> ../cstrike/dlls/util.cpp:2044 */
void CSave::WriteTime(const char *pname, const float *data, int count)
{
//	{
//		int i;                                                //  2046
//		Vector tmp;                                     //  2047
//		Vector input;                                   //  2047
//		BufferHeader(CSave *const this,
//				const char *pname,
//				int size);  //  2049
//		{
//			float tmp;                                    //  2052
//			BufferData(CSave *const this,
//					const char *pdata,
//					int size);  //  2059
//		}
//	}
}

/* <1b0c77> ../cstrike/dlls/util.cpp:2038 */
void CSave::WriteFloat(const char *pname, const float *data, int count)
{
//	BufferField(CSave *const this,
//			const char *pname,
//			int size,
//			const char *pdata);  //  2040
}

/* <1b0a7b> ../cstrike/dlls/util.cpp:2032 */
void CSave::WriteInt(const char *pname, const int *data, int count)
{
//	BufferField(CSave *const this,
//			const char *pname,
//			int size,
//			const char *pdata);  //  2034
}

/* <1b0860> ../cstrike/dlls/util.cpp:2026 */
void CSave::WriteShort(const char *pname, const short int *data, int count)
{
//	BufferField(CSave *const this,
//			const char *pname,
//			int size,
//			const char *pdata);  //  2028
}

/* <1b06a5> ../cstrike/dlls/util.cpp:2020 */
void CSave::WriteData(const char *pname, int size, const char *pdata)
{
//	BufferField(CSave *const this,
//			const char *pname,
//			int size,
//			const char *pdata);  //  2022
}

/* <1b0531> ../cstrike/dlls/util.cpp:1981 */
void CSaveRestoreBuffer::TokenHash(const char *pszToken)
{
//	{
//		short unsigned int hash;                              //  1983
//		HashString(CSaveRestoreBuffer *const this,
//				const char *pszToken);  //  1983
//		{
//			int i;                                        //  1992
//			{
//				int index;                            //  2003
//			}
//		}
//	}
}

/* <1b04b5> ../cstrike/dlls/util.cpp:1971 */
void CSaveRestoreBuffer::HashString(const char *pszToken)
{
//	{
//		unsigned int hash;                                    //  1973
//		_rotr(unsigned int val,
//			int shift);  //  1976
//	}
}

/* <1b0445> ../cstrike/dlls/util.cpp:1933 */
void CSaveRestoreBuffer::BufferRewind(int size)
{
}

/* <1b03fb> ../cstrike/dlls/util.cpp:1920 */
void CSaveRestoreBuffer::EntityFlagsSet(int entityIndex, int flags)
{
}

/* <1b03b7> ../cstrike/dlls/util.cpp:1902 */
void CSaveRestoreBuffer::EntityFromIndex(int entityIndex)
{
//	{
//		int i;                                                //  1907
//		ENTITYTABLE *pTable;                                 //  1908
//	}
}

/* <1b032f> ../cstrike/dlls/util.cpp:1884 */
void CSaveRestoreBuffer::EntityIndex(edict_t *pentLookup)
{
//	{
//		int i;                                                //  1889
//		ENTITYTABLE *pTable;                                 //  1890
//	}
}

/* <1b02a7> ../cstrike/dlls/util.cpp:1878 */
void CSaveRestoreBuffer::EntityIndex(EOFFSET eoLookup)
{
//	ENT(EOFFSET eoffset);  //  1880
//	EntityIndex(CSaveRestoreBuffer *const this,
//			edict_t *pentLookup);  //  1880
}

/* <1b027f> ../cstrike/dlls/util.cpp:1878 */
void CSaveRestoreBuffer::EntityIndex(EOFFSET eoLookup)
{
}

/* <1b0214> ../cstrike/dlls/util.cpp:1871 */
void CSaveRestoreBuffer::EntityIndex(entvars_t *pevLookup)
{
//	EntityIndex(CSaveRestoreBuffer *const this,
//			edict_t *pentLookup);  //  1875
}

/* <1b0186> ../cstrike/dlls/util.cpp:1863 */
void CSaveRestoreBuffer::EntityIndex(CBaseEntity *pEntity)
{
//	EntityIndex(CSaveRestoreBuffer *const this,
//			entvars_t *pevLookup);  //  1867
}

/* <1b0146> ../cstrike/dlls/util.cpp:1884 */
void CSaveRestoreBuffer::EntityIndex(edict_t *pentLookup)
{
//	{
//		int i;                                                //  1889
//		ENTITYTABLE *pTable;                                 //  1890
//	}
}

/* <1b011e> ../cstrike/dlls/util.cpp:1871 */
void CSaveRestoreBuffer::EntityIndex(entvars_t *pevLookup)
{
}

/* <1b00f6> ../cstrike/dlls/util.cpp:1863 */
void CSaveRestoreBuffer::EntityIndex(CBaseEntity *pEntity)
{
}

/* <1b00d4> ../cstrike/dlls/util.cpp:1859 */
void CSaveRestoreBuffer::~CSaveRestoreBuffer(void)
{
}

/* <1b00ae> ../cstrike/dlls/util.cpp:1859 */
void CSaveRestoreBuffer::~CSaveRestoreBuffer(int const __in_chrg)
{
}

/* <1b0084> ../cstrike/dlls/util.cpp:1853 */
void CSaveRestoreBuffer::CSaveRestoreBuffer(SAVERESTOREDATA *pdata)
{
}

/* <1b003a> ../cstrike/dlls/util.cpp:1847 */
void CSaveRestoreBuffer::CSaveRestoreBuffer(void)
{
}

/* <1affcc> ../cstrike/dlls/util.cpp:1805 */
/* linkage=_Z15UTIL_StripTokenPKcPc */
void UTIL_StripToken(const char *pKey, char *pDest)
{
//	{
//		int i;                                                //  1807
//	}
}

/* <1afebd> ../cstrike/dlls/util.cpp:1791 */
/* linkage=_Z14UTIL_DotPointsRK6VectorS1_S1_ */
float UTIL_DotPoints(Vector &vecSrc, Vector &vecCheck, Vector &vecDir)
{
//	{
//		class Vector2D vec2LOS;                               //  1793
//		operator-(const Vector *const this,
//				const Vector &v);  //  1795
//		Normalize(const class Vector2D *const this);  //  1796
//		DotProduct(const class Vector2D &a,
//				const class Vector2D &b);  //  1798
//	}
}

/* <1afe5f> ../cstrike/dlls/util.cpp:1774 */
/* linkage=_Z14UTIL_LogPrintfPcz */
void UTIL_LogPrintf(char *fmt, ...)
{
//	{
//		va_list argptr;                                       //  1776
//		char string;                                          //  1777
//	}
}

/* <1afd5c> ../cstrike/dlls/util.cpp:1753 */
/* linkage=_Z18UTIL_PrecacheOtherPKc */
void UTIL_PrecacheOther(const char *szClassname)
{
//	{
//		edict_t *pent;                                       //  1755
//		class CBaseEntity *pEntity;                          //  1764
//		FNullEnt(const edict_t *pent);  //  1758
//		Instance(entvars_t *pev);  //  1764
//	}
}

/* <1afd2c> ../cstrike/dlls/util.cpp:1745 */
/* linkage=_Z18UTIL_IsValidEntityP7edict_s */
BOOL UTIL_IsValidEntity(edict_t *pent)
{
}

/* <1afcfe> ../cstrike/dlls/util.cpp:1731 */
/* linkage=_Z11UTIL_RemoveP11CBaseEntity */
void UTIL_Remove(CBaseEntity *pEntity)
{
}

/* <1afc62> ../cstrike/dlls/util.cpp:1696 */
/* linkage=_Z16UTIL_BubbleTrail6VectorS_i */
void UTIL_BubbleTrail(Vector from, Vector to, int count)
{
//	{
//		float flHeight;                                       //  1698
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1715
//	}
}

/* <1afb44> ../cstrike/dlls/util.cpp:1674 */
/* linkage=_Z12UTIL_Bubbles6VectorS_i */
void UTIL_Bubbles(Vector mins, Vector maxs, int count)
{
//	{
//		Vector mid;                                     //  1676
//		float flHeight;                                       //  1678
//		operator+(const Vector *const this,
//				const Vector &v);  //  1676
//		operator*(const Vector *const this,
//				float fl);  //  1676
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1681
//	}
}

/* <1afa45> ../cstrike/dlls/util.cpp:1641 */
/* linkage=_Z15UTIL_WaterLevelRK6Vectorff */
float UTIL_WaterLevel(Vector &position, float minz, float maxz)
{
//	{
//		Vector midUp;                                   //  1643
//		float diff;                                           //  1653
//		UTIL_PointContents(Vector &vec);  //  1646
//		Vector(Vector *const this,
//			const Vector &v);  //  1643
//		UTIL_PointContents(Vector &vec);  //  1650
//		UTIL_PointContents(Vector &vec);  //  1657
//	}
}

/* <1af90d> ../cstrike/dlls/util.cpp:1612 */
/* linkage=_Z21UTIL_ClampVectorToBoxRK6VectorS1_ */
Vector UTIL_ClampVectorToBox(Vector &input, Vector &clampSize)
{
//	{
//		Vector sourceVector;                            //  1614
//		Vector(Vector *const this,
//			const Vector &v);  //  1614
//		Normalize(const Vector *const this);  //  1637
//	}
}

/* <1af85f> ../cstrike/dlls/util.cpp:1586 */
/* linkage=_Z21UTIL_StringToIntArrayPiiPKc */
void UTIL_StringToIntArray(int *pVector, int count, const char *pString)
{
//	{
//		char *pstr;                                          //  1588
//		char *pfront;                                        //  1588
//		char tempString;                                      //  1588
//		int j;                                                //  1589
//		atoi(const char *__nptr);  //  1596
//	}
}

/* <1af78a> ../cstrike/dlls/util.cpp:1555 */
void UTIL_StringToVector(float *pVector, const char *pString)
{
//	{
//		char *pstr;                                          //  1557
//		char *pfront;                                        //  1557
//		char tempString;                                      //  1557
//		int j;                                                //  1558
//	}
}

/* <1af74a> ../cstrike/dlls/util.cpp:1538 */
/* linkage=_Z15UTIL_TeamsMatchPKcS0_ */
BOOL UTIL_TeamsMatch(const char *pTeamName1, const char *pTeamName2)
{
}

/* <1af6dc> ../cstrike/dlls/util.cpp:1526 */
/* linkage=_Z13UTIL_RicochetRK6Vectorf */
void UTIL_Ricochet(Vector &position, float scale)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1528
}

/* <1af67d> ../cstrike/dlls/util.cpp:1515 */
/* linkage=_Z11UTIL_SparksRK6Vector */
void UTIL_Sparks(Vector &position)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1517
}

/* <1af583> ../cstrike/dlls/util.cpp:1477 */
/* linkage=_Z22UTIL_GunshotDecalTraceP11TraceResultibP9entvars_s */
void UTIL_GunshotDecalTrace(TraceResult *pTrace, int decalNumber, bool ClientOnly, entvars_t *pShooter)
{
//	{
//		int index;                                            //  1482
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1503
//		ENTINDEX(edict_t *pEdict);  //  1508
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1492
//	}
}

/* <1af4c8> ../cstrike/dlls/util.cpp:1447 */
/* linkage=_Z21UTIL_PlayerDecalTraceP11TraceResultiii */
void UTIL_PlayerDecalTrace(TraceResult *pTrace, int playernum, int decalNumber, BOOL bIsCustom)
{
//	{
//		int index;                                            //  1449
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1466
//		ENTINDEX(edict_t *pEdict);  //  1472
//	}
}

/* <1af471> ../cstrike/dlls/util.cpp:1368 */
/* linkage=_Z20UTIL_BloodDecalTraceP11TraceResulti */
void UTIL_BloodDecalTrace(TraceResult *pTrace, int bloodColor)
{
//	UTIL_ShouldShowBlood(int color);  //  1370
}

/* <1af349> ../cstrike/dlls/util.cpp:1380 */
/* linkage=_Z15UTIL_DecalTraceP11TraceResulti */
void UTIL_DecalTrace(TraceResult *pTrace, int decalNumber)
{
//	{
//		short int entityIndex;                                //  1382
//		int index;                                            //  1383
//		int message;                                          //  1384
//		{
//			class CBaseEntity *pEntity;                  //  1400
//			Instance(edict_t *pent);  //  1400
//			ENTINDEX(edict_t *pEdict);  //  1403
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1427
//	}
}

/* <1af310> ../cstrike/dlls/util.cpp:1356 */
/* linkage=_Z22UTIL_RandomBloodVectorv */
Vector UTIL_RandomBloodVector(void)
{
//	{
//		Vector direction;                               //  1358
//	}
}

/* <1af25d> ../cstrike/dlls/util.cpp:1324 */
/* linkage=_Z15UTIL_BloodDripsRK6VectorS1_ii */
void UTIL_BloodDrips(Vector &origin, Vector &direction, int color, int amount)
{
//	UTIL_ShouldShowBlood(int color);  //  1326
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1344
}

/* <1af1a3> ../cstrike/dlls/util.cpp:1302 */
/* linkage=_Z16UTIL_BloodStreamRK6VectorS1_ii */
void UTIL_BloodStream(Vector &origin, Vector &direction, int color, int amount)
{
//	UTIL_ShouldShowBlood(int color);  //  1304
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1311
}

/* <1af149> ../cstrike/dlls/util.cpp:1279 */
BOOL UTIL_ShouldShowBlood(int color)
{
}

/* <1af041> ../cstrike/dlls/util.cpp:1259 */
/* linkage=_Z22UTIL_IsMasterTriggeredjP11CBaseEntity */
int UTIL_IsMasterTriggered(string_t sMaster, CBaseEntity *pActivator)
{
//	{
//		edict_t *pentTarget;                                 //  1263
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1263
//		FNullEnt(const edict_t *pent);  //  1265
//		{
//			class CBaseEntity *pMaster;                  //  1267
//			Instance(edict_t *pent);  //  1267
//		}
//	}
}

/* <1aefea> ../cstrike/dlls/util.cpp:1252 */
/* linkage=_Z17UTIL_GetAimVectorP7edict_sf */
Vector UTIL_GetAimVector(edict_t *pent, float flSpeed)
{
//	{
//		Vector tmp;                                     //  1254
//	}
}

/* <1aef78> ../cstrike/dlls/util.cpp:1240 */
/* linkage=_Z12UTIL_VarArgsPcz */
char *UTIL_VarArgs(char *format, ...)
{
//	{
//		va_list argptr;                                       //  1242
//		char string;                                          //  1243
//	}
}

/* <1aef1c> ../cstrike/dlls/util.cpp:1230 */
/* linkage=_Z19UTIL_SplineFractionff */
float UTIL_SplineFraction(float value, float scale)
{
//	{
//		float valueSquared;                                   //  1233
//	}
}

/* <1aeec5> ../cstrike/dlls/util.cpp:1217 */
/* linkage=_Z18UTIL_AngleDistanceff */
float UTIL_AngleDistance(float next, float cur)
{
//	{
//		float delta;                                          //  1219
//	}
}

/* <1aedeb> ../cstrike/dlls/util.cpp:1190 */
/* linkage=_Z18UTIL_ApproachAnglefff */
float UTIL_ApproachAngle(float target, float value, float speed)
{
//	{
//		float delta;                                          //  1195
//		UTIL_AngleMod(float a);  //  1192
//		UTIL_AngleMod(float a);  //  1193
//	}
}

/* <1aed84> ../cstrike/dlls/util.cpp:1175 */
/* linkage=_Z13UTIL_Approachfff */
float UTIL_Approach(float target, float value, float speed)
{
//	{
//		float delta;                                          //  1177
//	}
}

/* <1aed1f> ../cstrike/dlls/util.cpp:1169 */
/* linkage=_Z19UTIL_ParticleEffectRK6VectorS1_jj */
void UTIL_ParticleEffect(Vector &vecOrigin, Vector &vecDirection, ULONG ulColor, ULONG ulCount)
{
}

/* <1aecc4> ../cstrike/dlls/util.cpp:1162 */
/* linkage=_Z14UTIL_SetOriginP9entvars_sRK6Vector */
void UTIL_SetOrigin(entvars_t *pev, Vector &vecOrigin)
{
//	{
//		edict_t *ent;                                        //  1164
//	}
}

/* <1aec8e> ../cstrike/dlls/util.cpp:1156 */
/* linkage=_Z13UTIL_VecToYawRK6Vector */
float UTIL_VecToYaw(Vector &vec)
{
}

/* <1aec38> ../cstrike/dlls/util.cpp:1150 */
/* linkage=_Z12UTIL_SetSizeP9entvars_sRK6VectorS3_ */
void UTIL_SetSize(entvars_t *pev, Vector &vecMin, Vector &vecMax)
{
}

/* <1aec01> ../cstrike/dlls/util.cpp:1132 */
/* linkage=_Z19UTIL_GetGlobalTracev */
TraceResult UTIL_GetGlobalTrace(void)
{
//	{
//		TraceResult tr;                                       //  1134
//	}
}

/* <1aeb8d> ../cstrike/dlls/util.cpp:1127 */
/* linkage=_Z15UTIL_TraceModelRK6VectorS1_iP7edict_sP11TraceResult */
void UTIL_TraceModel(Vector &vecStart, Vector &vecEnd, int hullNumber, edict_t *pentModel, TraceResult *ptr)
{
}

/* <1aeb0a> ../cstrike/dlls/util.cpp:1122 */
/* linkage=_Z14UTIL_TraceHullRK6VectorS1_15IGNORE_MONSTERSiP7edict_sP11TraceResult */
void UTIL_TraceHull(Vector &vecStart, Vector &vecEnd, IGNORE_MONSTERS igmon, int hullNumber, edict_t *pentIgnore, TraceResult *ptr)
{
}

/* <1ae8ac> ../cstrike/dlls/util.cpp:1095 */
/* linkage=_Z19UTIL_ShowMessageAllPKcb */
void UTIL_ShowMessageAll(const char *pString, bool isHint)
{
//	{
//		int i;                                                //  1097
//		{
//			class CBaseEntity *pPlayer;                  //  1103
//			UTIL_ShowMessage(const char *pString,
//					class CBaseEntity *pEntity,
//					bool isHint);  //  1105
//			UTIL_PlayerByIndex(int playerIndex);  //  1103
//		}
//	}
}

/* <1ae6c6> ../cstrike/dlls/util.cpp:1061 */
/* linkage=_Z20UTIL_ShowMessageArgsPKcP11CBaseEntityP10CUtlVectorIPcEb */
void UTIL_ShowMessageArgs(const char *pString, CBaseEntity *pPlayer, class CUtlVector<char*> *args, bool isHint)
{
//	edict(CBaseEntity *const this);  //  1072
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1072
//	{
//		int i;                                                //  1076
//	}
//	UTIL_ShowMessage(const char *pString,
//			class CBaseEntity *pEntity,
//			bool isHint);  //  1068
}

/* <1ae679> ../cstrike/dlls/util.cpp:1054 */
/* linkage=_Z10UTIL_dtos4i */
char *UTIL_dtos4(int d)
{
//	{
//		char buf;                                             //  1056
//	}
}

/* <1ae62c> ../cstrike/dlls/util.cpp:1047 */
/* linkage=_Z10UTIL_dtos3i */
char *UTIL_dtos3(int d)
{
//	{
//		char buf;                                             //  1049
//	}
}

/* <1ae5df> ../cstrike/dlls/util.cpp:1040 */
/* linkage=_Z10UTIL_dtos2i */
char *UTIL_dtos2(int d)
{
//	{
//		char buf;                                             //  1042
//	}
}

/* <1ae592> ../cstrike/dlls/util.cpp:1033 */
/* linkage=_Z10UTIL_dtos1i */
char *UTIL_dtos1(int d)
{
//	{
//		char buf;                                             //  1035
//	}
}

/* <1ae4e4> ../cstrike/dlls/util.cpp:1024 */
/* linkage=_Z15UTIL_SayTextAllPKcP11CBaseEntity */
void UTIL_SayTextAll(const char *pText, CBaseEntity *pEntity)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1026
//	entindex(CBaseEntity *const this);  //  1027
}

/* <1ae423> ../cstrike/dlls/util.cpp:1013 */
/* linkage=_Z12UTIL_SayTextPKcP11CBaseEntity */
void UTIL_SayText(const char *pText, CBaseEntity *pEntity)
{
//	edict(CBaseEntity *const this);  //  1018
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1018
//	entindex(CBaseEntity *const this);  //  1019
}

/* <1ae370> ../cstrike/dlls/util.cpp:995 */
/* linkage=_Z11ClientPrintP9entvars_siPKcS2_S2_S2_S2_ */
void ClientPrint(entvars_t *client, int msg_dest, const char *msg_name, const char *param1, const char *param2, const char *param3, const char *param4)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   997
}

/* <1ae2ce> ../cstrike/dlls/util.cpp:977 */
/* linkage=_Z19UTIL_ClientPrintAlliPKcS0_S0_S0_S0_ */
void UTIL_ClientPrintAll(int msg_dest, const char *msg_name, const char *param1, const char *param2, const char *param3, const char *param4)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   979
}

/* <1ae1bf> ../cstrike/dlls/util.cpp:963 */
/* linkage=_Z18UTIL_HudMessageAllRK14hudtextparms_sPKc */
void UTIL_HudMessageAll(const hudtextparms_t &textparms, const char *pMessage)
{
//	{
//		int i;                                                //   965
//		{
//			class CBaseEntity *pPlayer;                  //   969
//			UTIL_PlayerByIndex(int playerIndex);  //   969
//		}
//	}
}

/* <1adfa3> ../cstrike/dlls/util.cpp:915 */
/* linkage=_Z15UTIL_HudMessageP11CBaseEntityRK14hudtextparms_sPKc */
void UTIL_HudMessage(CBaseEntity *pEntity, const hudtextparms_t &textparms, const char *pMessage)
{
//	edict(CBaseEntity *const this);  //   920
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   920
//	FixedSigned16(float value,
//			float scale);  //   924
//	FixedSigned16(float value,
//			float scale);  //   925
//	FixedUnsigned16(float value,
//			float scale);  //   938
//	FixedUnsigned16(float value,
//			float scale);  //   939
//	FixedUnsigned16(float value,
//			float scale);  //   940
//	{
//		char tmp;                                             //   951
//	}
//	FixedUnsigned16(float value,
//			float scale);  //   943
}

/* <1ade39> ../cstrike/dlls/util.cpp:906 */
/* linkage=_Z15UTIL_ScreenFadeP11CBaseEntityRK6Vectorffii */
void UTIL_ScreenFade(CBaseEntity *pEntity, Vector &color, float fadeTime, float fadeHold, int alpha, int flags)
{
//	{
//		ScreenFade fade;                                      //   908
//		UTIL_ScreenFadeBuild(ScreenFade &fade,
//					const Vector &color,
//					float fadeTime,
//					float fadeHold,
//					int alpha,
//					int flags);  //   910
//		UTIL_ScreenFadeWrite(const ScreenFade &fade,
//					class CBaseEntity *pEntity);  //   911
//	}
}

/* <1adc11> ../cstrike/dlls/util.cpp:889 */
/* linkage=_Z18UTIL_ScreenFadeAllRK6Vectorffii */
void UTIL_ScreenFadeAll(Vector &color, float fadeTime, float fadeHold, int alpha, int flags)
{
//	{
//		int i;                                                //   891
//		ScreenFade fade;                                      //   892
//		UTIL_ScreenFadeBuild(ScreenFade &fade,
//					const Vector &color,
//					float fadeTime,
//					float fadeHold,
//					int alpha,
//					int flags);  //   895
//		{
//			class CBaseEntity *pPlayer;                  //   899
//			UTIL_PlayerByIndex(int playerIndex);  //   899
//			UTIL_ScreenFadeWrite(const ScreenFade &fade,
//						class CBaseEntity *pEntity);  //   901
//		}
//	}
}

/* <1ad88a> ../cstrike/dlls/util.cpp:852 */
/* linkage=_Z19UTIL_ScreenShakeAllRK6Vectorfff */
void UTIL_ScreenShakeAll(Vector &center, float amplitude, float frequency, float duration)
{
//	UTIL_ScreenShake(Vector &center,
//			float amplitude,
//			float frequency,
//			float duration,
//			float radius);  //   854
}

/* <1ad53b> ../cstrike/dlls/util.cpp:758 */
/* linkage=_Z21UTIL_EmitAmbientSoundP7edict_sRK6VectorPKcffii */
void UTIL_EmitAmbientSound(edict_t *entity, Vector &vecOrigin, const char *samp, float vol, float attenuation, int fFlags, int pitch)
{
//	{
//		float rgfl;                                           //   760
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //   761
//		{
//			char name;                                    //   765
//		}
//	}
}

/* <1ad4b2> ../cstrike/dlls/util.cpp:745 */
/* linkage=_Z19UTIL_MakeInvVectorsRK6VectorP12globalvars_t */
void UTIL_MakeInvVectors(Vector &vec, globalvars_t *pgv)
{
//	{
//		float tmp;                                            //   749
//		operator*(const Vector *const this,
//				float fl);  //   750
//	}
}

/* <1ad442> ../cstrike/dlls/util.cpp:734 */
/* linkage=_Z19UTIL_MakeAimVectorsRK6Vector */
void UTIL_MakeAimVectors(Vector &vecAngles)
{
//	{
//		float rgflVec;                                        //   736
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //   737
//	}
}

/* <1ad347> ../cstrike/dlls/util.cpp:711 */
CBaseEntity *UTIL_PlayerByIndex(int playerIndex)
{
//	{
//		class CBaseEntity *pPlayer;                          //   713
//		{
//			edict_t *pPlayerEdict;                       //   717
//		}
//	}
}

/* <1ad209> ../cstrike/dlls/util.cpp:684 */
/* linkage=_Z22UTIL_FindEntityGenericPKcR6Vectorf */
CBaseEntity *UTIL_FindEntityGeneric(const char *szWhatever, Vector &vecSrc, float flRadius)
{
//	{
//		class CBaseEntity *pEntity;                          //   686
//		class CBaseEntity *pSearch;                          //   692
//		float flMaxDist2;                                     //   693
//		UTIL_FindEntityByTargetname(CBaseEntity *pStartEntity,
//						const char *szName);  //   688
//		UTIL_FindEntityByClassname(CBaseEntity *pStartEntity,
//						const char *szName);  //   694
//		{
//			float flDist2;                                //   696
//			operator-(const Vector *const this,
//					const Vector &v);  //   696
//			Length(const Vector *const this);  //   696
//		}
//	}
}

/* <1ad192> ../cstrike/dlls/util.cpp:673 */
CBaseEntity *UTIL_FindEntityByClassname(CBaseEntity *pStartEntity, const char *szName)
{
}

/* <1acfbb> ../cstrike/dlls/util.cpp:552 */
/* linkage=_Z23UTIL_FindEntityByStringP11CBaseEntityPKcS2_ */
CBaseEntity *UTIL_FindEntityByString(CBaseEntity *pStartEntity, const char *szKeyword, const char *szValue)
{
//	{
//		edict_t *pentEntity;                                 //   554
//		int startEntityIndex;                                 //   555
//		edict(CBaseEntity *const this);  //   559
//		ENTINDEX(edict_t *pEdict);  //   563
//		{
//			int hash;                                     //   602
//			class hash_item_t *item;                     //   603
//			int count;                                    //   604
//			operator[](CUtlVector<hash_item_t> *const this,
//					int i);  //   605
//			operator[](CUtlVector<hash_item_t> *const this,
//					int i);  //   613
//		}
//		FNullEnt(const edict_t *pent);  //   668
//		Instance(edict_t *pent);  //   669
//	}
}

/* <1acec6> ../cstrike/dlls/util.cpp:535 */
/* linkage=_Z27UTIL_FindEntityByString_OldP11CBaseEntityPKcS2_ */
CBaseEntity *UTIL_FindEntityByString_Old(CBaseEntity *pStartEntity, const char *szKeyword, const char *szValue)
{
//	{
//		edict_t *pentEntity;                                 //   537
//		edict(CBaseEntity *const this);  //   540
//		FNullEnt(const edict_t *pent);  //   546
//		Instance(edict_t *pent);  //   547
//	}
}

/* <1acdcc> ../cstrike/dlls/util.cpp:505 */
/* linkage=_Z23UTIL_FindEntityInSphereP11CBaseEntityRK6Vectorf */
CBaseEntity *UTIL_FindEntityInSphere(CBaseEntity *pStartEntity, Vector &vecCenter, float flRadius)
{
//	{
//		edict_t *pentEntity;                                 //   507
//		edict(CBaseEntity *const this);  //   510
//		FNullEnt(const edict_t *pent);  //   516
//		Instance(edict_t *pent);  //   517
//	}
}

/* <1acca2> ../cstrike/dlls/util.cpp:443 */
/* linkage=_Z21UTIL_MonstersInSpherePP11CBaseEntityiRK6Vectorf */
int UTIL_MonstersInSphere(CBaseEntity ** pList, int listMax, Vector &center, float radius)
{
//	{
//		edict_t *pEdict;                                     //   445
//		class CBaseEntity *pEntity;                          //   446
//		int count;                                            //   447
//		float distance;                                       //   448
//		float delta;                                          //   448
//		float radiusSquared;                                  //   451
//		{
//			int i;                                        //   456
//			Instance(edict_t *pent);  //   489
//		}
//	}
}

/* <1acb92> ../cstrike/dlls/util.cpp:401 */
/* linkage=_Z18UTIL_EntitiesInBoxPP11CBaseEntityiRK6VectorS4_i */
int UTIL_EntitiesInBox(CBaseEntity ** pList, int listMax, Vector &mins, Vector &maxs, int flagMask)
{
//	{
//		edict_t *pEdict;                                     //   403
//		class CBaseEntity *pEntity;                          //   404
//		int count;                                            //   405
//		{
//			int i;                                        //   412
//			Instance(edict_t *pent);  //   428
//		}
//	}
}

/* <1acaf6> ../cstrike/dlls/util.cpp:392 */
/* linkage=_Z17UTIL_MoveToOriginP7edict_sRK6Vectorfi */
void UTIL_MoveToOrigin(edict_t *pent, Vector &vecGoal, float flDist, int iMoveType)
{
//	{
//		float rgfl;                                           //   394
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //   395
//	}
}

/* <1aca77> ../cstrike/dlls/util.cpp:384 */
/* linkage=_Z16UTIL_VecToAnglesRK6Vector */
Vector UTIL_VecToAngles(Vector &vec)
{
//	{
//		float rgflVecOut;                                     //   386
//		Vector(Vector *const this,
//			float *rgfl);  //   388
//	}
}

/* <1aca1d> ../cstrike/dlls/util.cpp:366 */
/* linkage=_Z14UTIL_AngleDiffff */
float UTIL_AngleDiff(float destAngle, float srcAngle)
{
//	{
//		float delta;                                          //   368
//	}
}

/* <1ac985> ../cstrike/dlls/util.cpp:345 */
/* linkage=_Z22UTIL_GetNextBestWeaponP11CBasePlayerP15CBasePlayerItem */
BOOL UTIL_GetNextBestWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pCurrentWeapon)
{
}

/* <1ac963> ../cstrike/dlls/util.cpp:188 */
void UTIL_GroupTrace::~UTIL_GroupTrace(void)
{
}

/* <1ac90c> ../cstrike/dlls/util.cpp:177 */
void UTIL_GroupTrace::UTIL_GroupTrace(int groupmask, int op)
{
}

/* <1ac8bf> ../cstrike/dlls/util.cpp:168 */
/* linkage=_Z20UTIL_UnsetGroupTracev */
void UTIL_UnsetGroupTrace(void)
{
}

/* <1ac888> ../cstrike/dlls/util.cpp:160 */
/* linkage=_Z18UTIL_SetGroupTraceii */
void UTIL_SetGroupTrace(int groupmask, int op)
{
}

/* <1ac6a9> ../cstrike/dlls/util.cpp:136 */
/* linkage=_Z21UTIL_ParametricRocketP9entvars_s6VectorS1_P7edict_s */
void UTIL_ParametricRocket(entvars_t *pev, Vector vecOrigin, Vector vecAngles, edict_t *owner)
{
//	{
//		TraceResult tr;                                       //   140
//		Vector vecTravel;                               //   146
//		float travelTime;                                     //   147
//		UTIL_MakeVectors(Vector &vecAngles);  //   141
//		operator*(const Vector *const this,
//				float fl);  //   142
//		operator+(const Vector *const this,
//				const Vector &v);  //   142
//		UTIL_TraceLine(Vector &vecStart,
//				const Vector &vecEnd,
//				IGNORE_MONSTERS igmon,
//				edict_t *pentIgnore,
//				TraceResult *ptr);  //   142
//		operator-(const Vector *const this,
//				const Vector &v);  //   146
//		Length(const Vector *const this);  //   148
//		Length(const Vector *const this);  //   150
//		Length(const Vector *const this);  //   150
//	}
}

/* <1ac690> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1ac5b5> ../cstrike/dlls/util.cpp:108 */
/* linkage=_Z22UTIL_SharedRandomFloatjff */
float UTIL_SharedRandomFloat(unsigned int seed, float low, float high)
{
//	{
//		unsigned int range;                                   //   111
//		U_Srand(unsigned int seed);  //   113
//		U_Random(void);  //   115
//		U_Random(void);  //   116
//		{
//			int tensixrand;                               //   125
//			float offset;                                 //   126
//			U_Random(void);  //   128
//		}
//	}
}

/* <1ac4f8> ../cstrike/dlls/util.cpp:78 */
/* linkage=_Z21UTIL_SharedRandomLongjii */
int UTIL_SharedRandomLong(unsigned int seed, int low, int high)
{
//	{
//		unsigned int range;                                   //    81
//		U_Srand(unsigned int seed);  //    83
//		{
//			int offset;                                   //    92
//			int rnum;                                     //    93
//			U_Random(void);  //    95
//		}
//	}
}

/* <1ac4be> ../cstrike/dlls/util.cpp:59 */
unsigned int U_Random(void)
{
}

/* <1ac408> ../cstrike/dlls/util.cpp:678 */
CBaseEntity *UTIL_FindEntityByTargetname(CBaseEntity *pStartEntity, const char *szName)
{
}

/* <1ac3a1> ../cstrike/dlls/util.cpp:858 */
void UTIL_ScreenFadeBuild(ScreenFade &fade, Vector &color, float fadeTime, float fadeHold, int alpha, int flags)
{
}

/* <1ac13b> ../cstrike/dlls/util.cpp:806 */
void UTIL_ScreenShake(Vector &center, float amplitude, float frequency, float duration, float radius)
{
//	{
//		int i;                                                //   808
//		float localAmplitude;                                 //   809
//		ScreenShake shake;                                    //   810
//		{
//			class CBaseEntity *pPlayer;                  //   817
//			{
//				Vector delta;                   //   828
//				float distance;                       //   829
//			}
//		}
//	}
}

/* <1ac052> ../public/UtlVector.h:180 */
inline void CUtlVector<char*>::operator[]( int i)
{
}

/* <1ac02b> ../public/UtlMemory.h:152 */
inline void CUtlMemory<char*>::operator[]( int i)
{
}

/* <1ac004> ../public/UtlVector.h:180 */
inline void CUtlVector<hash_item_t>::operator[]( int i)
{
}

/* <1abfdd> ../public/UtlMemory.h:152 */
inline void CUtlMemory<hash_item_t>::operator[]( int i)
{
}

/* <1abfbf> ../public/UtlVector.h:235 */
inline void CUtlVector<char*>::Count(void)
{
}

/* <1abfa1> ../public/UtlVector.h:235 */
inline void CUtlVector<hash_item_t>::Count(void)
{
}

/* <1abdfb> ../cstrike/dlls/util.cpp:1950 */
unsigned int _rotr(unsigned int val, int shift)
{
//	{
//		unsigned int lobit;                                   //  1951
//		unsigned int num;                                     //  1952
//	}
}

/* <1abd96> ../cstrike/dlls/vector.h:35 */
inline void Normalize(const class Vector2D *const this)
{
//	{
//		class Vector2D vec2;                                  //    37
//		float flLen;                                          //    39
//	}
}

/* <1abd7f> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <1abd3e> ../cstrike/dlls/util.cpp:1297 */
int UTIL_PointContents(Vector &vec)
{
}

/* <1abd18> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <1abc99> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <1abc44> ../cstrike/dlls/util.cpp:1116 */
void UTIL_TraceLine(Vector &vecStart, Vector &vecEnd, IGNORE_MONSTERS igmon, edict_t *pentIgnore, TraceResult *ptr)
{
}

/* <1abc11> ../cstrike/dlls/util.cpp:1083 */
void UTIL_ShowMessage(const char *pString, CBaseEntity *pEntity, bool isHint)
{
}

/* <1abb9f> ../cstrike/dlls/util.cpp:786 */
short int FixedSigned16(float value, float scale)
{
//	{
//		int output;                                           //   788
//	}
}

/* <1abb68> ../cstrike/dlls/util.cpp:870 */
void UTIL_ScreenFadeWrite(const ScreenFade &fade, CBaseEntity *pEntity)
{
}

/* <1abaf7> ../cstrike/dlls/util.cpp:773 */
short unsigned int FixedUnsigned16(float value, float scale)
{
//	{
//		int output;                                           //   775
//	}
}

/* <1abad0> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1abab0> ../cstrike/dlls/util.cpp:728 */
void UTIL_MakeVectors(Vector &vecAngles)
{
}

/* <1aba8a> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <1aba63> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1aba05> ../cstrike/dlls/vector.h:117 */
inline void Vector::CopyToArray(float *rgfl)
{
}

/* <1ab9e1> ../cstrike/dlls/vector.h:105 */
inline void Vector::Vector( float *rgfl)
{
}

/* <1ab9c8> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <1ab9ab> ../cstrike/dlls/util.cpp:352 */
float UTIL_AngleMod(float a)
{
}

/* <1ab992> ../cstrike/dlls/util.cpp:67 */
void U_Srand(unsigned int seed)
{
}

/* <1ab979> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <1ab95b> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1ab90c> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1ab8c2> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1ab887> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1ab862> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <1ab7d3> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1ab7b5> ../cstrike/dlls/saverestore.h:94 */
inline void CRestore::Empty(void)
{
}

/* <1ab72d> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <1ab6f9> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1ab6cd> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1ab6ad> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1ab68f> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1ab664> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <1ab646> ../cstrike/dlls/vector.h:32 */
inline void Length(const class Vector2D *const this)
{
}

/* <1ab628> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <1ab600> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <1a5df2> ../cstrike/dlls/triggers.cpp:883 */
void CTriggerHurt::RadiationThink(void)
{
//	{
//		edict_t *pentPlayer;                                 //   886
//		class CBasePlayer *pPlayer;                          //   887
//		float flRange;                                        //   888
//		entvars_t *pevTarget;                                //   889
//		Vector vecSpot1;                                //   890
//		Vector vecSpot2;                                //   891
//		Vector vecRange;                                //   892
//		Vector origin;                                  //   893
//		Vector view_ofs;                                //   894
//		operator+(const Vector *const this,
//				const Vector &v);  //   903
//		operator*(const Vector *const this,
//				float fl);  //   903
//		operator*(const Vector *const this,
//				float fl);  //   904
//		edict(CBaseEntity *const this);  //   906
//		FNullEnt(const edict_t *pent);  //   913
//		VARS(edict_t *pent);  //   916
//		operator+(const Vector *const this,
//				const Vector &v);  //   922
//		operator*(const Vector *const this,
//				float fl);  //   922
//		operator+(const Vector *const this,
//				const Vector &v);  //   923
//		operator*(const Vector *const this,
//				float fl);  //   923
//		operator-(const Vector *const this,
//				const Vector &v);  //   925
//		Length(const Vector *const this);  //   926
//	}
}

/* <1a5ba9> ../cstrike/dlls/triggers.cpp:2744 */
void env_fog(entvars_t *pev)
{
//	GetClassPtr<CClientFog>(CClientFog *a);  //  2744
}

/* <1a5b85> ../cstrike/dlls/triggers.cpp:2710 */
void CClientFog::CClientFog(void)
{
}

/* <1a5aa9> ../cstrike/dlls/triggers.cpp:2702 */
void func_rain(entvars_t *pev)
{
//	GetClassPtr<CWeather>(CWeather *a);  //  2702
}

/* <1a59cd> ../cstrike/dlls/triggers.cpp:2701 */
void env_rain(entvars_t *pev)
{
//	GetClassPtr<CWeather>(CWeather *a);  //  2701
}

/* <1a58f1> ../cstrike/dlls/triggers.cpp:2700 */
void func_snow(entvars_t *pev)
{
//	GetClassPtr<CWeather>(CWeather *a);  //  2700
}

/* <1a5815> ../cstrike/dlls/triggers.cpp:2699 */
void env_snow(entvars_t *pev)
{
//	GetClassPtr<CWeather>(CWeather *a);  //  2699
}

/* <1a57df> ../cstrike/dlls/cbase.h:800 */
CWeather *GetClassPtr<CWeather>(CWeather *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1a55e4> ../cstrike/dlls/triggers.cpp:2490 */
void CTriggerCamera::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CTriggerCamera *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  2490
}

/* <1a5494> ../cstrike/dlls/triggers.cpp:2587 */
void CTriggerCamera::FollowTarget(void)
{
//	{
//		Vector vecGoal;                                 //  2606
//		float dx;                                             //  2615
//		float dy;                                             //  2616
//	}
//	FollowTarget(CTriggerCamera *const this);  //  2587
}

/* <1a5311> ../cstrike/dlls/triggers.cpp:2644 */
void CTriggerCamera::Move(void)
{
//	{
//		float fraction;                                       //  2688
//		{
//			Vector delta;                           //  2676
//			operator-(const Vector *const this,
//					const Vector &v);  //  2676
//			Length(const Vector *const this);  //  2677
//			Normalize(const Vector *const this);  //  2678
//		}
//		operator*(const Vector *const this,
//				float fl);  //  2689
//		operator*(const Vector *const this,
//				float fl);  //  2689
//		operator*(const Vector *const this,
//				float fl);  //  2689
//		operator+(const Vector *const this,
//				const Vector &v);  //  2689
//	}
}

/* <1a5235> ../cstrike/dlls/triggers.cpp:2425 */
void trigger_camera(entvars_t *pev)
{
//	GetClassPtr<CTriggerCamera>(CTriggerCamera *a);  //  2425
}

/* <1a5159> ../cstrike/dlls/triggers.cpp:2351 */
void trigger_changetarget(entvars_t *pev)
{
//	GetClassPtr<CTriggerChangeTarget>(CTriggerChangeTarget *a);  //  2351
}

/* <1a507d> ../cstrike/dlls/triggers.cpp:2311 */
void trigger_gravity(entvars_t *pev)
{
//	GetClassPtr<CTriggerGravity>(CTriggerGravity *a);  //  2311
}

/* <1a4fa1> ../cstrike/dlls/triggers.cpp:2242 */
void trigger_endsection(entvars_t *pev)
{
//	GetClassPtr<CTriggerEndSection>(CTriggerEndSection *a);  //  2242
}

/* <1a4ec5> ../cstrike/dlls/triggers.cpp:2204 */
void trigger_autosave(entvars_t *pev)
{
//	GetClassPtr<CTriggerSave>(CTriggerSave *a);  //  2204
}

/* <1a4de9> ../cstrike/dlls/triggers.cpp:2163 */
void func_vip_safetyzone(entvars_t *pev)
{
//	GetClassPtr<CVIP_SafetyZone>(CVIP_SafetyZone *a);  //  2163
}

/* <1a4d0d> ../cstrike/dlls/triggers.cpp:2105 */
void func_escapezone(entvars_t *pev)
{
//	GetClassPtr<CEscapeZone>(CEscapeZone *a);  //  2105
}

/* <1a4c31> ../cstrike/dlls/triggers.cpp:2064 */
void func_hostage_rescue(entvars_t *pev)
{
//	GetClassPtr<CHostageRescue>(CHostageRescue *a);  //  2064
}

/* <1a4b55> ../cstrike/dlls/triggers.cpp:2016 */
void func_bomb_target(entvars_t *pev)
{
//	GetClassPtr<CBombTarget>(CBombTarget *a);  //  2016
}

/* <1a4a79> ../cstrike/dlls/triggers.cpp:1970 */
void func_buyzone(entvars_t *pev)
{
//	GetClassPtr<CBuyZone>(CBuyZone *a);  //  1970
}

/* <1a499d> ../cstrike/dlls/triggers.cpp:1950 */
void info_teleport_destination(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //  1950
}

/* <1a48c1> ../cstrike/dlls/triggers.cpp:1940 */
void trigger_teleport(entvars_t *pev)
{
//	GetClassPtr<CTriggerTeleport>(CTriggerTeleport *a);  //  1940
}

/* <1a47e5> ../cstrike/dlls/triggers.cpp:1804 */
void trigger_push(entvars_t *pev)
{
//	GetClassPtr<CTriggerPush>(CTriggerPush *a);  //  1804
}

/* <1a4709> ../cstrike/dlls/triggers.cpp:1760 */
void func_ladder(entvars_t *pev)
{
//	GetClassPtr<CLadder>(CLadder *a);  //  1760
}

/* <1a44fc> ../cstrike/dlls/triggers.cpp:1722 */
/* linkage=_Z9NextLevelv */
void NextLevel(void)
{
//	{
//		edict_t *pent;                                       //  1724
//		class CChangeLevel *pChange;                         //  1725
//		FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//					const char *pszName);  //  1728
//		FNullEnt(const edict_t *pent);  //  1731
//		GetClassPtr<CChangeLevel>(CChangeLevel *a);  //  1738
//		VARS(edict_t *pent);  //  1738
//		GetClassPtr<CChangeLevel>(CChangeLevel *a);  //  1734
//	}
}

/* <1a44ba> ../cstrike/dlls/triggers.cpp:1576 */
/* linkage=_Z15BuildChangeListP9LEVELLISTi */
int BuildChangeList(LEVELLIST *pLevelList, int maxList)
{
}

/* <1a40b1> ../cstrike/dlls/triggers.cpp:1625 */
void ChangeList(LEVELLIST *pLevelList, int maxList)
{
//	{
//		edict_t *pentChangelevel;                            //  1627
//		edict_t *pentLandmark;                               //  1627
//		int i;                                                //  1628
//		int count;                                            //  1628
//		FNullEnt(const edict_t *pent);  //  1634
//		FNullEnt(const edict_t *pent);  //  1636
//		{
//			class CSave saveHelper;                       //  1661
//			CSave(CSave *const this,
//				SAVERESTOREDATA *pdata);  //  1661
//			{
//				int j;                                //  1665
//				int entityCount;                      //  1665
//				class CBaseEntity *pEntList;         //  1666
//				int entityFlags;                      //  1667
//				edict_t *pent;                       //  1670
//				FNullEnt(const edict_t *pent);  //  1673
//				{
//					int index;                    //  1707
//				}
//				InTransitionVolume(CBaseEntity *pEntity,
//							char *pVolumeName);  //  1704
//				{
//					class CBaseEntity *pEntity;  //  1675
//					Instance(edict_t *pent);  //  1675
//					{
//						int caps;             //  1678
//						{
//							int flags;    //  1681
//						}
//					}
//				}
//			}
//			~CSave(CSave *const this,
//				int const __in_chrg);  //  1661
//		}
//		{
//			class CChangeLevel *pTrigger;                //  1638
//			VARS(edict_t *pent);  //  1640
//			GetClassPtr<CChangeLevel>(CChangeLevel *a);  //  1640
//		}
//	}
}

/* <1a4075> ../cstrike/dlls/triggers.cpp:1582 */
void InTransitionVolume(CBaseEntity *pEntity, char *pVolumeName)
{
//	{
//		edict_t *pentVolume;                                 //  1584
//		int inVolume;                                         //  1597
//	}
}

/* <1a3ff8> ../cstrike/dlls/triggers.cpp:1556 */
void AddTransitionToList(LEVELLIST *pLevelList, int listCount, const char *pMapName, const char *pLandmarkName, edict_t *pentLandmark)
{
//	{
//		int i;                                                //  1558
//	}
}

/* <1a3fb2> ../cstrike/dlls/triggers.cpp:1484 */
void CChangeLevel::ChangeLevelNow(CBaseEntity *pActivator)
{
//	{
//		edict_t *pentLandmark;                               //  1486
//		LEVELLIST levels;                                     //  1487
//		class CBaseEntity *pPlayer;                          //  1502
//	}
}

/* <1a3ef5> ../cstrike/dlls/triggers.cpp:1545 */
void CChangeLevel::TouchChangeLevel(CBaseEntity *pOther)
{
//	FClassnameIs(entvars_t *pev,
//			const char *szClassname);  //  1547
//	ChangeLevelNow(CChangeLevel *const this,
//			class CBaseEntity *pActivator);  //  1550
}

/* <1a3e4f> ../cstrike/dlls/triggers.cpp:1479 */
void CChangeLevel::UseChangeLevel(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	ChangeLevelNow(CChangeLevel *const this,
//			class CBaseEntity *pActivator);  //  1481
}

/* <1a3c4c> ../cstrike/dlls/triggers.cpp:1484 */
void CChangeLevel::ChangeLevelNow(CBaseEntity *pActivator)
{
//	{
//		edict_t *pentLandmark;                               //  1486
//		LEVELLIST levels;                                     //  1487
//		class CBaseEntity *pPlayer;                          //  1502
//		Instance(edict_t *pent);  //  1502
//		InTransitionVolume(CBaseEntity *pEntity,
//					char *pVolumeName);  //  1503
//		{
//			class CFireAndDie *pFireAndDie;              //  1512
//			GetClassPtr<CFireAndDie>(CFireAndDie *a);  //  1512
//			edict(CBaseEntity *const this);  //  1520
//		}
//		FNullEnt(const edict_t *pent);  //  1532
//	}
}

/* <1a3b43> ../cstrike/dlls/triggers.cpp:1456 */
void FindLandmark(const char *pLandmarkName)
{
//	{
//		edict_t *pentLandmark;                               //  1458
//		FNullEnt(const edict_t *pent);  //  1461
//		FClassnameIs(edict_t *pent,
//				const char *szClassname);  //  1464
//	}
//	FindLandmark(const char *pLandmarkName);  //  1456
}

/* <1a3a67> ../cstrike/dlls/triggers.cpp:1371 */
void trigger_changelevel(entvars_t *pev)
{
//	GetClassPtr<CChangeLevel>(CChangeLevel *a);  //  1371
}

/* <1a3a31> ../cstrike/dlls/cbase.h:800 */
CChangeLevel *GetClassPtr<CChangeLevel>(CChangeLevel *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1a3955> ../cstrike/dlls/triggers.cpp:1321 */
void fireanddie(entvars_t *pev)
{
//	GetClassPtr<CFireAndDie>(CFireAndDie *a);  //  1321
}

/* <1a391f> ../cstrike/dlls/cbase.h:800 */
CFireAndDie *GetClassPtr<CFireAndDie>(CFireAndDie *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1a3843> ../cstrike/dlls/triggers.cpp:1299 */
void trigger_transition(entvars_t *pev)
{
//	GetClassPtr<CTriggerVolume>(CTriggerVolume *a);  //  1299
}

/* <1a3767> ../cstrike/dlls/triggers.cpp:1278 */
void trigger_counter(entvars_t *pev)
{
//	GetClassPtr<CTriggerCounter>(CTriggerCounter *a);  //  1278
}

/* <1a373a> ../cstrike/dlls/triggers.cpp:1167 */
void CBaseTrigger::ActivateMultiTrigger(CBaseEntity *pActivator)
{
}

/* <1a365e> ../cstrike/dlls/triggers.cpp:1135 */
void trigger_once(entvars_t *pev)
{
//	GetClassPtr<CTriggerOnce>(CTriggerOnce *a);  //  1135
}

/* <1a3582> ../cstrike/dlls/triggers.cpp:1086 */
void trigger_multiple(entvars_t *pev)
{
//	GetClassPtr<CTriggerMultiple>(CTriggerMultiple *a);  //  1086
}

/* <1a34e8> ../cstrike/dlls/triggers.cpp:840 */
void CTargetCDAudio::Play(void)
{
//	PlayCDTrack(int iTrack);  //   842
}

/* <1a340c> ../cstrike/dlls/triggers.cpp:794 */
void target_cdaudio(entvars_t *pev)
{
//	GetClassPtr<CTargetCDAudio>(CTargetCDAudio *a);  //   794
}

/* <1a3372> ../cstrike/dlls/triggers.cpp:773 */
void CTriggerCDAudio::PlayTrack(void)
{
//	PlayCDTrack(int iTrack);  //   775
}

/* <1a3218> ../cstrike/dlls/triggers.cpp:715 */
void trigger_cdaudio(entvars_t *pev)
{
//	GetClassPtr<CTriggerCDAudio>(CTriggerCDAudio *a);  //   715
}

/* <1a313c> ../cstrike/dlls/triggers.cpp:649 */
void trigger_monsterjump(entvars_t *pev)
{
//	GetClassPtr<CTriggerMonsterJump>(CTriggerMonsterJump *a);  //   649
}

/* <1a3060> ../cstrike/dlls/triggers.cpp:636 */
void trigger_hurt(entvars_t *pev)
{
//	GetClassPtr<CTriggerHurt>(CTriggerHurt *a);  //   636
}

/* <1a301c> ../cstrike/dlls/triggers.cpp:1136 */
void CTriggerOnce::Spawn(void)
{
//	Spawn(CTriggerMultiple *const this);  //  1140
}

/* <1a2fdc> ../cstrike/dlls/triggers.cpp:652 */
void CTriggerMonsterJump::Spawn(void)
{
//	Spawn(CTriggerMonsterJump *const this);  //   652
}

/* <1a2fb4> ../cstrike/dlls/triggers.cpp:731 */
void CTriggerCDAudio::Spawn(void)
{
}

/* <1a2f8b> ../cstrike/dlls/triggers.cpp:853 */
void CTriggerHurt::Spawn(void)
{
}

/* <1a2f67> ../cstrike/dlls/triggers.cpp:1089 */
void CTriggerMultiple::Spawn(void)
{
}

/* <1a2f4e> ../cstrike/dlls/triggers.cpp:1089 */
void CTriggerMultiple::Spawn(void)
{
}

/* <1a2f25> ../cstrike/dlls/triggers.cpp:1423 */
void CChangeLevel::Spawn(void)
{
}

/* <1a2eda> ../cstrike/dlls/triggers.cpp:1817 */
void CTriggerPush::Spawn(void)
{
//	operator==(const Vector ::Spawn(//			const Vector &v);  //  1819
}

/* <1a2eb1> ../cstrike/dlls/triggers.cpp:1942 */
void CTriggerTeleport::Spawn(void)
{
}

/* <1a2e71> ../cstrike/dlls/triggers.cpp:1973 */
void CBuyZone::Spawn(void)
{
//	Spawn(CBuyZone *const this);  //  1973
}

/* <1a2e48> ../cstrike/dlls/triggers.cpp:2019 */
void CBombTarget::Spawn(void)
{
}

/* <1a2e1f> ../cstrike/dlls/triggers.cpp:2067 */
void CHostageRescue::Spawn(void)
{
}

/* <1a2df6> ../cstrike/dlls/triggers.cpp:2108 */
void CEscapeZone::Spawn(void)
{
}

/* <1a2dcd> ../cstrike/dlls/triggers.cpp:2166 */
void CVIP_SafetyZone::Spawn(void)
{
}

/* <1a2d8e> ../cstrike/dlls/triggers.cpp:2206 */
void CTriggerSave::Spawn(void)
{
//	Spawn(CTriggerSave *const this);  //  2206
}

/* <1a2d4f> ../cstrike/dlls/triggers.cpp:2260 */
void CTriggerEndSection::Spawn(void)
{
//	Spawn(CTriggerEndSection *const this);  //  2260
}

/* <1a2d26> ../cstrike/dlls/triggers.cpp:2313 */
void CTriggerGravity::Spawn(void)
{
}

/* <1a2cfe> ../cstrike/dlls/triggers.cpp:2704 */
void CWeather::Spawn(void)
{
}

/* <1a2c92> ../cstrike/dlls/triggers.cpp:590 */
void CBaseTrigger::InitTrigger(void)
{
//	operator!=(const Vector ::InitTrigger(//			const Vector &v);  //   594
}

/* <1a2bb6> ../cstrike/dlls/triggers.cpp:583 */
void trigger(entvars_t *pev)
{
//	GetClassPtr<CBaseTrigger>(CBaseTrigger *a);  //   583
}

/* <1a2ada> ../cstrike/dlls/triggers.cpp:532 */
void env_render(entvars_t *pev)
{
//	GetClassPtr<CRenderFxManager>(CRenderFxManager *a);  //   532
}

/* <1a2a24> ../cstrike/dlls/triggers.cpp:475 */
void CMultiManager::ManagerUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	ShouldClone(CMultiManager *const this);  //   479
//	{
//		class CMultiManager *pClone;                         //   481
//	}
}

/* <1a291b> ../cstrike/dlls/triggers.cpp:457 */
void CMultiManager::Clone(void)
{
//	{
//		class CMultiManager *pMulti;                         //   459
//		edict_t *pEdict;                                     //   461
//		GetClassPtr<CMultiManager>(CMultiManager *a);  //   459
//	}
}

/* <1a283f> ../cstrike/dlls/triggers.cpp:304 */
void multi_manager(entvars_t *pev)
{
//	GetClassPtr<CMultiManager>(CMultiManager *a);  //   304
}

/* <1a2809> ../cstrike/dlls/cbase.h:800 */
CMultiManager *GetClassPtr<CMultiManager>(CMultiManager *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1a2730> ../cstrike/dlls/triggers.cpp:207 */
void trigger_relay(entvars_t *pev)
{
//	GetClassPtr<CTriggerRelay>(CTriggerRelay *a);  //   207
}

/* <1a2657> ../cstrike/dlls/triggers.cpp:126 */
void trigger_auto(entvars_t *pev)
{
//	GetClassPtr<CAutoTrigger>(CAutoTrigger *a);  //   126
}

/* <1a257e> ../cstrike/dlls/triggers.cpp:60 */
void func_friction(entvars_t *pev)
{
//	GetClassPtr<CFrictionModifier>(CFrictionModifier *a);  //    60
}

/* <1a2465> ../cstrike/dlls/triggers.cpp:822 */
void CTargetCDAudio::Think(void)
{
//	{
//		edict_t *pClient;                                    //   824
//		operator-(const Vector *const this,
//				const Vector &v);  //   835
//		Length(const Vector *const this);  //   835
//		Play(CTargetCDAudio *const this);  //   836
//	}
}

/* <1a244c> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1a2382> ../cstrike/dlls/triggers.cpp:721 */
void CTriggerCDAudio::Touch(CBaseEntity *pOther)
{
//	PlayTrack(CTriggerCDAudio *const this);  //   728
}

/* <1a2288> ../cstrike/dlls/triggers.cpp:736 */
void CTriggerCDAudio::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	PlayTrack(CTriggerCDAudio *const this);  //   738
}

/* <1a226f> ../cstrike/dlls/triggers.cpp:773 */
void CTriggerCDAudio::PlayTrack(void)
{
}

/* <1a2175> ../cstrike/dlls/triggers.cpp:816 */
void CTargetCDAudio::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Play(CTargetCDAudio *const this);  //   818
}

/* <1a215c> ../cstrike/dlls/triggers.cpp:840 */
void CTargetCDAudio::Play(void)
{
}

/* <1a20a4> ../cstrike/dlls/triggers.cpp:1145 */
void CBaseTrigger::MultiTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //  1147
//		ActivateMultiTrigger(CBaseTrigger *const this,
//					class CBaseEntity *pActivator);  //  1157
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1154
//	}
}

/* <1a1f98> ../cstrike/dlls/triggers.cpp:1231 */
void CBaseTrigger::CounterUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		BOOL fTellActivator;                                  //  1239
//	}
//	CounterUse(CBaseTrigger *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //  1231
}

/* <1a1e8f> ../cstrike/dlls/triggers.cpp:1167 */
void CBaseTrigger::ActivateMultiTrigger(CBaseEntity *pActivator)
{
//	FClassnameIs(entvars_t *pev,
//			const char *szClassname);  //  1175
//	FClassnameIs(edict_t *pent,
//			const char *szClassname);  //  1177
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1183
}

/* <1a1d4a> ../cstrike/dlls/triggers.cpp:1388 */
void CChangeLevel::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1390
//	KeyValue(CChangeLevel *const this,
//		KeyValueData *pkvd);  //  1388
}

/* <1a1cf5> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <1a1c39> ../cstrike/dlls/triggers.cpp:91 */
void CFrictionModifier::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    93
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    99
//	KeyValue(CFrictionModifier *const this,
//		KeyValueData *pkvd);  //    91
}

/* <1a1b64> ../cstrike/dlls/triggers.cpp:136 */
void CAutoTrigger::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   138
//	FStrEq(const char *sz1,
//		const char *sz2);  //   143
//	{
//		int type;                                             //   145
//		atoi(const char *__nptr);  //   145
//	}
//	KeyValue(CAutoTrigger *const this,
//		KeyValueData *pkvd);  //   136
}

/* <1a1abc> ../cstrike/dlls/triggers.cpp:216 */
void CTriggerRelay::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   218
//	KeyValue(CTriggerRelay *const this,
//		KeyValueData *pkvd);  //   216
}

/* <1a19ed> ../cstrike/dlls/triggers.cpp:318 */
void CMultiManager::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   325
//	{
//		char tmp;                                             //   335
//		atof(const char *__nptr);  //   339
//	}
//	KeyValue(CMultiManager *const this,
//		KeyValueData *pkvd);  //   318
}

/* <1a196f> ../cstrike/dlls/triggers.cpp:2291 */
void CTriggerEndSection::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2293
//	KeyValue(CTriggerEndSection *const this,
//		KeyValueData *pkvd);  //  2291
}

/* <1a1937> ../cstrike/dlls/triggers.cpp:1763 */
void CLadder::KeyValue(KeyValueData *pkvd)
{
}

/* <1a18ff> ../cstrike/dlls/triggers.cpp:1807 */
void CTriggerPush::KeyValue(KeyValueData *pkvd)
{
}

/* <1a17cf> ../cstrike/dlls/triggers.cpp:608 */
void CBaseTrigger::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   610
//	FStrEq(const char *sz1,
//		const char *sz2);  //   615
//	KeyValue(CBaseTrigger *const this,
//		KeyValueData *pkvd);  //   608
//	atof(const char *__nptr);  //   612
//	atof(const char *__nptr);  //   617
}

/* <1a170f> ../cstrike/dlls/triggers.cpp:796 */
void CTargetCDAudio::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   798
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   804
//	KeyValue(CTargetCDAudio *const this,
//		KeyValueData *pkvd);  //   796
}

/* <1a1691> ../cstrike/dlls/triggers.cpp:2360 */
void CTriggerChangeTarget::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2362
//	KeyValue(CTriggerChangeTarget *const this,
//		KeyValueData *pkvd);  //  2360
}

/* <1a1537> ../cstrike/dlls/triggers.cpp:2462 */
void CTriggerCamera::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2464
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2469
//	KeyValue(CTriggerCamera *const this,
//		KeyValueData *pkvd);  //  2462
//	atof(const char *__nptr);  //  2466
}

/* <1a1477> ../cstrike/dlls/triggers.cpp:2716 */
void CClientFog::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2718
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  2730
//	KeyValue(CClientFog *const this,
//		KeyValueData *pkvd);  //  2716
}

/* <1a1402> ../cstrike/dlls/triggers.cpp:420 */
void CMultiManager::HasTarget(string_t targetname)
{
//	{
//		int i;                                                //   422
//		FStrEq(const char *sz1,
//			const char *sz2);  //   423
//	}
}

/* <1a122b> ../cstrike/dlls/triggers.cpp:1582 */
void InTransitionVolume(CBaseEntity *pEntity, char *pVolumeName)
{
//	{
//		edict_t *pentVolume;                                 //  1584
//		int inVolume;                                         //  1597
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1599
//		FNullEnt(const edict_t *pent);  //  1600
//		{
//			class CBaseEntity *pVolume;                  //  1602
//			Instance(edict_t *pent);  //  1602
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  1604
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //  1611
//		}
//		Instance(edict_t *pent);  //  1594
//	}
}

/* <1a116b> ../cstrike/dlls/triggers.cpp:1986 */
void CBuyZone::BuyTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  1991
//	}
//	BuyTouch(CBuyZone *const this,
//		class CBaseEntity *pOther);  //  1986
}

/* <1a10c1> ../cstrike/dlls/triggers.cpp:2027 */
void CBombTarget::BombTargetTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2031
//	}
//	BombTargetTouch(CBombTarget *const this,
//			class CBaseEntity *pOther);  //  2027
}

/* <1a0f88> ../cstrike/dlls/triggers.cpp:2115 */
void CEscapeZone::EscapeTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2120
//		Signal(CUnifiedSignals *const this,
//			int flSignal);  //  2147
//	}
//	EscapeTouch(CEscapeZone *const this,
//			class CBaseEntity *pOther);  //  2115
}

/* <1a0ec7> ../cstrike/dlls/triggers.cpp:2173 */
void CVIP_SafetyZone::VIP_SafetyTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2178
//		Signal(CUnifiedSignals *const this,
//			int flSignal);  //  2180
//	}
//	VIP_SafetyTouch(CVIP_SafetyZone *const this,
//			class CBaseEntity *pOther);  //  2173
}

/* <1a0d93> ../cstrike/dlls/triggers.cpp:959 */
void CBaseTrigger::HurtTouch(CBaseEntity *pOther)
{
//	{
//		float fldmg;                                          //   961
//	}
//	HurtTouch(CBaseTrigger *const this,
//			class CBaseEntity *pOther);  //   959
}

/* <1a0c95> ../cstrike/dlls/triggers.cpp:540 */
void CRenderFxManager::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CRenderFxManager *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   540
}

/* <1a0c56> ../cstrike/dlls/triggers.cpp:177 */
void CAutoTrigger::Think(void)
{
//	Think(CAutoTrigger *const this);  //   177
}

/* <1a0c01> ../cstrike/dlls/triggers.cpp:2218 */
void CTriggerSave::SaveTouch(CBaseEntity *pOther)
{
//	SaveTouch(CTriggerSave *const this,
//			class CBaseEntity *pOther);  //  2218
}

/* <1a0b7f> ../cstrike/dlls/triggers.cpp:2245 */
void CTriggerEndSection::EndSectionUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	EndSectionUse(CTriggerEndSection *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //  2245
}

/* <1a0b29> ../cstrike/dlls/triggers.cpp:2276 */
void CTriggerEndSection::EndSectionTouch(CBaseEntity *pOther)
{
//	EndSectionTouch(CTriggerEndSection *const this,
//			class CBaseEntity *pOther);  //  2276
}

/* <1a0ad7> ../cstrike/dlls/triggers.cpp:68 */
void CFrictionModifier::Save(CSave &save)
{
//	Save(CFrictionModifier *const this,
//		class CSave &save);  //    68
}

/* <1a0a85> ../cstrike/dlls/triggers.cpp:134 */
void CAutoTrigger::Save(CSave &save)
{
//	Save(CAutoTrigger *const this,
//		class CSave &save);  //   134
}

/* <1a0a33> ../cstrike/dlls/triggers.cpp:214 */
void CTriggerRelay::Save(CSave &save)
{
//	Save(CTriggerRelay *const this,
//		class CSave &save);  //   214
}

/* <1a09e0> ../cstrike/dlls/triggers.cpp:316 */
void CMultiManager::Save(CSave &save)
{
//	Save(CMultiManager *const this,
//		class CSave &save);  //   316
}

/* <1a098d> ../cstrike/dlls/triggers.cpp:1382 */
void CChangeLevel::Save(CSave &save)
{
//	Save(CChangeLevel *const this,
//		class CSave &save);  //  1382
}

/* <1a093a> ../cstrike/dlls/triggers.cpp:2358 */
void CTriggerChangeTarget::Save(CSave &save)
{
//	Save(CTriggerChangeTarget *const this,
//		class CSave &save);  //  2358
}

/* <1a08e7> ../cstrike/dlls/triggers.cpp:2445 */
void CTriggerCamera::Save(CSave &save)
{
//	Save(CTriggerCamera *const this,
//		class CSave &save);  //  2445
}

/* <1a0895> ../cstrike/dlls/triggers.cpp:68 */
void CFrictionModifier::Restore(CRestore &restore)
{
//	Restore(CFrictionModifier *const this,
//		class CRestore &restore);  //    68
}

/* <1a0843> ../cstrike/dlls/triggers.cpp:134 */
void CAutoTrigger::Restore(CRestore &restore)
{
//	Restore(CAutoTrigger *const this,
//		class CRestore &restore);  //   134
}

/* <1a07f1> ../cstrike/dlls/triggers.cpp:214 */
void CTriggerRelay::Restore(CRestore &restore)
{
//	Restore(CTriggerRelay *const this,
//		class CRestore &restore);  //   214
}

/* <1a079e> ../cstrike/dlls/triggers.cpp:316 */
void CMultiManager::Restore(CRestore &restore)
{
//	Restore(CMultiManager *const this,
//		class CRestore &restore);  //   316
}

/* <1a074b> ../cstrike/dlls/triggers.cpp:1382 */
void CChangeLevel::Restore(CRestore &restore)
{
//	Restore(CChangeLevel *const this,
//		class CRestore &restore);  //  1382
}

/* <1a06f8> ../cstrike/dlls/triggers.cpp:2358 */
void CTriggerChangeTarget::Restore(CRestore &restore)
{
//	Restore(CTriggerChangeTarget *const this,
//		class CRestore &restore);  //  2358
}

/* <1a06a5> ../cstrike/dlls/triggers.cpp:2445 */
void CTriggerCamera::Restore(CRestore &restore)
{
//	Restore(CTriggerCamera *const this,
//		class CRestore &restore);  //  2445
}

/* <1a066a> ../cstrike/dlls/triggers.cpp:807 */
void CTargetCDAudio::Spawn(void)
{
//	Spawn(CTargetCDAudio *const this);  //   807
}

/* <1a0618> ../cstrike/dlls/triggers.cpp:1323 */
void CFireAndDie::Spawn(void)
{
//	MAKE_STRING_CLASS(const char *str,
//				entvars_t *pev);  //  1325
}

/* <1a051f> ../cstrike/dlls/triggers.cpp:1878 */
void CBaseTrigger::TeleportTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //  1880
//		edict_t *pentTarget;                                 //  1881
//		Vector tmp;                                     //  1910
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1906
//		FNullEnt(const edict_t *pent);  //  1907
//		Vector(Vector *const this,
//			const Vector &v);  //  1910
//	}
}

/* <1a03e5> ../cstrike/dlls/triggers.cpp:377 */
void CMultiManager::Restart(void)
{
//	{
//		int i;                                                //   379
//		edict_t *pentTarget;                                 //   380
//		const char *name;                                   //   381
//		{
//			class CBaseEntity *pTarget;                  //   399
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //   395
//			FNullEnt(const edict_t *pent);  //   396
//			Instance(edict_t *pent);  //   399
//		}
//		IsClone(CMultiManager *const this);  //   410
//	}
}

/* <1a0393> ../cstrike/dlls/triggers.cpp:432 */
void CMultiManager::ManagerThink(void)
{
//	{
//		float time;                                           //   434
//		IsClone(CMultiManager *const this);  //   446
//	}
}

/* <1a023c> ../cstrike/dlls/triggers.cpp:1835 */
void CTriggerPush::Touch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //  1837
//		operator*(float fl,
//				const Vector &v);  //  1854
//		operator+(const Vector *const this,
//				const Vector &v);  //  1854
//		{
//			Vector vecPush;                         //  1861
//			operator*(float fl,
//					const Vector &v);  //  1861
//			operator+(const Vector *const this,
//					const Vector &v);  //  1863
//		}
//	}
}

/* <1a01d7> ../cstrike/dlls/triggers.cpp:247 */
void CTriggerRelay::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1a01ae> ../cstrike/dlls/triggers.cpp:1337 */
void CFireAndDie::Think(void)
{
}

/* <1a010d> ../cstrike/dlls/triggers.cpp:2376 */
void CTriggerChangeTarget::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBaseEntity *pTarget;                          //  2378
//		{
//			class CBaseMonster *pMonster;                //  2383
//		}
//	}
}

/* <1a00e4> ../cstrike/dlls/triggers.cpp:671 */
void CTriggerMonsterJump::Think(void)
{
}

/* <1a007c> ../cstrike/dlls/triggers.cpp:942 */
void CBaseTrigger::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1a0014> ../cstrike/dlls/triggers.cpp:2042 */
void CBombTarget::BombTargetUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <19ffbf> ../cstrike/dlls/triggers.cpp:2074 */
void CHostageRescue::HostageRescueTouch(CBaseEntity *pOther)
{
//	Signal(CUnifiedSignals *const this,
//		int flSignal);  //  2078
}

/* <19ff97> ../cstrike/dlls/triggers.cpp:2735 */
void CClientFog::Spawn(void)
{
}

/* <19ff6f> ../cstrike/dlls/triggers.cpp:2447 */
void CTriggerCamera::Spawn(void)
{
}

/* <19ff47> ../cstrike/dlls/triggers.cpp:2402 */
void CTriggerCamera::ObjectCaps(void)
{
}

/* <19ff1f> ../cstrike/dlls/triggers.cpp:2371 */
void CTriggerChangeTarget::Spawn(void)
{
}

/* <19fef7> ../cstrike/dlls/triggers.cpp:2342 */
void CTriggerChangeTarget::ObjectCaps(void)
{
}

/* <19febe> ../cstrike/dlls/triggers.cpp:2319 */
void CTriggerGravity::GravityTouch(CBaseEntity *pOther)
{
}

/* <19fe95> ../cstrike/dlls/triggers.cpp:1786 */
void CLadder::Spawn(void)
{
}

/* <19fe6c> ../cstrike/dlls/triggers.cpp:1772 */
void CLadder::Precache(void)
{
}

/* <19fde3> ../cstrike/dlls/triggers.cpp:1441 */
void CChangeLevel::ExecuteChangeLevel(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1443
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1448
}

/* <19fdbb> ../cstrike/dlls/triggers.cpp:1330 */
void CFireAndDie::Precache(void)
{
}

/* <19fd93> ../cstrike/dlls/triggers.cpp:1319 */
void CFireAndDie::ObjectCaps(void)
{
}

/* <19fd6a> ../cstrike/dlls/triggers.cpp:1302 */
void CTriggerVolume::Spawn(void)
{
}

/* <19fd42> ../cstrike/dlls/triggers.cpp:1280 */
void CTriggerCounter::Spawn(void)
{
}

/* <19fd1a> ../cstrike/dlls/triggers.cpp:1214 */
void CBaseTrigger::MultiWaitOver(void)
{
}

/* <19fca2> ../cstrike/dlls/triggers.cpp:678 */
void CTriggerMonsterJump::Touch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   680
//		operator*(const Vector *const this,
//				float fl);  //   695
//	}
}

/* <19fc7a> ../cstrike/dlls/triggers.cpp:580 */
void CBaseTrigger::ObjectCaps(void)
{
}

/* <19fc52> ../cstrike/dlls/triggers.cpp:535 */
void CRenderFxManager::Spawn(void)
{
}

/* <19fbce> ../cstrike/dlls/triggers.cpp:347 */
void CMultiManager::Spawn(void)
{
//	{
//		int swapped;                                          //   355
//		{
//			int i;                                        //   360
//			{
//				int name;                             //   365
//				float delay;                          //   366
//			}
//		}
//	}
}

/* <19fba6> ../cstrike/dlls/triggers.cpp:280 */
void CMultiManager::ObjectCaps(void)
{
}

/* <19fb7e> ../cstrike/dlls/triggers.cpp:240 */
void CTriggerRelay::Spawn(void)
{
}

/* <19fb56> ../cstrike/dlls/triggers.cpp:198 */
void CTriggerRelay::ObjectCaps(void)
{
}

/* <19fb2d> ../cstrike/dlls/triggers.cpp:171 */
void CAutoTrigger::Precache(void)
{
}

/* <19fb05> ../cstrike/dlls/triggers.cpp:165 */
void CAutoTrigger::Spawn(void)
{
}

/* <19fadd> ../cstrike/dlls/triggers.cpp:116 */
void CAutoTrigger::ObjectCaps(void)
{
}

/* <19faa6> ../cstrike/dlls/triggers.cpp:82 */
void CFrictionModifier::ChangeFriction(CBaseEntity *pOther)
{
}

/* <19fa7d> ../cstrike/dlls/triggers.cpp:72 */
void CFrictionModifier::Spawn(void)
{
}

/* <19fa55> ../cstrike/dlls/triggers.cpp:53 */
void CFrictionModifier::ObjectCaps(void)
{
}

/* <19fa2d> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <19fa05> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <19f9cd> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <19f9a4> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <19f97c> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <19f93e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <19f741> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <19f719> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <19f6f1> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <19f6b9> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <19f654> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <19f61c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <19f5f4> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <19f5cc> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <19f5a4> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <19f57c> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <19f553> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <19f52b> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <19f503> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <19f4db> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <19f4a4> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <19f47c> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <19f454> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <19f41d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <19f3f5> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <19f357> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <19f302> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <19f2cb> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <19f294> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <19f22f> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <19f1e9> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <19f1c1> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <19f199> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <19f165> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <19f12e> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <19f106> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <19f0cf> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <19f0a7> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <19f07f> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <19f05c> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <19f030> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <19f008> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <19efe0> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <19efb8> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <19ef98> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <19ef7d> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <19ef5d> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <19ef3d> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <19eee8> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <19eeb2> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <19ee94> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <19ee5e> ../cstrike/dlls/cbase.h:800 */
CClientFog *GetClassPtr<CClientFog>(CClientFog *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ee45> ../cstrike/dlls/triggers.cpp:2710 */
void CClientFog::CClientFog(void)
{
}

/* <19ee23> ../cstrike/dlls/triggers.cpp:2693 */
inline void CWeather::CWeather(void)
{
}

/* <19eded> ../cstrike/dlls/cbase.h:800 */
CTriggerCamera *GetClassPtr<CTriggerCamera>(CTriggerCamera *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19edd0> ../cstrike/dlls/triggers.cpp:2391 */
inline void CTriggerCamera::CTriggerCamera(void)
{
}

/* <19ed9a> ../cstrike/dlls/cbase.h:800 */
CTriggerChangeTarget *GetClassPtr<CTriggerChangeTarget>(CTriggerChangeTarget *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ed7d> ../cstrike/dlls/triggers.cpp:2335 */
inline void CTriggerChangeTarget::CTriggerChangeTarget(void)
{
}

/* <19ed47> ../cstrike/dlls/cbase.h:800 */
CTriggerGravity *GetClassPtr<CTriggerGravity>(CTriggerGravity *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ed25> ../cstrike/dlls/triggers.cpp:2305 */
inline void CTriggerGravity::CTriggerGravity(void)
{
}

/* <19ecef> ../cstrike/dlls/cbase.h:800 */
CTriggerEndSection *GetClassPtr<CTriggerEndSection>(CTriggerEndSection *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ecd2> ../cstrike/dlls/triggers.cpp:2234 */
inline void CTriggerEndSection::CTriggerEndSection(void)
{
}

/* <19ec9c> ../cstrike/dlls/cbase.h:800 */
CTriggerSave *GetClassPtr<CTriggerSave>(CTriggerSave *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ec7f> ../cstrike/dlls/triggers.cpp:2198 */
inline void CTriggerSave::CTriggerSave(void)
{
}

/* <19ec49> ../cstrike/dlls/cbase.h:800 */
CVIP_SafetyZone *GetClassPtr<CVIP_SafetyZone>(CVIP_SafetyZone *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ec2c> ../cstrike/dlls/triggers.cpp:2155 */
inline void CVIP_SafetyZone::CVIP_SafetyZone(void)
{
}

/* <19ebf6> ../cstrike/dlls/cbase.h:800 */
CEscapeZone *GetClassPtr<CEscapeZone>(CEscapeZone *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ebd9> ../cstrike/dlls/triggers.cpp:2098 */
inline void CEscapeZone::CEscapeZone(void)
{
}

/* <19eba3> ../cstrike/dlls/cbase.h:800 */
CHostageRescue *GetClassPtr<CHostageRescue>(CHostageRescue *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19eb81> ../cstrike/dlls/triggers.cpp:2056 */
inline void CHostageRescue::CHostageRescue(void)
{
}

/* <19eb4b> ../cstrike/dlls/cbase.h:800 */
CBombTarget *GetClassPtr<CBombTarget>(CBombTarget *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19eb2e> ../cstrike/dlls/triggers.cpp:2007 */
inline void CBombTarget::CBombTarget(void)
{
}

/* <19eaf8> ../cstrike/dlls/cbase.h:800 */
CBuyZone *GetClassPtr<CBuyZone>(CBuyZone *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19eadb> ../cstrike/dlls/triggers.cpp:1962 */
inline void CBuyZone::CBuyZone(void)
{
}

/* <19ea6f> ../cstrike/dlls/cbase.h:800 */
CTriggerTeleport *GetClassPtr<CTriggerTeleport>(CTriggerTeleport *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19ea4d> ../cstrike/dlls/triggers.cpp:1935 */
inline void CTriggerTeleport::CTriggerTeleport(void)
{
}

/* <19ea17> ../cstrike/dlls/cbase.h:800 */
CTriggerPush *GetClassPtr<CTriggerPush>(CTriggerPush *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e9f5> ../cstrike/dlls/triggers.cpp:1797 */
inline void CTriggerPush::CTriggerPush(void)
{
}

/* <19e9bf> ../cstrike/dlls/cbase.h:800 */
CLadder *GetClassPtr<CLadder>(CLadder *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e99d> ../cstrike/dlls/triggers.cpp:1753 */
inline void CLadder::CLadder(void)
{
}

/* <19e978> ../cstrike/dlls/saverestore.h:47 */
inline void CSave::~CSave( int const __in_chrg)
{
}

/* <19e94e> ../cstrike/dlls/saverestore.h:50 */
inline void CSave::CSave( SAVERESTOREDATA *pdata)
{
}

/* <19e906> ../cstrike/dlls/triggers.cpp:1345 */
inline void CChangeLevel::CChangeLevel(void)
{
}

/* <19e8a7> ../cstrike/dlls/triggers.cpp:1484 */
void CChangeLevel::ChangeLevelNow(CBaseEntity *pActivator)
{
//	{
//		edict_t *pentLandmark;                               //  1486
//		LEVELLIST levels;                                     //  1487
//		class CBaseEntity *pPlayer;                          //  1502
//		{
//			class CFireAndDie *pFireAndDie;              //  1512
//		}
//	}
}

/* <19e885> ../cstrike/dlls/triggers.cpp:1313 */
inline void CFireAndDie::CFireAndDie(void)
{
}

/* <19e84f> ../cstrike/dlls/cbase.h:800 */
CTriggerVolume *GetClassPtr<CTriggerVolume>(CTriggerVolume *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e82d> ../cstrike/dlls/triggers.cpp:1293 */
inline void CTriggerVolume::CTriggerVolume(void)
{
}

/* <19e7f7> ../cstrike/dlls/cbase.h:800 */
CTriggerCounter *GetClassPtr<CTriggerCounter>(CTriggerCounter *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e7d5> ../cstrike/dlls/triggers.cpp:1273 */
inline void CTriggerCounter::CTriggerCounter(void)
{
}

/* <19e79f> ../cstrike/dlls/cbase.h:800 */
CTriggerOnce *GetClassPtr<CTriggerOnce>(CTriggerOnce *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e77d> ../cstrike/dlls/triggers.cpp:1129 */
inline void CTriggerOnce::CTriggerOnce(void)
{
}

/* <19e747> ../cstrike/dlls/cbase.h:800 */
CTriggerMultiple *GetClassPtr<CTriggerMultiple>(CTriggerMultiple *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e725> ../cstrike/dlls/triggers.cpp:1080 */
inline void CTriggerMultiple::CTriggerMultiple(void)
{
}

/* <19e6ef> ../cstrike/dlls/cbase.h:800 */
CTargetCDAudio *GetClassPtr<CTargetCDAudio>(CTargetCDAudio *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e6d2> ../cstrike/dlls/triggers.cpp:783 */
inline void CTargetCDAudio::CTargetCDAudio(void)
{
}

/* <19e6b5> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <19e67f> ../cstrike/dlls/cbase.h:800 */
CTriggerCDAudio *GetClassPtr<CTriggerCDAudio>(CTriggerCDAudio *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e65d> ../cstrike/dlls/triggers.cpp:705 */
inline void CTriggerCDAudio::CTriggerCDAudio(void)
{
}

/* <19e627> ../cstrike/dlls/cbase.h:800 */
CTriggerMonsterJump *GetClassPtr<CTriggerMonsterJump>(CTriggerMonsterJump *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e60a> ../cstrike/dlls/triggers.cpp:641 */
inline void CTriggerMonsterJump::CTriggerMonsterJump(void)
{
}

/* <19e5d4> ../cstrike/dlls/cbase.h:800 */
CTriggerHurt *GetClassPtr<CTriggerHurt>(CTriggerHurt *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e5b2> ../cstrike/dlls/triggers.cpp:629 */
inline void CTriggerHurt::CTriggerHurt(void)
{
}

/* <19e57c> ../cstrike/dlls/cbase.h:800 */
CBaseTrigger *GetClassPtr<CBaseTrigger>(CBaseTrigger *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e55f> ../cstrike/dlls/triggers.cpp:566 */
inline void CBaseTrigger::CBaseTrigger(void)
{
}

/* <19e529> ../cstrike/dlls/cbase.h:800 */
CRenderFxManager *GetClassPtr<CRenderFxManager>(CRenderFxManager *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e50c> ../cstrike/dlls/triggers.cpp:525 */
inline void CRenderFxManager::CRenderFxManager(void)
{
}

/* <19e4f3> ../cstrike/dlls/triggers.cpp:294 */
inline void CMultiManager::ShouldClone(void)
{
}

/* <19e4d6> ../cstrike/dlls/triggers.cpp:264 */
inline void CMultiManager::CMultiManager(void)
{
}

/* <19e4b4> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <19e48c> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <19e408> ../cstrike/dlls/cbase.h:800 */
CTriggerRelay *GetClassPtr<CTriggerRelay>(CTriggerRelay *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e3ed> ../cstrike/dlls/triggers.cpp:191 */
inline void CTriggerRelay::CTriggerRelay(void)
{
}

/* <19e3b7> ../cstrike/dlls/cbase.h:800 */
CAutoTrigger *GetClassPtr<CAutoTrigger>(CAutoTrigger *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e39c> ../cstrike/dlls/triggers.cpp:108 */
inline void CAutoTrigger::CAutoTrigger(void)
{
}

/* <19e37a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <19e33e> ../cstrike/dlls/cbase.h:800 */
CFrictionModifier *GetClassPtr<CFrictionModifier>(CFrictionModifier *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <19e323> ../cstrike/dlls/triggers.cpp:44 */
inline void CFrictionModifier::CFrictionModifier(void)
{
}

/* <19e2e4> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <19e29b> ../cstrike/dlls/triggers.cpp:2490 */
void CTriggerCamera::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <19e25a> ../cstrike/dlls/triggers.cpp:2587 */
void CTriggerCamera::FollowTarget(void)
{
//	{
//		Vector vecGoal;                                 //  2606
//		float dx;                                             //  2615
//		float dy;                                             //  2616
//	}
}

/* <19e232> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <19e1e1> ../cstrike/dlls/triggers.cpp:1582 */
void InTransitionVolume(CBaseEntity *pEntity, char *pVolumeName)
{
//	{
//		edict_t *pentVolume;                                 //  1584
//		int inVolume;                                         //  1597
//		{
//			class CBaseEntity *pVolume;                  //  1602
//		}
//	}
}

/* <19e1b9> ../cstrike/dlls/triggers.cpp:1456 */
void FindLandmark(const char *pLandmarkName)
{
//	{
//		edict_t *pentLandmark;                               //  1458
//	}
}

/* <19e160> ../cstrike/dlls/triggers.cpp:1231 */
void CBaseTrigger::CounterUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		BOOL fTellActivator;                                  //  1239
//	}
}

/* <19e13b> ../cstrike/dlls/triggers.cpp:1167 */
void CBaseTrigger::ActivateMultiTrigger(CBaseEntity *pActivator)
{
}

/* <19e0c7> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <19e08b> ../cstrike/dlls/triggers.cpp:741 */
void PlayCDTrack(int iTrack)
{
//	{
//		edict_t *pClient;                                    //   743
//		{
//			char string;                                  //   764
//		}
//	}
}

/* <19e06d> ../cstrike/dlls/triggers.cpp:652 */
void CTriggerMonsterJump::Spawn(void)
{
}

/* <19e054> ../cstrike/dlls/triggers.cpp:1973 */
void CBuyZone::Spawn(void)
{
}

/* <19e03b> ../cstrike/dlls/triggers.cpp:2206 */
void CTriggerSave::Spawn(void)
{
}

/* <19e022> ../cstrike/dlls/triggers.cpp:2260 */
void CTriggerEndSection::Spawn(void)
{
}

/* <19dffa> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <19dfe1> ../cstrike/dlls/triggers.cpp:293 */
inline void CMultiManager::IsClone(void)
{
}

/* <19dfc3> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <19df9e> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <19df74> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <19df4c> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <19df22> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <19def2> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <19de99> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <19de40> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <19dde7> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <19dda6> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <19dd7c> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <19dd23> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <19dcd6> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <19dcb8> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <19dc80> ../cstrike/dlls/triggers.cpp:1986 */
void CBuyZone::BuyTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  1991
//	}
}

/* <19dc48> ../cstrike/dlls/triggers.cpp:2027 */
void CBombTarget::BombTargetTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2031
//	}
}

/* <19dbf2> ../cstrike/dlls/triggers.cpp:2115 */
void CEscapeZone::EscapeTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2120
//		{
//			int i;                                        //  2135
//			{
//				class CBasePlayer *plr;              //  2137
//			}
//		}
//	}
}

/* <19db9b> ../cstrike/dlls/triggers.cpp:2173 */
void CVIP_SafetyZone::VIP_SafetyTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *p;                                //  2178
//	}
}

/* <19db6f> ../cstrike/dlls/unisignals.h:55 */
inline void CUnifiedSignals::Signal( int flSignal)
{
}

/* <19db51> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <19daf2> ../cstrike/dlls/triggers.cpp:959 */
void CBaseTrigger::HurtTouch(CBaseEntity *pOther)
{
//	{
//		float fldmg;                                          //   961
//		{
//			int playerMask;                               //   986
//		}
//		{
//			int playerMask;                               //  1008
//		}
//	}
}

/* <19dad9> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <19daa1> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <19da13> ../cstrike/dlls/triggers.cpp:91 */
void CFrictionModifier::KeyValue(KeyValueData *pkvd)
{
}

/* <19d9df> ../cstrike/dlls/triggers.cpp:136 */
void CAutoTrigger::KeyValue(KeyValueData *pkvd)
{
//	{
//		int type;                                             //   145
//	}
}

/* <19d9ab> ../cstrike/dlls/triggers.cpp:216 */
void CTriggerRelay::KeyValue(KeyValueData *pkvd)
{
//	{
//		int type;                                             //   220
//	}
}

/* <19d966> ../cstrike/dlls/triggers.cpp:318 */
void CMultiManager::KeyValue(KeyValueData *pkvd)
{
//	{
//		char tmp;                                             //   335
//	}
}

/* <19d941> ../cstrike/dlls/triggers.cpp:1388 */
void CChangeLevel::KeyValue(KeyValueData *pkvd)
{
}

/* <19d91c> ../cstrike/dlls/triggers.cpp:2291 */
void CTriggerEndSection::KeyValue(KeyValueData *pkvd)
{
}

/* <19d8f2> ../cstrike/dlls/triggers.cpp:608 */
void CBaseTrigger::KeyValue(KeyValueData *pkvd)
{
}

/* <19d8ad> ../cstrike/dlls/triggers.cpp:796 */
void CTargetCDAudio::KeyValue(KeyValueData *pkvd)
{
}

/* <19d888> ../cstrike/dlls/triggers.cpp:2360 */
void CTriggerChangeTarget::KeyValue(KeyValueData *pkvd)
{
}

/* <19d863> ../cstrike/dlls/triggers.cpp:2462 */
void CTriggerCamera::KeyValue(KeyValueData *pkvd)
{
}

/* <19d839> ../cstrike/dlls/triggers.cpp:2716 */
void CClientFog::KeyValue(KeyValueData *pkvd)
{
}

/* <19d814> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <19d786> ../cstrike/dlls/triggers.cpp:540 */
void CRenderFxManager::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		edict_t *pentTarget;                                 //   544
//		{
//			entvars_t *pevTarget;                        //   551
//		}
//	}
}

/* <19d720> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <19d571> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <19d53a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <19d512> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <19d4e5> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <19d4c3> ../engine/eiface.h:320 */
inline void LEVELLIST::LEVELLIST(void)
{
}

/* <19d4a5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <19d48c> ../cstrike/dlls/triggers.cpp:177 */
void CAutoTrigger::Think(void)
{
}

/* <19d462> ../cstrike/dlls/triggers.cpp:2218 */
void CTriggerSave::SaveTouch(CBaseEntity *pOther)
{
}

/* <19d419> ../cstrike/dlls/triggers.cpp:2245 */
void CTriggerEndSection::EndSectionUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <19d3ef> ../cstrike/dlls/triggers.cpp:2276 */
void CTriggerEndSection::EndSectionTouch(CBaseEntity *pOther)
{
}

/* <19d3c5> ../cstrike/dlls/triggers.cpp:68 */
void CFrictionModifier::Save(CSave &save)
{
}

/* <19d39b> ../cstrike/dlls/triggers.cpp:134 */
void CAutoTrigger::Save(CSave &save)
{
}

/* <19d371> ../cstrike/dlls/triggers.cpp:214 */
void CTriggerRelay::Save(CSave &save)
{
}

/* <19d347> ../cstrike/dlls/triggers.cpp:316 */
void CMultiManager::Save(CSave &save)
{
}

/* <19d31d> ../cstrike/dlls/triggers.cpp:1382 */
void CChangeLevel::Save(CSave &save)
{
}

/* <19d2f3> ../cstrike/dlls/triggers.cpp:2358 */
void CTriggerChangeTarget::Save(CSave &save)
{
}

/* <19d2c9> ../cstrike/dlls/triggers.cpp:2445 */
void CTriggerCamera::Save(CSave &save)
{
}

/* <19d29a> ../cstrike/dlls/triggers.cpp:68 */
void CFrictionModifier::Restore(CRestore &restore)
{
}

/* <19d26b> ../cstrike/dlls/triggers.cpp:134 */
void CAutoTrigger::Restore(CRestore &restore)
{
}

/* <19d23c> ../cstrike/dlls/triggers.cpp:214 */
void CTriggerRelay::Restore(CRestore &restore)
{
}

/* <19d20d> ../cstrike/dlls/triggers.cpp:316 */
void CMultiManager::Restore(CRestore &restore)
{
}

/* <19d1de> ../cstrike/dlls/triggers.cpp:1382 */
void CChangeLevel::Restore(CRestore &restore)
{
}

/* <19d1af> ../cstrike/dlls/triggers.cpp:2358 */
void CTriggerChangeTarget::Restore(CRestore &restore)
{
}

/* <19d180> ../cstrike/dlls/triggers.cpp:2445 */
void CTriggerCamera::Restore(CRestore &restore)
{
}

/* <19d158> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <19d130> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <19d106> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <19d0de> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <19d0c0> ../cstrike/dlls/triggers.cpp:807 */
void CTargetCDAudio::Spawn(void)
{
}

/* <19d0a2> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <18be46> ../cstrike/dlls/training_gamerules.cpp:422 */
void func_weaponcheck(entvars_t *pev)
{
//	GetClassPtr<CFuncWeaponCheck>(CFuncWeaponCheck *a);  //   422
}

/* <18bd74> ../cstrike/dlls/training_gamerules.cpp:282 */
void func_grencatch(entvars_t *pev)
{
//	GetClassPtr<CBaseGrenCatch>(CBaseGrenCatch *a);  //   282
}

/* <18bd40> ../cstrike/dlls/training_gamerules.cpp:190 */
void CHalfLifeTraining::PlayerCanBuy(CBasePlayer *pPlayer)
{
}

/* <18bcff> ../cstrike/dlls/training_gamerules.cpp:29 */
void CHalfLifeTraining::HostageDied(void)
{
//	{
//		class CBasePlayer *pPlayer;                          //    31
//	}
}

/* <18bcdd> ../cstrike/dlls/training_gamerules.cpp:23 */
void CHalfLifeTraining::CHalfLifeTraining(void)
{
}

/* <18bcc4> ../cstrike/dlls/training_gamerules.cpp:23 */
void CHalfLifeTraining::CHalfLifeTraining(void)
{
}

/* <18bb28> ../cstrike/dlls/training_gamerules.cpp:462 */
void CFuncWeaponCheck::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   464
//	FStrEq(const char *sz1,
//		const char *sz2);  //   469
//	KeyValue(CFuncWeaponCheck *const this,
//		KeyValueData *pkvd);  //   462
}

/* <18ba09> ../cstrike/dlls/training_gamerules.cpp:358 */
void CBaseGrenCatch::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   360
//	FStrEq(const char *sz1,
//		const char *sz2);  //   365
//	FStrEq(const char *sz1,
//		const char *sz2);  //   370
//	FStrEq(const char *sz1,
//		const char *sz2);  //   372
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   376
//	FStrEq(const char *sz1,
//		const char *sz2);  //   373
}

/* <18b9ba> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <18b835> ../cstrike/dlls/training_gamerules.cpp:300 */
void CBaseGrenCatch::Think(void)
{
//	{
//		class CGrenade *pGrenade;                            //   302
//		BOOL m_fSmokeTouchingLastFrame;                       //   304
//		class CBaseEntity *pTrigger;                         //   320
//		{
//			Vector vMax;                            //   311
//			Vector vMin;                            //   311
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   312
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   312
//			Vector(Vector *const this,
//				const Vector &v);  //   311
//			Vector(Vector *const this,
//				const Vector &v);  //   311
//			strstr(const char *__haystack,
//				const char *__needle);  //   314
//			Length(const Vector *const this);  //   315
//		}
//	}
}

/* <18b81c> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <18b79c> ../cstrike/dlls/training_gamerules.cpp:151 */
void CHalfLifeTraining::PlayerSpawn(CBasePlayer *pPlayer)
{
//	{
//		class CBaseEntity *pWeaponEntity;                    //   169
//	}
//	PlayerSpawn(CHalfLifeTraining *const this,
//			class CBasePlayer *pPlayer);  //   151
}

/* <18b74f> ../cstrike/dlls/training_gamerules.cpp:280 */
void CBaseGrenCatch::Save(CSave &save)
{
//	Save(CBaseGrenCatch *const this,
//		class CSave &save);  //   280
}

/* <18b702> ../cstrike/dlls/training_gamerules.cpp:420 */
void CFuncWeaponCheck::Save(CSave &save)
{
//	Save(CFuncWeaponCheck *const this,
//		class CSave &save);  //   420
}

/* <18b6b5> ../cstrike/dlls/training_gamerules.cpp:280 */
void CBaseGrenCatch::Restore(CRestore &restore)
{
//	Restore(CBaseGrenCatch *const this,
//		class CRestore &restore);  //   280
}

/* <18b668> ../cstrike/dlls/training_gamerules.cpp:420 */
void CFuncWeaponCheck::Restore(CRestore &restore)
{
//	Restore(CFuncWeaponCheck *const this,
//		class CRestore &restore);  //   420
}

/* <18b5f6> ../cstrike/dlls/training_gamerules.cpp:424 */
void CFuncWeaponCheck::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   430
//	}
//	Touch(CFuncWeaponCheck *const this,
//		class CBaseEntity *pOther);  //   424
}

/* <18b4aa> ../cstrike/dlls/training_gamerules.cpp:52 */
void CHalfLifeTraining::PlayerThink(CBasePlayer *pPlayer)
{
//	{
//		class CGrenade *pBomb;                               //    94
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //    81
//		{
//			class CBasePlayerWeapon *pWeapon;            //    82
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   124
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   127
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   105
//	}
}

/* <18b0fb> ../cstrike/dlls/training_gamerules.cpp:202 */
void CHalfLifeTraining::CheckWinConditions(void)
{
//	{
//		class CBaseEntity *pHostage;                         //   229
//		{
//			class CGrenade *pBomb;                       //   217
//			Instance(edict_t *pent);  //   225
//			Instance(edict_t *pent);  //   225
//		}
//		{
//			class CGrenade *pBomb;                       //   205
//			Instance(edict_t *pent);  //   213
//			Instance(edict_t *pent);  //   213
//		}
//		FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//					const char *pszName);  //   229
//		Instance(edict_t *pent);  //   229
//		{
//			class CBaseEntity *pRescueArea;              //   236
//			class CBaseEntity *pFirstRescueArea;         //   237
//			FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//						const char *pszName);  //   236
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   235
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   235
//			Instance(edict_t *pent);  //   236
//		}
//	}
}

/* <18b005> ../cstrike/dlls/training_gamerules.cpp:34 */
void CHalfLifeTraining::GetPlayerSpawnSpot(CBasePlayer *pPlayer)
{
//	{
//		class CBaseEntity *pSpot;                            //    36
//		FNullEnt(CBaseEntity *ent);  //    37
//		INDEXENT(int iEdictNum);  //    40
//		operator+(const Vector *const this,
//				const Vector &v);  //    43
//		edict(CBaseEntity *const this);  //    50
//	}
}

/* <18afa5> ../cstrike/dlls/training_gamerules.cpp:195 */
void CHalfLifeTraining::PlayerKilled(CBasePlayer *pVictim, entvars_t *pKiller, entvars_t *pInflictor)
{
//	edict(CBaseEntity *const this);  //   198
}

/* <18af50> ../cstrike/dlls/training_gamerules.cpp:293 */
void CBaseGrenCatch::Touch(CBaseEntity *pOther)
{
//	strstr(const char *__haystack,
//		const char *__needle);  //   297
}

/* <18af29> ../cstrike/dlls/training_gamerules.cpp:400 */
void CFuncWeaponCheck::Spawn(void)
{
}

/* <18af02> ../cstrike/dlls/training_gamerules.cpp:284 */
void CBaseGrenCatch::Spawn(void)
{
}

/* <18aedc> ../cstrike/dlls/training_gamerules.cpp:258 */
void CBaseGrenCatch::ObjectCaps(void)
{
}

/* <18aea8> ../cstrike/dlls/training_gamerules.cpp:186 */
void CHalfLifeTraining::FPlayerCanRespawn(CBasePlayer *pPlayer)
{
}

/* <18ae74> ../cstrike/dlls/training_gamerules.cpp:182 */
void CHalfLifeTraining::ItemShouldRespawn(CItem *pItem)
{
}

/* <18ae41> ../cstrike/dlls/training_gamerules.cpp:28 */
void CHalfLifeTraining::InitHUD(CBasePlayer *pl)
{
}

/* <18ae1b> ../cstrike/dlls/training_gamerules.cpp:27 */
void CHalfLifeTraining::IsDeathmatch(void)
{
}

/* <18adf5> ../cstrike/dlls/gamerules.h:548 */
void CHalfLifeTraining::CheckMapConditions(void)
{
}

/* <18adcf> ../cstrike/dlls/gamerules.h:538 */
void CHalfLifeTraining::IsMultiplayer(void)
{
}

/* <18ada9> ../cstrike/dlls/gamerules.h:395 */
void CHalfLifeMultiplay::EndMultiplayerGame(void)
{
}

/* <18ad83> ../cstrike/dlls/gamerules.h:389 */
void CHalfLifeMultiplay::PlayTextureSounds(void)
{
}

/* <18ad49> ../cstrike/dlls/gamerules.h:386 */
void CHalfLifeMultiplay::GetTeamID(CBaseEntity *pEntity)
{
}

/* <18ad1d> ../cstrike/dlls/gamerules.h:187 */
void CGameRules::IsFreezePeriod(void)
{
}

/* <18ace9> ../cstrike/dlls/gamerules.h:177 */
void CGameRules::SetDefaultPlayerTeam(CBasePlayer *pPlayer)
{
}

/* <18ac8b> ../cstrike/dlls/gamerules.h:176 */
void CGameRules::ChangePlayerTeam(CBasePlayer *pPlayer, const char *pTeamName, BOOL bKill, BOOL bGib)
{
}

/* <18ac57> ../cstrike/dlls/gamerules.h:175 */
void CGameRules::IsValidTeam(const char *pTeamName)
{
}

/* <18ac23> ../cstrike/dlls/gamerules.h:174 */
void CGameRules::GetIndexedTeamName(int teamIndex)
{
}

/* <18abef> ../cstrike/dlls/gamerules.h:173 */
void CGameRules::GetTeamIndex(const char *pTeamName)
{
}

/* <18abad> ../cstrike/dlls/gamerules.h:113 */
void CGameRules::ShouldAutoAim(CBasePlayer *pPlayer, edict_t *target)
{
}

/* <18ab5c> ../cstrike/dlls/gamerules.h:100 */
void CGameRules::IsTeamplay(void)
{
}

/* <18ab30> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <18aaf5> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <18a91b> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <18a8f5> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <18a8cf> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <18a89a> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <18a83b> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <18a815> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <18a7ef> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <18a7c9> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <18a7a3> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <18a77c> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <18a756> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <18a730> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <18a70a> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <18a6d6> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <18a6b0> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <18a68a> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <18a656> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <18a630> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <18a59c> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <18a54c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <18a518> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <18a4e4> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <18a483> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <18a441> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <18a41b> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <18a3f5> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <18a3c3> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <18a383> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <18a35d> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <18a329> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <18a303> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <18a2dd> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <18a2bc> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <18a296> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <18a270> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <18a23e> ../cstrike/dlls/cbase.h:800 */
CFuncWeaponCheck *GetClassPtr<CFuncWeaponCheck>(CFuncWeaponCheck *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <18a222> ../cstrike/dlls/training_gamerules.cpp:385 */
inline void CFuncWeaponCheck::CFuncWeaponCheck(void)
{
}

/* <18a1f0> ../cstrike/dlls/cbase.h:800 */
CBaseGrenCatch *GetClassPtr<CBaseGrenCatch>(CBaseGrenCatch *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <18a1d5> ../cstrike/dlls/training_gamerules.cpp:252 */
inline void CBaseGrenCatch::CBaseGrenCatch(void)
{
}

/* <18a17c> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <18a0ff> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <18a0d8> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <18a0bf> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <18a066> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <18a048> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <189fbf> ../cstrike/dlls/training_gamerules.cpp:151 */
void CHalfLifeTraining::PlayerSpawn(CBasePlayer *pPlayer)
{
//	{
//		class CBaseEntity *pWeaponEntity;                    //   169
//	}
}

/* <189fa6> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <189f59> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <189efa> ../cstrike/dlls/training_gamerules.cpp:462 */
void CFuncWeaponCheck::KeyValue(KeyValueData *pkvd)
{
}

/* <189ed6> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <189dbb> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <189d71> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <189d38> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <189d11> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <189ce5> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <189cbd> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <189c93> ../cstrike/dlls/training_gamerules.cpp:280 */
void CBaseGrenCatch::Save(CSave &save)
{
}

/* <189c69> ../cstrike/dlls/training_gamerules.cpp:420 */
void CFuncWeaponCheck::Save(CSave &save)
{
}

/* <189c3a> ../cstrike/dlls/training_gamerules.cpp:280 */
void CBaseGrenCatch::Restore(CRestore &restore)
{
}

/* <189c10> ../cstrike/dlls/training_gamerules.cpp:420 */
void CFuncWeaponCheck::Restore(CRestore &restore)
{
}

/* <189bcc> ../cstrike/dlls/training_gamerules.cpp:424 */
void CFuncWeaponCheck::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   430
//		{
//			int i;                                        //   432
//		}
//	}
}

/* <189b82> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <184a30> ../cstrike/dlls/subs.cpp:577 */
/* linkage=_Z13FEntIsVisibleP9entvars_sS0_ */
BOOL FEntIsVisible(entvars_t *pev, entvars_t *pevTarget)
{
//	{
//		Vector vecSpot1;                                //   581
//		Vector vecSpot2;                                //   582
//		TraceResult tr;                                       //   583
//		operator+(const Vector *const this,
//				const Vector &v);  //   581
//		operator+(const Vector *const this,
//				const Vector &v);  //   582
//	}
}

/* <1849e3> ../cstrike/dlls/subs.cpp:557 */
void AxisDelta(int flags, Vector &angle1, Vector &angle2)
{
}

/* <1849bd> ../cstrike/dlls/subs.cpp:546 */
void AxisDir(entvars_t *pev)
{
}

/* <184984> ../cstrike/dlls/subs.cpp:535 */
void AxisValue(int flags, Vector &angles)
{
}

/* <18487c> ../cstrike/dlls/subs.cpp:491 */
void CBaseToggle::AngularMove(Vector vecDestAngle, float flSpeed)
{
//	{
//		Vector vecDestDelta;                            //   506
//		float flTravelTime;                                   //   509
//		operator==(const Vector *const this,
//				const Vector &v);  //   499
//		operator-(const Vector *const this,
//				const Vector &v);  //   506
//		Length(const Vector *const this);  //   509
//		operator/(const Vector *const this,
//				float fl);  //   516
//		AngularMoveDone(CBaseToggle *const this);  //   501
//	}
}

/* <184855> ../cstrike/dlls/subs.cpp:474 */
void CBaseToggle::IsLockedByMaster(void)
{
}

/* <18474d> ../cstrike/dlls/subs.cpp:431 */
void CBaseToggle::LinearMove(Vector vecDest, float flSpeed)
{
//	{
//		Vector vecDestDelta;                            //   446
//		float flTravelTime;                                   //   449
//		operator==(const Vector *const this,
//				const Vector &v);  //   439
//		operator-(const Vector *const this,
//				const Vector &v);  //   446
//		Length(const Vector *const this);  //   449
//		operator/(const Vector *const this,
//				float fl);  //   456
//		LinearMoveDone(CBaseToggle *const this);  //   441
//	}
}

/* <1846d9> ../cstrike/dlls/subs.cpp:335 */
/* linkage=_Z10SetMovedirP9entvars_s */
void SetMovedir(entvars_t *pev)
{
//	operator==(const Vector *const this,
//			const Vector &v);  //   337
//	operator==(const Vector *const this,
//			const Vector &v);  //   341
}

/* <1844c2> ../cstrike/dlls/subs.cpp:252 */
void CBaseDelay::SUB_UseTargets(CBaseEntity *pActivator, USE_TYPE useType, float value)
{
//	{
//		class CBaseDelay *pTemp;                             //   266
//		GetClassPtr<CBaseDelay>(CBaseDelay *a);  //   266
//		MAKE_STRING_CLASS(const char *str,
//					entvars_t *pev);  //   267
//		edict(CBaseEntity *const this);  //   285
//	}
//	{
//		edict_t *pentKillTarget;                             //   301
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   304
//		FNullEnt(const edict_t *pent);  //   305
//		Instance(edict_t *pent);  //   307
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   310
//	}
}

/* <1843f8> ../cstrike/dlls/subs.cpp:249 */
void DelayedUse(entvars_t *pev)
{
//	GetClassPtr<CBaseDelay>(CBaseDelay *a);  //   249
}

/* <184158> ../cstrike/dlls/subs.cpp:357 */
void CBaseDelay::DelayThink(void)
{
//	{
//		class CBaseEntity *pActivator;                       //   359
//		Instance(edict_t *pent);  //   363
//		SUB_UseTargets(CBaseDelay *const this,
//				class CBaseEntity *pActivator,
//				USE_TYPE useType,
//				float value);  //   366
//	}
}

/* <184126> ../cstrike/dlls/cbase.h:800 */
CBaseDelay *GetClassPtr<CBaseDelay>(CBaseDelay *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1840d5> ../cstrike/dlls/subs.cpp:183 */
void CBaseEntity::SUB_UseTargets(CBaseEntity *pActivator, USE_TYPE useType, float value)
{
}

/* <183fb0> ../cstrike/dlls/subs.cpp:195 */
/* linkage=_Z11FireTargetsPKcP11CBaseEntityS2_8USE_TYPEf */
void FireTargets(const char *targetName, CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		edict_t *pentTarget;                                 //   197
//		{
//			class CBaseEntity *pTarget;                  //   209
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //   205
//			FNullEnt(const edict_t *pent);  //   206
//			Instance(edict_t *pent);  //   209
//		}
//	}
}

/* <183f8a> ../cstrike/dlls/subs.cpp:135 */
void CBaseEntity::SUB_DoNothing(void)
{
}

/* <183f38> ../cstrike/dlls/subs.cpp:120 */
void CBaseEntity::SUB_Remove(void)
{
//	UpdateOnRemove(CBaseEntity *const this);  //   122
}

/* <183f03> ../cstrike/dlls/subs.cpp:98 */
void CBaseEntity::UpdateOnRemove(void)
{
//	{
//		int i;                                                //   100
//	}
}

/* <183edf> ../cstrike/dlls/subs.cpp:98 */
void CBaseEntity::UpdateOnRemove(void)
{
//	{
//		int i;                                                //   100
//	}
}

/* <183e15> ../cstrike/dlls/subs.cpp:77 */
void info_bomb_target(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //    77
}

/* <183d4b> ../cstrike/dlls/subs.cpp:75 */
void info_hostage_rescue(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //    75
}

/* <183c81> ../cstrike/dlls/subs.cpp:72 */
void info_landmark(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //    72
}

/* <183bb7> ../cstrike/dlls/subs.cpp:71 */
void info_vip_start(entvars_t *pev)
{
//	GetClassPtr<CBaseDMStart>(CBaseDMStart *a);  //    71
}

/* <183aed> ../cstrike/dlls/subs.cpp:70 */
void info_player_start(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //    70
}

/* <1839f1> ../cstrike/dlls/subs.cpp:69 */
void info_player_deathmatch(entvars_t *pev)
{
//	GetClassPtr<CBaseDMStart>(CBaseDMStart *a);  //    69
}

/* <1839bf> ../cstrike/dlls/cbase.h:800 */
CBaseDMStart *GetClassPtr<CBaseDMStart>(CBaseDMStart *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1838f5> ../cstrike/dlls/subs.cpp:57 */
void info_null(entvars_t *pev)
{
//	GetClassPtr<CNullEntity>(CNullEntity *a);  //    57
}

/* <1836dc> ../cstrike/dlls/subs.cpp:397 */
void CBaseToggle::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   399
//	FStrEq(const char *sz1,
//		const char *sz2);  //   404
//	KeyValue(CBaseToggle *const this,
//		KeyValueData *pkvd);  //   397
//	atof(const char *__nptr);  //   401
//	atof(const char *__nptr);  //   406
}

/* <183647> ../cstrike/dlls/subs.cpp:79 */
void CBaseDMStart::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    81
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    87
//	KeyValue(CBaseDMStart *const this,
//		KeyValueData *pkvd);  //    79
}

/* <18356f> ../cstrike/dlls/subs.cpp:149 */
void CBaseDelay::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   151
//	FStrEq(const char *sz1,
//		const char *sz2);  //   156
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   163
//	atof(const char *__nptr);  //   153
//	KeyValue(CBaseDelay *const this,
//		KeyValueData *pkvd);  //   149
}

/* <183523> ../cstrike/dlls/subs.cpp:147 */
void CBaseDelay::Save(CSave &save)
{
//	Save(CBaseDelay *const this,
//		class CSave &save);  //   147
}

/* <1834d6> ../cstrike/dlls/subs.cpp:394 */
void CBaseToggle::Save(CSave &save)
{
//	Save(CBaseToggle *const this,
//		class CSave &save);  //   394
}

/* <18348a> ../cstrike/dlls/subs.cpp:147 */
void CBaseDelay::Restore(CRestore &restore)
{
//	Restore(CBaseDelay *const this,
//		class CRestore &restore);  //   147
}

/* <18343d> ../cstrike/dlls/subs.cpp:394 */
void CBaseToggle::Restore(CRestore &restore)
{
//	Restore(CBaseToggle *const this,
//		class CRestore &restore);  //   394
}

/* <183417> ../cstrike/dlls/subs.cpp:53 */
void CNullEntity::Spawn(void)
{
}

/* <1833c8> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <18337e> ../cstrike/dlls/subs.cpp:465 */
void CBaseToggle::LinearMoveDone(void)
{
}

/* <183365> ../cstrike/dlls/subs.cpp:465 */
void CBaseToggle::LinearMoveDone(void)
{
}

/* <18331c> ../cstrike/dlls/subs.cpp:90 */
void CBaseDMStart::IsTriggered(CBaseEntity *pEntity)
{
//	{
//		BOOL master;                                          //    92
//	}
}

/* <1832fb> ../cstrike/dlls/subs.cpp:525 */
void CBaseToggle::AngularMoveDone(void)
{
}

/* <1832e2> ../cstrike/dlls/subs.cpp:525 */
void CBaseToggle::AngularMoveDone(void)
{
}

/* <1832bc> ../cstrike/dlls/subs.cpp:38 */
void CPointEntity::Spawn(void)
{
}

/* <183296> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <183270> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <183236> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <183209> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <1831e3> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1831a8> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <182fce> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <182fa8> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <182f82> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <182f4d> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <182eee> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <182eb9> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <182e93> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <182e6d> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <182e47> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <182e21> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <182dfa> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <182dd4> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <182dae> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <182d88> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <182d54> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <182d2e> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <182d08> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <182cd4> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <182cae> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <182c1a> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <182bca> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <182b96> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <182b62> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <182b14> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <182ad2> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <182aac> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <182a86> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <182a54> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <182a14> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1829ee> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <1829ba> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <182994> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <18296e> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <18294d> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <182924> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1828fe> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1828d8> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1828b2> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <182899> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <182839> ../cstrike/dlls/subs.cpp:252 */
void CBaseDelay::SUB_UseTargets(CBaseEntity *pActivator, USE_TYPE useType, float value)
{
//	{
//		class CBaseDelay *pTemp;                             //   266
//	}
//	{
//		edict_t *pentKillTarget;                             //   301
//	}
}

/* <1827f9> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <1827de> ../cstrike/dlls/subs.cpp:59 */
inline void CBaseDMStart::CBaseDMStart(void)
{
}

/* <1827c2> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <182790> ../cstrike/dlls/cbase.h:800 */
CNullEntity *GetClassPtr<CNullEntity>(CNullEntity *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <182770> ../cstrike/dlls/subs.cpp:45 */
inline void CNullEntity::CNullEntity(void)
{
}

/* <182717> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <1826f4> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <1826cd> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <18268b> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <182628> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <18260f> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1825ac> ../cstrike/dlls/subs.cpp:79 */
void CBaseDMStart::KeyValue(KeyValueData *pkvd)
{
}

/* <182587> ../cstrike/dlls/subs.cpp:397 */
void CBaseToggle::KeyValue(KeyValueData *pkvd)
{
}

/* <182563> ../cstrike/dlls/subs.cpp:149 */
void CBaseDelay::KeyValue(KeyValueData *pkvd)
{
}

/* <18253f> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <182474> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <182440> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <182419> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1823ed> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1823cd> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <1823af> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <182386> ../cstrike/dlls/subs.cpp:147 */
void CBaseDelay::Save(CSave &save)
{
}

/* <18235c> ../cstrike/dlls/subs.cpp:394 */
void CBaseToggle::Save(CSave &save)
{
}

/* <18232e> ../cstrike/dlls/subs.cpp:147 */
void CBaseDelay::Restore(CRestore &restore)
{
}

/* <1822ff> ../cstrike/dlls/subs.cpp:394 */
void CBaseToggle::Restore(CRestore &restore)
{
}

/* <1822e1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <17d35d> ../cstrike/dlls/spectator.cpp:61 */
void CBaseSpectator::SpectatorImpulseCommand(void)
{
//	{
//		edict_t *pGoal;                                      //    63
//		edict_t *pPreviousGoal;                              //    64
//		edict_t *pCurrentGoal;                               //    65
//		BOOL bFound;                                          //    66
//		FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//					const char *pszName);  //    82
//		FNullEnt(const edict_t *pent);  //    90
//	}
}

/* <17d2c2> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <17d297> ../cstrike/dlls/spectator.cpp:142 */
void CBaseSpectator::Spawn(void)
{
}

/* <17d271> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <17d236> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <17d05c> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <17d036> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <17d010> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <17cfdb> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <17cf7c> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <17cf47> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <17cf21> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <17cefb> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <17ced5> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <17ceaf> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <17ce88> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <17ce62> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <17ce3c> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <17ce16> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <17cde2> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <17cdbc> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <17cd96> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <17cd62> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <17cd3c> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <17cca8> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <17cc58> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <17cc24> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <17cbf0> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <17cba2> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <17cb60> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <17cb3a> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <17cb14> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <17cae2> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <17caa2> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <17ca76> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <17ca42> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <17ca1c> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <17c9f6> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <17c9d5> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <17c9a1> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <17c97b> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <17c955> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <17c8f2> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <17c89e> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <17c7ca> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <17c791> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <17c76a> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <17c73e> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1790b8> ../cstrike/dlls/soundent.cpp:367 */
void ClientSoundIndex(edict_t *pClient)
{
//	{
//		int iReturn;                                          //   369
//		ENTINDEX(edict_t *pEdict);  //   369
//	}
}

/* <179093> ../cstrike/dlls/soundent.cpp:339 */
void SoundPointerForIndex(int iIndex)
{
}

/* <179083> ../cstrike/dlls/soundent.cpp:325 */
void FreeList(void)
{
}

/* <179073> ../cstrike/dlls/soundent.cpp:312 */
void ActiveList(void)
{
}

/* <179031> ../cstrike/dlls/soundent.cpp:274 */
void CSoundEnt::ISoundsInList(int iListType)
{
//	{
//		int i;                                                //   276
//		int iThisSound;                                       //   277
//	}
}

/* <17900a> ../cstrike/dlls/soundent.cpp:80 */
void CSoundEnt::Spawn(void)
{
}

/* <178f4e> ../cstrike/dlls/soundent.cpp:228 */
void CSoundEnt::Initialize(void)
{
//	{
//		int i;                                                //   230
//		int iSound;                                           //   231
//		Clear(CSound *const this);  //   239
//		IAllocSound(CSoundEnt *const this);  //   249
//	}
}

/* <178e94> ../cstrike/dlls/soundent.cpp:200 */
void InsertSound(int iType, Vector &vecOrigin, int iVolume, float flDuration)
{
//	{
//		int iThisSound;                                       //   202
//		IAllocSound(CSoundEnt *const this);  //   210
//	}
}

/* <178e2d> ../cstrike/dlls/soundent.cpp:171 */
void CSoundEnt::IAllocSound(void)
{
//	{
//		int iNewSound;                                        //   173
//	}
//	IAllocSound(CSoundEnt *const this);  //   171
}

/* <178e07> ../cstrike/dlls/soundent.cpp:141 */
void FreeSound(int iSound, int iPrevious)
{
}

/* <178ddf> ../cstrike/dlls/soundent.cpp:67 */
void CSound::FIsScent(void)
{
}

/* <178db7> ../cstrike/dlls/soundent.cpp:54 */
void CSound::FIsSound(void)
{
}

/* <178d8f> ../cstrike/dlls/soundent.cpp:43 */
void CSound::Reset(void)
{
}

/* <178d6e> ../cstrike/dlls/soundent.cpp:29 */
void CSound::Clear(void)
{
}

/* <178ca4> ../cstrike/dlls/soundent.cpp:22 */
void soundent(entvars_t *pev)
{
//	GetClassPtr<CSoundEnt>(CSoundEnt *a);  //    22
}

/* <178b0c> ../cstrike/dlls/soundent.cpp:93 */
void CSoundEnt::Think(void)
{
//	{
//		int iSound;                                           //    95
//		int iPreviousSound;                                   //    96
//		{
//			int iNext;                                    //   107
//			FreeSound(int iSound,
//					int iPrevious);  //   110
//		}
//	}
//	Think(CSoundEnt *const this);  //    93
}

/* <178aeb> ../cstrike/dlls/soundent.cpp:141 */
void FreeSound(int iSound, int iPrevious)
{
}

/* <178a9c> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <178a76> ../cstrike/dlls/soundent.cpp:132 */
void CSoundEnt::Precache(void)
{
}

/* <178a50> ../cstrike/dlls/soundent.h:86 */
void CSoundEnt::ObjectCaps(void)
{
}

/* <178a2a> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1789ef> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <178815> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1787ef> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1787c9> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <178794> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <178735> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <178700> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1786da> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1786b4> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <17868e> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <178667> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <178641> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <17861b> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1785f5> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1785c1> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <17859b> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <178575> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <178541> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <17851b> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <178487> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <178437> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <178403> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1783cf> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <178381> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <17833f> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <178319> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <1782f3> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1782c1> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <178281> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <178255> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <178221> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <1781fb> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <1781d5> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <1781a1> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <17817b> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <178149> ../cstrike/dlls/cbase.h:800 */
CSoundEnt *GetClassPtr<CSoundEnt>(CSoundEnt *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <17812e> ../cstrike/dlls/soundent.h:67 */
inline void CSoundEnt::CSoundEnt(void)
{
}

/* <1780b8> ../cstrike/dlls/soundent.h:44 */
inline void CSound::CSound(void)
{
}

/* <17809d> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <178042> ../cstrike/dlls/soundent.cpp:93 */
void CSoundEnt::Think(void)
{
//	{
//		int iSound;                                           //    95
//		int iPreviousSound;                                   //    96
//		{
//			int iNext;                                    //   107
//		}
//	}
}

/* <178005> ../cstrike/dlls/soundent.cpp:274 */
void CSoundEnt::ISoundsInList(int iListType)
{
//	{
//		int i;                                                //   276
//		int iThisSound;                                       //   277
//	}
}

/* <177fe5> ../cstrike/dlls/soundent.cpp:29 */
void CSound::Clear(void)
{
}

/* <177fba> ../cstrike/dlls/soundent.cpp:171 */
void CSoundEnt::IAllocSound(void)
{
//	{
//		int iNewSound;                                        //   173
//	}
}

/* <177f9c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <177f48> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <177eae> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <177e7a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <177e53> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <177e27> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <177e09> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <17428e> ../cstrike/dlls/sound.cpp:960 */
void CEnvSound::Think(void)
{
//	
//env_sound_Think_fast:                                                 //  1039
//	
//env_sound_Think_slow:                                                 //  1043
//	{
//		edict_t *pentPlayer;                                 //   965
//		class CBasePlayer *pPlayer;                          //   966
//		float flRange;                                        //   972
//		edict(CBaseEntity *const this);  //   965
//		FNullEnt(const edict_t *pent);  //   968
//		VARS(edict_t *pent);  //   971
//		FNullEnt(const edict_t *pent);  //   977
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1024
//	}
}

/* <17406b> ../cstrike/dlls/sound.cpp:1885 */
void speaker(entvars_t *pev)
{
//	GetClassPtr<CSpeaker>(CSpeaker *a);  //  1885
}

/* <173d99> ../cstrike/dlls/sound.cpp:1697 */
/* linkage=_Z21TEXTURETYPE_PlaySoundP11TraceResult6VectorS1_i */
float TEXTURETYPE_PlaySound(TraceResult *ptr, Vector vecSrc, Vector vecEnd, int iBulletType)
{
//	{
//		char chTextureType;                                   //  1701
//		float fvol;                                           //  1702
//		float fvolbar;                                        //  1703
//		char szbuffer;                                        //  1704
//		const char *pTextureName;                           //  1705
//		float rgfl1;                                          //  1706
//		float rgfl2;                                          //  1707
//		char *rgsz;                                          //  1708
//		int cnt;                                              //  1709
//		float fattn;                                          //  1710
//		class CBaseEntity *pEntity;                          //  1715
//		Instance(edict_t *pent);  //  1715
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //  1730
//		CopyToArray(const Vector *const this,
//				float *rgfl);  //  1731
//		TEXTURETYPE_Find(char *name);  //  1752
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1833
//		{
//			float flVolume;                               //  1847
//			ENT(EOFFSET eoffset);  //  1851
//			ENT(EOFFSET eoffset);  //  1850
//		}
//		ENT(EOFFSET eoffset);  //  1857
//		ENT(EOFFSET eoffset);  //  1737
//	}
}

/* <173d41> ../cstrike/dlls/sound.cpp:1680 */
char TEXTURETYPE_Find(char *name)
{
//	{
//		int i;                                                //  1684
//	}
}

/* <173cc2> ../cstrike/dlls/sound.cpp:1610 */
/* linkage=_Z16TEXTURETYPE_Initv */
void TEXTURETYPE_Init(void)
{
//	{
//		char buffer;                                          //  1612
//		int i;                                                //  1613
//		int j;                                                //  1613
//		byte *pMemFile;                                      //  1614
//		int fileSize;                                         //  1615
//		int filePos;                                          //  1615
//	}
}

/* <173a7b> ../cstrike/dlls/sound.cpp:1530 */
/* linkage=_Z19EMIT_GROUPNAME_SUITP7edict_sPKc */
void EMIT_GROUPNAME_SUIT(edict_t *entity, const char *groupname)
{
//	{
//		float fvol;                                           //  1532
//		int pitch;                                            //  1533
//		SENTENCEG_PlayRndSz(edict_t *entity,
//					const char *szgroupname,
//					float volume,
//					float attenuation,
//					int flags,
//					int pitch);  //  1540
//	}
}

/* <1738c3> ../cstrike/dlls/sound.cpp:1515 */
/* linkage=_Z17EMIT_GROUPID_SUITP7edict_si */
void EMIT_GROUPID_SUIT(edict_t *entity, int isentenceg)
{
//	{
//		float fvol;                                           //  1517
//		int pitch;                                            //  1518
//		SENTENCEG_PlayRndI(edict_t *entity,
//					int isentenceg,
//					float volume,
//					float attenuation,
//					int flags,
//					int pitch);  //  1525
//	}
}

/* <173770> ../cstrike/dlls/sound.cpp:1500 */
/* linkage=_Z15EMIT_SOUND_SUITP7edict_sPKc */
void EMIT_SOUND_SUIT(edict_t *entity, const char *sample)
{
//	{
//		float fvol;                                           //  1502
//		int pitch;                                            //  1503
//		EMIT_SOUND_DYN(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation,
//				int flags,
//				int pitch);  //  1510
//	}
}

/* <1734e4> ../cstrike/dlls/sound.cpp:1334 */
/* linkage=_Z14SENTENCEG_Initv */
void SENTENCEG_Init(void)
{
//	{
//		char buffer;                                          //  1336
//		char szgroup;                                         //  1337
//		int i;                                                //  1338
//		int j;                                                //  1338
//		int isentencegs;                                      //  1339
//		int filePos;                                          //  1353
//		int fileSize;                                         //  1353
//		byte *pMemFile;                                      //  1354
//		{
//			const char *pString;                        //  1388
//		}
//		USENTENCEG_InitLRU(unsigned char *plru,
//					int count);  //  1449
//	}
}

/* <173360> ../cstrike/dlls/sound.cpp:1311 */
/* linkage=_Z14SENTENCEG_StopP7edict_sii */
void SENTENCEG_Stop(edict_t *entity, int isentenceg, int ipick)
{
//	{
//		char buffer;                                          //  1313
//		char sznum;                                           //  1314
//		STOP_SOUND(edict_t *entity,
//				int channel,
//				const char *sample);  //  1327
//	}
}

/* <173125> ../cstrike/dlls/sound.cpp:1285 */
/* linkage=_Z26SENTENCEG_PlaySequentialSzP7edict_sPKcffiiii */
int SENTENCEG_PlaySequentialSz(edict_t *entity, const char *szgroupname, float volume, float attenuation, int flags, int pitch, int ipick, int freset)
{
//	{
//		char name;                                            //  1288
//		int ipicknext;                                        //  1289
//		int isentenceg;                                       //  1290
//		SENTENCEG_GetIndex(const char *szgroupname);  //  1297
//		USENTENCEG_PickSequential(int isentenceg,
//						char *szfound,
//						int ipick,
//						int freset);  //  1301
//		EMIT_SOUND_DYN(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation,
//				int flags,
//				int pitch);  //  1303
//	}
}

/* <172b7a> ../cstrike/dlls/sound.cpp:1930 */
void CSpeaker::SpeakerThink(void)
{
//	{
//		char *szSoundFile;                                   //  1932
//		float flvolume;                                       //  1933
//		float flattenuation;                                  //  1934
//		int flags;                                            //  1935
//		int pitch;                                            //  1936
//		SENTENCEG_PlayRndSz(edict_t *entity,
//					const char *szgroupname,
//					float volume,
//					float attenuation,
//					int flags,
//					int pitch);  //  1980
//	}
}

/* <172b37> ../cstrike/dlls/sound.cpp:1457 */
int SENTENCEG_Lookup(const char *sample, char *sentencenum)
{
//	{
//		char sznum;                                           //  1459
//		int i;                                                //  1465
//	}
}

/* <172b0c> ../cstrike/dlls/sound.cpp:1213 */
int SENTENCEG_GetIndex(const char *szgroupname)
{
//	{
//		int i;                                                //  1215
//	}
}

/* <1729cb> ../cstrike/dlls/sound.cpp:1163 */
/* linkage=_Z15USENTENCEG_PickiPc */
int USENTENCEG_Pick(int isentenceg, char *szfound)
{
//	{
//		char *szgroupname;                                   //  1165
//		unsigned char *plru;                                 //  1166
//		unsigned char i;                                      //  1167
//		unsigned char count;                                  //  1168
//		char sznum;                                           //  1169
//		unsigned char ipick;                                  //  1170
//		int ffound;                                           //  1171
//		USENTENCEG_InitLRU(unsigned char *plru,
//					int count);  //  1195
//	}
}

/* <17290a> ../cstrike/dlls/sound.cpp:1115 */
int USENTENCEG_PickSequential(int isentenceg, char *szfound, int ipick, int freset)
{
//	{
//		char *szgroupname;                                   //  1117
//		unsigned char count;                                  //  1118
//		char sznum;                                           //  1119
//	}
}

/* <172633> ../cstrike/dlls/sound.cpp:919 */
/* linkage=_Z16FEnvSoundInRangeP9entvars_sS0_Pf */
BOOL FEnvSoundInRange(entvars_t *pev, entvars_t *pevTarget, float *pflRange)
{
//	{
//		class CEnvSound *pSound;                             //   921
//		Vector vecSpot1;                                //   922
//		Vector vecSpot2;                                //   923
//		Vector vecRange;                                //   924
//		float flRange;                                        //   925
//		TraceResult tr;                                       //   926
//		GetClassPtr<CEnvSound>(CEnvSound *a);  //   921
//		operator+(const Vector *const this,
//				const Vector &v);  //   922
//		operator+(const Vector *const this,
//				const Vector &v);  //   923
//		operator-(const Vector *const this,
//				const Vector &v);  //   937
//		Length(const Vector *const this);  //   938
//	}
}

/* <172566> ../cstrike/dlls/sound.cpp:891 */
void env_sound(entvars_t *pev)
{
//	GetClassPtr<CEnvSound>(CEnvSound *a);  //   891
}

/* <172534> ../cstrike/dlls/cbase.h:800 */
CEnvSound *GetClassPtr<CEnvSound>(CEnvSound *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1724f8> ../cstrike/dlls/sound.cpp:223 */
void CAmbientGeneric::Restart(void)
{
//	{
//		char *szSoundFile;                                   //   247
//	}
}

/* <1724bb> ../cstrike/dlls/sound.cpp:296 */
void CAmbientGeneric::Precache(void)
{
//	{
//		char *szSoundFile;                                   //   298
//	}
}

/* <172418> ../cstrike/dlls/sound.cpp:605 */
void CAmbientGeneric::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		char *szSoundFile;                                   //   607
//		float fraction;                                       //   608
//		{
//			int pitchinc;                                 //   649
//		}
//	}
}

/* <1723db> ../cstrike/dlls/sound.cpp:521 */
void CAmbientGeneric::InitModulationParms(void)
{
//	{
//		int pitchinc;                                         //   523
//	}
}

/* <172311> ../cstrike/dlls/sound.cpp:140 */
void ambient_generic(entvars_t *pev)
{
//	GetClassPtr<CAmbientGeneric>(CAmbientGeneric *a);  //   140
}

/* <171f38> ../cstrike/dlls/sound.cpp:717 */
void CAmbientGeneric::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   723
//	FStrEq(const char *sz1,
//		const char *sz2);  //   730
//	FStrEq(const char *sz1,
//		const char *sz2);  //   740
//	FStrEq(const char *sz1,
//		const char *sz2);  //   750
//	FStrEq(const char *sz1,
//		const char *sz2);  //   764
//	FStrEq(const char *sz1,
//		const char *sz2);  //   778
//	FStrEq(const char *sz1,
//		const char *sz2);  //   791
//	FStrEq(const char *sz1,
//		const char *sz2);  //   805
//	FStrEq(const char *sz1,
//		const char *sz2);  //   819
//	FStrEq(const char *sz1,
//		const char *sz2);  //   827
//	FStrEq(const char *sz1,
//		const char *sz2);  //   839
//	FStrEq(const char *sz1,
//		const char *sz2);  //   850
//	FStrEq(const char *sz1,
//		const char *sz2);  //   860
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   869
//	atoi(const char *__nptr);  //   732
//	atoi(const char *__nptr);  //   725
//	atoi(const char *__nptr);  //   742
//	atoi(const char *__nptr);  //   780
//	atoi(const char *__nptr);  //   752
//	atoi(const char *__nptr);  //   766
//	atoi(const char *__nptr);  //   829
//	atoi(const char *__nptr);  //   793
//	atoi(const char *__nptr);  //   807
//	atoi(const char *__nptr);  //   821
//	atoi(const char *__nptr);  //   841
//	atoi(const char *__nptr);  //   852
//	atoi(const char *__nptr);  //   862
}

/* <171e86> ../cstrike/dlls/sound.cpp:2044 */
void CSpeaker::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2048
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  2054
//	KeyValue(CSpeaker *const this,
//		KeyValueData *pkvd);  //  2044
}

/* <171e37> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <171d61> ../cstrike/dlls/sound.cpp:901 */
void CEnvSound::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   904
//	FStrEq(const char *sz1,
//		const char *sz2);  //   909
//	KeyValue(CEnvSound *const this,
//		KeyValueData *pkvd);  //   901
//	atof(const char *__nptr);  //   906
}

/* <171cc9> ../cstrike/dlls/sound.cpp:1561 */
void memfgets(byte *pMemFile, int fileSize, int &filePos, char *pBuffer, int bufferSize)
{
//	{
//		int i;                                                //  1570
//		int last;                                             //  1571
//		int stop;                                             //  1577
//		{
//			int size;                                     //  1592
//		}
//	}
}

/* <171c6b> ../cstrike/dlls/sound.cpp:1896 */
void CSpeaker::Spawn(void)
{
//	{
//		char *szSoundFile;                                   //  1898
//	}
//	Spawn(CSpeaker *const this);  //  1896
}

/* <171c1f> ../cstrike/dlls/sound.cpp:155 */
void CAmbientGeneric::Save(CSave &save)
{
//	Save(CAmbientGeneric *const this,
//		class CSave &save);  //   155
}

/* <171bd2> ../cstrike/dlls/sound.cpp:898 */
void CEnvSound::Save(CSave &save)
{
//	Save(CEnvSound *const this,
//		class CSave &save);  //   898
}

/* <171b85> ../cstrike/dlls/sound.cpp:1891 */
void CSpeaker::Save(CSave &save)
{
//	Save(CSpeaker *const this,
//		class CSave &save);  //  1891
}

/* <171b39> ../cstrike/dlls/sound.cpp:155 */
void CAmbientGeneric::Restore(CRestore &restore)
{
//	Restore(CAmbientGeneric *const this,
//		class CRestore &restore);  //   155
}

/* <171aec> ../cstrike/dlls/sound.cpp:898 */
void CEnvSound::Restore(CRestore &restore)
{
//	Restore(CEnvSound *const this,
//		class CRestore &restore);  //   898
}

/* <171a9f> ../cstrike/dlls/sound.cpp:1891 */
void CSpeaker::Restore(CRestore &restore)
{
//	Restore(CSpeaker *const this,
//		class CRestore &restore);  //  1891
}

/* <171a4e> ../cstrike/dlls/sound.cpp:1997 */
void CSpeaker::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int fActive;                                          //  1999
//	}
}

/* <171a16> ../cstrike/dlls/sound.cpp:1924 */
void CSpeaker::Precache(void)
{
//	Precache(CSpeaker *const this);  //  1924
}

/* <171973> ../cstrike/dlls/sound.cpp:328 */
void CAmbientGeneric::RampThink(void)
{
//	{
//		char *szSoundFile;                                   //   330
//		int pitch;                                            //   331
//		int vol;                                              //   332
//		int flags;                                            //   333
//		int fChanged;                                         //   334
//		int prev;                                             //   335
//		{
//			int pos;                                      //   429
//		}
//	}
}

/* <17194d> ../cstrike/dlls/sound.cpp:1880 */
void CSpeaker::ObjectCaps(void)
{
}

/* <171926> ../cstrike/dlls/sound.cpp:1053 */
void CEnvSound::Spawn(void)
{
}

/* <1718ea> ../cstrike/dlls/sound.cpp:160 */
void CAmbientGeneric::Spawn(void)
{
//	{
//		char *szSoundFile;                                   //   191
//	}
}

/* <1718c4> ../cstrike/dlls/sound.cpp:131 */
void CAmbientGeneric::ObjectCaps(void)
{
}

/* <1718a3> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <17187d> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <171842> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <171668> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <171642> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <17161c> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1715e7> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <171588> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <171553> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <17152d> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <171507> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1714e1> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <1714bb> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <171494> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <17146e> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <171448> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <171422> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1713ee> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <1713c8> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1713a2> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <17136e> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <171348> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1712b4> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <171264> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <171230> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1711fc> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <17119b> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <171159> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <171133> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <17110d> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1710db> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1710a7> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <171081> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <17104d> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <171027> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <171001> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <170fdb> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <170fb5> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <170f2a> ../cstrike/dlls/sound.cpp:1561 */
char *memfgets(byte *pMemFile, int fileSize, int &filePos, char *pBuffer, int bufferSize)
{
//	{
//		int i;                                                //  1570
//		int last;                                             //  1571
//		int stop;                                             //  1577
//		{
//			int size;                                     //  1592
//		}
//	}
}

/* <170eb5> ../cstrike/dlls/sound.cpp:1238 */
int SENTENCEG_PlayRndI(edict_t *entity, int isentenceg, float volume, float attenuation, int flags, int pitch)
{
//	{
//		char name;                                            //  1241
//		int ipick;                                            //  1242
//	}
}

/* <170e3f> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <170e20> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <170e00> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <170de0> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <170d8d> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <170d59> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <170d3b> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <170d09> ../cstrike/dlls/cbase.h:800 */
CSpeaker *GetClassPtr<CSpeaker>(CSpeaker *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <170ced> ../cstrike/dlls/sound.cpp:1867 */
inline void CSpeaker::CSpeaker(void)
{
}

/* <170ccc> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <170c87> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <170c42> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <170c05> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <170bde> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <170bc2> ../cstrike/dlls/sound.cpp:875 */
inline void CEnvSound::CEnvSound(void)
{
}

/* <170ba6> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <170b74> ../cstrike/dlls/cbase.h:800 */
CAmbientGeneric *GetClassPtr<CAmbientGeneric>(CAmbientGeneric *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <170b59> ../cstrike/dlls/sound.cpp:117 */
inline void CAmbientGeneric::CAmbientGeneric(void)
{
}

/* <170b00> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <170adc> ../cstrike/dlls/vector.h:117 */
inline void Vector::CopyToArray(float *rgfl)
{
}

/* <170ab7> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <170a36> ../cstrike/dlls/sound.cpp:1257 */
int SENTENCEG_PlayRndSz(edict_t *entity, const char *szgroupname, float volume, float attenuation, int flags, int pitch)
{
//	{
//		char name;                                            //  1260
//		int ipick;                                            //  1261
//		int isentenceg;                                       //  1262
//	}
}

/* <170992> ../cstrike/dlls/sound.cpp:1483 */
void EMIT_SOUND_DYN(edict_t *entity, int channel, const char *sample, float volume, float attenuation, int flags, int pitch)
{
//	{
//		char name;                                            //  1488
//	}
}

/* <17093f> ../cstrike/dlls/sound.cpp:1084 */
void USENTENCEG_InitLRU(unsigned char *plru, int count)
{
//	{
//		int i;                                                //  1086
//		int j;                                                //  1086
//		int k;                                                //  1086
//		unsigned char temp;                                   //  1087
//	}
}

/* <170921> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <170902> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1708af> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <17088a> ../cstrike/dlls/sound.cpp:2044 */
void CSpeaker::KeyValue(KeyValueData *pkvd)
{
}

/* <170861> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <1707f5> ../cstrike/dlls/sound.cpp:901 */
void CEnvSound::KeyValue(KeyValueData *pkvd)
{
}

/* <1707af> ../cstrike/dlls/sound.cpp:1896 */
void CSpeaker::Spawn(void)
{
//	{
//		char *szSoundFile;                                   //  1898
//	}
}

/* <1706e6> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1706b2> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <17068b> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <17065f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <17063f> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <170621> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1705f9> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <1705d0> ../cstrike/dlls/sound.cpp:155 */
void CAmbientGeneric::Save(CSave &save)
{
}

/* <1705a6> ../cstrike/dlls/sound.cpp:898 */
void CEnvSound::Save(CSave &save)
{
}

/* <17057c> ../cstrike/dlls/sound.cpp:1891 */
void CSpeaker::Save(CSave &save)
{
}

/* <17054e> ../cstrike/dlls/sound.cpp:155 */
void CAmbientGeneric::Restore(CRestore &restore)
{
}

/* <17051f> ../cstrike/dlls/sound.cpp:898 */
void CEnvSound::Restore(CRestore &restore)
{
}

/* <1704f5> ../cstrike/dlls/sound.cpp:1891 */
void CSpeaker::Restore(CRestore &restore)
{
}

/* <17049e> ../cstrike/dlls/sound.cpp:1997 */
void CSpeaker::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int fActive;                                          //  1999
//	}
}

/* <170480> ../cstrike/dlls/sound.cpp:1924 */
void CSpeaker::Precache(void)
{
}

/* <16a558> ../cstrike/dlls/skill.cpp:30 */
/* linkage=_Z12GetSkillCvarPc */
float GetSkillCvar(char *pName)
{
//	{
//		int iCount;                                           //    32
//		float flValue;                                        //    33
//		char szBuffer;                                        //    34
//	}
}

/* <1676c5> ../cstrike/dlls/singleplay_gamerules.cpp:32 */
void CHalfLifeRules::CHalfLifeRules(void)
{
}

/* <1676ac> ../cstrike/dlls/singleplay_gamerules.cpp:32 */
void CHalfLifeRules::CHalfLifeRules(void)
{
}

/* <167677> ../cstrike/dlls/singleplay_gamerules.cpp:120 */
void CHalfLifeRules::PlayerSpawn(CBasePlayer *pPlayer)
{
}

/* <1675e6> ../cstrike/dlls/singleplay_gamerules.cpp:220 */
void CHalfLifeRules::GetPlayerSpawnSpot(CBasePlayer *pPlayer)
{
//	{
//		class CBaseEntity *pSpot;                            //   222
//		operator+(const Vector *const this,
//				const Vector &v);  //   229
//		edict(CBaseEntity *const this);  //   236
//		INDEXENT(int iEdictNum);  //   226
//	}
}

/* <1675c0> ../cstrike/dlls/singleplay_gamerules.cpp:351 */
void CHalfLifeRules::FAllowMonsters(void)
{
}

/* <16757c> ../cstrike/dlls/singleplay_gamerules.cpp:343 */
void CHalfLifeRules::PlayerRelationship(CBasePlayer *pPlayer, CBaseEntity *pTarget)
{
}

/* <167547> ../cstrike/dlls/singleplay_gamerules.cpp:336 */
void CHalfLifeRules::DeadPlayerAmmo(CBasePlayer *pPlayer)
{
}

/* <167512> ../cstrike/dlls/singleplay_gamerules.cpp:329 */
void CHalfLifeRules::DeadPlayerWeapons(CBasePlayer *pPlayer)
{
}

/* <1674ec> ../cstrike/dlls/singleplay_gamerules.cpp:322 */
void CHalfLifeRules::FlHealthChargerRechargeTime(void)
{
}

/* <16748f> ../cstrike/dlls/singleplay_gamerules.cpp:315 */
void CHalfLifeRules::VecAmmoRespawnSpot(CBasePlayerAmmo *pAmmo)
{
//	Vector(Vector *const this,
//		const Vector &v);  //   317
}

/* <16745a> ../cstrike/dlls/singleplay_gamerules.cpp:308 */
void CHalfLifeRules::FlAmmoRespawnTime(CBasePlayerAmmo *pAmmo)
{
}

/* <167425> ../cstrike/dlls/singleplay_gamerules.cpp:301 */
void CHalfLifeRules::AmmoShouldRespawn(CBasePlayerAmmo *pAmmo)
{
}

/* <1673d2> ../cstrike/dlls/singleplay_gamerules.cpp:295 */
void CHalfLifeRules::PlayerGotAmmo(CBasePlayer *pPlayer, char *szName, int iCount)
{
}

/* <16739d> ../cstrike/dlls/singleplay_gamerules.cpp:288 */
void CHalfLifeRules::IsAllowedToSpawn(CBaseEntity *pEntity)
{
}

/* <167340> ../cstrike/dlls/singleplay_gamerules.cpp:281 */
void CHalfLifeRules::VecItemRespawnSpot(CItem *pItem)
{
//	Vector(Vector *const this,
//		const Vector &v);  //   283
}

/* <16730b> ../cstrike/dlls/singleplay_gamerules.cpp:272 */
void CHalfLifeRules::FlItemRespawnTime(CItem *pItem)
{
}

/* <1672d6> ../cstrike/dlls/singleplay_gamerules.cpp:263 */
void CHalfLifeRules::ItemShouldRespawn(CItem *pItem)
{
}

/* <167292> ../cstrike/dlls/singleplay_gamerules.cpp:257 */
void CHalfLifeRules::PlayerGotItem(CBasePlayer *pPlayer, class CItem *pItem)
{
}

/* <167250> ../cstrike/dlls/singleplay_gamerules.cpp:250 */
void CHalfLifeRules::CanHaveItem(CBasePlayer *pPlayer, class CItem *pItem)
{
}

/* <16721c> ../cstrike/dlls/singleplay_gamerules.cpp:243 */
void CHalfLifeRules::WeaponShouldRespawn(CBasePlayerItem *pWeapon)
{
}

/* <1671c1> ../cstrike/dlls/singleplay_gamerules.cpp:215 */
void CHalfLifeRules::VecWeaponRespawnSpot(CBasePlayerItem *pWeapon)
{
//	Vector(Vector *const this,
//		const Vector &v);  //   217
}

/* <16718d> ../cstrike/dlls/singleplay_gamerules.cpp:206 */
void CHalfLifeRules::FlWeaponTryRespawn(CBasePlayerItem *pWeapon)
{
}

/* <167159> ../cstrike/dlls/singleplay_gamerules.cpp:196 */
void CHalfLifeRules::FlWeaponRespawnTime(CBasePlayerItem *pWeapon)
{
}

/* <167117> ../cstrike/dlls/singleplay_gamerules.cpp:188 */
void CHalfLifeRules::PlayerGotWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
}

/* <1670c7> ../cstrike/dlls/singleplay_gamerules.cpp:180 */
void CHalfLifeRules::DeathNotice(CBasePlayer *pVictim, entvars_t *pKiller, entvars_t *pInflictor)
{
}

/* <167077> ../cstrike/dlls/singleplay_gamerules.cpp:173 */
void CHalfLifeRules::PlayerKilled(CBasePlayer *pVictim, entvars_t *pKiller, entvars_t *pInflictor)
{
}

/* <167035> ../cstrike/dlls/singleplay_gamerules.cpp:165 */
void CHalfLifeRules::IPointsForKill(CBasePlayer *pAttacker, CBasePlayer *pKilled)
{
}

/* <167001> ../cstrike/dlls/singleplay_gamerules.cpp:156 */
void CHalfLifeRules::FlPlayerSpawnTime(CBasePlayer *pPlayer)
{
}

/* <166fcd> ../cstrike/dlls/singleplay_gamerules.cpp:149 */
void CHalfLifeRules::FPlayerCanRespawn(CBasePlayer *pPlayer)
{
}

/* <166f99> ../cstrike/dlls/singleplay_gamerules.cpp:142 */
void CHalfLifeRules::PlayerThink(CBasePlayer *pPlayer)
{
}

/* <166f73> ../cstrike/dlls/singleplay_gamerules.cpp:135 */
void CHalfLifeRules::AllowAutoTargetCrosshair(void)
{
}

/* <166f3f> ../cstrike/dlls/singleplay_gamerules.cpp:110 */
void CHalfLifeRules::FlPlayerFallDamage(CBasePlayer *pPlayer)
{
}

/* <166f0b> ../cstrike/dlls/singleplay_gamerules.cpp:104 */
void CHalfLifeRules::ClientDisconnected(edict_t *pClient)
{
}

/* <166ed8> ../cstrike/dlls/singleplay_gamerules.cpp:98 */
void CHalfLifeRules::InitHUD(CBasePlayer *pl)
{
}

/* <166e7a> ../cstrike/dlls/singleplay_gamerules.cpp:93 */
void CHalfLifeRules::ClientConnected(edict_t *pEntity, const char *pszName, const char *pszAddress, char *szRejectReason)
{
}

/* <166e38> ../cstrike/dlls/singleplay_gamerules.cpp:86 */
void CHalfLifeRules::GetNextBestWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pCurrentWeapon)
{
}

/* <166df5> ../cstrike/dlls/singleplay_gamerules.cpp:68 */
void CHalfLifeRules::FShouldSwitchWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
}

/* <166dcf> ../cstrike/dlls/singleplay_gamerules.cpp:60 */
void CHalfLifeRules::IsCoOp(void)
{
}

/* <166da9> ../cstrike/dlls/singleplay_gamerules.cpp:53 */
void CHalfLifeRules::IsDeathmatch(void)
{
}

/* <166d83> ../cstrike/dlls/singleplay_gamerules.cpp:46 */
void CHalfLifeRules::IsMultiplayer(void)
{
}

/* <166d5d> ../cstrike/dlls/singleplay_gamerules.cpp:40 */
void CHalfLifeRules::Think(void)
{
}

/* <166d28> ../cstrike/dlls/gamerules.h:284 */
void CHalfLifeRules::GetTeamID(CBaseEntity *pEntity)
{
}

/* <166cfd> ../cstrike/dlls/gamerules.h:212 */
void CHalfLifeRules::FAllowFlashlight(void)
{
}

/* <166cd7> ../cstrike/dlls/gamerules.h:192 */
void CGameRules::CheckMapConditions(void)
{
}

/* <166c8b> ../cstrike/dlls/gamerules.h:187 */
void CGameRules::IsFreezePeriod(void)
{
}

/* <166c65> ../cstrike/dlls/gamerules.h:186 */
void CGameRules::EndMultiplayerGame(void)
{
}

/* <166c3f> ../cstrike/dlls/gamerules.h:180 */
void CGameRules::PlayTextureSounds(void)
{
}

/* <166c0b> ../cstrike/dlls/gamerules.h:177 */
void CGameRules::SetDefaultPlayerTeam(CBasePlayer *pPlayer)
{
}

/* <166bad> ../cstrike/dlls/gamerules.h:176 */
void CGameRules::ChangePlayerTeam(CBasePlayer *pPlayer, const char *pTeamName, BOOL bKill, BOOL bGib)
{
}

/* <166b79> ../cstrike/dlls/gamerules.h:175 */
void CGameRules::IsValidTeam(const char *pTeamName)
{
}

/* <166b45> ../cstrike/dlls/gamerules.h:174 */
void CGameRules::GetIndexedTeamName(int teamIndex)
{
}

/* <166b11> ../cstrike/dlls/gamerules.h:173 */
void CGameRules::GetTeamIndex(const char *pTeamName)
{
}

/* <166aeb> ../cstrike/dlls/gamerules.h:162 */
void CGameRules::FlHEVChargerRechargeTime(void)
{
}

/* <166a25> ../cstrike/dlls/gamerules.h:123 */
void CGameRules::ClientCommand_DeadOrAlive(CBasePlayer *pPlayer, const char *pcmd)
{
}

/* <1669e3> ../cstrike/dlls/gamerules.h:113 */
void CGameRules::ShouldAutoAim(CBasePlayer *pPlayer, edict_t *target)
{
}

/* <1669a1> ../cstrike/dlls/gamerules.h:112 */
void CGameRules::FPlayerCanTakeDamage(CBasePlayer *pPlayer, CBaseEntity *pAttacker)
{
}

/* <16696d> ../cstrike/dlls/gamerules.h:108 */
void CGameRules::UpdateGameMode(CBasePlayer *pPlayer)
{
}

/* <166921> ../cstrike/dlls/gamerules.h:100 */
void CGameRules::IsTeamplay(void)
{
}

/* <166901> ../cstrike/dlls/gamerules.h:86 */
inline void CGameRules::CGameRules(void)
{
}

/* <1668dd> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <16688e> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <166844> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <166809> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1667ba> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <16675e> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <166732> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <166706> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1666de> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <161fc2> (null):27581 */
void _GLOBAL__sub_I_gEvilImpulse101(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  // 11442
}

/* <1619fd> ../cstrike/dlls/player.cpp:9137 */
void CBasePlayer::SwitchTeam(void)
{
//	{
//		int oldTeam;                                          //  9139
//		char *szOldTeam;                                     //  9269
//		char *szNewTeam;                                     //  9270
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  9216
//		entindex(CBaseEntity *const this);  //  9217
//		{
//			int i;                                        //  9253
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  9245
//			SendItemStatus(CBasePlayer *pPlayer);  //  9249
//		}
//		edict(CBaseEntity *const this);  //  9277
//		edict(CBaseEntity *const this);  //  9277
//		{
//			class CCSBot *pBot;                          //  9282
//			{
//				const class BotProfile *pProfile;   //  9285
//				{
//					bool kick;                    //  9288
//				}
//			}
//		}
//		edict(CBaseEntity *const this);  //  9173
//		entindex(CBaseEntity *const this);  //  9173
//		edict(CBaseEntity *const this);  //  9210
//		entindex(CBaseEntity *const this);  //  9210
//		edict(CBaseEntity *const this);  //  9166
//		entindex(CBaseEntity *const this);  //  9166
//		edict(CBaseEntity *const this);  //  9148
//		entindex(CBaseEntity *const this);  //  9148
//		edict(CBaseEntity *const this);  //  9156
//		entindex(CBaseEntity *const this);  //  9156
//		edict(CBaseEntity *const this);  //  9160
//		entindex(CBaseEntity *const this);  //  9160
//		edict(CBaseEntity *const this);  //  9189
//		entindex(CBaseEntity *const this);  //  9189
//		edict(CBaseEntity *const this);  //  9203
//		entindex(CBaseEntity *const this);  //  9203
//		edict(CBaseEntity *const this);  //  9197
//		entindex(CBaseEntity *const this);  //  9197
//		edict(CBaseEntity *const this);  //  9193
//		entindex(CBaseEntity *const this);  //  9193
//	}
}

/* <1615d2> ../cstrike/dlls/player.cpp:3593 */
void CBasePlayer::ThrowPrimary(void)
{
//	ThrowWeapon(CBasePlayer::ThrowPrimary(//			char *pszItemName);  //  3595
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3596
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3597
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3598
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3599
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3600
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3601
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3602
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3603
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3604
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3605
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3606
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3608
//	ThrowWeapon(CBasePlayer *const this,
//			char *pszItemName);  //  3609
//	DropShield(CBasePlayer *const this,
//			bool bDeploy);  //  3611
}

/* <160a1a> ../cstrike/dlls/player.cpp:2300 */
void CBasePlayer::Killed(entvars_t *pevAttacker, int iGib)
{
//	{
//		class CSound *pSound;                                //  2302
//		Instance(entvars_t *pev);  //  2310
//		{
//			class CBaseEntity *pAttackerEntity;          //  2374
//			class CBasePlayer *pAttacker;                //  2375
//			bool killerHasShield;                         //  2378
//			bool wasBlind;                                //  2380
//			Instance(entvars_t *pev);  //  2374
//			HasShield(CBasePlayer *const this);  //  2378
//			{
//				class CCSBot *pBot;                  //  2383
//				IsBlind(const class CBasePlayer *const this);  //  2384
//			}
//			{
//				int i;                                //  2386
//				{
//					class CBasePlayer *pPlayer;  //  2388
//					{
//						bool killedByHumanPlayer;   //  2391
//					}
//				}
//			}
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2405
//		{
//			int i;                                        //  2411
//			{
//				class CBasePlayer *pObserver;        //  2413
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  2416
//			}
//		}
//		edict(CBaseEntity *const this);  //  2431
//		SetAnimation(CBasePlayer *const this,
//				PLAYER_ANIM playerAnim);  //  2439
//		{
//			class CSmokeGrenade *pSmoke;                 //  2461
//			Vector(Vector *const this,
//				const Vector &v);  //  2462
//			operator+(const Vector *const this,
//					const Vector &v);  //  2462
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //  2455
//		operator+(const Vector *const this,
//				const Vector &v);  //  2455
//		{
//			class CHEGrenade *pHEGrenade;                //  2448
//			Vector(Vector *const this,
//				const Vector &v);  //  2449
//			operator+(const Vector *const this,
//					const Vector &v);  //  2449
//		}
//		{
//			int gmsgADStop;                               //  2489
//			ENTINDEX(edict_t *pEdict);  //  2486
//			ENTINDEX(edict_t *pEdict);  //  2487
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  2490
//		}
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  2480
//		operator-(const Vector *const this);  //  2535
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2545
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2550
//		SendFOV(CBasePlayer *const this,
//			int fov);  //  2556
//		BuyZoneIcon_Clear(CBasePlayer *player);  //  2588
//		HintMessage(CBasePlayer *const this,
//				const char *pMessage,
//				BOOL bDisplayIfPlayerDead,
//				BOOL bOverride);  //  2618
//		HintMessage(CBasePlayer *const this,
//				const char *pMessage,
//				BOOL bDisplayIfPlayerDead,
//				BOOL bOverride);  //  2599
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2575
//		SendItemStatus(CBasePlayer *pPlayer);  //  2579
//		operator*(const Vector *const this,
//				float fl);  //  2508
//		operator*(const Vector *const this,
//				float fl);  //  2515
//		operator*(const Vector *const this,
//				float fl);  //  2532
//		Length(const Vector *const this);  //  2525
//		Length(const Vector *const this);  //  2525
//		operator/(const Vector *const this,
//				float fl);  //  2525
//		operator*(const Vector *const this,
//				float fl);  //  2525
//		Length(const Vector *const this);  //  2526
//		Length(const Vector *const this);  //  2520
//		Length(const Vector *const this);  //  2520
//		operator/(const Vector *const this,
//				float fl);  //  2520
//		operator*(const Vector *const this,
//				float fl);  //  2520
//		operator/(const Vector *const this,
//				float fl);  //  2520
//		Length(const Vector *const this);  //  2521
//	}
}

/* <16076f> ../cstrike/dlls/player.cpp:3952 */
void CBasePlayer::Disappear(void)
{
//	{
//		class CSound *pSound;                                //  3954
//		edict(CBaseEntity *const this);  //  3964
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3987
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3992
//		SendFOV(CBasePlayer *const this,
//			int fov);  //  3998
//		BuyZoneIcon_Clear(CBasePlayer *player);  //  4026
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  4017
//		SendItemStatus(CBasePlayer *pPlayer);  //  4021
//	}
}

/* <160720> ../cstrike/dlls/player.cpp:3387 */
void CBasePlayer::ThrowWeapon(char *pszItemName)
{
//	{
//		class CBasePlayerItem *pWeapon;                      //  3389
//		{
//			int i;                                        //  3391
//		}
//	}
}

/* <1606da> ../cstrike/dlls/player.cpp:3387 */
void CBasePlayer::ThrowWeapon(char *pszItemName)
{
//	{
//		class CBasePlayerItem *pWeapon;                      //  3389
//		{
//			int i;                                        //  3391
//		}
//	}
}

/* <1603f0> ../cstrike/dlls/player.cpp:8926 */
void CBasePlayer::DropPlayerItem(const char *pszItemName)
{
//	{
//		class CBasePlayerItem *pWeapon;                      //  8943
//		int i;                                                //  8944
//		{
//			class CWeaponBox *pWeaponBox;                //  9047
//			const char *modelName;                      //  9081
//			{
//				class CBaseEntity *pEntity;          //  9018
//				class CBasePlayer *pTempPlayer;      //  9019
//				edict(CBaseEntity *const this);  //  9014
//				edict(CBaseEntity *const this);  //  9014
//				edict(CBaseEntity *const this);  //  9023
//				FNullEnt(const edict_t *pent);  //  9023
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  9033
//			}
//			operator*(const Vector *const this,
//					float fl);  //  9047
//			{
//				class CCSBotManager *csBots;         //  9063
//			}
//			edict(CBaseEntity *const this);  //  9047
//			operator+(const Vector *const this,
//					const Vector &v);  //  9047
//			operator*(const Vector *const this,
//					float fl);  //  9053
//			iFlags(CBasePlayerItem *const this);  //  9070
//			{
//				int iAmmoIndex;                       //  9072
//				pszAmmo1(CBasePlayerItem *const this);  //  9072
//				GetAmmoIndex(const char *psz);  //  9072
//			}
//		}
//		DropShield(CBasePlayer *const this,
//				bool bDeploy);  //  8950
//	}
}

/* <15fdba> ../cstrike/dlls/player.cpp:6264 */
void CBasePlayer::Spawn(void)
{
//	{
//		int i;                                                //  6394
//		MAKE_STRING_CLASS(const char *str,
//					entvars_t *pev);  //  6275
//		ResetStamina(CBasePlayer *const this);  //  6308
//		edict(CBaseEntity *const this);  //  6314
//		edict(CBaseEntity *const this);  //  6315
//		edict(CBaseEntity *const this);  //  6340
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6461
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6461
//		{
//			int i;                                        //  6497
//		}
//		SendItemStatus(CBasePlayer *pPlayer);  //  6502
//		{
//			int i;                                        //  6507
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  6512
//		{
//			class CBasePlayer *pObserver;                //  6520
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  6523
//		}
//		HintMessage(CBasePlayer *const this,
//				const char *pMessage,
//				BOOL bDisplayIfPlayerDead,
//				BOOL bOverride);  //  6547
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  6553
//		entindex(CBaseEntity *const this);  //  6554
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  6568
//		edict(CBaseEntity *const this);  //  6569
//		ENTINDEX(edict_t *pEdict);  //  6569
//		{
//			char *infobuffer;                            //  6580
//			edict(CBaseEntity *const this);  //  6580
//			FStrEq(const char *sz1,
//				const char *sz2);  //  6582
//			entindex(CBaseEntity *const this);  //  6584
//		}
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6591
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6463
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6463
//		RemoveLevelText(CBasePlayer *const this);  //  6439
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  6374
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  6365
//	}
}

/* <15f9ac> ../cstrike/dlls/player.cpp:4717 */
void CBasePlayer::PreThink(void)
{
//	{
//		int buttonsChanged;                                   //  4719
//		class CBaseEntity *pGroundEntity;                    //  4831
//	}
//	PreThink(CBasePlayer *const this);  //  4717
}

/* <15f972> ../cstrike/dlls/player.cpp:4039 */
void CBasePlayer::PlayerDeathThink(void)
{
//	{
//		float flForward;                                      //  4041
//		BOOL fAnyButtonDown;                                  //  4088
//	}
}

/* <15f83d> ../cstrike/dlls/player.cpp:4039 */
void CBasePlayer::PlayerDeathThink(void)
{
//	{
//		float flForward;                                      //  4041
//		BOOL fAnyButtonDown;                                  //  4088
//		HasWeapons(CBasePlayer *const this);  //  4056
//		StopAnimation(CBaseMonster *const this);  //  4084
//		Length(const Vector *const this);  //  4049
//		Normalize(const Vector *const this);  //  4053
//		operator*(float fl,
//				const Vector &v);  //  4053
//	}
}

/* <15f739> ../cstrike/dlls/player.cpp:1756 */
void CBasePlayer::PackDeadPlayerItems(void)
{
//	{
//		bool bPackGun;                                        //  1759
//		bool bPackAmmo;                                       //  1760
//		int n;                                                //  1761
//		int nBestWeight;                                      //  1778
//		class CBasePlayerItem *pBestItem;                    //  1779
//		bool bShieldDropped;                                  //  1780
//		DropShield(CBasePlayer *const this,
//				bool bDeploy);  //  1784
//		{
//			class CBasePlayerItem *pPlayerItem;          //  1790
//			{
//				ItemInfo info;                        //  1798
//			}
//		}
//	}
}

/* <15f710> ../cstrike/dlls/player.cpp:1829 */
void CBasePlayer::GiveDefaultItems(void)
{
}

/* <15f62f> ../cstrike/dlls/player.cpp:9428 */
void CStripWeapons::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *pPlayer;                          //  9430
//		Instance(edict_t *pent);  //  9438
//	}
}

/* <15f406> ../cstrike/dlls/player.cpp:1871 */
void CBasePlayer::RemoveAllItems(BOOL removeSuit)
{
//	{
//		BOOL bKillProgBar;                                    //  1875
//		int i;                                                //  1925
//		class CBasePlayerItem *pPendingItem;                 //  1926
//		ResetAutoaim(CBasePlayer *const this);  //  1918
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1953
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1896
//		RemoveShield(CBasePlayer *const this);  //  1906
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1882
//		SendItemStatus(CBasePlayer *pPlayer);  //  1886
//	}
}

/* <15f2ab> ../cstrike/dlls/player.cpp:1985 */
void CBasePlayer::SetProgressBarTime(int time)
{
//	{
//		class CBaseEntity *pPlayer;                          //  2006
//		int myIndex;                                          //  2008
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2000
//		entindex(CBaseEntity *const this);  //  2008
//		edict(CBaseEntity *const this);  //  2010
//		FNullEnt(const edict_t *pent);  //  2010
//		{
//			class CBasePlayer *player;                   //  2012
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  2017
//		}
//	}
}

/* <15f281> ../cstrike/dlls/player.cpp:425 */
void player(entvars_t *pev)
{
}

/* <15f129> ../cstrike/dlls/player.cpp:659 */
void CBasePlayer::GetNextRadioRecipient(CBasePlayer *pStartPlayer)
{
//	{
//		class CBaseEntity *pEntity;                          //   661
//		edict(CBaseEntity *const this);  //   662
//		FNullEnt(const edict_t *pent);  //   662
//		{
//			BOOL bSend;                                   //   664
//			class CBasePlayer *pPlayer;                  //   665
//			{
//				class CBasePlayer *pTarget;          //   686
//				Instance(entvars_t *pev);  //   686
//			}
//		}
//	}
}

/* <15edd2> ../cstrike/dlls/player.cpp:705 */
void CBasePlayer::Radio(const char *msg_id, const char *msg_verbose, short int pitch, bool showIcon)
{
//	{
//		class CBaseEntity *pEntity;                          //   718
//		edict(CBaseEntity *const this);  //   719
//		FNullEnt(const edict_t *pent);  //   719
//		{
//			BOOL bSend;                                   //   721
//			class CBasePlayer *pPlayer;                  //   722
//			{
//				class CBasePlayer *pTarget;          //   743
//				Instance(entvars_t *pev);  //   743
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //   758
//			edict(CBaseEntity *const this);  //   759
//			ENTINDEX(edict_t *pEdict);  //   759
//			{
//				const char *placeName;              //   766
//				Place playerPlace;                    //   767
//				const BotPhraseList *placeList;     //   768
//				int i;                                //   769
//				{
//					const_iterator iter;          //   772
//					operator++(_List_const_iterator<BotPhrase*> *const this);  //   772
//				}
//				entindex(CBaseEntity *const this);  //   784
//				entindex(CBaseEntity *const this);  //   788
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //   795
//			edict(CBaseEntity *const this);  //   797
//			ENTINDEX(edict_t *pEdict);  //   797
//		}
//	}
}

/* <15dff9> ../cstrike/dlls/player.cpp:1241 */
void CBasePlayer::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		int fTookDamage;                                      //  1243
//		float flRatio;                                        //  1244
//		float flBonus;                                        //  1245
//		float flHealthPrev;                                   //  1246
//		int iGunType;                                         //  1247
//		float flShieldRatio;                                  //  1248
//		int teamAttack;                                       //  1251
//		int armorHit;                                         //  1251
//		class CBasePlayer *pAttack;                          //  1252
//		class CBaseEntity *pAttacker;                        //  1452
//		class CBaseEntity *attacker;                         //  1472
//		int i;                                                //  1662
//		{
//			float fTookDamage;                            //  1386
//			{
//				class CGrenade *pGrenade;            //  1290
//				class CBaseEntity *temp;             //  1291
//				GetClassPtr<CBaseEntity>(CBaseEntity *a);  //  1291
//				GetClassPtr<CGrenade>(CGrenade *a);  //  1295
//				edict(CBaseEntity *const this);  //  1299
//				Instance(entvars_t *pev);  //  1312
//			}
//			FNullEnt(const edict_t *pent);  //  1318
//			IsArmored(CBasePlayer *const this,
//					int nHitGroup);  //  1324
//			{
//				float flNew;                          //  1326
//				float flArmor;                        //  1327
//				{
//					int oldValue;                 //  1343
//				}
//			}
//			LogAttack(CBasePlayer *pAttacker,
//					class CBasePlayer *pVictim,
//					int teamAttack,
//					int healthHit,
//					int armorHit,
//					int newHealth,
//					int newArmor,
//					const char *killer_weapon_name);  //  1384
//			{
//				class CHalfLifeMultiplay *mp;        //  1395
//				{
//					int i;                        //  1398
//					{
//						class CBasePlayer *pPlayer;      //  1400
//						{
//							bool killedByHumanPlayer;           //  1403
//						}
//					}
//				}
//			}
//			{
//				int i;                                //  1414
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  1420
//			edict(CBaseEntity *const this);  //  1423
//			ENTINDEX(edict_t *pEdict);  //  1423
//			ENTINDEX(edict_t *pEdict);  //  1424
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  1429
//			edict(CBaseEntity *const this);  //  1430
//			ENTINDEX(edict_t *pEdict);  //  1430
//			{
//				int i;                                //  1434
//				{
//					class CBasePlayer *pPlayer;  //  1436
//					edict(CBaseEntity *const this);  //  1440
//					MESSAGE_BEGIN(int msg_dest,
//							int msg_type,
//							const float *pOrigin,
//							edict_t *ed);  //  1440
//				}
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //  1320
//			SetAnimation(CBasePlayer *const this,
//					PLAYER_ANIM playerAnim);  //  1372
//		}
//		Instance(entvars_t *pev);  //  1452
//		GetClassPtr<CBaseEntity>(CBaseEntity *a);  //  1472
//		{
//			class CBasePlayer *player;                   //  1475
//			{
//				class CBaseEntity *pBasePlayer;      //  1496
//				class CBasePlayer *basePlayer;       //  1497
//				edict(CBaseEntity *const this);  //  1500
//				FNullEnt(const edict_t *pent);  //  1500
//			}
//			HintMessage(CBasePlayer *const this,
//					const char *pMessage,
//					BOOL bDisplayIfPlayerDead,
//					BOOL bOverride);  //  1484
//			ShouldDoLargeFlinch(CBasePlayer *const this,
//						int nHitGroup,
//						int nGunType);  //  1557
//			SetAnimation(CBasePlayer *const this,
//					PLAYER_ANIM playerAnim);  //  1579
//			Length(const Vector *const this);  //  1559
//			{
//				Vector attack_velocity;         //  1561
//				operator-(const Vector *const this,
//						const Vector &v);  //  1563
//				Normalize(const Vector *const this);  //  1564
//				operator+(const Vector *const this,
//						const Vector &v);  //  1568
//			}
//			SetAnimation(CBasePlayer *const this,
//					PLAYER_ANIM playerAnim);  //  1570
//		}
//		IsArmored(CBasePlayer *const this,
//				int nHitGroup);  //  1587
//		{
//			float flNew;                                  //  1589
//			float flArmor;                                //  1590
//			{
//				int oldValue;                         //  1604
//			}
//		}
//		LogAttack(CBasePlayer *pAttacker,
//				class CBasePlayer *pVictim,
//				int teamAttack,
//				int healthHit,
//				int armorHit,
//				int newHealth,
//				int newArmor,
//				const char *killer_weapon_name);  //  1630
//		{
//			class CHalfLifeMultiplay *mp;                //  1643
//			{
//				int i;                                //  1646
//				{
//					class CBasePlayer *pPlayer;  //  1648
//					{
//						bool killedByHumanPlayer;   //  1651
//					}
//				}
//			}
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1670
//		edict(CBaseEntity *const this);  //  1673
//		ENTINDEX(edict_t *pEdict);  //  1673
//		ENTINDEX(edict_t *pEdict);  //  1674
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1679
//		edict(CBaseEntity *const this);  //  1680
//		ENTINDEX(edict_t *pEdict);  //  1680
//		{
//			class CBasePlayer *pPlayer;                  //  1686
//			edict(CBaseEntity *const this);  //  1690
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  1690
//		}
//	}
}

/* <15dfc3> ../cstrike/dlls/cbase.h:800 */
CBaseEntity *GetClassPtr<CBaseEntity>(CBaseEntity *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <15de5b> ../cstrike/dlls/player.cpp:1985 */
void CBasePlayer::SetProgressBarTime(int time)
{
//	{
//		class CBaseEntity *pPlayer;                          //  2006
//		int myIndex;                                          //  2008
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2000
//		entindex(CBaseEntity *const this);  //  2008
//		edict(CBaseEntity *const this);  //  2010
//		FNullEnt(const edict_t *pent);  //  2010
//		{
//			class CBasePlayer *player;                   //  2012
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  2017
//		}
//	}
}

/* <15dcb4> ../cstrike/dlls/player.cpp:2027 */
void CBasePlayer::SetProgressBarTime2(int time, float timeElapsed)
{
//	{
//		short int iTimeElapsed;                               //  2042
//		class CBaseEntity *pPlayer;                          //  2052
//		int myIndex;                                          //  2054
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2045
//		entindex(CBaseEntity *const this);  //  2054
//		edict(CBaseEntity *const this);  //  2056
//		FNullEnt(const edict_t *pent);  //  2056
//		{
//			class CBasePlayer *player;                   //  2058
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  2063
//		}
//	}
}

/* <15d049> ../cstrike/dlls/player.cpp:11380 */
void CBasePlayer::UpdateLocation(bool forceUpdate)
{
//	{
//		const char *placeName;                              // 11390
//		{
//			Place playerPlace;                            // 11393
//			const BotPhraseList *placeList;             // 11394
//			int i;                                        // 11395
//			{
//				const_iterator iter;                  // 11398
//				operator++(_List_const_iterator<BotPhrase*> *const this);  // 11398
//			}
//		}
//		{
//			int i;                                        // 11416
//			{
//				class CBasePlayer *player;           // 11418
//				edict(CBaseEntity *const this);  // 11425
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						edict_t *ed);  // 11425
//				entindex(CBaseEntity *const this);  // 11426
//				edict(CBaseEntity *const this);  // 11434
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						edict_t *ed);  // 11434
//				entindex(CBaseEntity *const this);  // 11435
//			}
//		}
//	}
}

/* <15cf7c> ../cstrike/dlls/player.cpp:11366 */
void CBasePlayer::IsObservingPlayer(CBasePlayer *pPlayer)
{
//	edict(CBaseEntity *const this);  // 11368
//	FNullEnt(const edict_t *pent);  // 11368
//	entindex(CBaseEntity *const this);  // 11371
}

/* <15cec1> ../cstrike/dlls/player.cpp:11341 */
void CBasePlayer::RebuyArmor(void)
{
//	ClientCommand(CBasePlayer::RebuyArmor(//			const char *cmd,
//			const char *arg1,
//			const char *arg2,
//			const char *arg3);  // 11361
//	ClientCommand(CBasePlayer *const this,
//			const char *cmd,
//			const char *arg1,
//			const char *arg2,
//			const char *arg3);  // 11357
}

/* <15ce59> ../cstrike/dlls/player.cpp:11330 */
void CBasePlayer::RebuyNightVision(void)
{
//	ClientCommand(CBasePlayer::RebuyNightVision(//			const char *cmd,
//			const char *arg1,
//			const char *arg2,
//			const char *arg3);  // 11338
}

/* <15cdf1> ../cstrike/dlls/player.cpp:11319 */
void CBasePlayer::RebuyDefuser(void)
{
//	ClientCommand(CBasePlayer::RebuyDefuser(//			const char *cmd,
//			const char *arg1,
//			const char *arg2,
//			const char *arg3);  // 11327
}

/* <15cd18> ../cstrike/dlls/player.cpp:11299 */
void CBasePlayer::RebuySmokeGrenade(void)
{
//	{
//		int iAmmoIndex;                                       // 11302
//		int numToBuy;                                         // 11309
//		GetAmmoIndex(const char *psz);  // 11302
//		{
//			int i;                                        // 11312
//			ClientCommand(CBasePlayer *const this,
//					const char *cmd,
//					const char *arg1,
//					const char *arg2,
//					const char *arg3);  // 11314
//		}
//	}
}

/* <15cc3f> ../cstrike/dlls/player.cpp:11279 */
void CBasePlayer::RebuyFlashbang(void)
{
//	{
//		int iAmmoIndex;                                       // 11282
//		int numToBuy;                                         // 11289
//		GetAmmoIndex(const char *psz);  // 11282
//		{
//			int i;                                        // 11292
//			ClientCommand(CBasePlayer *const this,
//					const char *cmd,
//					const char *arg1,
//					const char *arg2,
//					const char *arg3);  // 11294
//		}
//	}
}

/* <15cb66> ../cstrike/dlls/player.cpp:11259 */
void CBasePlayer::RebuyHEGrenade(void)
{
//	{
//		int iAmmoIndex;                                       // 11262
//		int numToBuy;                                         // 11269
//		GetAmmoIndex(const char *psz);  // 11262
//		{
//			int i;                                        // 11272
//			ClientCommand(CBasePlayer *const this,
//					const char *cmd,
//					const char *arg1,
//					const char *arg2,
//					const char *arg3);  // 11274
//		}
//	}
}

/* <15cae2> ../cstrike/dlls/player.cpp:11245 */
void CBasePlayer::RebuySecondaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *secondary;                  // 11247
//		ClientCommand(CBasePlayer *const this,
//				const char *cmd,
//				const char *arg1,
//				const char *arg2,
//				const char *arg3);  // 11255
//	}
}

/* <15ca68> ../cstrike/dlls/player.cpp:11233 */
void CBasePlayer::RebuySecondaryWeapon(void)
{
//	{
//		const char *alias;                                  // 11237
//		ClientCommand(CBasePlayer *const this,
//				const char *cmd,
//				const char *arg1,
//				const char *arg2,
//				const char *arg3);  // 11240
//	}
}

/* <15c9e4> ../cstrike/dlls/player.cpp:11217 */
void CBasePlayer::RebuyPrimaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 11219
//		ClientCommand(CBasePlayer *const this,
//				const char *cmd,
//				const char *arg1,
//				const char *arg2,
//				const char *arg3);  // 11229
//	}
}

/* <15c96a> ../cstrike/dlls/player.cpp:11200 */
void CBasePlayer::RebuyPrimaryWeapon(void)
{
//	{
//		const char *alias;                                  // 11209
//		ClientCommand(CBasePlayer *const this,
//				const char *cmd,
//				const char *arg1,
//				const char *arg2,
//				const char *arg3);  // 11212
//	}
}

/* <15c37d> ../cstrike/dlls/player.cpp:11134 */
void CBasePlayer::Rebuy(void)
{
//	{
//		char *fileData;                                      // 11138
//		char *token;                                         // 11140
//		RebuyArmor(CBasePlayer *const this);  // 11182
//		RebuyPrimaryWeapon(CBasePlayer *const this);  // 11146
//		RebuyPrimaryAmmo(CBasePlayer *const this);  // 11150
//		RebuySecondaryWeapon(CBasePlayer *const this);  // 11154
//		RebuySecondaryAmmo(CBasePlayer *const this);  // 11158
//		RebuyHEGrenade(CBasePlayer *const this);  // 11162
//		RebuyFlashbang(CBasePlayer *const this);  // 11166
//		RebuySmokeGrenade(CBasePlayer *const this);  // 11170
//		RebuyDefuser(CBasePlayer *const this);  // 11174
//		RebuyNightVision(CBasePlayer *const this);  // 11178
//	}
}

/* <15c362> ../cstrike/dlls/player.cpp:11341 */
void CBasePlayer::RebuyArmor(void)
{
}

/* <15c347> ../cstrike/dlls/player.cpp:11330 */
void CBasePlayer::RebuyNightVision(void)
{
}

/* <15c32c> ../cstrike/dlls/player.cpp:11319 */
void CBasePlayer::RebuyDefuser(void)
{
}

/* <15c2e6> ../cstrike/dlls/player.cpp:11299 */
void CBasePlayer::RebuySmokeGrenade(void)
{
//	{
//		int iAmmoIndex;                                       // 11302
//		int numToBuy;                                         // 11309
//		{
//			int i;                                        // 11312
//		}
//	}
}

/* <15c2a0> ../cstrike/dlls/player.cpp:11279 */
void CBasePlayer::RebuyFlashbang(void)
{
//	{
//		int iAmmoIndex;                                       // 11282
//		int numToBuy;                                         // 11289
//		{
//			int i;                                        // 11292
//		}
//	}
}

/* <15c25a> ../cstrike/dlls/player.cpp:11259 */
void CBasePlayer::RebuyHEGrenade(void)
{
//	{
//		int iAmmoIndex;                                       // 11262
//		int numToBuy;                                         // 11269
//		{
//			int i;                                        // 11272
//		}
//	}
}

/* <15c22f> ../cstrike/dlls/player.cpp:11245 */
void CBasePlayer::RebuySecondaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *secondary;                  // 11247
//	}
}

/* <15c204> ../cstrike/dlls/player.cpp:11233 */
void CBasePlayer::RebuySecondaryWeapon(void)
{
//	{
//		const char *alias;                                  // 11237
//	}
}

/* <15c1d9> ../cstrike/dlls/player.cpp:11217 */
void CBasePlayer::RebuyPrimaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 11219
//	}
}

/* <15c1ae> ../cstrike/dlls/player.cpp:11200 */
void CBasePlayer::RebuyPrimaryWeapon(void)
{
//	{
//		const char *alias;                                  // 11209
//	}
}

/* <15c0b4> ../cstrike/dlls/player.cpp:11027 */
void CBasePlayer::BuildRebuyStruct(void)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 11035
//		class CBasePlayerWeapon *secondary;                  // 11036
//		int iAmmoIndex;                                       // 11072
//		GetAmmoIndex(const char *psz);  // 11075
//		GetAmmoIndex(const char *psz);  // 11087
//		GetAmmoIndex(const char *psz);  // 11099
//	}
}

/* <15be4f> ../cstrike/dlls/player.cpp:10500 */
void CBasePlayer::AutoBuy(void)
{
//	{
//		const char *c;                                      // 10502
//		bool boughtPrimary;                                   // 10504
//		bool boughtSecondary;                                 // 10505
//		char prioritizedString;                               // 10519
//		PickFlashKillWeaponString(CBasePlayer *const this);  // 10507
//		PickGrenadeKillWeaponString(CBasePlayer *const this);  // 10513
//		PrioritizeAutoBuyString(CBasePlayer *const this,
//					char *autobuyString,
//					const char *priorityString);  // 10524
//		PrioritizeAutoBuyString(CBasePlayer *const this,
//					char *autobuyString,
//					const char *priorityString);  // 10531
//		PickFlashKillWeaponString(CBasePlayer *const this);  // 10542
//	}
}

/* <15bcd5> ../cstrike/dlls/player.cpp:10899 */
void CBasePlayer::ParseAutoBuyString(const char *string, bool &boughtPrimary, bool &boughtSecondary)
{
//	{
//		char command;                                         // 10901
//		const char *c;                                      // 10902
//		{
//			int i;                                        // 10912
//			class AutoBuyInfoStruct *commandInfo;        // 10945
//			GetAutoBuyCommandInfo(CBasePlayer *const this,
//						const char *command);  // 10945
//			ShouldExecuteAutoBuyCommand(CBasePlayer *const this,
//							const class AutoBuyInfoStruct *commandInfo,
//							bool boughtPrimary,
//							bool boughtSecondary);  // 10947
//			ClientCommand(CBasePlayer *const this,
//					const char *cmd,
//					const char *arg1,
//					const char *arg2,
//					const char *arg3);  // 10949
//		}
//	}
}

/* <15bc49> ../cstrike/dlls/player.cpp:11000 */
void CBasePlayer::PostAutoBuyCommandProcessing(const class AutoBuyInfoStruct *commandInfo, bool &boughtPrimary, bool &boughtSecondary)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 11002
//		class CBasePlayerWeapon *secondary;                  // 11003
//	}
}

/* <15bbfa> ../cstrike/dlls/player.cpp:10978 */
void CBasePlayer::GetAutoBuyCommandInfo(const char *command)
{
//	{
//		class AutoBuyInfoStruct *ret;                        // 10980
//		int i;                                                // 10982
//		class AutoBuyInfoStruct *temp;                       // 10983
//	}
}

/* <15bbaa> ../cstrike/dlls/player.cpp:10978 */
void CBasePlayer::GetAutoBuyCommandInfo(const char *command)
{
//	{
//		class AutoBuyInfoStruct *ret;                        // 10980
//		int i;                                                // 10982
//		class AutoBuyInfoStruct *temp;                       // 10983
//	}
}

/* <15bb6b> ../cstrike/dlls/player.cpp:10957 */
void CBasePlayer::ShouldExecuteAutoBuyCommand(const class AutoBuyInfoStruct *commandInfo, bool boughtPrimary, bool boughtSecondary)
{
}

/* <15bb0c> ../cstrike/dlls/player.cpp:10816 */
void CBasePlayer::PrioritizeAutoBuyString(char *autobuyString, const char *priorityString)
{
//	{
//		char newString;                                       // 10818
//		int newStringPos;                                     // 10819
//		char priorityToken;                                   // 10820
//		const char *priorityChar;                           // 10827
//		char *autobuyPosition;                               // 10872
//	}
}

/* <15baa1> ../cstrike/dlls/player.cpp:10787 */
void CBasePlayer::PickGrenadeKillWeaponString(void)
{
//	{
//		bool foundOne;                                        // 10789
//		CareerTaskListIt it;                                  // 10790
//		{
//			class CCareerTask *pTask;                    // 10793
//			operator++(_List_iterator<CCareerTask*> *const this);  // 10804
//		}
//	}
}

/* <15ba5a> ../cstrike/dlls/player.cpp:10787 */
void CBasePlayer::PickGrenadeKillWeaponString(void)
{
//	{
//		bool foundOne;                                        // 10789
//		CareerTaskListIt it;                                  // 10790
//		{
//			class CCareerTask *pTask;                    // 10793
//		}
//	}
}

/* <15b9ea> ../cstrike/dlls/player.cpp:10759 */
void CBasePlayer::PickFlashKillWeaponString(void)
{
//	{
//		bool foundOne;                                        // 10761
//		CareerTaskListIt it;                                  // 10762
//		{
//			class CCareerTask *pTask;                    // 10765
//			operator++(_List_iterator<CCareerTask*> *const this);  // 10776
//		}
//	}
}

/* <15b9a3> ../cstrike/dlls/player.cpp:10759 */
void CBasePlayer::PickFlashKillWeaponString(void)
{
//	{
//		bool foundOne;                                        // 10761
//		CareerTaskListIt it;                                  // 10762
//		{
//			class CCareerTask *pTask;                    // 10765
//		}
//	}
}

/* <15b5d7> ../cstrike/dlls/player.cpp:10690 */
void CBasePlayer::PickSecondaryCareerTaskWeapon(void)
{
//	{
//		int const BufLen;                                      // 10692
//		char buf;                                             // 10693
//		class CBasePlayerWeapon *secondary;                  // 10699
//		class vector<CCareerTask*, std::allocator<CCareerTask*>> taskVector;               // 10701
//		CareerTaskListIt it;                                  // 10702
//		vector(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this);  // 10701
//		{
//			class CCareerTask *pTask;                    // 10705
//			IsSecondaryWeaponId(int id);  // 10711
//			CurrentWeaponSatisfies(CBasePlayerWeapon *pWeapon,
//						int id,
//						int classId);  // 10714
//			push_back(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//					const value_type &__x);  // 10723
//			IsSecondaryWeaponId(int id);  // 10716
//			GetBuyStringForWeaponClass(int weaponClass);  // 10719
//		}
//		operator++(_List_iterator<CCareerTask*> *const this);  // 10703
//		{
//			int taskNum;                                  // 10731
//			class CCareerTask *temp;                     // 10733
//			operator[](vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//					size_type __n);  // 10734
//		}
//		{
//			int i;                                        // 10740
//			{
//				class CCareerTask *pTask;            // 10742
//				IsSecondaryWeaponId(int id);  // 10743
//			}
//			size(const class vector<CCareerTask*, std::allocator<CCareerTask*>> *const this);  // 10740
//		}
//		~vector(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//			int const __in_chrg);  // 10701
//	}
}

/* <15b1eb> ../cstrike/dlls/player.cpp:10623 */
void CBasePlayer::PickPrimaryCareerTaskWeapon(void)
{
//	{
//		int const BufLen;                                      // 10625
//		char buf;                                             // 10626
//		class CBasePlayerWeapon *primary;                    // 10632
//		class vector<CCareerTask*, std::allocator<CCareerTask*>> taskVector;               // 10634
//		CareerTaskListIt it;                                  // 10635
//		vector(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this);  // 10634
//		{
//			class CCareerTask *pTask;                    // 10638
//			push_back(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//					const value_type &__x);  // 10656
//			IsPrimaryWeaponId(int id);  // 10644
//			CurrentWeaponSatisfies(CBasePlayerWeapon *pWeapon,
//						int id,
//						int classId);  // 10647
//			IsPrimaryWeaponId(int id);  // 10649
//			GetBuyStringForWeaponClass(int weaponClass);  // 10652
//		}
//		operator++(_List_iterator<CCareerTask*> *const this);  // 10636
//		{
//			int taskNum;                                  // 10664
//			class CCareerTask *temp;                     // 10666
//			operator[](vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//					size_type __n);  // 10667
//		}
//		{
//			int i;                                        // 10673
//			{
//				class CCareerTask *pTask;            // 10675
//				IsPrimaryWeaponId(int id);  // 10676
//				GetBuyStringForWeaponClass(int weaponClass);  // 10682
//			}
//			size(const class vector<CCareerTask*, std::allocator<CCareerTask*>> *const this);  // 10673
//		}
//		~vector(vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//			int const __in_chrg);  // 10634
//	}
}

/* <15b133> ../cstrike/dlls/player.cpp:10607 */
bool CurrentWeaponSatisfies(CBasePlayerWeapon *pWeapon, int id, int classId)
{
//	{
//		const char *weaponName;                             // 10612
//	}
}

/* <15b0f1> ../cstrike/dlls/player.cpp:10600 */
const char *GetWeaponAliasFromName(const char *weaponName)
{
}

/* <15b059> ../cstrike/dlls/player.cpp:10588 */
bool IsSecondaryWeaponId(int id)
{
//	{
//		const char *alias;                                  // 10590
//		int classId;                                          // 10596
//	}
}

/* <15afbe> ../cstrike/dlls/player.cpp:10571 */
bool IsPrimaryWeaponId(int id)
{
//	{
//		const char *alias;                                  // 10573
//		int classId;                                          // 10579
//	}
}

/* <15af66> ../cstrike/dlls/player.cpp:10478 */
void CBasePlayer::InitRebuyData(const char *str)
{
}

/* <15af11> ../cstrike/dlls/player.cpp:10459 */
void CBasePlayer::AddAutoBuyData(const char *str)
{
//	{
//		int len;                                              // 10461
//	}
}

/* <15aee9> ../cstrike/dlls/player.cpp:10454 */
void CBasePlayer::ClearAutoBuyData(void)
{
}

/* <15aea9> ../cstrike/dlls/player.cpp:10401 */
const char *GetBuyStringForWeaponClass(int weaponClass)
{
}

/* <15ad9a> ../cstrike/dlls/player.cpp:10325 */
void CBasePlayer::NeedsGrenade(void)
{
//	{
//		int iAmmoIndex;                                       // 10327
//		GetAmmoIndex(const char *psz);  // 10329
//		GetAmmoIndex(const char *psz);  // 10340
//		GetAmmoIndex(const char *psz);  // 10351
//	}
}

/* <15ad5e> ../cstrike/dlls/player.cpp:10300 */
void CBasePlayer::NeedsDefuseKit(void)
{
//	{
//		class CHalfLifeMultiplay *mpRules;                   // 10314
//	}
}

/* <15ad36> ../cstrike/dlls/player.cpp:10285 */
void CBasePlayer::NeedsArmor(void)
{
}

/* <15ace1> ../cstrike/dlls/player.cpp:10268 */
void CBasePlayer::NeedsSecondaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *secondary;                  // 10270
//		iMaxAmmo1(CBasePlayerItem *const this);  // 10277
//	}
}

/* <15ac8c> ../cstrike/dlls/player.cpp:10247 */
void CBasePlayer::NeedsPrimaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 10249
//		iMaxAmmo1(CBasePlayerItem *const this);  // 10260
//	}
}

/* <15ac64> ../cstrike/dlls/player.cpp:10227 */
void CBasePlayer::CanAffordGrenade(void)
{
}

/* <15ac3c> ../cstrike/dlls/player.cpp:10217 */
void CBasePlayer::CanAffordDefuseKit(void)
{
}

/* <15ac14> ../cstrike/dlls/player.cpp:10199 */
void CBasePlayer::CanAffordArmor(void)
{
}

/* <15aba0> ../cstrike/dlls/player.cpp:10169 */
void CBasePlayer::CanAffordSecondaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *secondary;                  // 10171
//		{
//			int i;                                        // 10177
//			{
//				class WeaponStruct *temp;            // 10179
//			}
//		}
//	}
}

/* <15ab2c> ../cstrike/dlls/player.cpp:10139 */
void CBasePlayer::CanAffordPrimaryAmmo(void)
{
//	{
//		class CBasePlayerWeapon *primary;                    // 10141
//		{
//			int i;                                        // 10147
//			{
//				class WeaponStruct *temp;            // 10149
//			}
//		}
//	}
}

/* <15aa7b> ../cstrike/dlls/player.cpp:10083 */
void CBasePlayer::CanAffordPrimary(void)
{
//	{
//		int account;                                          // 10085
//		{
//			class WeaponStruct *temp;                    // 10113
//			{
//				int i;                                // 10114
//			}
//		}
//		{
//			class WeaponStruct *temp;                    // 10088
//			{
//				int i;                                // 10089
//			}
//		}
//	}
}

/* <15a92a> ../cstrike/dlls/player.cpp:10013 */
void CBasePlayer::IsLookingAtPosition(Vector *pos, float angleTolerance)
{
//	{
//		Vector to;                                      // 10015
//		Vector idealAngle;                              // 10017
//		float deltaYaw;                                       // 10020
//		float deltaPitch;                                     // 10021
//		operator+(const Vector *const this,
//				const Vector &v);  // 10015
//		operator-(const Vector *const this,
//				const Vector &v);  // 10015
//		NormalizeAngle(float angle);  // 10020
//		NormalizeAngle(float angle);  // 10021
//	}
}

/* <15a87d> ../cstrike/dlls/player.cpp:9971 */
void CBasePlayer::SetPrefsFromUserinfo(char *infobuffer)
{
//	{
//		const char *pszKeyVal;                              //  9973
//		atoi(const char *__nptr);  // 10005
//		atoi(const char *__nptr);  //  9994
//		atoi(const char *__nptr);  //  9983
//	}
}

/* <15a847> ../cstrike/dlls/player.cpp:9939 */
void CBasePlayer::ShouldDoLargeFlinch(int nHitGroup, int nGunType)
{
}

/* <15a812> ../cstrike/dlls/player.cpp:9939 */
void CBasePlayer::ShouldDoLargeFlinch(int nHitGroup, int nGunType)
{
}

/* <15a7a2> ../cstrike/dlls/player.cpp:9909 */
void CBasePlayer::IsArmored(int nHitGroup)
{
//	{
//		BOOL fApplyArmor;                                     //  9911
//	}
//	IsArmored(CBasePlayer *const this,
//			int nHitGroup);  //  9909
}

/* <15a6c2> ../cstrike/dlls/player.cpp:9880 */
void CBasePlayer::SpawnClientSideCorpse(void)
{
//	{
//		char *infobuffer;                                    //  9882
//		char *pModel;                                        //  9883
//		edict(CBaseEntity *const this);  //  9882
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  9885
//		entindex(CBaseEntity *const this);  //  9897
//	}
}

/* <15a5f9> ../cstrike/dlls/player.cpp:9863 */
/* linkage=_Z21GetPlayerGaitsequencePK7edict_s */
int GetPlayerGaitsequence(const edict_t *pEdict)
{
//	{
//		class CBasePlayer *pPlayer;                          //  9865
//		Instance(entvars_t *pev);  //  9870
//	}
}

/* <15a530> ../cstrike/dlls/player.cpp:9846 */
/* linkage=_Z12GetPlayerYawPK7edict_s */
float GetPlayerYaw(const edict_t *pEdict)
{
//	{
//		class CBasePlayer *pPlayer;                          //  9848
//		Instance(entvars_t *pev);  //  9853
//	}
}

/* <15a467> ../cstrike/dlls/player.cpp:9829 */
/* linkage=_Z14GetPlayerPitchPK7edict_s */
float GetPlayerPitch(const edict_t *pEdict)
{
//	{
//		class CBasePlayer *pPlayer;                          //  9831
//		Instance(entvars_t *pev);  //  9836
//	}
}

/* <15a444> ../cstrike/dlls/player.cpp:9821 */
void CBasePlayer::ResetStamina(void)
{
}

/* <15a182> ../cstrike/dlls/player.cpp:5667 */
void CBasePlayer::PostThink(void)
{
//	
//pt_end:                                                               //  5767
//	{
//		float flFallDamage;                                   //  5712
//		VARS(EOFFSET eoffset);  //  5723
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  5717
//		VARS(EOFFSET eoffset);  //  5723
//	}
//	SetAnimation(CBasePlayer *const this,
//			PLAYER_ANIM playerAnim);  //  5733
//	{
//		int i;                                                //  5771
//		{
//			class CBasePlayerItem *pPlayerItem;          //  5775
//			{
//				class CBasePlayerWeapon *gun;        //  5779
//			}
//		}
//	}
//	SetAnimation(CBasePlayer *const this,
//			PLAYER_ANIM playerAnim);  //  5752
//	CheckPowerups(CBasePlayer *const this,
//			entvars_t *pev);  //  5761
//	SetAnimation(CBasePlayer *const this,
//			PLAYER_ANIM playerAnim);  //  5757
}

/* <15a07b> ../cstrike/dlls/player.cpp:9776 */
void CBasePlayer::StudioProcessGait(void)
{
//	{
//		mstudioseqdesc_t *pseqdesc;                          //  9778
//		float dt;                                             //  9779
//		class model_s *model;                                //  9793
//		studiohdr_t *pstudiohdr;                             //  9797
//		CalculatePitchBlend(CBasePlayer *const this);  //  9791
//	}
}

/* <15a007> ../cstrike/dlls/player.cpp:9720 */
void CBasePlayer::CalculateYawBlend(void)
{
//	{
//		float dt;                                             //  9722
//		float flYaw;                                          //  9723
//		float maxyaw;                                         //  9745
//		float blend_yaw;                                      //  9763
//	}
}

/* <159f81> ../cstrike/dlls/player.cpp:9709 */
void CBasePlayer::CalculatePitchBlend(void)
{
//	{
//		int iBlend;                                           //  9711
//		float temp;                                           //  9712
//		StudioPlayerBlend(CBasePlayer *const this,
//					int *pBlend,
//					float *pPitch);  //  9714
//	}
}

/* <159f49> ../cstrike/dlls/player.cpp:9709 */
void CBasePlayer::CalculatePitchBlend(void)
{
//	{
//		int iBlend;                                           //  9711
//		float temp;                                           //  9712
//	}
}

/* <159f01> ../cstrike/dlls/player.cpp:9685 */
void CBasePlayer::StudioPlayerBlend(int *pBlend, float *pPitch)
{
//	{
//		float range;                                          //  9688
//	}
}

/* <159ebc> ../cstrike/dlls/player.cpp:9685 */
void CBasePlayer::StudioPlayerBlend(int *pBlend, float *pPitch)
{
//	{
//		float range;                                          //  9688
//	}
}

/* <159df8> ../cstrike/dlls/player.cpp:9586 */
void CBasePlayer::StudioEstimateGait(void)
{
//	{
//		float dt;                                             //  9588
//		Vector est_velocity;                            //  9589
//		operator-(const Vector *const this,
//				const Vector &v);  //  9604
//		Length(const Vector *const this);  //  9607
//		{
//			float flYawDiff;                              //  9618
//			float flYaw;                                  //  9619
//		}
//	}
}

/* <159d1c> ../cstrike/dlls/player.cpp:9574 */
void info_intermission(entvars_t *pev)
{
//	GetClassPtr<CInfoIntermission>(CInfoIntermission *a);  //  9574
}

/* <159c40> ../cstrike/dlls/player.cpp:9473 */
void player_loadsaved(entvars_t *pev)
{
//	GetClassPtr<CRevertSaved>(CRevertSaved *a);  //  9473
}

/* <159b64> ../cstrike/dlls/player.cpp:9426 */
void player_weaponstrip(entvars_t *pev)
{
//	GetClassPtr<CStripWeapons>(CStripWeapons *a);  //  9426
}

/* <159a88> ../cstrike/dlls/player.cpp:9386 */
void monster_hevsuit_dead(entvars_t *pev)
{
//	GetClassPtr<CDeadHEV>(CDeadHEV *a);  //  9386
}

/* <15997b> ../cstrike/dlls/player.cpp:7731 */
void CBasePlayer::GiveAmmo(int iCount, char *szName, int iMax)
{
//	{
//		int i;                                                //  7749
//		int iAdd;                                             //  7756
//		GetAmmoIndex(const char *psz);  //  7751
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7765
//		GetAmmoIndex(const char *psz);  //  7766
//	}
}

/* <1595ed> ../cstrike/dlls/player.cpp:9342 */
void CBasePlayer::TabulateAmmo(void)
{
//	GetAmmoIndex(const char *psz);  //  9344
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9344
//	GetAmmoIndex(const char *psz);  //  9345
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9345
//	GetAmmoIndex(const char *psz);  //  9346
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9346
//	GetAmmoIndex(const char *psz);  //  9347
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9347
//	GetAmmoIndex(const char *psz);  //  9348
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9348
//	GetAmmoIndex(const char *psz);  //  9349
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9349
//	GetAmmoIndex(const char *psz);  //  9350
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9350
//	GetAmmoIndex(const char *psz);  //  9351
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9351
//	GetAmmoIndex(const char *psz);  //  9352
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9352
//	GetAmmoIndex(const char *psz);  //  9353
//	AmmoInventory(CBasePlayer *const this,
//			int iAmmoIndex);  //  9353
}

/* <1595c0> ../cstrike/dlls/player.cpp:9313 */
void CBasePlayer::SwitchWeapon(CBasePlayerItem *pWeapon)
{
}

/* <159594> ../cstrike/dlls/player.cpp:9302 */
void CBasePlayer::UpdateShieldCrosshair(bool draw)
{
}

/* <159534> ../cstrike/dlls/player.cpp:9113 */
void CBasePlayer::HasNamedPlayerItem(const char *pszItemName)
{
//	{
//		class CBasePlayerItem *pItem;                        //  9115
//		int i;                                                //  9116
//	}
}

/* <1594a2> ../cstrike/dlls/player.cpp:9094 */
void CBasePlayer::HasPlayerItem(CBasePlayerItem *pCheckItem)
{
//	{
//		class CBasePlayerItem *pItem;                        //  9096
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  9100
//	}
}

/* <159079> ../cstrike/dlls/player.cpp:8749 */
void CBasePlayer::UpdateStatusBar(void)
{
//	{
//		int newSBarState;                                     //  8751
//		char sbuf0;                                           //  8752
//		TraceResult tr;                                       //  8758
//		Vector vecSrc;                                  //  8762
//		Vector vecEnd;                                  //  8763
//		BOOL bForceResend;                                    //  8890
//		operator+(const Vector *const this,
//				const Vector &v);  //  8760
//		operator*(const Vector *const this,
//				float fl);  //  8763
//		operator+(const Vector *const this,
//				const Vector &v);  //  8763
//		FNullEnt(const edict_t *pent);  //  8769
//		{
//			class CBaseEntity *pEntity;                  //  8771
//			bool isVisiblePlayer;                         //  8773
//			Instance(edict_t *pent);  //  8771
//			edict(CBaseEntity *const this);  //  8787
//			ENTINDEX(edict_t *pEdict);  //  8787
//			IsObserver(CBasePlayer *const this);  //  8798
//			IsObserver(CBasePlayer *const this);  //  8800
//			HintMessage(CBasePlayer *const this,
//					const char *pMessage,
//					BOOL bDisplayIfPlayerDead,
//					BOOL bOverride);  //  8815
//			HintMessage(CBasePlayer *const this,
//					const char *pMessage,
//					BOOL bDisplayIfPlayerDead,
//					BOOL bOverride);  //  8833
//			IsObserver(CBasePlayer *const this);  //  8840
//			HintMessage(CBasePlayer *const this,
//					const char *pMessage,
//					BOOL bDisplayIfPlayerDead,
//					BOOL bOverride);  //  8865
//			HintMessage(CBasePlayer *const this,
//					const char *pMessage,
//					BOOL bDisplayIfPlayerDead,
//					BOOL bOverride);  //  8861
//		}
//		{
//			int i;                                        //  8906
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  8910
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  8894
//	}
}

/* <159051> ../cstrike/dlls/player.cpp:8741 */
void CBasePlayer::InitStatusBar(void)
{
}

/* <15902e> ../cstrike/dlls/player.cpp:8720 */
void CBasePlayer::GetCustomDecalFrames(void)
{
}

/* <158ff6> ../cstrike/dlls/player.cpp:8704 */
void CBasePlayer::SetCustomDecalFrames(int nFrames)
{
}

/* <158fc1> ../cstrike/dlls/player.cpp:8686 */
void CBasePlayer::ResetAutoaim(void)
{
//	edict(CBaseEntity *const this);  //  8691
}

/* <158f62> ../cstrike/dlls/player.cpp:8553 */
void CBasePlayer::AutoaimDeflection(Vector &vecSrc, float flDist, float flDelta)
{
//	Vector(Vector *const this,
//		const Vector &v);  //  8559
}

/* <158f23> ../cstrike/dlls/player.cpp:8436 */
void CBasePlayer::HintMessage(const char *pMessage, BOOL bDisplayIfPlayerDead, BOOL bOverride)
{
}

/* <158eeb> ../cstrike/dlls/player.cpp:8371 */
void CBasePlayer::EnableControl(BOOL fControl)
{
}

/* <158ec3> ../cstrike/dlls/player.cpp:8350 */
void CBasePlayer::BarnacleVictimReleased(void)
{
}

/* <158e8a> ../cstrike/dlls/player.cpp:8341 */
void CBasePlayer::BarnacleVictimBitten(entvars_t *pevBarnacle)
{
}

/* <158dc6> ../cstrike/dlls/player.cpp:7949 */
void CBasePlayer::SendWeatherInfo(void)
{
//	{
//		class CBaseEntity *pPoint;                           //  7956
//		class CBaseEntity *pPoint2;                          //  7957
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7964
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7978
//	}
}

/* <158d4b> ../cstrike/dlls/player.cpp:7885 */
void CBasePlayer::SendHostagePos(void)
{
//	{
//		class CBaseEntity *pHostage;                         //  7887
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7894
//	}
}

/* <158c66> ../cstrike/dlls/player.cpp:7908 */
void CBasePlayer::SendHostageIcons(void)
{
//	{
//		class CBaseEntity *pHostage;                         //  7915
//		int numHostages;                                      //  7919
//		int const BufLen;                                      //  7929
//		char buf;                                             //  7930
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7935
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7943
//	}
}

/* <158bf7> ../cstrike/dlls/player.cpp:7865 */
void CBasePlayer::SendAmmoUpdate(void)
{
//	{
//		int i;                                                //  7867
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  7877
//	}
}

/* <158bce> ../cstrike/dlls/player.cpp:7865 */
void CBasePlayer::SendAmmoUpdate(void)
{
//	{
//		int i;                                                //  7867
//	}
}

/* <158b9d> ../cstrike/dlls/player.cpp:7844 */
void GetAmmoIndex(const char *psz)
{
//	{
//		int i;                                                //  7846
//	}
}

/* <158b71> ../cstrike/dlls/player.cpp:7834 */
void CBasePlayer::AmmoInventory(int iAmmoIndex)
{
}

/* <158b33> ../cstrike/dlls/player.cpp:7805 */
void CBasePlayer::ItemPostFrame(void)
{
//	{
//		int fInSelect;                                        //  7807
//	}
}

/* <158b10> ../cstrike/dlls/player.cpp:7784 */
void CBasePlayer::ItemPreFrame(void)
{
}

/* <158ae7> ../cstrike/dlls/player.cpp:7179 */
void CBasePlayer::ForceClientDllUpdate(void)
{
}

/* <1582e9> ../cstrike/dlls/player.cpp:7553 */
void CBasePlayer::HandleSignals(void)
{
//	{
//		int changed;                                          //  7576
//		int state;                                            //  7577
//		{
//			class CHalfLifeMultiplay *mp;                //  7563
//			OLD_CheckRescueZone(CBasePlayer *player);  //  7572
//			OLD_CheckBuyZone(CBasePlayer *player);  //  7566
//			OLD_CheckBombTarget(CBasePlayer *player);  //  7569
//		}
//		Update(CUnifiedSignals *const this);  //  7576
//		BuyZoneIcon_Set(CBasePlayer *player);  //  7582
//		BombTargetFlash_Set(CBasePlayer *player);  //  7590
//		RescueZoneIcon_Set(CBasePlayer *player);  //  7598
//		EscapeZoneIcon_Set(CBasePlayer *player);  //  7606
//		VIP_SafetyZoneIcon_Set(CBasePlayer *player);  //  7614
//		VIP_SafetyZoneIcon_Clear(CBasePlayer *player);  //  7616
//		BuyZoneIcon_Clear(CBasePlayer *player);  //  7584
//		EscapeZoneIcon_Clear(CBasePlayer *player);  //  7608
//		RescueZoneIcon_Clear(CBasePlayer *player);  //  7600
//		BombTargetFlash_Clear(CBasePlayer *player);  //  7592
//	}
}

/* <1582cc> ../cstrike/dlls/player.cpp:2231 */
inline void VIP_SafetyZoneIcon_Set(CBasePlayer *player)
{
}

/* <1582af> ../cstrike/dlls/player.cpp:2185 */
inline void EscapeZoneIcon_Set(CBasePlayer *player)
{
}

/* <158292> ../cstrike/dlls/player.cpp:2136 */
inline void RescueZoneIcon_Set(CBasePlayer *player)
{
}

/* <158256> ../cstrike/dlls/player.cpp:7474 */
void OLD_CheckBuyZone(CBasePlayer *player)
{
//	{
//		const char *pszSpawnClass;                          //  7476
//		{
//			class CBaseEntity *pSpot;                    //  7497
//		}
//	}
}

/* <157f8d> ../cstrike/dlls/player.cpp:7202 */
void CBasePlayer::ImpulseCommands(void)
{
//	{
//		TraceResult tr;                                       //  7204
//		int iImpulse;                                         //  7209
//		{
//			int iOn;                                      //  7215
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  7229
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //  7258
//		operator*(const Vector *const this,
//				float fl);  //  7258
//		operator+(const Vector *const this,
//				const Vector &v);  //  7258
//		operator+(const Vector *const this,
//				const Vector &v);  //  7258
//		{
//			class CSprayCan *pCan;                       //  7263
//			GetClassPtr<CSprayCan>(CSprayCan *a);  //  7263
//		}
//		FlashlightTurnOff(CBasePlayer *const this);  //  7241
//	}
}

/* <15786e> ../cstrike/dlls/player.cpp:7280 */
void CBasePlayer::CheatImpulseCommands(int iImpulse)
{
//	{
//		class CBaseEntity *pEntity;                          //  7288
//		TraceResult tr;                                       //  7289
//		{
//			TraceResult tr;                               //  7438
//			Vector dir;                             //  7439
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //  7436
//			{
//				int r;                                //  7440
//				{
//					float bloodRange;             //  7442
//					{
//						int i;                //  7444
//						NormalizeInPlace(Vector *const this);  //  7456
//						operator+(const Vector *const this,
//								const Vector &v);  //  7459
//						operator*(const Vector *const this,
//								float fl);  //  7459
//						operator+(const Vector *const this,
//								const Vector &v);  //  7459
//						operator+(const Vector *const this,
//								const Vector &v);  //  7459
//					}
//				}
//			}
//			AddAccount(CBasePlayer *const this,
//					int amount,
//					bool bTrackChange);  //  7314
//			{
//				TraceResult tr;                       //  7381
//				edict_t *pWorld;                     //  7383
//				Vector start;                   //  7385
//				Vector end;                     //  7386
//				const char *pTextureName;           //  7390
//				operator+(const Vector *const this,
//						const Vector &v);  //  7385
//				operator*(const Vector *const this,
//						float fl);  //  7386
//				operator+(const Vector *const this,
//						const Vector &v);  //  7386
//			}
//			{
//				class CBaseMonster *pMonster;        //  7331
//			}
//			operator+(const Vector *const this,
//					const Vector &v);  //  7418
//			operator*(const Vector *const this,
//					float fl);  //  7418
//			operator+(const Vector *const this,
//					const Vector &v);  //  7418
//			operator+(const Vector *const this,
//					const Vector &v);  //  7418
//			{
//				class CBloodSplat *pBlood;           //  7422
//				GetClassPtr<CBloodSplat>(CBloodSplat *a);  //  7422
//				Spawn(CBloodSplat *const this,
//					entvars_t *pevOwner);  //  7423
//			}
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //  7302
//			operator*(const Vector *const this,
//					float fl);  //  7303
//			operator+(const Vector *const this,
//					const Vector &v);  //  7303
//		}
//	}
}

/* <157816> ../cstrike/dlls/player.cpp:7157 */
void CBasePlayer::FlashlightTurnOff(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  7161
}

/* <1577fb> ../cstrike/dlls/player.cpp:7157 */
void CBasePlayer::FlashlightTurnOff(void)
{
}

/* <15779e> ../cstrike/dlls/player.cpp:7135 */
void CBasePlayer::FlashlightTurnOn(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  7146
}

/* <15777b> ../cstrike/dlls/player.cpp:7129 */
void CBasePlayer::FlashlightIsOn(void)
{
}

/* <157568> ../cstrike/dlls/player.cpp:7114 */
/* linkage=_Z17FindEntityForwardP11CBaseEntity */
CBaseEntity *FindEntityForward(CBaseEntity *pMe)
{
//	{
//		TraceResult tr;                                       //  7116
//		edict(CBaseEntity *const this);  //  7119
//		operator+(const Vector *const this,
//				const Vector &v);  //  7119
//		operator*(const Vector *const this,
//				float fl);  //  7119
//		operator+(const Vector *const this,
//				const Vector &v);  //  7119
//		operator+(const Vector *const this,
//				const Vector &v);  //  7119
//		FNullEnt(const edict_t *pent);  //  7120
//		{
//			class CBaseEntity *pHit;                     //  7122
//			Instance(edict_t *pent);  //  7122
//		}
//	}
}

/* <1574d3> ../cstrike/dlls/player.cpp:7093 */
void CBasePlayer::GiveNamedItem(const char *pszName)
{
//	{
//		edict_t *pent;                                       //  7095
//		int istr;                                             //  7097
//		FNullEnt(const edict_t *pent);  //  7100
//	}
}

/* <157481> ../cstrike/dlls/player.cpp:7064 */
void CBloodSplat::Spawn(entvars_t *pevOwner)
{
//	operator+(const Vector *const this,
//			const Vector &v);  //  7066
}

/* <157459> ../cstrike/dlls/player.cpp:7064 */
void CBloodSplat::Spawn(entvars_t *pevOwner)
{
}

/* <1573aa> ../cstrike/dlls/player.cpp:7010 */
void CSprayCan::Spawn(entvars_t *pevOwner)
{
//	operator+(const Vector *const this,
//			const Vector &v);  //  7012
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  7018
}

/* <157372> ../cstrike/dlls/player.cpp:6982 */
void CBasePlayer::SelectPrevItem(int iItem)
{
}

/* <15733a> ../cstrike/dlls/player.cpp:6967 */
void CBasePlayer::HasWeapons(void)
{
//	{
//		int i;                                                //  6969
//	}
}

/* <157268> ../cstrike/dlls/player.cpp:6909 */
void CBasePlayer::SelectLastItem(void)
{
//	{
//		class CBasePlayerItem *pTemp;                        //  6954
//		{
//			int i;                                        //  6920
//		}
//		ResetAutoaim(CBasePlayer *const this);  //  6936
//		{
//			class CBasePlayerWeapon *pWeapon;            //  6944
//		}
//		UpdateShieldCrosshair(CBasePlayer *const this,
//					bool draw);  //  6960
//	}
}

/* <15714a> ../cstrike/dlls/player.cpp:6851 */
void CBasePlayer::SelectItem(const char *pstr)
{
//	{
//		class CBasePlayerItem *pItem;                        //  6856
//		{
//			int i;                                        //  6858
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  6866
//		}
//		ResetAutoaim(CBasePlayer *const this);  //  6883
//		{
//			class CBasePlayerWeapon *pWeapon;            //  6896
//			UpdateShieldCrosshair(CBasePlayer *const this,
//						bool draw);  //  6901
//		}
//	}
}

/* <157066> ../cstrike/dlls/player.cpp:6794 */
void CBasePlayer::SelectNextItem(int iItem)
{
//	{
//		class CBasePlayerItem *pItem;                        //  6796
//		{
//			class CBasePlayerItem *pLast;                //  6812
//		}
//		ResetAutoaim(CBasePlayer *const this);  //  6823
//		{
//			class CBasePlayerWeapon *pWeapon;            //  6833
//		}
//		UpdateShieldCrosshair(CBasePlayer *const this,
//					bool draw);  //  6844
//	}
}

/* <156eab> ../cstrike/dlls/player.cpp:6771 */
void CBasePlayer::Reset(void)
{
//	AddAccount(CBasePlayer::Reset(//			int amount,
//			bool bTrackChange);  //  6776
//	RemoveShield(CBasePlayer *const this);  //  6779
//	AddAccount(CBasePlayer *const this,
//			int amount,
//			bool bTrackChange);  //  6782
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  6784
//	edict(CBaseEntity *const this);  //  6785
//	ENTINDEX(edict_t *pEdict);  //  6785
}

/* <156e88> ../cstrike/dlls/player.cpp:6712 */
void CBasePlayer::RenewItems(void)
{
}

/* <156d8c> ../cstrike/dlls/player.cpp:6685 */
void CBasePlayer::SetScoreboardAttributes(CBasePlayer *destination)
{
//	SetScoreAttrib(CBasePlayer *dest,
//			class CBasePlayer *src);  //  6691
}

/* <156b9b> ../cstrike/dlls/player.cpp:6718 */
void CBasePlayer::Restore(CRestore &restore)
{
//	{
//		int status;                                           //  6723
//		SAVERESTOREDATA *pSaveData;                          //  6725
//	}
//	Restore(CBasePlayer *const this,
//		class CRestore &restore);  //  6718
}

/* <15645f> ../cstrike/dlls/player.cpp:6060 */
/* linkage=_Z19EntSelectSpawnPointP11CBaseEntity */
edict_t *EntSelectSpawnPoint(CBaseEntity *pPlayer)
{
//	
//CTSpawn:                                                              //  6095
//	
//ReturnSpot:                                                           //  6222
//	{
//		class CBaseEntity *pSpot;                            //  6062
//		edict_t *player;                                     //  6063
//		edict(CBaseEntity *const this);  //  6065
//		FNullEnt(CBaseEntity *ent);  //  6071
//		FNullEnt(CBaseEntity *ent);  //  6085
//		{
//			class CBaseEntity *pFirstSpot;               //  6116
//			FNullEnt(CBaseEntity *ent);  //  6113
//			IsSpawnPointValid(CBaseEntity *pPlayer,
//						class CBaseEntity *pSpot);  //  6123
//			FNullEnt(CBaseEntity *ent);  //  6140
//			{
//				class CBaseEntity *ent;              //  6142
//				edict(CBaseEntity *const this);  //  6146
//				VARS(edict_t *pent);  //  6147
//				INDEXENT(int iEdictNum);  //  6147
//				INDEXENT(int iEdictNum);  //  6147
//				VARS(edict_t *pent);  //  6147
//			}
//			operator==(const Vector *const this,
//					const Vector &v);  //  6125
//		}
//		{
//			class CBaseEntity *pFirstSpot;               //  6168
//			FNullEnt(CBaseEntity *ent);  //  6165
//			IsSpawnPointValid(CBaseEntity *pPlayer,
//						class CBaseEntity *pSpot);  //  6175
//			FNullEnt(CBaseEntity *ent);  //  6192
//			{
//				class CBaseEntity *ent;              //  6194
//				edict(CBaseEntity *const this);  //  6198
//				VARS(edict_t *pent);  //  6199
//				INDEXENT(int iEdictNum);  //  6199
//				INDEXENT(int iEdictNum);  //  6199
//				VARS(edict_t *pent);  //  6199
//			}
//			operator==(const Vector *const this,
//					const Vector &v);  //  6177
//		}
//		FNullEnt(CBaseEntity *ent);  //  6074
//		FNullEnt(CBaseEntity *ent);  //  6218
//		FNullEnt(CBaseEntity *ent);  //  6223
//		INDEXENT(int iEdictNum);  //  6226
//		edict(CBaseEntity *const this);  //  6234
//		FNullEnt(CBaseEntity *ent);  //  6212
//	}
}

/* <1563a8> ../cstrike/dlls/player.cpp:5879 */
/* linkage=_Z16InitZombieSpawnsv */
void InitZombieSpawns(void)
{
//	{
//		class CBaseEntity *spot;                             //  5884
//		operator!=(const Vector *const this,
//				const Vector &v);  //  5889
//		Invalidate(CountdownTimer *const this);  //  5892
//	}
}

/* <1562a4> ../cstrike/dlls/player.cpp:5543 */
void CBasePlayer::UpdatePlayerSound(void)
{
//	{
//		int iBodyVolume;                                      //  5545
//		int iVolume;                                          //  5546
//		class CSound *pSound;                                //  5547
//		edict(CBaseEntity *const this);  //  5549
//		Length(const Vector *const this);  //  5564
//	}
}

/* <15626b> ../cstrike/dlls/player.cpp:5531 */
void CBasePlayer::SetNewPlayerModel(const char *modelName)
{
}

/* <15623f> ../cstrike/dlls/player.cpp:5519 */
void CBasePlayer::CheckPowerups(entvars_t *pev)
{
}

/* <156201> ../cstrike/dlls/player.cpp:5414 */
void CBasePlayer::SetSuitUpdate(char *name, int fgroup, int iNoRepeatTime)
{
}

/* <156189> ../cstrike/dlls/player.cpp:5352 */
void CBasePlayer::CheckSuitUpdate(void)
{
//	{
//		int i;                                                //  5354
//		int isentence;                                        //  5355
//		int isearch;                                          //  5356
//		{
//			char sentence;                                //  5390
//		}
//	}
}

/* <156112> ../cstrike/dlls/player.cpp:5312 */
void CBasePlayer::UpdateGeigerCounter(void)
{
//	{
//		BYTE range;                                           //  5314
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  5330
//	}
}

/* <156096> ../cstrike/dlls/player.cpp:5146 */
void CBasePlayer::CheckTimeBasedDamage(void)
{
//	{
//		int i;                                                //  5148
//		BYTE bDuration;                                       //  5149
//		float gtbdPrev;                                       //  5151
//		{
//			int idif;                                     //  5190
//		}
//	}
}

/* <156047> ../cstrike/dlls/player.cpp:4645 */
void CBasePlayer::CanPlayerBuy(bool display)
{
//	{
//		bool result;                                          //  4647
//		class CHalfLifeMultiplay *mp;                        //  4666
//		int buyTime;                                          //  4668
//	}
}

/* <155fe2> ../cstrike/dlls/player.cpp:4565 */
/* linkage=_Z20FixPlayerCrouchStuckP7edict_s */
void FixPlayerCrouchStuck(edict_t *pPlayer)
{
//	{
//		TraceResult trace;                                    //  4567
//		{
//			int i;                                        //  4570
//		}
//	}
}

/* <155f41> ../cstrike/dlls/player.cpp:4486 */
void CBasePlayer::HostageUsed(void)
{
//	HintMessage(CBasePlayer::HostageUsed(//			const char *pMessage,
//			BOOL bDisplayIfPlayerDead,
//			BOOL bOverride);  //  4493
//	HintMessage(CBasePlayer *const this,
//			const char *pMessage,
//			BOOL bDisplayIfPlayerDead,
//			BOOL bOverride);  //  4497
}

/* <155815> ../cstrike/dlls/player.cpp:4307 */
void CBasePlayer::PlayerUse(void)
{
//	{
//		bool useNewHostages;                                  //  4309
//		class CBaseEntity *pObject;                          //  4359
//		class CBaseEntity *pClosest;                         //  4360
//		Vector vecLOS;                                  //  4361
//		float flMaxDot;                                       //  4362
//		float flDot;                                          //  4363
//		empty(const class list<CNavArea*, std::allocator<CNavArea*>> *const this);  //  4309
//		{
//			class CBaseEntity *pTrain;                   //  4339
//			Instance(edict_t *pent);  //  4339
//			TrainSpeed(int iSpeed,
//					int iMax);  //  4344
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //  4348
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //  4352
//		}
//		{
//			class CBaseEntity *pTrain;                   //  4332
//			Instance(edict_t *pent);  //  4332
//		}
//		{
//			float const useHostageRange;                   //  4373
//			TraceResult result;                           //  4378
//			operator+(const Vector *const this,
//					const Vector &v);  //  4381
//			operator*(float fl,
//					const Vector &v);  //  4381
//			operator+(const Vector *const this,
//					const Vector &v);  //  4381
//			operator+(const Vector *const this,
//					const Vector &v);  //  4381
//			{
//				class CBaseEntity *hit;              //  4385
//				Instance(edict_t *pent);  //  4385
//				FClassnameIs(entvars_t *pev,
//						const char *szClassname);  //  4387
//			}
//			FClassnameIs(entvars_t *pev,
//					const char *szClassname);  //  4403
//			operator+(const Vector *const this,
//					const Vector &v);  //  4405
//			operator-(const Vector *const this,
//					const Vector &v);  //  4405
//			NormalizeInPlace(Vector *const this);  //  4406
//			DotProduct(Vector &a,
//					const Vector &b);  //  4408
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //  4433
//		operator-(const Vector *const this,
//				const Vector &v);  //  4433
//		NormalizeInPlace(Vector *const this);  //  4434
//		DotProduct(Vector &a,
//				const Vector &b);  //  4436
//		{
//			int caps;                                     //  4455
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //  4458
//		}
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  4480
//	}
}

/* <155616> ../cstrike/dlls/player.cpp:4190 */
void CBasePlayer::StartObserver(Vector vecPosition, Vector vecViewAngle)
{
//	{
//		int iFirstTime;                                       //  4194
//		class CHalfLifeMultiplay *mp;                        //  4246
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  4197
//		entindex(CBaseEntity *const this);  //  4199
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  4216
//		SendFOV(CBasePlayer *const this,
//			int fov);  //  4222
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  4262
//		edict(CBaseEntity *const this);  //  4263
//		ENTINDEX(edict_t *pEdict);  //  4263
//		edict(CBaseEntity *const this);  //  4250
//	}
}

/* <155577> ../cstrike/dlls/player.cpp:4172 */
void CBasePlayer::StartDeathCam(void)
{
//	operator==(const Vector ::StartDeathCam(//			const Vector &v);  //  4174
//	Vector(Vector *const this,
//		const Vector &v);  //  4180
//	Vector(Vector *const this,
//		const Vector &v);  //  4180
}

/* <154fe5> ../cstrike/dlls/player.cpp:3785 */
void CBasePlayer::JoiningThink(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  3787
//		{
//			class CHalfLifeMultiplay *MPRules;           //  3843
//			RemoveLevelText(CBasePlayer *const this);  //  3815
//			{
//				edict_t *pentSpawnSpot;              //  3861
//				MAKE_STRING_CLASS(const char *str,
//							entvars_t *pev);  //  3857
//				VARS(edict_t *pent);  //  3862
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						edict_t *ed);  //  3866
//				Vector(Vector *const this,
//					const Vector &v);  //  3862
//				Vector(Vector *const this,
//					const Vector &v);  //  3862
//				entindex(CBaseEntity *const this);  //  3867
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						edict_t *ed);  //  3878
//				entindex(CBaseEntity *const this);  //  3879
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						edict_t *ed);  //  3884
//				edict(CBaseEntity *const this);  //  3885
//				ENTINDEX(edict_t *pEdict);  //  3885
//				HintMessage(CBasePlayer *const this,
//						const char *pMessage,
//						BOOL bDisplayIfPlayerDead,
//						BOOL bOverride);  //  3894
//			}
//			ResetMenu(CBasePlayer *const this);  //  3794
//			SendItemStatus(CBasePlayer *pPlayer);  //  3806
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  3798
//			AddAccount(CBasePlayer *const this,
//					int amount,
//					bool bTrackChange);  //  3850
//		}
//		{
//			class CBaseEntity *Target;                   //  3919
//			Vector CamAngles;                       //  3920
//			operator-(const Vector *const this,
//					const Vector &v);  //  3935
//			Normalize(const Vector *const this);  //  3936
//		}
//	}
}

/* <154f3d> ../cstrike/dlls/player.cpp:3753 */
void CBasePlayer::MakeVIP(void)
{
//	edict(CBaseEntity *const this);  //  3763
//	entindex(CBaseEntity *const this);  //  3763
//	edict(CBaseEntity *const this);  //  3769
//	edict(CBaseEntity *const this);  //  3769
}

/* <154e29> ../cstrike/dlls/player.cpp:3721 */
void CBasePlayer::MenuPrint(CBasePlayer *pl, const char *msg)
{
//	{
//		const char *msg_portion;                            //  3723
//		char sbuf;                                            //  3724
//		int allowed;                                          //  3725
//		int display_time;                                     //  3726
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3736
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3745
//	}
}

/* <154db6> ../cstrike/dlls/player.cpp:3711 */
void CBasePlayer::RemoveLevelText(void)
{
//	ResetMenu(CBasePlayer *const this);  //  3713
}

/* <154c50> ../cstrike/dlls/player.cpp:3651 */
void CBasePlayer::SyncRoundTimer(void)
{
//	{
//		float tmRemaining;                                    //  3653
//		TimeRemaining(CHalfLifeMultiplay *const this);  //  3656
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3660
//		{
//			class CHalfLifeMultiplay *mp;                //  3666
//			IsObserver(CBasePlayer *const this);  //  3667
//			{
//				int remaining;                        //  3681
//				bool shouldCountDown;                 //  3690
//				int fadeOutDelay;                     //  3692
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  3700
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //  3670
//		}
//	}
}

/* <154bf8> ../cstrike/dlls/player.cpp:3640 */
void CBasePlayer::ResetMenu(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  3642
}

/* <154bdd> ../cstrike/dlls/player.cpp:3640 */
void CBasePlayer::ResetMenu(void)
{
}

/* <154b6d> ../cstrike/dlls/player.cpp:3624 */
void CBasePlayer::AddAccount(int amount, bool bTrackChange)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  3634
}

/* <154b38> ../cstrike/dlls/player.cpp:3624 */
void CBasePlayer::AddAccount(int amount, bool bTrackChange)
{
}

/* <154b15> ../cstrike/dlls/player.cpp:3588 */
void CBasePlayer::HasShield(void)
{
}

/* <154ad5> ../cstrike/dlls/player.cpp:3521 */
void CBasePlayer::DropShield(bool bDeploy)
{
//	{
//		class CBasePlayerWeapon *pWeapon;                    //  3562
//		class CWShield *pShield;                             //  3578
//	}
}

/* <154a70> ../cstrike/dlls/player.cpp:3504 */
void CBasePlayer::RemoveShield(void)
{
//	RemoveShield(CBasePlayer *const this);  //  3504
}

/* <154a43> ../cstrike/dlls/player.cpp:3480 */
void CBasePlayer::GiveShield(bool bDeploy)
{
}

/* <154967> ../cstrike/dlls/player.cpp:3424 */
void weapon_shield(entvars_t *pev)
{
//	GetClassPtr<CWShield>(CWShield *a);  //  3424
}

/* <15493f> ../cstrike/dlls/player.cpp:3380 */
void CBasePlayer::IsOnLadder(void)
{
}

/* <1544f4> ../cstrike/dlls/player.cpp:3264 */
void CBasePlayer::WaterMove(void)
{
//	{
//		int air;                                              //  3266
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3285
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3287
//		VARS(EOFFSET eoffset);  //  3322
//		VARS(EOFFSET eoffset);  //  3322
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3356
//		VARS(EOFFSET eoffset);  //  3363
//		VARS(EOFFSET eoffset);  //  3363
//		VARS(EOFFSET eoffset);  //  3368
//		VARS(EOFFSET eoffset);  //  3368
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3355
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3354
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  3353
//	}
}

/* <1544a1> ../cstrike/dlls/player.cpp:2636 */
void CBasePlayer::SetAnimation(PLAYER_ANIM playerAnim)
{
//	{
//		int animDesired;                                      //  2638
//		float speed;                                          //  2639
//		char szAnim;                                          //  2640
//		int hopSeq;                                           //  2642
//		int leapSeq;                                          //  2642
//	}
}

/* <154478> ../cstrike/dlls/player.cpp:2625 */
void CBasePlayer::IsBombGuy(void)
{
}

/* <154417> ../cstrike/dlls/player.cpp:2282 */
void CBasePlayer::SendFOV(int fov)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  2287
}

/* <15436c> ../cstrike/dlls/player.cpp:1962 */
void CBasePlayer::SetBombIcon(BOOL bFlash)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  1966
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //  1976
}

/* <1541c2> ../cstrike/dlls/player.cpp:1171 */
/* linkage=_Z13GetWeaponNameP9entvars_sS0_ */
const char *GetWeaponName(entvars_t *pevInflictor, entvars_t *pKiller)
{
//	{
//		int killer_index;                                     //  1173
//		const char *killer_weapon_name;                     //  1174
//		ENTINDEX(edict_t *pEdict);  //  1178
//		{
//			class CBasePlayer *pPlayer;                  //  1185
//			Instance(entvars_t *pev);  //  1185
//			pszName(CBasePlayerItem *const this);  //  1189
//		}
//	}
}

/* <15412b> ../cstrike/dlls/player.cpp:953 */
void CBasePlayer::IsHittingShield(Vector &vecDirection, TraceResult *ptr)
{
//	{
//		class Vector2D vec2LOS;                               //   968
//		Normalize(const class Vector2D *const this);  //   974
//	}
}

/* <153f69> ../cstrike/dlls/player.cpp:4507 */
void CBasePlayer::Jump(void)
{
//	{
//		Vector vecWallCheckDir;                         //  4509
//		Vector vecAdjustedVelocity;                     //  4510
//		Vector vecSpot;                                 //  4511
//		TraceResult tr;                                       //  4512
//		entvars_t *pevGround;                                //  4549
//	}
//	Jump(CBasePlayer *const this);  //  4507
}

/* <153ef5> ../cstrike/dlls/player.cpp:4580 */
void CBasePlayer::Duck(void)
{
//	SetAnimation(CBasePlayer::Duck(//			PLAYER_ANIM playerAnim);  //  4584
}

/* <153e07> ../cstrike/dlls/player.cpp:2636 */
void CBasePlayer::SetAnimation(PLAYER_ANIM playerAnim)
{
//	{
//		int animDesired;                                      //  2638
//		float speed;                                          //  2639
//		char szAnim;                                          //  2640
//		int hopSeq;                                           //  2642
//		int leapSeq;                                          //  2642
//		Length2D(const Vector *const this);  //  2655
//		{
//			int j;                                        //  3059
//			{
//				float flDot;                          //  3155
//				DotProduct(Vector &a,
//						const Vector &b);  //  3159
//			}
//			{
//				float const footstepSpeed;             //  2988
//				Length(const Vector *const this);  //  2989
//			}
//		}
//	}
}

/* <153c8e> ../cstrike/dlls/player.cpp:902 */
void CBasePlayer::DeathSound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   926
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   923
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   920
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   917
}

/* <153b48> ../cstrike/dlls/player.cpp:864 */
/* linkage=_Z20VecVelocityForDamagef */
Vector VecVelocityForDamage(float flDamage)
{
//	{
//		Vector vec;                                     //   866
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   866
//		operator*(const Vector *const this,
//				float fl);  //   873
//		operator*(const Vector *const this,
//				float fl);  //   871
//		operator*(const Vector *const this,
//				float fl);  //   869
//	}
}

/* <15381b> ../cstrike/dlls/player.cpp:816 */
void CBasePlayer::Pain(int m_LastHitGroup, bool HasArmour)
{
//	{
//		int temp;                                             //   827
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   854
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   856
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   859
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   847
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   834
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   836
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   855
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   835
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   839
//	}
}

/* <1537f3> ../cstrike/dlls/player.cpp:812 */
void CBasePlayer::SmartRadio(void)
{
}

/* <153737> ../cstrike/dlls/player.cpp:572 */
void CBasePlayer::SetPlayerModel(BOOL HasC4)
{
//	{
//		char *infobuffer;                                    //   574
//		char *model;                                         //   575
//		edict(CBaseEntity *const this);  //   574
//		entindex(CBaseEntity *const this);  //   655
//	}
}

/* <1536a9> ../cstrike/dlls/player.cpp:429 */
void SendItemStatus(CBasePlayer *pPlayer)
{
//	{
//		int itemStatus;                                       //   431
//	}
}

/* <1535a5> ../cstrike/dlls/player.cpp:380 */
/* linkage=_Z18WriteSigonMessagesv */
void WriteSigonMessages(void)
{
//	{
//		int i;                                                //   396
//		{
//			ItemInfo &II;                           //   398
//			const char *pszName;                        //   403
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //   409
//			GetAmmoIndex(const char *psz);  //   411
//			GetAmmoIndex(const char *psz);  //   413
//		}
//	}
}

/* <15357e> ../cstrike/dlls/player.cpp:7844 */
void GetAmmoIndex(const char *psz)
{
//	{
//		int i;                                                //  7846
//	}
}

/* <153555> ../cstrike/dlls/player.cpp:6620 */
void CBasePlayer::Precache(void)
{
}

/* <15353b> ../cstrike/dlls/player.cpp:282 */
/* linkage=_Z16LinkUserMessagesv */
void LinkUserMessages(void)
{
}

/* <1534bd> ../cstrike/dlls/player.cpp:7692 */
void CBasePlayer::RemovePlayerItem(CBasePlayerItem *pItem)
{
//	{
//		class CBasePlayerItem *pPrev;                        //  7706
//		ResetAutoaim(CBasePlayer *const this);  //  7696
//	}
}

/* <153355> ../cstrike/dlls/player.cpp:6685 */
void CBasePlayer::SetScoreboardAttributes(CBasePlayer *destination)
{
//	{
//		int i;                                                //  6697
//		{
//			class CBasePlayer *player;                   //  6699
//			edict(CBaseEntity *const this);  //  6701
//			FNullEnt(const edict_t *pent);  //  6701
//			SetScoreAttrib(CBasePlayer *dest,
//					class CBasePlayer *src);  //  6702
//		}
//	}
}

/* <15331b> ../cstrike/dlls/player.cpp:6237 */
inline void SetScoreAttrib(CBasePlayer *dest, CBasePlayer *src)
{
//	{
//		int state;                                            //  6239
//	}
}

/* <15325f> ../cstrike/dlls/player.cpp:7625 */
void CBasePlayer::AddPlayerItem(CBasePlayerItem *pItem)
{
//	{
//		class CBasePlayerItem *pInsert;                      //  7627
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  7633
//		SwitchWeapon(CBasePlayer *const this,
//				class CBasePlayerItem *pWeapon);  //  7679
//	}
}

/* <1530e6> ../cstrike/dlls/player.cpp:9560 */
void CInfoIntermission::Think(void)
{
//	{
//		edict_t *pTarget;                                    //  9562
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  9565
//		FNullEnt(const edict_t *pent);  //  9567
//		operator-(const Vector *const this,
//				const Vector &v);  //  9569
//		Normalize(const Vector *const this);  //  9569
//	}
}

/* <1530cb> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1530a1> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <153042> ../cstrike/dlls/player.cpp:4134 */
void CBasePlayer::RoundRespawn(void)
{
//	edict(CBaseEntity *const this);  //  4142
//	SwitchWeapon(CBasePlayer *const this,
//			class CBasePlayerItem *pWeapon);  //  4159
}

/* <152fbc> ../cstrike/dlls/player.cpp:9313 */
void CBasePlayer::SwitchWeapon(CBasePlayerItem *pWeapon)
{
//	ResetAutoaim(CBasePlayer *const this);  //  9320
//	UpdateShieldCrosshair(CBasePlayer *const this,
//				bool draw);  //  9336
}

/* <152fa1> ../cstrike/dlls/player.cpp:8686 */
void CBasePlayer::ResetAutoaim(void)
{
}

/* <152e95> ../cstrike/dlls/player.cpp:3436 */
void CWShield::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //  3457
//	}
//	Touch(CWShield *const this,
//		class CBaseEntity *pOther);  //  3436
}

/* <152b58> ../cstrike/dlls/player.cpp:989 */
void CBasePlayer::TraceAttack(entvars_t *pevAttacker, float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		bool bShouldBleed;                                    //   991
//		bool bShouldSpark;                                    //   992
//		bool bHitShield;                                      //   993
//		class CBasePlayer *pAttacker;                        //   995
//		IsHittingShield(CBasePlayer *const this,
//				const Vector &vecDirection,
//				TraceResult *ptr);  //   993
//		Instance(entvars_t *pev);  //   995
//		{
//			Vector dir;                             //  1132
//			Vector(Vector *const this,
//				const Vector &v);  //  1132
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  1135
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //  1125
//		Vector(Vector *const this,
//			const Vector &v);  //  1126
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  1010
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  1012
//	}
}

/* <152a96> ../cstrike/dlls/player.cpp:9517 */
void CRevertSaved::MessageThink(void)
{
//	{
//		float nextThink;                                      //  9520
//		LoadThink(CRevertSaved *const this);  //  9527
//	}
}

/* <1528f1> ../cstrike/dlls/player.cpp:3521 */
void CBasePlayer::DropShield(bool bDeploy)
{
//	{
//		class CBasePlayerWeapon *pWeapon;                    //  3562
//		class CWShield *pShield;                             //  3578
//		IsProtectedByShield(CBasePlayer *const this);  //  3563
//		RemoveShield(CBasePlayer *const this);  //  3570
//		operator*(const Vector *const this,
//				float fl);  //  3578
//		edict(CBaseEntity *const this);  //  3578
//		operator+(const Vector *const this,
//				const Vector &v);  //  3578
//		operator*(const Vector *const this,
//				float fl);  //  3582
//		SetCantBePickedUpByUser(CWShield *const this,
//					class CBaseEntity *player,
//					float time);  //  3585
//	}
}

/* <1526e0> ../cstrike/dlls/player.cpp:4272 */
void CanSeeUseable(void)
{
//	{
//		Vector eye;                                     //  4274
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  4276
//		{
//			TraceResult result;                           //  4279
//			Vector head;                            //  4280
//			Vector chest;                           //  4281
//			Vector knees;                           //  4282
//			operator+(const Vector *const this,
//					const Vector &v);  //  4280
//			operator+(const Vector *const this,
//					const Vector &v);  //  4281
//			operator+(const Vector *const this,
//					const Vector &v);  //  4282
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //  4274
//	}
}

/* <152540> ../cstrike/dlls/player.cpp:9483 */
void CRevertSaved::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  9485
//	FStrEq(const char *sz1,
//		const char *sz2);  //  9490
//	KeyValue(CRevertSaved *const this,
//		KeyValueData *pkvd);  //  9483
//	atof(const char *__nptr);  //  9487
//	atof(const char *__nptr);  //  9492
}

/* <1524eb> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <152451> ../cstrike/dlls/player.cpp:9375 */
void CDeadHEV::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  9377
//	KeyValue(CDeadHEV *const this,
//		KeyValueData *pkvd);  //  9375
}

/* <152225> ../cstrike/dlls/player.cpp:4190 */
void CBasePlayer::StartObserver(Vector vecPosition, Vector vecViewAngle)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  4246
//		int iFirstTime;                                       //  4194
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  4197
//		entindex(CBaseEntity *const this);  //  4199
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  4216
//		SendFOV(CBasePlayer *const this,
//			int fov);  //  4222
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  4262
//		edict(CBaseEntity *const this);  //  4263
//		ENTINDEX(edict_t *pEdict);  //  4263
//		edict(CBaseEntity *const this);  //  4250
//	}
}

/* <151c28> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<CCareerTask*, std::allocator<CCareerTask*>>::_M_insert_aux(iterator __position, const CCareerTask * &__x)
{
//	{
//		class CCareerTask *__x_copy;                         //   308
//		construct(new_allocator<CCareerTask*> *const this,
//				pointer __p,
//				const class CCareerTask * &__val);  //   303
//		copy_backward<CCareerTask**, CCareerTask**>(CCareerTask ** __first,
//								class CCareerTask ** __last,
//								class CCareerTask ** __result);  //   310
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//		_M_check_len(const class vector<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//				size_type __n,
//				const char *__s);  //   322
//		operator-<CCareerTask**, std::vector<CCareerTask*>>(const class __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> > &__lhs,
//									const class __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> > &__rhs);  //   323
//		_M_allocate(_Vector_base<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//				size_t __n);  //   324
//		construct(new_allocator<CCareerTask*> *const this,
//				pointer __p,
//				const class CCareerTask * &__val);  //   332
//		__uninitialized_move_a<CCareerTask**, CCareerTask**, std::allocator<CCareerTask*>>(CCareerTask ** __first,
//													class CCareerTask ** __last,
//													class CCareerTask ** __result,
//													class allocator<CCareerTask*> &__alloc);  //   340
//		__uninitialized_move_a<CCareerTask**, CCareerTask**, std::allocator<CCareerTask*>>(CCareerTask ** __first,
//													class CCareerTask ** __last,
//													class CCareerTask ** __result,
//													class allocator<CCareerTask*> &__alloc);  //   346
//		_M_deallocate(_Vector_base<CCareerTask*, std::allocator<CCareerTask*>> *const this,
//				pointer __p,
//				size_t __n);  //   363
//	}
}

/* <151b7e> ../cstrike/dlls/player.cpp:10816 */
void CBasePlayer::PrioritizeAutoBuyString(char *autobuyString, const char *priorityString)
{
//	{
//		char newString;                                       // 10818
//		int newStringPos;                                     // 10819
//		char priorityToken;                                   // 10820
//		const char *priorityChar;                           // 10827
//		char *autobuyPosition;                               // 10872
//		{
//			int i;                                        // 10831
//			char *autoBuyPosition;                       // 10856
//			strstr(char *__haystack,
//				const char *__needle);  // 10856
//		}
//	}
}

/* <151a77> ../cstrike/dlls/player.cpp:6671 */
void CBasePlayer::Save(CSave &save)
{
//	Save(CBasePlayer *const this,
//		class CSave &save);  //  6671
}

/* <151a24> ../cstrike/dlls/player.cpp:9481 */
void CRevertSaved::Save(CSave &save)
{
//	Save(CRevertSaved *const this,
//		class CSave &save);  //  9481
}

/* <1519d1> ../cstrike/dlls/player.cpp:9481 */
void CRevertSaved::Restore(CRestore &restore)
{
//	Restore(CRevertSaved *const this,
//		class CRestore &restore);  //  9481
}

/* <15198b> ../cstrike/dlls/player.cpp:9531 */
void CRevertSaved::LoadThink(void)
{
//	LoadThink(CRevertSaved *const this);  //  9531
}

/* <151962> ../cstrike/dlls/player.cpp:3426 */
void CWShield::Spawn(void)
{
}

/* <151815> ../cstrike/dlls/player.cpp:7021 */
void CSprayCan::Think(void)
{
//	{
//		TraceResult tr;                                       //  7023
//		int playernum;                                        //  7024
//		int nFrames;                                          //  7025
//		class CBasePlayer *pPlayer;                          //  7026
//		GET_PRIVATE(edict_t *pent);  //  7028
//		GetCustomDecalFrames(CBasePlayer *const this);  //  7031
//		ENTINDEX(edict_t *pEdict);  //  7035
//		operator*(const Vector *const this,
//				float fl);  //  7038
//		operator+(const Vector *const this,
//				const Vector &v);  //  7038
//	}
}

/* <151758> ../cstrike/dlls/player.cpp:7074 */
void CBloodSplat::Spray(void)
{
//	{
//		TraceResult tr;                                       //  7076
//		operator*(const Vector *const this,
//				float fl);  //  7081
//		operator+(const Vector *const this,
//				const Vector &v);  //  7081
//	}
}

/* <1516a0> ../cstrike/dlls/player.cpp:1706 */
void packPlayerItem(CBasePlayer *pPlayer, class CBasePlayerItem *pItem, bool packAmmo)
{
//	{
//		const char *modelName;                              //  1710
//		{
//			class CWeaponBox *pWeaponBox;                //  1720
//			operator*(const Vector *const this,
//					float fl);  //  1725
//			pszAmmo1(CBasePlayerItem *const this);  //  1738
//		}
//	}
}

/* <1513f7> ../cstrike/dlls/player.cpp:8473 */
void CBasePlayer::GetAutoaimVector(float flDelta)
{
//	{
//		Vector vecSrc;                                  //  8481
//		float flDist;                                         //  8482
//		BOOL m_fOldTargeting;                                 //  8492
//		Vector angles;                                  //  8493
//		AutoaimDeflection(CBasePlayer *const this,
//					Vector &vecSrc,
//					float flDist,
//					float flDelta);  //  8493
//		operator*(const Vector *const this,
//				float fl);  //  8530
//		edict(CBaseEntity *const this);  //  8541
//		operator+(const Vector *const this,
//				const Vector &v);  //  8548
//		operator+(const Vector *const this,
//				const Vector &v);  //  8548
//		Vector(Vector *const this,
//			const Vector &v);  //  8549
//		operator*(const Vector *const this,
//				float fl);  //  8526
//		operator*(const Vector *const this,
//				float fl);  //  8526
//		operator+(const Vector *const this,
//				const Vector &v);  //  8526
//		operator+(const Vector *const this,
//				const Vector &v);  //  8477
//	}
}

/* <1513ce> ../cstrike/dlls/player.cpp:9391 */
void CDeadHEV::Spawn(void)
{
}

/* <151365> ../cstrike/dlls/player.cpp:9509 */
void CRevertSaved::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <15133c> ../cstrike/dlls/player.cpp:9549 */
void CInfoIntermission::Spawn(void)
{
}

/* <15125b> ../cstrike/dlls/player.cpp:4626 */
void CBasePlayer::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
//	{
//		int index;                                            //  4628
//		entindex(CBaseEntity *const this);  //  4628
//		{
//			int i;                                        //  4630
//			{
//				class CBaseEntity *pPlayer;          //  4632
//			}
//		}
//	}
}

/* <151213> ../cstrike/dlls/player.cpp:937 */
void CBasePlayer::TakeHealth(float flHealth, int bitsDamageType)
{
}

/* <1511eb> ../cstrike/dlls/player.cpp:9365 */
void CDeadHEV::Classify(void)
{
}

/* <151183> ../cstrike/dlls/player.cpp:8731 */
void CBasePlayer::Blind(float duration, float holdTime, float fadeTime, int alpha)
{
}

/* <151142> ../cstrike/dlls/player.cpp:8387 */
void CBasePlayer::ResetMaxSpeed(void)
{
//	{
//		float speed;                                          //  8397
//	}
}

/* <1510e4> ../cstrike/dlls/player.cpp:8360 */
void CBasePlayer::Illumination(void)
{
//	{
//		int iIllum;                                           //  8362
//		Illumination(CBaseEntity *const this);  //  8362
//	}
}

/* <1510bc> ../cstrike/dlls/player.cpp:8330 */
void CBasePlayer::FBecomeProne(void)
{
}

/* <151094> ../cstrike/dlls/player.cpp:7007 */
void CSprayCan::ObjectCaps(void)
{
}

/* <15106c> ../cstrike/dlls/player.cpp:6987 */
void CBasePlayer::TeamID(void)
{
}

/* <150fb7> ../cstrike/dlls/player.cpp:4597 */
void CBasePlayer::AddPoints(int score, BOOL bAllowNegativeScore)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  4616
//	edict(CBaseEntity *const this);  //  4617
//	ENTINDEX(edict_t *pEdict);  //  4617
}

/* <150f8f> ../cstrike/dlls/player.cpp:4591 */
void CBasePlayer::Classify(void)
{
}

/* <150f1c> ../cstrike/dlls/player.cpp:943 */
void CBasePlayer::GetGunPosition(void)
{
//	{
//		Vector origin;                                  //   947
//		operator+(const Vector *const this,
//				const Vector &v);  //   949
//	}
}

/* <150ed5> ../cstrike/dlls/player.cpp:438 */
const char *GetCSModelName(int item_id)
{
//	{
//		const char *modelName;                              //   440
//	}
}

/* <150e9d> ../cstrike/dlls/player.h:689 */
void CBasePlayer::OnTouchingWeapon(CWeaponBox *box)
{
}

/* <150e75> ../cstrike/dlls/player.h:541 */
void CBasePlayer::ObjectCaps(void)
{
}

/* <150e4d> ../cstrike/dlls/player.h:496 */
void CBasePlayer::IsNetClient(void)
{
}

/* <150e25> ../cstrike/dlls/player.h:491 */
void CBasePlayer::IsBot(void)
{
}

/* <150dfd> ../cstrike/dlls/player.h:490 */
void CBasePlayer::IsPlayer(void)
{
}

/* <150dd5> ../cstrike/dlls/player.h:489 */
void CBasePlayer::ShouldFadeOnDeath(void)
{
}

/* <150dad> ../cstrike/dlls/player.h:488 */
void CBasePlayer::IsAlive(void)
{
}

/* <150d85> ../cstrike/dlls/player.h:487 */
void CBasePlayer::IsSneaking(void)
{
}

/* <150d5d> ../cstrike/dlls/player.h:486 */
void CBasePlayer::StopSneaking(void)
{
}

/* <150d35> ../cstrike/dlls/player.h:485 */
void CBasePlayer::StartSneaking(void)
{
}

/* <150c79> ../cstrike/dlls/player.h:484 */
void CBasePlayer::BodyTarget(Vector &posSrc)
{
//	operator*(const Vector *const this,
//			float fl);  //   484
//	operator+(const Vector *const this,
//			const Vector &v);  //   484
}

/* <150c51> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <150c29> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <150c01> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <150bd9> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <150bb1> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <150b89> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <150b51> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <150b28> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <150b05> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <150ac7> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1508ca> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1508a2> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <15087a> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <150842> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <1507dd> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1507a5> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <15077d> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <150755> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <15072d> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <150705> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <1506dc> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1506b4> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <15068c> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <150664> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <15062d> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <150605> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1505dd> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <1505a6> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <15057e> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1504e0> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <15048b> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <150454> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <15041d> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <1503d7> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <150391> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <150369> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <150341> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <15030d> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1502d6> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1502ae> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <150277> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <15024f> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <150227> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <150204> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <1501d8> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1501b0> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <150188> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <150160> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <150096> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <15006e> ../cstrike/dlls/player.cpp:2282 */
void CBasePlayer::SendFOV(int fov)
{
}

/* <14fff2> ../cstrike/dlls/player.cpp:1985 */
void CBasePlayer::SetProgressBarTime(int time)
{
//	{
//		class CBaseEntity *pPlayer;                          //  2006
//		int myIndex;                                          //  2008
//		{
//			class CBasePlayer *player;                   //  2012
//		}
//	}
}

/* <14ff6d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/vector.tcc:297 */
void vector<CCareerTask*, std::allocator<CCareerTask*>>::_M_insert_aux(iterator __position, const CCareerTask * &__x)
{
//	{
//		class CCareerTask *__x_copy;                         //   308
//	}
//	{
//		size_typeconst __len;                                 //   321
//		size_typeconst __elems_before;                        //   323
//		pointer __new_start;                                  //   324
//		pointer __new_finish;                                 //   325
//	}
}

/* <14ff1c> ../cstrike/dlls/player.cpp:4190 */
void CBasePlayer::StartObserver(Vector vecPosition, Vector vecViewAngle)
{
//	{
//		int iFirstTime;                                       //  4194
//		class CHalfLifeMultiplay *mp;                        //  4246
//	}
}

/* <14fef4> ../cstrike/dlls/player.cpp:3480 */
void CBasePlayer::GiveShield(bool bDeploy)
{
}

/* <14fea3> ../cstrike/dlls/player.cpp:4645 */
void CBasePlayer::CanPlayerBuy(bool display)
{
//	{
//		bool result;                                          //  4647
//		class CHalfLifeMultiplay *mp;                        //  4666
//		int buyTime;                                          //  4668
//	}
}

/* <14fe7c> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <14fe56> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:349 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::~vector( int const __in_chrg)
{
}

/* <14fe3b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:135 */
inline void _List_iterator<CCareerTask*>::_List_iterator(void)
{
}

/* <14fe20> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:217 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::vector(void)
{
}

/* <14fdf3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:826 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::push_back(const value_type &__x)
{
}

/* <14fdd8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:481 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::end(void)
{
}

/* <14fd96> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:890 */
inline void operator-<CCareerTask**, std::vector<CCareerTask*>>(const class __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> > &__lhs, const __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> > &__rhs)
{
}

/* <14fd75> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:463 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::begin(void)
{
}

/* <14fd2b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:1239 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::_M_check_len(size_type __n, const char *__s)
{
//	{
//		size_typeconst __len;                                 //  1244
//	}
}

/* <14fccb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:613 */
inline void copy_backward<CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
}

/* <14fc6b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:264 */
inline void __uninitialized_move_a<CCareerTask**, CCareerTask**, std::allocator<CCareerTask*>>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result, class allocator<CCareerTask*> &__alloc)
{
}

/* <14fc13> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:257 */
inline void __uninitialized_copy_a<CCareerTask**, CCareerTask**, CCareerTask*>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result, class allocator<CCareerTask*> &const)
{
}

/* <14fbcf> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:109 */
inline void uninitialized_copy<CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
//	{
//	}
}

/* <14fb8d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_uninitialized.h:93 */
inline void __uninit_copy<CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
}

/* <14fb48> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:444 */
inline void copy<CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
}

/* <14faf9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:418 */
inline void __copy_move_a2<false, CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
}

/* <14fa9a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:373 */
inline void __copy_move_a<false, CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
//	{
//		boolconst __simple;                                   //   378
//	}
}

/* <14fa4e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:362 */
inline void __copy_m<CCareerTask*>(const class CCareerTask **__first, const CCareerTask **__last, class CCareerTask ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   364
//	}
}

/* <14f9ff> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:586 */
inline void __copy_move_backward_a2<false, CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
}

/* <14f9dd> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:282 */
inline void __miter_base<CCareerTask**>(CCareerTask ** __it)
{
}

/* <14f97e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:568 */
inline void __copy_move_backward_a<false, CCareerTask**, CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last, class CCareerTask ** __result)
{
//	{
//		boolconst __simple;                                   //   573
//	}
}

/* <14f95c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:271 */
inline void __niter_base<CCareerTask**>(CCareerTask ** __it)
{
}

/* <14f90b> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:557 */
inline void __copy_move_b<CCareerTask*>(const class CCareerTask **__first, const CCareerTask **__last, class CCareerTask ** __result)
{
//	{
//		ptrdiff_tconst _Num;                                  //   559
//	}
}

/* <14f8e4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:149 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_allocate( size_t __n)
{
}

/* <14f8b8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:87 */
inline void new_allocator<CCareerTask*>::allocate( size_type __n, const void *)
{
}

/* <14f881> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_algobase.h:210 */
inline void max<unsigned int>(const unsigned int &__a, const unsigned int &__b)
{
}

/* <14f860> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:575 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::max_size(void)
{
}

/* <14f840> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:99 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_get_Tp_allocator(void)
{
}

/* <14f820> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:101 */
inline void new_allocator<CCareerTask*>::max_size(void)
{
}

/* <14f808> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator_base_types.h:213 */
inline void _S_base(CCareerTask ** __it)
{
}

/* <14f7ed> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:106 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::_Vector_base(void)
{
}

/* <14f7d2> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:82 */
inline void _Vector_impl::_Vector_impl(void)
{
}

/* <14f7b7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:107 */
inline void allocator<CCareerTask*>::allocator(void)
{
}

/* <14f79c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:69 */
inline void new_allocator<CCareerTask*>::new_allocator(void)
{
}

/* <14f781> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:95 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_get_Tp_allocator(void)
{
}

/* <14f741> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:150 */
inline void _Destroy<CCareerTask**, CCareerTask*>(CCareerTask ** __first, class CCareerTask ** __last, class allocator<CCareerTask*> &const)
{
}

/* <14f70e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:123 */
inline void _Destroy<CCareerTask**>(CCareerTask ** __first, class CCareerTask ** __last)
{
}

/* <14f6ef> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_construct.h:113 */
inline void __destroy<CCareerTask**>(CCareerTask **, class CCareerTask **)
{
}

/* <14f6c9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:141 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::~_Vector_base( int const __in_chrg)
{
}

/* <14f691> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:153 */
inline void _Vector_base<CCareerTask*, std::allocator<CCareerTask*>>::_M_deallocate( pointer __p, size_t __n)
{
}

/* <14f665> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:97 */
inline void new_allocator<CCareerTask*>::deallocate( pointer __p, size_type)
{
}

/* <14f638> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:75 */
inline void _Vector_impl::~_Vector_impl( int const __in_chrg)
{
}

/* <14f60d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/allocator.h:115 */
inline void allocator<CCareerTask*>::~allocator( int const __in_chrg)
{
}

/* <14f5e7> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:76 */
inline void new_allocator<CCareerTask*>::~new_allocator( int const __in_chrg)
{
}

/* <14f5b5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:720 */
inline void __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> >::__normal_iterator(CCareerTask ** &__i)
{
}

/* <14f595> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_iterator.h:784 */
inline void __normal_iterator<CCareerTask**, std::vector<CCareerTask*, std::allocator<CCareerTask*>> >::base(void)
{
}

/* <14f4fa> ../cstrike/dlls/player.cpp:4717 */
void CBasePlayer::PreThink(void)
{
//	{
//		int buttonsChanged;                                   //  4719
//		class CBaseEntity *pGroundEntity;                    //  4831
//		{
//			class CBaseEntity *pTrain;                   //  4845
//			float vel;                                    //  4846
//			{
//				TraceResult trainTrace;               //  4850
//			}
//		}
//	}
}

/* <14f4ca> ../cstrike/dlls/player.cpp:7784 */
void CBasePlayer::ItemPreFrame(void)
{
}

/* <14f492> ../cstrike/dlls/player.cpp:4039 */
void CBasePlayer::PlayerDeathThink(void)
{
//	{
//		float flForward;                                      //  4041
//		BOOL fAnyButtonDown;                                  //  4088
//	}
}

/* <14f469> ../cstrike/dlls/player.cpp:6967 */
void CBasePlayer::HasWeapons(void)
{
//	{
//		int i;                                                //  6969
//	}
}

/* <14f44e> ../cstrike/dlls/vector.h:108 */
inline void Vector::operator-(void)
{
}

/* <14f428> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <14f40d> ../cstrike/dlls/player.cpp:9821 */
void CBasePlayer::ResetStamina(void)
{
}

/* <14f3f0> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <14f3d4> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <14f3b2> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <14f37f> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <14f347> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <14f327> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <14f2ea> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/ext/new_allocator.h:107 */
inline void new_allocator<CCareerTask*>::construct( pointer __p, const CCareerTask * &__val)
{
}

/* <14f2be> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:186 */
inline void _List_iterator<CCareerTask*>::operator!=(const _Self &__x)
{
}

/* <14f2a3> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:748 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::end(void)
{
}

/* <14f288> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:152 */
inline void _List_iterator<CCareerTask*>::operator++(void)
{
}

/* <14f24d> ../cstrike/dlls/career_tasks.h:112 */
inline void CCareerTaskManager::GetTasks(void)
{
}

/* <14f22d> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:730 */
inline void list<CCareerTask*, std::allocator<CCareerTask*>>::begin(void)
{
}

/* <14f201> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:139 */
inline void _List_iterator<CCareerTask*>::_List_iterator(_List_node_base *__x)
{
}

/* <14f1d4> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotPhrase*>::operator!=(const _Self &__x)
{
}

/* <14f1b9> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::end(void)
{
}

/* <14f19e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotPhrase*>::operator++(void)
{
}

/* <14f15e> ../cstrike/dlls/bot/cs_bot_chatter.h:279 */
inline void BotPhraseManager::GetPlaceList(void)
{
}

/* <14f13e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::begin(void)
{
}

/* <14f112> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <14f0e5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:695 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::operator[]( size_type __n)
{
}

/* <14f0c5> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_vector.h:570 */
inline void vector<CCareerTask*, std::allocator<CCareerTask*>>::size(void)
{
}

/* <14f08f> ../cstrike/dlls/cbase.h:800 */
CInfoIntermission *GetClassPtr<CInfoIntermission>(CInfoIntermission *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14f06c> ../cstrike/dlls/player.cpp:9543 */
inline void CInfoIntermission::CInfoIntermission(void)
{
}

/* <14f036> ../cstrike/dlls/cbase.h:800 */
CRevertSaved *GetClassPtr<CRevertSaved>(CRevertSaved *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14f018> ../cstrike/dlls/player.cpp:9446 */
inline void CRevertSaved::CRevertSaved(void)
{
}

/* <14efe2> ../cstrike/dlls/cbase.h:800 */
CStripWeapons *GetClassPtr<CStripWeapons>(CStripWeapons *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14efbf> ../cstrike/dlls/player.cpp:9418 */
inline void CStripWeapons::CStripWeapons(void)
{
}

/* <14efa1> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <14ef6b> ../cstrike/dlls/cbase.h:800 */
CDeadHEV *GetClassPtr<CDeadHEV>(CDeadHEV *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14ef4d> ../cstrike/dlls/player.cpp:9361 */
inline void CDeadHEV::CDeadHEV(void)
{
}

/* <14ef17> ../cstrike/dlls/cbase.h:800 */
CSprayCan *GetClassPtr<CSprayCan>(CSprayCan *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14eefc> ../cstrike/dlls/player.cpp:7129 */
void CBasePlayer::FlashlightIsOn(void)
{
}

/* <14eec6> ../cstrike/dlls/cbase.h:800 */
CBloodSplat *GetClassPtr<CBloodSplat>(CBloodSplat *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14eea3> ../cstrike/dlls/player.cpp:7057 */
inline void CBloodSplat::CBloodSplat(void)
{
}

/* <14ee80> ../cstrike/dlls/player.cpp:7001 */
inline void CSprayCan::CSprayCan(void)
{
}

/* <14edfb> ../cstrike/dlls/player.cpp:878 */
int TrainSpeed(int iSpeed, int iMax)
{
//	{
//		float fSpeed;                                         //   880
//		float fMax;                                           //   880
//		int iRet;                                             //   881
//	}
}

/* <14eddb> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:840 */
inline void list<CNavArea*, std::allocator<CNavArea*>>::empty(void)
{
}

/* <14eda5> ../cstrike/dlls/cbase.h:800 */
CWShield *GetClassPtr<CWShield>(CWShield *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <14ed87> ../cstrike/dlls/player.cpp:3407 */
inline void CWShield::CWShield(void)
{
}

/* <14ed68> ../game_shared/bot/bot_util.h:224 */
inline bool IsEntityValid(CBaseEntity *entity)
{
}

/* <14ed46> ../cstrike/dlls/weapons.h:56 */
inline void CGrenade::CGrenade(void)
{
}

/* <14ed29> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <14ece2> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <14ec48> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <14ebd6> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <14eb95> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <14eb53> ../cstrike/dlls/player.cpp:10957 */
void CBasePlayer::ShouldExecuteAutoBuyCommand(const class AutoBuyInfoStruct *commandInfo, bool boughtPrimary, bool boughtSecondary)
{
}

/* <14eabf> ../cstrike/dlls/player.cpp:10816 */
void CBasePlayer::PrioritizeAutoBuyString(char *autobuyString, const char *priorityString)
{
//	{
//		char newString;                                       // 10818
//		int newStringPos;                                     // 10819
//		char priorityToken;                                   // 10820
//		const char *priorityChar;                           // 10827
//		char *autobuyPosition;                               // 10872
//		{
//			int i;                                        // 10831
//			char *autoBuyPosition;                       // 10856
//		}
//	}
}

/* <14ea6f> ../cstrike/dlls/player.cpp:10583 */
bool IsSecondaryWeaponClass(int classId)
{
}

/* <14ea4e> ../cstrike/dlls/player.cpp:10556 */
bool IsPrimaryWeaponClass(int classId)
{
}

/* <14ea2f> ../game_shared/bot/nav.h:251 */
inline float NormalizeAngle(float angle)
{
}

/* <14e9f7> ../cstrike/dlls/player.cpp:9909 */
void CBasePlayer::IsArmored(int nHitGroup)
{
//	{
//		BOOL fApplyArmor;                                     //  9911
//	}
}

/* <14e9cf> ../cstrike/dlls/player.cpp:5519 */
void CBasePlayer::CheckPowerups(entvars_t *pev)
{
}

/* <14e9a7> ../cstrike/dlls/player.cpp:9483 */
void CRevertSaved::KeyValue(KeyValueData *pkvd)
{
}

/* <14e980> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <14e937> ../cstrike/dlls/player.cpp:9466 */
inline void CRevertSaved::SetLoadTime( float time)
{
}

/* <14e90f> ../cstrike/dlls/player.cpp:9465 */
inline void CRevertSaved::SetMessageTime( float time)
{
}

/* <14e8e7> ../cstrike/dlls/player.cpp:9464 */
inline void CRevertSaved::SetHoldTime( float hold)
{
}

/* <14e8bf> ../cstrike/dlls/player.cpp:9463 */
inline void CRevertSaved::SetDuration( float duration)
{
}

/* <14e8a4> ../cstrike/dlls/player.cpp:9461 */
inline void CRevertSaved::LoadTime(void)
{
}

/* <14e889> ../cstrike/dlls/player.cpp:9460 */
inline void CRevertSaved::MessageTime(void)
{
}

/* <14e86e> ../cstrike/dlls/player.cpp:9459 */
inline void CRevertSaved::HoldTime(void)
{
}

/* <14e853> ../cstrike/dlls/player.cpp:9458 */
inline void CRevertSaved::Duration(void)
{
}

/* <14e82b> ../cstrike/dlls/player.cpp:7834 */
void CBasePlayer::AmmoInventory(int iAmmoIndex)
{
}

/* <14e803> ../cstrike/dlls/player.cpp:9313 */
void CBasePlayer::SwitchWeapon(CBasePlayerItem *pWeapon)
{
}

/* <14e7b2> ../cstrike/dlls/player.cpp:3521 */
void CBasePlayer::DropShield(bool bDeploy)
{
//	{
//		class CBasePlayerWeapon *pWeapon;                    //  3562
//		class CWShield *pShield;                             //  3578
//	}
}

/* <14e77d> ../cstrike/dlls/player.cpp:3410 */
inline void CWShield::SetCantBePickedUpByUser( CBaseEntity *player, float time)
{
}

/* <14e762> ../cstrike/dlls/player.cpp:3504 */
void CBasePlayer::RemoveShield(void)
{
}

/* <14e73a> ../cstrike/dlls/player.cpp:9302 */
void CBasePlayer::UpdateShieldCrosshair(bool draw)
{
}

/* <14e71f> ../cstrike/dlls/player.cpp:8720 */
void CBasePlayer::GetCustomDecalFrames(void)
{
}

/* <14e6d8> ../cstrike/dlls/player.cpp:8553 */
void CBasePlayer::AutoaimDeflection(Vector &vecSrc, float flDist, float flDelta)
{
}

/* <14e6bd> ../cstrike/dlls/player.cpp:3711 */
void CBasePlayer::RemoveLevelText(void)
{
}

/* <14e6a0> ../cstrike/dlls/player.cpp:2255 */
inline void VIP_SafetyZoneIcon_Clear(CBasePlayer *player)
{
}

/* <14e683> ../cstrike/dlls/player.cpp:2203 */
inline void EscapeZoneIcon_Clear(CBasePlayer *player)
{
}

/* <14e666> ../cstrike/dlls/player.cpp:2156 */
inline void RescueZoneIcon_Clear(CBasePlayer *player)
{
}

/* <14e649> ../cstrike/dlls/player.cpp:2129 */
inline void BombTargetFlash_Clear(CBasePlayer *player)
{
}

/* <14e62c> ../cstrike/dlls/player.cpp:2115 */
inline void BombTargetFlash_Set(CBasePlayer *player)
{
}

/* <14e601> ../cstrike/dlls/unisignals.h:44 */
inline void CUnifiedSignals::Update(void)
{
//	{
//		int old;                                              //    46
//	}
}

/* <14e5d5> ../cstrike/dlls/player.cpp:7532 */
void OLD_CheckRescueZone(CBasePlayer *player)
{
//	{
//		class CBaseEntity *pSpot;                            //  7534
//	}
}

/* <14e5a9> ../cstrike/dlls/player.cpp:7514 */
void OLD_CheckBombTarget(CBasePlayer *player)
{
//	{
//		class CBaseEntity *pSpot;                            //  7516
//	}
}

/* <14e567> ../cstrike/dlls/player.cpp:8436 */
void CBasePlayer::HintMessage(const char *pMessage, BOOL bDisplayIfPlayerDead, BOOL bOverride)
{
}

/* <14e50d> ../cstrike/dlls/player.cpp:6718 */
void CBasePlayer::Restore(CRestore &restore)
{
//	{
//		int status;                                           //  6723
//		SAVERESTOREDATA *pSaveData;                          //  6725
//		{
//			edict_t *pentSpawnSpot;                      //  6732
//		}
//	}
}

/* <14e4f2> ../cstrike/dlls/player.cpp:6712 */
void CBasePlayer::RenewItems(void)
{
}

/* <14e4ac> ../cstrike/dlls/player.cpp:6685 */
void CBasePlayer::SetScoreboardAttributes(CBasePlayer *destination)
{
//	{
//		int i;                                                //  6697
//		{
//			class CBasePlayer *player;                   //  6699
//		}
//	}
}

/* <14e46e> ../cstrike/dlls/util.h:190 */
inline edict_t *INDEXENT(int iEdictNum)
{
}

/* <14e440> ../cstrike/dlls/player.cpp:5906 */
CBaseEntity *FindZombieSpawn(CBaseEntity *player, bool forceSpawn)
{
}

/* <14e3fc> ../cstrike/dlls/player.cpp:5868 */
inline void ZombieSpawn::ZombieSpawn(void)
{
}

/* <14e3db> ../game_shared/bot/bot_util.h:183 */
inline void CountdownTimer::CountdownTimer(void)
{
}

/* <14e39d> ../cstrike/dlls/player.cpp:5837 */
BOOL IsSpawnPointValid(CBaseEntity *pPlayer, CBaseEntity *pSpot)
{
//	{
//		class CBaseEntity *ent;                              //  5839
//	}
}

/* <14e333> ../cstrike/dlls/player.cpp:5414 */
void CBasePlayer::SetSuitUpdate(char *name, int fgroup, int iNoRepeatTime)
{
//	{
//		int i;                                                //  5416
//		int isentence;                                        //  5417
//		int iempty;                                           //  5418
//	}
}

/* <14e318> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <14e2e2> ../cstrike/dlls/vector.h:35 */
inline void Normalize(const class Vector2D *const this)
{
//	{
//		class Vector2D vec2;                                  //    37
//		float flLen;                                          //    39
//	}
}

/* <14e284> ../cstrike/dlls/player.cpp:4507 */
void CBasePlayer::Jump(void)
{
//	{
//		Vector vecWallCheckDir;                         //  4509
//		Vector vecAdjustedVelocity;                     //  4510
//		Vector vecSpot;                                 //  4511
//		TraceResult tr;                                       //  4512
//		entvars_t *pevGround;                                //  4549
//	}
}

/* <14e1e6> ../cstrike/dlls/player.cpp:2636 */
void CBasePlayer::SetAnimation(PLAYER_ANIM playerAnim)
{
//	{
//		int animDesired;                                      //  2638
//		float speed;                                          //  2639
//		char szAnim;                                          //  2640
//		int hopSeq;                                           //  2642
//		int leapSeq;                                          //  2642
//		{
//			int j;                                        //  3059
//			{
//				float const footstepSpeed;             //  2988
//			}
//			{
//				float flDot;                          //  3155
//			}
//		}
//	}
}

/* <14e19a> ../cstrike/dlls/player.h:660 */
inline void CBasePlayer::IsProtectedByShield(void)
{
}

/* <14e17f> ../cstrike/dlls/player.cpp:3588 */
void CBasePlayer::HasShield(void)
{
}

/* <14e142> ../cstrike/dlls/player.cpp:3436 */
void CWShield::Touch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //  3457
//	}
}

/* <14e106> ../cstrike/dlls/player.cpp:2086 */
inline void BuyZoneIcon_Clear(CBasePlayer *player)
{
}

/* <14e0e9> ../cstrike/dlls/player.cpp:2073 */
inline void BuyZoneIcon_Set(CBasePlayer *player)
{
}

/* <14e061> ../cstrike/dlls/player.cpp:1214 */
void LogAttack(CBasePlayer *pAttacker, CBasePlayer *pVictim, int teamAttack, int healthHit, int armorHit, int newHealth, int newArmor, const char *killer_weapon_name)
{
//	{
//		int detail;                                           //  1217
//	}
}

/* <14e048> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <14dfee> ../cstrike/dlls/career_tasks.h:110 */
inline void CCareerTaskManager::GetFinishedTaskRound(void)
{
}

/* <14dfd3> ../cstrike/dlls/career_tasks.h:109 */
inline void CCareerTaskManager::GetFinishedTaskTime(void)
{
}

/* <14dfb3> ../cstrike/dlls/career_tasks.h:107 */
inline void CCareerTaskManager::GetTaskTime(void)
{
}

/* <14df87> ../cstrike/dlls/career_tasks.h:42 */
inline void CCareerTask::IsValidFor(CBasePlayer *pPlayer)
{
}

/* <14df61> ../cstrike/dlls/career_tasks.h:36 */
inline void CCareerTask::GetWeaponClassId(void)
{
}

/* <14df46> ../cstrike/dlls/career_tasks.h:35 */
inline void CCareerTask::GetWeaponId(void)
{
}

/* <14df2b> ../cstrike/dlls/career_tasks.h:33 */
inline void CCareerTask::GetTaskName(void)
{
}

/* <14df10> ../cstrike/dlls/career_tasks.h:32 */
inline void CCareerTask::IsComplete(void)
{
}

/* <14def0> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <14dec9> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <14de9d> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <14de72> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <14de45> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <14de12> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <14ddb5> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <14dd58> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <14dcfb> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <14dcb8> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <14dc8b> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <14dc2e> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <14dbde> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <14dbb8> ../cstrike/dlls/bot/cs_bot_chatter.h:207 */
inline void BotPhrase::GetID(void)
{
}

/* <14db98> ../cstrike/dlls/bot/cs_bot_chatter.h:206 */
inline void BotPhrase::GetName(void)
{
}

/* <14db78> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <14db43> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <14db23> ../game_shared/bot/bot.h:202 */
inline void CBot::GetProfile(void)
{
}

/* <14daca> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <14daaa> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <14da8a> ../cstrike/dlls/gamerules.h:411 */
inline void CHalfLifeMultiplay::TimeRemaining(void)
{
}

/* <14da2f> ../cstrike/dlls/player.h:794 */
inline void IntenseFunctor::operator()(CBasePlayer *player)
{
}

/* <14da14> ../cstrike/dlls/player.h:774 */
inline void CBasePlayer::Intense(void)
{
}

/* <14d9f4> ../cstrike/dlls/player.h:681 */
inline void CBasePlayer::IsBlind(void)
{
}

/* <14d9d9> ../cstrike/dlls/player.h:272 */
inline void CBasePlayer::IsObserver(void)
{
}

/* <14d9be> ../cstrike/dlls/weapons.h:299 */
inline void CBasePlayerItem::iFlags(void)
{
}

/* <14d9a3> ../cstrike/dlls/weapons.h:296 */
inline void CBasePlayerItem::pszName(void)
{
}

/* <14d988> ../cstrike/dlls/weapons.h:293 */
inline void CBasePlayerItem::iMaxAmmo1(void)
{
}

/* <14d968> ../cstrike/dlls/weapons.h:292 */
inline void CBasePlayerItem::pszAmmo1(void)
{
}

/* <14d94c> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <14d91f> ../cstrike/dlls/unisignals.h:55 */
inline void CUnifiedSignals::Signal( int flSignal)
{
}

/* <14d8ff> ../cstrike/dlls/basemonster.h:78 */
inline void CBaseMonster::StopAnimation(void)
{
}

/* <14d8d9> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <14d8b8> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <14d840> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <14d817> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <14d785> ../cstrike/dlls/player.cpp:4272 */
bool CanSeeUseable(CBasePlayer *me, CBaseEntity *entity)
{
//	{
//		Vector eye;                                     //  4274
//		{
//			TraceResult result;                           //  4279
//			Vector head;                            //  4280
//			Vector chest;                           //  4281
//			Vector knees;                           //  4282
//		}
//	}
}

/* <14d72d> ../cstrike/dlls/player.cpp:9375 */
void CDeadHEV::KeyValue(KeyValueData *pkvd)
{
}

/* <14d6c3> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <14d5e2> ../cstrike/dlls/cbase.h:387 */
inline void CBaseEntity::Illumination(void)
{
}

/* <14d579> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <14d54f> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <14d4ff> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <14d4d5> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <14d4a6> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <14d46d> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <14d44b> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <14d42b> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <14d3fc> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <14d3dc> ../cstrike/dlls/vector.h:32 */
inline void Length(const class Vector2D *const this)
{
}

/* <14d3bc> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <14d38a> ../cstrike/dlls/player.cpp:6671 */
void CBasePlayer::Save(CSave &save)
{
}

/* <14d35d> ../cstrike/dlls/player.cpp:9481 */
void CRevertSaved::Save(CSave &save)
{
}

/* <14d330> ../cstrike/dlls/player.cpp:9481 */
void CRevertSaved::Restore(CRestore &restore)
{
}

/* <14d305> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <14d2da> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <14d2ad> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <14d282> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <14d262> ../cstrike/dlls/player.cpp:9531 */
void CRevertSaved::LoadThink(void)
{
}

/* <14d242> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <131d5d> ../cstrike/dlls/plats.cpp:2269 */
void CGunTarget::Stop(void)
{
}

/* <131c90> ../cstrike/dlls/plats.cpp:2163 */
void func_guntarget(entvars_t *pev)
{
//	GetClassPtr<CGunTarget>(CGunTarget *a);  //  2163
}

/* <131bc3> ../cstrike/dlls/plats.cpp:2050 */
void func_trackautochange(entvars_t *pev)
{
//	GetClassPtr<CFuncTrackAuto>(CFuncTrackAuto *a);  //  2050
}

/* <131ade> ../cstrike/dlls/plats.cpp:1883 */
void CFuncTrackChange::GoDown(void)
{
//	GoDown(CFuncTrackChange *const this);  //  1883
}

/* <1319f9> ../cstrike/dlls/plats.cpp:1919 */
void CFuncTrackChange::GoUp(void)
{
//	GoUp(CFuncTrackChange *const this);  //  1919
}

/* <1317f9> ../cstrike/dlls/plats.cpp:1858 */
void CFuncTrackChange::UpdateTrain(Vector &dest)
{
//	{
//		float time;                                           //  1860
//		Vector offset;                                  //  1870
//		Vector delta;                                   //  1871
//		Vector local;                                   //  1874
//		NextThink(CFuncTrackTrain *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //  1864
//		operator-(const Vector *const this,
//				const Vector &v);  //  1870
//		operator-(const Vector *const this,
//				const Vector &v);  //  1871
//		DotProduct(Vector &a,
//				const Vector &b);  //  1877
//		operator-(const Vector *const this,
//				const Vector &v);  //  1879
//		operator*(const Vector *const this,
//				float fl);  //  1880
//		operator+(const Vector *const this,
//				const Vector &v);  //  1880
//		DotProduct(Vector &a,
//				const Vector &b);  //  1876
//		DotProduct(Vector &a,
//				const Vector &b);  //  1875
//	}
}

/* <131725> ../cstrike/dlls/plats.cpp:1971 */
void CFuncTrackChange::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CFuncTrackChange *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1971
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1986
}

/* <131673> ../cstrike/dlls/plats.cpp:1832 */
void CFuncTrackChange::EvaluateTrain(CPathTrack *pcurrent)
{
//	{
//		Vector dist;                                    //  1844
//		float length;                                         //  1845
//	}
//	EvaluateTrain(CFuncTrackChange *const this,
//			class CPathTrack *pcurrent);  //  1832
}

/* <1315a6> ../cstrike/dlls/plats.cpp:1698 */
void func_trackchange(entvars_t *pev)
{
//	GetClassPtr<CFuncTrackChange>(CFuncTrackChange *a);  //  1698
}

/* <1314d9> ../cstrike/dlls/plats.cpp:1595 */
void func_traincontrols(entvars_t *pev)
{
//	GetClassPtr<CFuncTrainControls>(CFuncTrainControls *a);  //  1595
}

/* <131434> ../cstrike/dlls/plats.cpp:1477 */
void Instance(edict_t *pent)
{
//	FClassnameIs(edict_t *pent,
//			const char *szClassname);  //  1479
//	GET_PRIVATE(edict_t *pent);  //  1480
}

/* <131370> ../cstrike/dlls/plats.cpp:1354 */
void CFuncTrackTrain::SetControls(entvars_t *pevControls)
{
//	{
//		Vector offset;                                  //  1356
//		operator-(const Vector *const this,
//				const Vector &v);  //  1356
//		operator+(const Vector *const this,
//				const Vector &v);  //  1358
//		operator+(const Vector *const this,
//				const Vector &v);  //  1359
//	}
}

/* <131340> ../cstrike/dlls/plats.cpp:1130 */
void CFuncTrackTrain::UpdateSound(void)
{
//	{
//		float flpitch;                                        //  1132
//	}
}

/* <1312c7> ../cstrike/dlls/plats.cpp:1038 */
void CFuncTrackTrain::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		float delta;                                          //  1062
//	}
}

/* <130f1c> ../cstrike/dlls/plats.cpp:1171 */
void CFuncTrackTrain::Next(void)
{
//	{
//		float time;                                           //  1173
//		Vector nextPos;                                 //  1195
//		class CPathTrack *pnext;                             //  1198
//		Vector nextFront;                               //  1202
//		Vector delta;                                   //  1211
//		Vector angles;                                  //  1212
//		float vy;                                             //  1223
//		float vx;                                             //  1223
//		UpdateSound(CFuncTrackTrain *const this);  //  1193
//		Vector(Vector *const this,
//			const Vector &v);  //  1195
//		operator-(const Vector *const this,
//				const Vector &v);  //  1201
//		operator*(const Vector *const this,
//				float fl);  //  1201
//		Vector(Vector *const this,
//			const Vector &v);  //  1202
//		operator-(const Vector *const this,
//				const Vector &v);  //  1211
//		FixupAngles(Vector &v);  //  1217
//		FixupAngles(Vector &v);  //  1218
//		{
//			class CPathTrack *pFire;                     //  1247
//		}
//		NextThink(CFuncTrackTrain *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //  1276
//		{
//			float distance;                               //  1283
//			operator-(const Vector *const this,
//					const Vector &v);  //  1281
//			Length(const Vector *const this);  //  1283
//			operator*(const Vector *const this,
//					float fl);  //  1296
//			NextThink(CFuncTrackTrain *const this,
//					float thinkTime,
//					BOOL alwaysThink);  //  1298
//		}
//	}
}

/* <130f04> ../cstrike/dlls/plats.cpp:1093 */
void FixupAngles(Vector &v)
{
}

/* <130eb3> ../cstrike/dlls/plats.cpp:1104 */
void CFuncTrackTrain::StopSound(void)
{
//	{
//		short unsigned int us_encode;                         //  1109
//		short unsigned int us_sound;                          //  1110
//	}
}

/* <130e82> ../cstrike/dlls/plats.cpp:1002 */
void CFuncTrackTrain::NextThink(float thinkTime, BOOL alwaysThink)
{
}

/* <130db5> ../cstrike/dlls/plats.cpp:962 */
void func_tracktrain(entvars_t *pev)
{
//	GetClassPtr<CFuncTrackTrain>(CFuncTrackTrain *a);  //   962
}

/* <130ce8> ../cstrike/dlls/plats.cpp:657 */
void func_train(entvars_t *pev)
{
//	GetClassPtr<CFuncTrain>(CFuncTrain *a);  //   657
}

/* <130c54> ../cstrike/dlls/plats.cpp:608 */
void CFuncPlatRot::RotMove(Vector &destAngle, float time)
{
//	{
//		Vector vecDestDelta;                            //   611
//		operator-(const Vector *const this,
//				const Vector &v);  //   611
//		operator/(const Vector *const this,
//				float fl);  //   615
//	}
}

/* <130c1d> ../cstrike/dlls/plats.cpp:1715 */
void CFuncTrackChange::Spawn(void)
{
//	EnableUse(CFuncTrackChange *const this);  //  1738
}

/* <130bc4> ../cstrike/dlls/plats.cpp:563 */
void CFuncPlatRot::Spawn(void)
{
//	Spawn(CFuncPlat *const this);  //   565
}

/* <130b48> ../cstrike/dlls/plats.cpp:543 */
void CFuncPlatRot::SetupRotation(void)
{
//	operator*(const Vector ::SetupRotation(//			float fl);  //   549
//	operator+(const Vector *const this,
//			const Vector &v);  //   549
}

/* <130a7b> ../cstrike/dlls/plats.cpp:533 */
void func_platrot(entvars_t *pev)
{
//	GetClassPtr<CFuncPlatRot>(CFuncPlatRot *a);  //   533
}

/* <130a3b> ../cstrike/dlls/plats.cpp:1744 */
void CFuncTrackChange::Precache(void)
{
//	Precache(CFuncPlat *const this);  //  1749
}

/* <130a19> ../cstrike/dlls/plats.cpp:309 */
void CFuncPlat::Precache(void)
{
}

/* <13088e> ../cstrike/dlls/plats.cpp:309 */
void CFuncPlat::Precache(void)
{
//	PlatSpawnInsideTrigger(entvars_t *pevPlatform);  //   315
}

/* <130792> ../cstrike/dlls/plats.cpp:351 */
void CPlatTrigger::SpawnInsideTrigger(CFuncPlat *pPlatform)
{
//	{
//		Vector vecTMin;                                 //   360
//		Vector vecTMax;                                 //   361
//		operator+(const Vector *const this,
//				const Vector &v);  //   360
//		operator+(const Vector *const this,
//				const Vector &v);  //   361
//	}
}

/* <130757> ../cstrike/dlls/plats.cpp:319 */
void CFuncPlat::Spawn(void)
{
//	Spawn(CFuncPlat *const this);  //   319
}

/* <130730> ../cstrike/dlls/plats.cpp:275 */
void CFuncPlat::Setup(void)
{
}

/* <130666> ../cstrike/dlls/plats.cpp:244 */
void func_plat(entvars_t *pev)
{
//	GetClassPtr<CFuncPlat>(CFuncPlat *a);  //   244
}

/* <130634> ../cstrike/dlls/cbase.h:800 */
CFuncPlat *GetClassPtr<CFuncPlat>(CFuncPlat *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1304ca> ../cstrike/dlls/plats.cpp:1758 */
void CFuncTrackChange::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1760
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1765
//	KeyValue(CFuncTrackChange *const this,
//		KeyValueData *pkvd);  //  1758
}

/* <130390> ../cstrike/dlls/plats.cpp:668 */
void CFuncTrain::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   670
//	KeyValue(CBasePlatTrain *const this,
//		KeyValueData *pkvd);  //   676
//	KeyValue(CFuncTrain *const this,
//		KeyValueData *pkvd);  //   668
}

/* <1301f9> ../cstrike/dlls/plats.cpp:2083 */
void CFuncTrackAuto::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CPathTrack *pTarget;                           //  2085
//	}
//	Use(CFuncTrackAuto *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  2083
}

/* <12ff19> ../cstrike/dlls/plats.cpp:1788 */
void CFuncTrackChange::Find(void)
{
//	{
//		edict_t *target;                                     //  1791
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1793
//		FNullEnt(const edict_t *pent);  //  1794
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1797
//		FNullEnt(const edict_t *pent);  //  1798
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1801
//		FNullEnt(const edict_t *pent);  //  1802
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1820
//		{
//			Vector center;                          //  1810
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //  1804
//			Instance(edict_t *pent);  //  1804
//			operator+(const Vector *const this,
//					const Vector &v);  //  1810
//			operator*(const Vector *const this,
//					float fl);  //  1810
//			Vector(Vector *const this,
//				const Vector &v);  //  1811
//			Vector(Vector *const this,
//				const Vector &v);  //  1812
//		}
//	}
}

/* <12fe63> ../cstrike/dlls/plats.cpp:569 */
void CFuncPlatRot::GoDown(void)
{
//	RotMove(CFuncPlatRot::GoDown(//		Vector &destAngle,
//		float time);  //   572
}

/* <12fdad> ../cstrike/dlls/plats.cpp:590 */
void CFuncPlatRot::GoUp(void)
{
//	RotMove(CFuncPlatRot::GoUp(//		Vector &destAngle,
//		float time);  //   593
}

/* <12fd69> ../cstrike/dlls/plats.cpp:608 */
void CFuncPlatRot::RotMove(Vector &destAngle, float time)
{
//	{
//		Vector vecDestDelta;                            //   611
//	}
}

/* <12fb10> ../cstrike/dlls/plats.cpp:1598 */
void CFuncTrainControls::Find(void)
{
//	{
//		edict_t *pTarget;                                    //  1600
//		class CFuncTrackTrain *ptrain;                       //  1613
//		Instance(edict_t *pent);  //  1613
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1604
//		FNullEnt(const edict_t *pent);  //  1605
//		FNullEnt(const edict_t *pent);  //  1607
//		SetControls(CFuncTrackTrain *const this,
//				entvars_t *pevControls);  //  1614
//		FClassnameIs(edict_t *pent,
//				const char *szClassname);  //  1605
//	}
}

/* <12fadd> ../cstrike/dlls/plats.cpp:1354 */
void CFuncTrackTrain::SetControls(entvars_t *pevControls)
{
//	{
//		Vector offset;                                  //  1356
//	}
}

/* <12fac6> ../cstrike/dlls/plats.cpp:1477 */
void Instance(edict_t *pent)
{
}

/* <12fa23> ../cstrike/dlls/plats.cpp:691 */
void CFuncTrain::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   708
}

/* <12f914> ../cstrike/dlls/plats.cpp:713 */
void CFuncTrain::Wait(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   734
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   732
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   747
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   745
}

/* <12f6a8> ../cstrike/dlls/plats.cpp:760 */
void CFuncTrain::Next(void)
{
//	{
//		class CBaseEntity *pTarg;                            //   762
//		edict(CBaseEntity *const this);  //   791
//		operator+(const Vector *const this,
//				const Vector &v);  //   813
//		operator*(const Vector *const this,
//				float fl);  //   813
//		operator-(const Vector *const this,
//				const Vector &v);  //   813
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   774
//		STOP_SOUND(edict_t *entity,
//				int channel,
//				const char *sample);  //   808
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   810
//		operator+(const Vector *const this,
//				const Vector &v);  //   797
//		operator*(const Vector *const this,
//				float fl);  //   797
//		operator-(const Vector *const this,
//				const Vector &v);  //   797
//		STOP_SOUND(edict_t *entity,
//				int channel,
//				const char *sample);  //   771
//	}
}

/* <12f618> ../cstrike/dlls/plats.cpp:2005 */
void CFuncTrackChange::HitBottom(void)
{
//	HitBottom(CFuncPlatRot *const this);  //  2007
//	EnableUse(CFuncTrackChange *const this);  //  2018
//	SetTrack(CFuncTrackTrain *const this,
//		class CPathTrack *track);  //  2011
}

/* <12f588> ../cstrike/dlls/plats.cpp:2025 */
void CFuncTrackChange::HitTop(void)
{
//	HitTop(CFuncPlatRot *const this);  //  2027
//	EnableUse(CFuncTrackChange *const this);  //  2038
//	SetTrack(CFuncTrackTrain *const this,
//		class CPathTrack *track);  //  2031
}

/* <12f524> ../cstrike/dlls/plats.cpp:497 */
void CFuncPlat::Blocked(CBaseEntity *pOther)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   504
}

/* <12f502> ../cstrike/dlls/plats.cpp:600 */
void CFuncPlatRot::HitTop(void)
{
}

/* <12f4e9> ../cstrike/dlls/plats.cpp:600 */
void CFuncPlatRot::HitTop(void)
{
}

/* <12f452> ../cstrike/dlls/plats.cpp:477 */
void CFuncPlat::HitTop(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   480
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   483
}

/* <12f430> ../cstrike/dlls/plats.cpp:579 */
void CFuncPlatRot::HitBottom(void)
{
}

/* <12f417> ../cstrike/dlls/plats.cpp:579 */
void CFuncPlatRot::HitBottom(void)
{
}

/* <12f381> ../cstrike/dlls/plats.cpp:446 */
void CFuncPlat::HitBottom(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   452
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   449
}

/* <12f2f0> ../cstrike/dlls/plats.cpp:540 */
void CFuncPlatRot::Restore(CRestore &restore)
{
//	Restore(CBasePlatTrain *const this,
//		class CRestore &restore);  //   540
//	Restore(CFuncPlatRot *const this,
//		class CRestore &restore);  //   540
}

/* <12f25f> ../cstrike/dlls/plats.cpp:665 */
void CFuncTrain::Restore(CRestore &restore)
{
//	Restore(CBasePlatTrain *const this,
//		class CRestore &restore);  //   665
//	Restore(CFuncTrain *const this,
//		class CRestore &restore);  //   665
}

/* <12f1ce> ../cstrike/dlls/plats.cpp:540 */
void CFuncPlatRot::Save(CSave &save)
{
//	Save(CBasePlatTrain *const this,
//		class CSave &save);  //   540
//	Save(CFuncPlatRot *const this,
//		class CSave &save);  //   540
}

/* <12f13d> ../cstrike/dlls/plats.cpp:665 */
void CFuncTrain::Save(CSave &save)
{
//	Save(CBasePlatTrain *const this,
//		class CSave &save);  //   665
//	Save(CFuncTrain *const this,
//		class CSave &save);  //   665
}

/* <12f066> ../cstrike/dlls/plats.cpp:1713 */
void CFuncTrackChange::Restore(CRestore &restore)
{
//	Restore(CFuncPlatRot *const this,
//		class CRestore &restore);  //  1713
//	Restore(CFuncTrackChange *const this,
//		class CRestore &restore);  //  1713
}

/* <12ef8f> ../cstrike/dlls/plats.cpp:1713 */
void CFuncTrackChange::Save(CSave &save)
{
//	Save(CFuncPlatRot *const this,
//		class CSave &save);  //  1713
//	Save(CFuncTrackChange *const this,
//		class CSave &save);  //  1713
}

/* <12ee6d> ../cstrike/dlls/plats.cpp:1013 */
void CFuncTrackTrain::Blocked(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //  1015
//		VARS(edict_t *pent);  //  1018
//		operator-(const Vector *const this,
//				const Vector &v);  //  1028
//		Normalize(const Vector *const this);  //  1028
//		operator*(const Vector *const this,
//				float fl);  //  1028
//		{
//			float deltaSpeed;                             //  1020
//			fabs(double __x);  //  1020
//		}
//	}
}

/* <12ecdd> ../cstrike/dlls/plats.cpp:1422 */
void CFuncTrackTrain::NearestPath(void)
{
//	{
//		class CBaseEntity *pTrack;                           //  1424
//		class CBaseEntity *pNearest;                         //  1425
//		float dist;                                           //  1426
//		float closest;                                        //  1426
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1433
//		operator-(const Vector *const this,
//				const Vector &v);  //  1435
//		Length(const Vector *const this);  //  1435
//		operator-(const Vector *const this,
//				const Vector &v);  //  1456
//		Length(const Vector *const this);  //  1456
//		operator-(const Vector *const this,
//				const Vector &v);  //  1456
//		Length(const Vector *const this);  //  1456
//		NextThink(CFuncTrackTrain *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //  1464
//	}
}

/* <12ecc4> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <12ec15> ../cstrike/dlls/plats.cpp:61 */
void CBasePlatTrain::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    63
//	FStrEq(const char *sz1,
//		const char *sz2);  //    68
//	atof(const char *__nptr);  //    65
//	atof(const char *__nptr);  //    70
}

/* <12ea9b> ../cstrike/dlls/plats.cpp:61 */
void CBasePlatTrain::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    73
//	FStrEq(const char *sz1,
//		const char *sz2);  //    78
//	FStrEq(const char *sz1,
//		const char *sz2);  //    83
//	FStrEq(const char *sz1,
//		const char *sz2);  //    88
//	FStrEq(const char *sz1,
//		const char *sz2);  //    93
//	atof(const char *__nptr);  //    75
//	atof(const char *__nptr);  //    85
//	atof(const char *__nptr);  //    80
//	atof(const char *__nptr);  //    95
//	atof(const char *__nptr);  //    90
}

/* <12e88e> ../cstrike/dlls/plats.cpp:964 */
void CFuncTrackTrain::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   966
//	FStrEq(const char *sz1,
//		const char *sz2);  //   971
//	KeyValue(CFuncTrackTrain *const this,
//		KeyValueData *pkvd);  //   964
//	atof(const char *__nptr);  //   968
//	atof(const char *__nptr);  //   973
}

/* <12e7e7> ../cstrike/dlls/plats.cpp:380 */
void CPlatTrigger::Touch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //   383
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   384
//	}
//	Touch(CPlatTrigger *const this,
//		class CBaseEntity *pOther);  //   380
}

/* <12e636> ../cstrike/dlls/plats.cpp:1385 */
void CFuncTrackTrain::Find(void)
{
//	{
//		entvars_t *pevTarget;                                //  1391
//		Vector nextPos;                                 //  1399
//		Vector look;                                    //  1402
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1387
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1392
//		Vector(Vector *const this,
//			const Vector &v);  //  1399
//		Vector(Vector *const this,
//			const Vector &v);  //  1402
//		operator-(const Vector *const this,
//				const Vector &v);  //  1407
//		NextThink(CFuncTrackTrain *const this,
//				float thinkTime,
//				BOOL alwaysThink);  //  1414
//		UpdateSound(CFuncTrackTrain *const this);  //  1418
//	}
}

/* <12e5e7> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <12e52d> ../cstrike/dlls/plats.cpp:462 */
void CFuncPlat::GoUp(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   465
//	Vector(Vector *const this,
//		const Vector &v);  //   470
}

/* <12e49b> ../cstrike/dlls/plats.cpp:431 */
void CFuncPlat::GoDown(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   434
//	Vector(Vector *const this,
//		const Vector &v);  //   439
}

/* <12e408> ../cstrike/dlls/plats.cpp:2294 */
void CGunTarget::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Stop(CGunTarget *const this);  //  2301
//	Use(CGunTarget *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  2294
}

/* <12e371> ../cstrike/dlls/plats.cpp:2277 */
void CGunTarget::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	Stop(CGunTarget *const this);  //  2285
//	TakeDamage(CGunTarget *const this,
//			entvars_t *pevInflictor,
//			entvars_t *pevAttacker,
//			float flDamage,
//			int bitsDamageType);  //  2277
}

/* <12e31d> ../cstrike/dlls/plats.cpp:1130 */
void CFuncTrackTrain::UpdateSound(void)
{
//	{
//		float flpitch;                                        //  1132
//		{
//			short unsigned int us_encode;                 //  1157
//			short unsigned int us_sound;                  //  1158
//			short unsigned int us_pitch;                  //  1159
//			short unsigned int us_volume;                 //  1160
//		}
//	}
}

/* <12e1fd> ../cstrike/dlls/plats.cpp:818 */
void CFuncTrain::Activate(void)
{
//	Activate(CFuncTrain *const this);  //   818
}

/* <12e166> ../cstrike/dlls/plats.cpp:913 */
void CFuncTrain::OverrideReset(void)
{
//	{
//		class CBaseEntity *pTarg;                            //   915
//		operator!=(const Vector *const this,
//				const Vector &v);  //   918
//	}
//	OverrideReset(CFuncTrain *const this);  //   913
}

/* <12e11a> ../cstrike/dlls/plats.cpp:59 */
void CBasePlatTrain::Save(CSave &save)
{
//	Save(CBasePlatTrain *const this,
//		class CSave &save);  //    59
}

/* <12e0cd> ../cstrike/dlls/plats.cpp:961 */
void CFuncTrackTrain::Save(CSave &save)
{
//	Save(CFuncTrackTrain *const this,
//		class CSave &save);  //   961
}

/* <12e080> ../cstrike/dlls/plats.cpp:2170 */
void CGunTarget::Save(CSave &save)
{
//	Save(CGunTarget *const this,
//		class CSave &save);  //  2170
}

/* <12e034> ../cstrike/dlls/plats.cpp:59 */
void CBasePlatTrain::Restore(CRestore &restore)
{
//	Restore(CBasePlatTrain *const this,
//		class CRestore &restore);  //    59
}

/* <12dfe7> ../cstrike/dlls/plats.cpp:961 */
void CFuncTrackTrain::Restore(CRestore &restore)
{
//	Restore(CFuncTrackTrain *const this,
//		class CRestore &restore);  //   961
}

/* <12df9a> ../cstrike/dlls/plats.cpp:2170 */
void CGunTarget::Restore(CRestore &restore)
{
//	Restore(CGunTarget *const this,
//		class CRestore &restore);  //  2170
}

/* <12df02> ../cstrike/dlls/plats.cpp:403 */
void CFuncPlat::PlatUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		BOOL on;                                              //   408
//	}
//	PlatUse(CFuncPlat *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   403
}

/* <12deb0> ../cstrike/dlls/plats.cpp:1954 */
void CFuncTrackChange::UpdateAutoTargets(int toggleState)
{
//	UpdateAutoTargets(CFuncTrackChange *const this,
//				int toggleState);  //  1954
}

/* <12de63> ../cstrike/dlls/plats.cpp:679 */
void CFuncTrain::Blocked(CBaseEntity *pOther)
{
//	Blocked(CFuncTrain *const this,
//		class CBaseEntity *pOther);  //   679
}

/* <12de16> ../cstrike/dlls/plats.cpp:1308 */
void CFuncTrackTrain::DeadEnd(void)
{
//	{
//		class CPathTrack *pTrack;                            //  1311
//		class CPathTrack *pNext;                             //  1311
//	}
}

/* <12dd23> ../cstrike/dlls/plats.cpp:1363 */
void CFuncTrackTrain::OnControls(entvars_t *pevTest)
{
//	{
//		Vector offset;                                  //  1365
//		Vector local;                                   //  1372
//		operator-(const Vector *const this,
//				const Vector &v);  //  1365
//		DotProduct(Vector &a,
//				const Vector &b);  //  1373
//		DotProduct(Vector &a,
//				const Vector &b);  //  1374
//		DotProduct(Vector &a,
//				const Vector &b);  //  1375
//	}
}

/* <12dcd4> ../cstrike/dlls/plats.cpp:1495 */
void CFuncTrackTrain::Spawn(void)
{
//	NextThink(CFuncTrackTrain::Spawn(//			float thinkTime,
//			BOOL alwaysThink);  //  1533
}

/* <12dcad> ../cstrike/dlls/plats.cpp:852 */
void CFuncTrain::Spawn(void)
{
}

/* <12dc86> ../cstrike/dlls/plats.cpp:1619 */
void CFuncTrainControls::Spawn(void)
{
}

/* <12dc2a> ../cstrike/dlls/plats.cpp:2053 */
void CFuncTrackAuto::UpdateAutoTargets(int toggleState)
{
//	{
//		class CPathTrack *pTarget;                           //  2055
//		class CPathTrack *pNextTarget;                       //  2055
//	}
}

/* <12dbdf> ../cstrike/dlls/plats.cpp:1539 */
void CFuncTrackTrain::Restart(void)
{
//	NextThink(CFuncTrackTrain::Restart(//			float thinkTime,
//			BOOL alwaysThink);  //  1557
}

/* <12dbb8> ../cstrike/dlls/plats.cpp:2173 */
void CGunTarget::Spawn(void)
{
}

/* <12dade> ../cstrike/dlls/plats.cpp:2199 */
void CGunTarget::Activate(void)
{
//	{
//		class CBaseEntity *pTarg;                            //  2201
//		operator+(const Vector *const this,
//				const Vector &v);  //  2208
//		operator*(const Vector *const this,
//				float fl);  //  2208
//		operator-(const Vector *const this,
//				const Vector &v);  //  2208
//	}
}

/* <12dab7> ../cstrike/dlls/plats.cpp:886 */
void CFuncTrain::Restart(void)
{
}

/* <12da61> ../cstrike/dlls/plats.cpp:2236 */
void CGunTarget::Wait(void)
{
//	{
//		class CBaseEntity *pTarget;                          //  2238
//		Stop(CGunTarget *const this);  //  2242
//	}
}

/* <12d96e> ../cstrike/dlls/plats.cpp:2219 */
void CGunTarget::Next(void)
{
//	{
//		class CBaseEntity *pTarget;                          //  2224
//		operator+(const Vector *const this,
//				const Vector &v);  //  2232
//		operator*(const Vector *const this,
//				float fl);  //  2232
//		operator-(const Vector *const this,
//				const Vector &v);  //  2232
//		Stop(CGunTarget *const this);  //  2228
//	}
}

/* <12d947> ../cstrike/dlls/plats.cpp:2213 */
void CGunTarget::Start(void)
{
}

/* <12d921> ../cstrike/dlls/plats.cpp:2152 */
void CGunTarget::ObjectCaps(void)
{
}

/* <12d8bf> ../cstrike/dlls/plats.cpp:2150 */
void CGunTarget::BodyTarget(Vector &posSrc)
{
//	Vector(Vector *const this,
//		const Vector &v);  //  2150
}

/* <12d899> ../cstrike/dlls/plats.cpp:2147 */
void CGunTarget::Classify(void)
{
}

/* <12d873> ../cstrike/dlls/plats.cpp:2146 */
void CGunTarget::BloodColor(void)
{
}

/* <12d84d> ../cstrike/dlls/plats.cpp:1782 */
void CFuncTrackChange::OverrideReset(void)
{
}

/* <12d818> ../cstrike/dlls/plats.cpp:1753 */
void CFuncTrackChange::Touch(CBaseEntity *pOther)
{
}

/* <12d7f2> ../cstrike/dlls/plats.cpp:1673 */
void CFuncTrackChange::IsTogglePlat(void)
{
}

/* <12d7cc> ../cstrike/dlls/plats.cpp:1591 */
void CFuncTrainControls::ObjectCaps(void)
{
}

/* <12d7a5> ../cstrike/dlls/plats.cpp:1562 */
void CFuncTrackTrain::Precache(void)
{
}

/* <12d75a> ../cstrike/dlls/plats.cpp:1470 */
void CFuncTrackTrain::OverrideReset(void)
{
//	NextThink(CFuncTrackTrain::OverrideReset(//			float thinkTime,
//			BOOL alwaysThink);  //  1472
}

/* <12d734> ../cstrike/dlls/plats.cpp:907 */
void CFuncTrain::Precache(void)
{
}

/* <12d70e> ../cstrike/dlls/plats.cpp:251 */
void CPlatTrigger::ObjectCaps(void)
{
}

/* <12d6e8> ../cstrike/dlls/plats.cpp:237 */
void CFuncPlat::CallHitBottom(void)
{
}

/* <12d6c2> ../cstrike/dlls/plats.cpp:236 */
void CFuncPlat::CallHitTop(void)
{
}

/* <12d69c> ../cstrike/dlls/plats.cpp:235 */
void CFuncPlat::CallGoDown(void)
{
}

/* <12d675> ../cstrike/dlls/plats.cpp:105 */
void CBasePlatTrain::Precache(void)
{
}

/* <12d64f> ../cstrike/dlls/plats.cpp:41 */
void CBasePlatTrain::IsTogglePlat(void)
{
}

/* <12d629> ../cstrike/dlls/plats.cpp:36 */
void CBasePlatTrain::ObjectCaps(void)
{
}

/* <12d603> ../cstrike/dlls/trains.h:105 */
void CFuncTrackTrain::ObjectCaps(void)
{
}

/* <12d5dd> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <12d5b7> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <12d591> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <12d56b> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <12d545> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <12d510> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <12d4e4> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <12d4a9> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <12d2cf> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <12d2a9> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <12d283> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <12d24e> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <12d1ef> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <12d1ba> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <12d194> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <12d16e> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <12d148> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <12d122> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <12d0fb> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <12d0d5> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <12d0af> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <12d089> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <12d055> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <12d02f> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <12d009> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <12cfd5> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <12cfaf> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <12cf1b> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <12cecb> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <12ce97> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <12ce63> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <12ce15> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <12cdd3> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <12cdad> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <12cd87> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <12cd55> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <12cd21> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <12ccfb> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <12ccc7> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <12cca1> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <12cc7b> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <12cc52> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <12cc2c> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <12cc06> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <12cbe0> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <12cb08> ../cstrike/dlls/cbase.h:800 */
CGunTarget *GetClassPtr<CGunTarget>(CGunTarget *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12caec> ../cstrike/dlls/plats.cpp:2136 */
inline void CGunTarget::CGunTarget(void)
{
}

/* <12cacc> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <12ca94> ../cstrike/dlls/cbase.h:800 */
CFuncTrackAuto *GetClassPtr<CFuncTrackAuto>(CFuncTrackAuto *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12ca78> ../cstrike/dlls/plats.cpp:2043 */
inline void CFuncTrackAuto::CFuncTrackAuto(void)
{
}

/* <12ca46> ../cstrike/dlls/cbase.h:800 */
CFuncTrackChange *GetClassPtr<CFuncTrackChange>(CFuncTrackChange *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12ca2a> ../cstrike/dlls/plats.cpp:1654 */
inline void CFuncTrackChange::CFuncTrackChange(void)
{
}

/* <12c9f8> ../cstrike/dlls/cbase.h:800 */
CFuncTrainControls *GetClassPtr<CFuncTrainControls>(CFuncTrainControls *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12c9d7> ../cstrike/dlls/plats.cpp:1588 */
inline void CFuncTrainControls::CFuncTrainControls(void)
{
}

/* <12c9a5> ../cstrike/dlls/cbase.h:800 */
CFuncTrackTrain *GetClassPtr<CFuncTrackTrain>(CFuncTrackTrain *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12c98a> ../cstrike/dlls/trains.h:75 */
inline void CFuncTrackTrain::CFuncTrackTrain(void)
{
}

/* <12c958> ../cstrike/dlls/cbase.h:800 */
CFuncTrain *GetClassPtr<CFuncTrain>(CFuncTrain *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12c93c> ../cstrike/dlls/plats.cpp:628 */
inline void CFuncTrain::CFuncTrain(void)
{
}

/* <12c90a> ../cstrike/dlls/cbase.h:800 */
CFuncPlatRot *GetClassPtr<CFuncPlatRot>(CFuncPlatRot *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12c8ee> ../cstrike/dlls/plats.cpp:515 */
inline void CFuncPlatRot::CFuncPlatRot(void)
{
}

/* <12c8d5> ../cstrike/dlls/plats.cpp:309 */
void CFuncPlat::Precache(void)
{
}

/* <12c8bb> ../cstrike/dlls/plats.cpp:342 */
void PlatSpawnInsideTrigger(entvars_t *pevPlatform)
{
}

/* <12c889> ../cstrike/dlls/cbase.h:800 */
CPlatTrigger *GetClassPtr<CPlatTrigger>(CPlatTrigger *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <12c86e> ../cstrike/dlls/plats.cpp:248 */
inline void CPlatTrigger::CPlatTrigger(void)
{
}

/* <12c853> ../cstrike/dlls/plats.cpp:223 */
inline void CFuncPlat::CFuncPlat(void)
{
}

/* <12c817> ../cstrike/dlls/plats.cpp:33 */
inline void CBasePlatTrain::CBasePlatTrain(void)
{
}

/* <12c7f6> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <12c7cf> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <12c760> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <12c721> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <12c6d8> ../cstrike/dlls/plats.cpp:2294 */
void CGunTarget::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <12c68f> ../cstrike/dlls/plats.cpp:2277 */
void CGunTarget::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
}

/* <12c676> ../cstrike/dlls/plats.cpp:2269 */
void CGunTarget::Stop(void)
{
}

/* <12c65d> ../cstrike/dlls/plats.cpp:1883 */
void CFuncTrackChange::GoDown(void)
{
}

/* <12c644> ../cstrike/dlls/plats.cpp:1919 */
void CFuncTrackChange::GoUp(void)
{
}

/* <12c5fb> ../cstrike/dlls/plats.cpp:1971 */
void CFuncTrackChange::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <12c59f> ../cstrike/dlls/plats.cpp:2083 */
void CFuncTrackAuto::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CPathTrack *pTarget;                           //  2085
//	}
}

/* <12c560> ../cstrike/dlls/plats.cpp:1832 */
void CFuncTrackChange::EvaluateTrain(CPathTrack *pcurrent)
{
//	{
//		Vector dist;                                    //  1844
//		float length;                                         //  1845
//	}
}

/* <12c547> ../cstrike/dlls/plats.cpp:1677 */
inline void CFuncTrackChange::UseEnabled(void)
{
}

/* <12c52e> ../cstrike/dlls/plats.cpp:1676 */
inline void CFuncTrackChange::EnableUse(void)
{
}

/* <12c515> ../cstrike/dlls/plats.cpp:1675 */
inline void CFuncTrackChange::DisableUse(void)
{
}

/* <12c482> ../cstrike/dlls/plats.cpp:1130 */
void CFuncTrackTrain::UpdateSound(void)
{
//	{
//		float flpitch;                                        //  1132
//		{
//			short unsigned int us_encode;                 //  1157
//			short unsigned int us_sound;                  //  1158
//			short unsigned int us_pitch;                  //  1159
//			short unsigned int us_volume;                 //  1160
//		}
//	}
}

/* <12c451> ../cstrike/dlls/plats.cpp:1002 */
void CFuncTrackTrain::NextThink(float thinkTime, BOOL alwaysThink)
{
}

/* <12c42e> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <12c415> ../cstrike/dlls/plats.cpp:319 */
void CFuncPlat::Spawn(void)
{
}

/* <12c3f1> ../cstrike/dlls/trains.h:92 */
inline void CFuncTrackTrain::SetTrack(CPathTrack *track)
{
}

/* <12c3d3> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <12c384> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <12c36b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <12c333> ../cstrike/dlls/plats.cpp:380 */
void CPlatTrigger::Touch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //   383
//	}
}

/* <12c2e6> ../cstrike/dlls/plats.cpp:668 */
void CFuncTrain::KeyValue(KeyValueData *pkvd)
{
}

/* <12c2c1> ../cstrike/dlls/plats.cpp:1758 */
void CFuncTrackChange::KeyValue(KeyValueData *pkvd)
{
}

/* <12c29d> ../cstrike/dlls/plats.cpp:61 */
void CBasePlatTrain::KeyValue(KeyValueData *pkvd)
{
}

/* <12c278> ../cstrike/dlls/plats.cpp:964 */
void CFuncTrackTrain::KeyValue(KeyValueData *pkvd)
{
}

/* <12c24f> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <12c1ea> ../cstrike/dlls/plats.cpp:818 */
void CFuncTrain::Activate(void)
{
//	{
//		entvars_t *pevTarg;                                  //   824
//	}
}

/* <12c145> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <12c09a> ../cstrike/dlls/vector.h:140 */
inline void Vector::Length2D(void)
{
}

/* <12c073> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <12c029> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <12bff5> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <12bfce> ../cstrike/dlls/plats.cpp:913 */
void CFuncTrain::OverrideReset(void)
{
//	{
//		class CBaseEntity *pTarg;                            //   915
//	}
}

/* <12bfa7> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <12bf7b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <12bf54> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <12bf36> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <12bf0c> ../cstrike/dlls/plats.cpp:1713 */
void CFuncTrackChange::Save(CSave &save)
{
}

/* <12bee2> ../cstrike/dlls/plats.cpp:540 */
void CFuncPlatRot::Save(CSave &save)
{
}

/* <12beb8> ../cstrike/dlls/plats.cpp:665 */
void CFuncTrain::Save(CSave &save)
{
}

/* <12be8f> ../cstrike/dlls/plats.cpp:59 */
void CBasePlatTrain::Save(CSave &save)
{
}

/* <12be65> ../cstrike/dlls/plats.cpp:961 */
void CFuncTrackTrain::Save(CSave &save)
{
}

/* <12be3b> ../cstrike/dlls/plats.cpp:2170 */
void CGunTarget::Save(CSave &save)
{
}

/* <12be11> ../cstrike/dlls/plats.cpp:1713 */
void CFuncTrackChange::Restore(CRestore &restore)
{
}

/* <12bde2> ../cstrike/dlls/plats.cpp:540 */
void CFuncPlatRot::Restore(CRestore &restore)
{
}

/* <12bdb8> ../cstrike/dlls/plats.cpp:665 */
void CFuncTrain::Restore(CRestore &restore)
{
}

/* <12bd8a> ../cstrike/dlls/plats.cpp:59 */
void CBasePlatTrain::Restore(CRestore &restore)
{
}

/* <12bd5b> ../cstrike/dlls/plats.cpp:961 */
void CFuncTrackTrain::Restore(CRestore &restore)
{
}

/* <12bd2c> ../cstrike/dlls/plats.cpp:2170 */
void CGunTarget::Restore(CRestore &restore)
{
}

/* <12bcd1> ../cstrike/dlls/plats.cpp:403 */
void CFuncPlat::PlatUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		BOOL on;                                              //   408
//	}
}

/* <12bca7> ../cstrike/dlls/plats.cpp:1954 */
void CFuncTrackChange::UpdateAutoTargets(int toggleState)
{
}

/* <12bc89> ../cstrike/dlls/plats.cpp:1082 */
float Fix(float angle)
{
}

/* <12bc5f> ../cstrike/dlls/plats.cpp:679 */
void CFuncTrain::Blocked(CBaseEntity *pOther)
{
}

/* <126343> ../cstrike/dlls/plane.cpp:45 */
void CPlane::PointInFront(Vector &vecPoint)
{
//	{
//		float flFace;                                         //    47
//		DotProduct(Vector &a,
//				const Vector &b);  //    54
//	}
}

/* <1262d4> ../cstrike/dlls/plane.cpp:33 */
void CPlane::InitializePlane(Vector &vecNormal, Vector &vecPoint)
{
//	DotProduct(Vector &a,
//			const Vector &b);  //    36
}

/* <1262b3> ../cstrike/dlls/plane.cpp:24 */
void CPlane::CPlane(void)
{
}

/* <126294> ../cstrike/dlls/plane.cpp:24 */
void CPlane::CPlane(void)
{
}

/* <126248> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <123375> ../cstrike/dlls/pathcorner.cpp:358 */
void Instance(edict_t *pent)
{
//	FClassnameIs(edict_t *pent,
//			const char *szClassname);  //   360
//	GET_PRIVATE(edict_t *pent);  //   361
}

/* <123220> ../cstrike/dlls/pathcorner.cpp:320 */
void CPathTrack::Nearest(Vector origin)
{
//	{
//		int deadCount;                                        //   322
//		float minDist;                                        //   323
//		float dist;                                           //   323
//		Vector delta;                                   //   324
//		class CPathTrack *ppath;                             //   325
//		class CPathTrack *pnearest;                          //   325
//		operator-(const Vector *const this,
//				const Vector &v);  //   328
//		Length(const Vector *const this);  //   330
//		GetNext(CPathTrack *const this);  //   332
//		GetNext(CPathTrack *const this);  //   352
//		operator-(const Vector *const this,
//				const Vector &v);  //   344
//		Length(const Vector *const this);  //   346
//	}
}

/* <122d95> ../cstrike/dlls/pathcorner.cpp:237 */
void CPathTrack::LookAhead(Vector *origin, float dist, int move)
{
//	{
//		class CPathTrack *pcurrent;                          //   239
//		float originalDist;                                   //   240
//		Vector currentPos;                              //   243
//		Vector(Vector *const this,
//			const Vector &v);  //   243
//		{
//			Vector dir;                             //   291
//			float length;                                 //   292
//			GetNext(CPathTrack *const this);  //   285
//			ValidPath(CPathTrack *const this,
//					class CPathTrack *ppath,
//					int testFlag);  //   285
//			GetNext(CPathTrack *const this);  //   291
//			operator-(const Vector *const this,
//					const Vector &v);  //   291
//			Length(const Vector *const this);  //   292
//			GetNext(CPathTrack *const this);  //   293
//			GetNext(CPathTrack *const this);  //   293
//			ValidPath(CPathTrack *const this,
//					class CPathTrack *ppath,
//					int testFlag);  //   293
//			Project(CPathTrack *const this,
//				class CPathTrack *pstart,
//				class CPathTrack *pend,
//				Vector *origin,
//				float dist);  //   288
//			GetNext(CPathTrack *const this);  //   307
//			GetNext(CPathTrack *const this);  //   308
//			operator*(const Vector *const this,
//					float fl);  //   301
//			operator+(const Vector *const this,
//					const Vector &v);  //   301
//			GetPrevious(CPathTrack *const this);  //   288
//		}
//		{
//			Vector dir;                             //   250
//			float length;                                 //   251
//			operator-(const Vector *const this,
//					const Vector &v);  //   250
//			Length(const Vector *const this);  //   251
//			GetPrevious(CPathTrack *const this);  //   254
//			ValidPath(CPathTrack *const this,
//					class CPathTrack *ppath,
//					int testFlag);  //   254
//			GetPrevious(CPathTrack *const this);  //   260
//			GetPrevious(CPathTrack *const this);  //   275
//			GetPrevious(CPathTrack *const this);  //   272
//			ValidPath(CPathTrack *const this,
//					class CPathTrack *ppath,
//					int testFlag);  //   272
//			operator*(const Vector *const this,
//					float fl);  //   264
//			operator+(const Vector *const this,
//					const Vector &v);  //   264
//			GetNext(CPathTrack *const this);  //   257
//			Project(CPathTrack *const this,
//				class CPathTrack *pstart,
//				class CPathTrack *pend,
//				Vector *origin,
//				float dist);  //   257
//		}
//	}
}

/* <122d51> ../cstrike/dlls/pathcorner.cpp:228 */
void CPathTrack::SetPrevious(CPathTrack *pprev)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   231
}

/* <122d30> ../cstrike/dlls/pathcorner.cpp:218 */
void CPathTrack::GetPrevious(void)
{
}

/* <122d0f> ../cstrike/dlls/pathcorner.cpp:208 */
void CPathTrack::GetNext(void)
{
}

/* <122ccd> ../cstrike/dlls/pathcorner.cpp:198 */
void CPathTrack::Project(CPathTrack *pstart, class CPathTrack *pend, Vector *origin, float dist)
{
}

/* <122c9c> ../cstrike/dlls/pathcorner.cpp:186 */
void CPathTrack::ValidPath(CPathTrack *ppath, int testFlag)
{
}

/* <122c76> ../cstrike/dlls/pathcorner.cpp:180 */
void CPathTrack::Activate(void)
{
}

/* <122a12> ../cstrike/dlls/pathcorner.cpp:128 */
void CPathTrack::Link(void)
{
//	{
//		edict_t *pentTarget;                                 //   130
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   151
//		FNullEnt(const edict_t *pent);  //   152
//		Instance(edict_t *pent);  //   154
//		SetPrevious(CPathTrack *const this,
//				class CPathTrack *pprev);  //   158
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   134
//		FNullEnt(const edict_t *pent);  //   135
//		Instance(edict_t *pent);  //   137
//		SetPrevious(CPathTrack *const this,
//				class CPathTrack *pprev);  //   141
//	}
}

/* <1229ee> ../cstrike/dlls/pathcorner.cpp:228 */
void CPathTrack::SetPrevious(CPathTrack *pprev)
{
}

/* <1229d7> ../cstrike/dlls/pathcorner.cpp:358 */
void Instance(edict_t *pent)
{
}

/* <12290d> ../cstrike/dlls/pathcorner.cpp:81 */
void path_track(entvars_t *pev)
{
//	GetClassPtr<CPathTrack>(CPathTrack *a);  //    81
}

/* <122843> ../cstrike/dlls/pathcorner.cpp:41 */
void path_corner(entvars_t *pev)
{
//	GetClassPtr<CPathCorner>(CPathCorner *a);  //    41
}

/* <122745> ../cstrike/dlls/pathcorner.cpp:198 */
void CPathTrack::Project(CPathTrack *pstart, class CPathTrack *pend, Vector *origin, float dist)
{
//	{
//		Vector dir;                                     //   202
//		operator-(const Vector *const this,
//				const Vector &v);  //   202
//		Normalize(const Vector *const this);  //   203
//		operator*(const Vector *const this,
//				float fl);  //   204
//		operator+(const Vector *const this,
//				const Vector &v);  //   204
//	}
}

/* <122697> ../cstrike/dlls/pathcorner.cpp:54 */
void CPathCorner::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    56
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    62
//	KeyValue(CPathCorner *const this,
//		KeyValueData *pkvd);  //    54
}

/* <122602> ../cstrike/dlls/pathcorner.cpp:86 */
void CPathTrack::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    88
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    94
//	KeyValue(CPathTrack *const this,
//		KeyValueData *pkvd);  //    86
}

/* <1225b6> ../cstrike/dlls/pathcorner.cpp:49 */
void CPathCorner::Save(CSave &save)
{
//	Save(CPathCorner *const this,
//		class CSave &save);  //    49
}

/* <12256a> ../cstrike/dlls/pathcorner.cpp:80 */
void CPathTrack::Save(CSave &save)
{
//	Save(CPathTrack *const this,
//		class CSave &save);  //    80
}

/* <12251e> ../cstrike/dlls/pathcorner.cpp:49 */
void CPathCorner::Restore(CRestore &restore)
{
//	Restore(CPathCorner *const this,
//		class CRestore &restore);  //    49
}

/* <1224d2> ../cstrike/dlls/pathcorner.cpp:80 */
void CPathTrack::Restore(CRestore &restore)
{
//	Restore(CPathTrack *const this,
//		class CRestore &restore);  //    80
}

/* <122433> ../cstrike/dlls/pathcorner.cpp:97 */
void CPathTrack::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int on;                                               //    99
//	}
//	Use(CPathTrack *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //    97
}

/* <12239a> ../cstrike/dlls/pathcorner.cpp:165 */
void CPathTrack::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //   168
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   168
}

/* <12234b> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <122325> ../cstrike/dlls/pathcorner.cpp:66 */
void CPathCorner::Spawn(void)
{
}

/* <1222ff> ../cstrike/dlls/pathcorner.cpp:30 */
void CPathCorner::GetDelay(void)
{
}

/* <1222de> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <1222b8> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <12227d> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1220a3> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <12207d> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <122057> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <122022> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <121fc3> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <121f8e> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <121f68> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <121f42> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <121f1c> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <121ef6> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <121ecf> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <121ea9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <121e83> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <121e5d> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <121e29> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <121e03> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <121ddd> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <121da9> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <121d83> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <121cef> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <121c9f> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <121c6b> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <121c37> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <121be9> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <121ba7> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <121b81> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <121b5b> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <121b29> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <121ae9> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <121ac3> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <121a8f> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <121a69> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <121a43> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <121a1d> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1219f7> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1219de> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1219ac> ../cstrike/dlls/cbase.h:800 */
CPathTrack *GetClassPtr<CPathTrack>(CPathTrack *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <121991> ../cstrike/dlls/trains.h:37 */
inline void CPathTrack::CPathTrack(void)
{
}

/* <12195f> ../cstrike/dlls/cbase.h:800 */
CPathCorner *GetClassPtr<CPathCorner>(CPathCorner *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <121944> ../cstrike/dlls/pathcorner.cpp:25 */
inline void CPathCorner::CPathCorner(void)
{
}

/* <121907> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <1218ec> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <12182c> ../cstrike/dlls/pathcorner.cpp:208 */
void CPathTrack::GetNext(void)
{
}

/* <1217fd> ../cstrike/dlls/pathcorner.cpp:186 */
void CPathTrack::ValidPath(CPathTrack *ppath, int testFlag)
{
}

/* <1217e4> ../cstrike/dlls/pathcorner.cpp:218 */
void CPathTrack::GetPrevious(void)
{
}

/* <1217bd> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <12176b> ../cstrike/dlls/pathcorner.cpp:198 */
void CPathTrack::Project(CPathTrack *pstart, class CPathTrack *pend, Vector *origin, float dist)
{
//	{
//		Vector dir;                                     //   202
//	}
}

/* <121745> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <12171e> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <121700> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1216e1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1216bd> ../cstrike/dlls/pathcorner.cpp:54 */
void CPathCorner::KeyValue(KeyValueData *pkvd)
{
}

/* <12167a> ../cstrike/dlls/pathcorner.cpp:86 */
void CPathTrack::KeyValue(KeyValueData *pkvd)
{
}

/* <121651> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <121560> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <121539> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <12150d> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1214d9> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1214bb> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <121492> ../cstrike/dlls/pathcorner.cpp:49 */
void CPathCorner::Save(CSave &save)
{
}

/* <121469> ../cstrike/dlls/pathcorner.cpp:80 */
void CPathTrack::Save(CSave &save)
{
}

/* <12143b> ../cstrike/dlls/pathcorner.cpp:49 */
void CPathCorner::Restore(CRestore &restore)
{
}

/* <121412> ../cstrike/dlls/pathcorner.cpp:80 */
void CPathTrack::Restore(CRestore &restore)
{
}

/* <1213bc> ../cstrike/dlls/pathcorner.cpp:97 */
void CPathTrack::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int on;                                               //    99
//	}
}

/* <11cd4b> ../cstrike/dlls/observer.cpp:506 */
void CBasePlayer::Observer_SetMode(int iMode)
{
//	{
//		int forcecamera;                                      //   512
//		int oldMode;                                          //   518
//		char modemsg;                                         //   592
//	}
}

/* <11cb26> ../cstrike/dlls/observer.cpp:380 */
void CBasePlayer::Observer_CheckProperties(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   496
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   486
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   475
//	{
//		class CBasePlayer *target;                           //   385
//		int weapon;                                           //   390
//		int targetBombState;                                  //   411
//		edict(CBaseEntity *const this);  //   385
//		ENTINDEX(edict_t *pEdict);  //   385
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   397
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   404
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   427
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   450
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   437
//	}
}

/* <11c9d3> ../cstrike/dlls/observer.cpp:304 */
void CBasePlayer::Observer_CheckTarget(void)
{
//	{
//		class CBasePlayer *target;                           //   342
//		{
//			int lastMode;                                 //   331
//			Observer_SetMode(CBasePlayer *const this,
//					int iMode);  //   333
//		}
//		edict(CBaseEntity *const this);  //   342
//		ENTINDEX(edict_t *pEdict);  //   342
//		{
//			int lastMode;                                 //   369
//			Observer_SetMode(CBasePlayer *const this,
//					int iMode);  //   371
//		}
//		Observer_SetMode(CBasePlayer *const this,
//				int iMode);  //   316
//	}
}

/* <11c9ac> ../cstrike/dlls/observer.cpp:254 */
void CBasePlayer::Observer_HandleButtons(void)
{
}

/* <11c7e4> ../cstrike/dlls/observer.cpp:175 */
void CBasePlayer::Observer_FindNextPlayer(bool bReverse, const char *name)
{
//	{
//		int iStart;                                           //   187
//		int iCurrent;                                         //   192
//		int iDir;                                             //   194
//		bool bForceSameTeam;                                  //   196
//		edict(CBaseEntity *const this);  //   191
//		ENTINDEX(edict_t *pEdict);  //   191
//		GetForceCamera(void);  //   196
//		{
//			class CBasePlayer *pPlayer;                  //   219
//			edict(CBaseEntity *const this);  //   219
//			ENTINDEX(edict_t *pEdict);  //   219
//		}
//		edict(CBaseEntity *const this);  //   189
//		ENTINDEX(edict_t *pEdict);  //   189
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   237
//		edict(CBaseEntity *const this);  //   237
//		edict(CBaseEntity *const this);  //   239
//		ENTINDEX(edict_t *pEdict);  //   239
//		edict(CBaseEntity *const this);  //   247
//		ENTINDEX(edict_t *pEdict);  //   247
//	}
}

/* <11c6db> ../cstrike/dlls/observer.cpp:506 */
void CBasePlayer::Observer_SetMode(int iMode)
{
//	{
//		int forcecamera;                                      //   512
//		int oldMode;                                          //   518
//		char modemsg;                                         //   592
//		GetForceCamera(void);  //   512
//		{
//			class CBaseEntity *pEnt;                     //   533
//		}
//		edict(CBaseEntity *const this);  //   567
//		ENTINDEX(edict_t *pEdict);  //   567
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   579
//	}
}

/* <11c552> ../cstrike/dlls/observer.cpp:175 */
void CBasePlayer::Observer_FindNextPlayer(bool bReverse, const char *name)
{
//	{
//		int iStart;                                           //   187
//		int iCurrent;                                         //   192
//		int iDir;                                             //   194
//		bool bForceSameTeam;                                  //   196
//		edict(CBaseEntity *const this);  //   191
//		ENTINDEX(edict_t *pEdict);  //   191
//		GetForceCamera(void);  //   196
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   237
//		edict(CBaseEntity *const this);  //   237
//		edict(CBaseEntity *const this);  //   239
//		ENTINDEX(edict_t *pEdict);  //   239
//		edict(CBaseEntity *const this);  //   247
//		ENTINDEX(edict_t *pEdict);  //   247
//		edict(CBaseEntity *const this);  //   189
//		ENTINDEX(edict_t *pEdict);  //   189
//	}
}

/* <11c4fa> ../cstrike/dlls/observer.cpp:49 */
void CBasePlayer::Observer_IsValidTarget(int iPlayerIndex, bool bSameTeam)
{
//	{
//		class CBaseEntity *pEnt;                             //    59
//	}
}

/* <11c2c7> ../cstrike/dlls/observer.cpp:82 */
void UpdateClientEffects(CBasePlayer *pObserver, int oldMode)
{
//	{
//		bool clearProgress;                                   //    84
//		bool clearBlindness;                                  //    85
//		bool blindnessOk;                                     //    86
//		bool clearNightvision;                                //    87
//		{
//			class CBasePlayer *pPlayer;                  //   104
//			edict(CBaseEntity *const this);  //   104
//			ENTINDEX(edict_t *pEdict);  //   104
//			{
//				float fadeTime;                       //   127
//				float holdTime;                       //   128
//				int alpha;                            //   129
//				{
//					float percentRemaining;       //   138
//				}
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //   142
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					entvars_t *ent);  //   149
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //   166
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //   162
//	}
}

/* <11c257> ../cstrike/dlls/observer.cpp:175 */
void CBasePlayer::Observer_FindNextPlayer(bool bReverse, const char *name)
{
//	{
//		int iStart;                                           //   187
//		int iCurrent;                                         //   192
//		int iDir;                                             //   194
//		bool bForceSameTeam;                                  //   196
//		{
//			class CBasePlayer *pPlayer;                  //   219
//		}
//	}
}

/* <11c1e8> ../cstrike/dlls/observer.cpp:506 */
void CBasePlayer::Observer_SetMode(int iMode)
{
//	{
//		int forcecamera;                                      //   512
//		int oldMode;                                          //   518
//		char modemsg;                                         //   592
//		{
//			class CBaseEntity *pEnt;                     //   533
//		}
//	}
}

/* <11c190> ../cstrike/dlls/observer.cpp:36 */
int GetForceCamera(void)
{
//	{
//		int retVal;                                           //    41
//	}
}

/* <11c172> ../cstrike/dlls/player.h:272 */
inline void CBasePlayer::IsObserver(void)
{
}

/* <11c153> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <11c135> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <11c0e6> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <11c09c> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <11c027> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <11bfd8> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <11bf77> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <11bf4b> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <118a59> (null):27581 */
void _GLOBAL__sub_I_g_pMPGameRules(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  4955
}

/* <11895b> ../cstrike/dlls/multiplay_gamerules.cpp:4702 */
void CHalfLifeMultiplay::ProcessMapVote(CBasePlayer *player, int iVote)
{
//	{
//		class CBaseEntity *pTempEntity;                      //  4704
//		class CBasePlayer *pTempPlayer;                      //  4705
//		int iValidVotes;                                      //  4706
//		int iRequiredVotes;                                   //  4707
//		int iNumPlayers;                                      //  4708
//		float ratio;                                          //  4730
//		edict(CBaseEntity *const this);  //  4712
//		FNullEnt(const edict_t *pent);  //  4712
//	}
}

/* <1187d2> ../cstrike/dlls/multiplay_gamerules.cpp:4629 */
void CHalfLifeMultiplay::DisplayMaps(CBasePlayer *player, int iVote)
{
//	{
//		mapcycle_t mapcycle2;                                 //  4631
//		char *mapcfile;                                      //  4632
//		class mapcycle_item_s *item;                         //  4633
//		int iCount;                                           //  4634
//		char *pszNewMap;                                     //  4635
//		int done;                                             //  4640
//		DestroyMapCycle(mapcycle_t *cycle);  //  4637
//		ResetAllMapVotes(CHalfLifeMultiplay *const this);  //  4691
//	}
}

/* <118585> ../cstrike/dlls/multiplay_gamerules.cpp:862 */
void GiveC4(CHalfLifeMultiplay *const this)
{
//	{
//		int iTeamCount;                                       //   864
//		int iTemp;                                            //   865
//		class CBaseEntity *pPlayer;                          //   866
//		class CBasePlayer *player;                           //   867
//		int humansPresent;                                    //   873
//		bool giveToHumans;                                    //   874
//		{
//			int i;                                        //   878
//			edict(CBaseEntity *const this);  //   882
//			FNullEnt(const edict_t *pent);  //   882
//		}
//		edict(CBaseEntity *const this);  //   906
//		FNullEnt(const edict_t *pent);  //   906
//		IsThereABomber(CHalfLifeMultiplay *const this);  //   941
//		edict(CBaseEntity *const this);  //   949
//		FNullEnt(const edict_t *pent);  //   949
//		edict(CBaseEntity *const this);  //   930
//		edict(CBaseEntity *const this);  //   930
//		edict(CBaseEntity *const this);  //   968
//		edict(CBaseEntity *const this);  //   968
//	}
}

/* <117750> ../cstrike/dlls/multiplay_gamerules.cpp:1084 */
void CHalfLifeMultiplay::CheckWinConditions(void)
{
//	{
//		class CBaseEntity *pPlayer;                          //  1086
//		class CBasePlayer *player;                           //  1087
//		int NumDeadCT;                                        //  1088
//		int NumDeadTerrorist;                                 //  1088
//		int NumAliveTerrorist;                                //  1088
//		int NumAliveCT;                                       //  1088
//		int NumSpawnableHumans;                               //  1089
//		int NumHumans;                                        //  1090
//		BOOL bNeededPlayers;                                  //  1091
//		class CBaseEntity *hostage;                          //  1454
//		int iHostages;                                        //  1455
//		bool bHostageAlive;                                   //  1456
//		edict(CBaseEntity *const this);  //  1106
//		FNullEnt(const edict_t *pent);  //  1106
//		IsCareer(CHalfLifeMultiplay *const this);  //  1175
//		{
//			class CBasePlayer *player;                   //  1177
//		}
//		IsCareer(CHalfLifeMultiplay *const this);  //  1192
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1194
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1199
//		{
//			float flEscapeRatio;                          //  1266
//			Broadcast(const char *sentence);  //  1303
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1310
//			Broadcast(const char *sentence);  //  1272
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1279
//			Broadcast(const char *sentence);  //  1287
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1294
//		}
//		Broadcast(const char *sentence);  //  1343
//		{
//			class CGrenade *C4;                          //  1368
//			class CBaseEntity *temp;                     //  1369
//			BOOL nowin;                                   //  1370
//			TerminateRound(float tmDelay,
//					int iWinStatus);  //  1410
//			Broadcast(const char *sentence);  //  1395
//		}
//		Broadcast(const char *sentence);  //  1425
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1436
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1440
//		Broadcast(const char *sentence);  //  1447
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1448
//		Broadcast(const char *sentence);  //  1473
//		IsCareer(CHalfLifeMultiplay *const this);  //  1488
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1493
//		Broadcast(const char *sentence);  //  1325
//		TerminateRound(float tmDelay,
//				int iWinStatus);  //  1337
//		Broadcast(const char *sentence);  //  1242
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1249
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1333
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1354
//		Broadcast(const char *sentence);  //  1214
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1221
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1224
//		edict(CBaseEntity *const this);  //  1227
//		ENTINDEX(edict_t *pEdict);  //  1227
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1481
//	}
}

/* <11745e> ../cstrike/dlls/multiplay_gamerules.cpp:1676 */
void CHalfLifeMultiplay::RestartRound(void)
{
//	{
//		float flAutoKickIdle;                                 //  1804
//		class CMapInfo *mi;                                  //  1815
//		class CBaseEntity *hostage;                          //  1896
//		class CHostage *temp;                                //  1897
//		int acct_tmp;                                         //  1903
//		class CBaseEntity *pPlayer;                          //  1965
//		class CBasePlayer *player;                           //  1966
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1711
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1717
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1782
//		{
//			int i;                                        //  1786
//			{
//				class CBasePlayer *plr;              //  1788
//				FNullEnt(entvars_t *pev);  //  1790
//			}
//		}
//		edict(CBaseEntity *const this);  //  1985
//		FNullEnt(const edict_t *pent);  //  1985
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1701
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1704
//	}
}

/* <117336> ../cstrike/dlls/multiplay_gamerules.cpp:1499 */
void CHalfLifeMultiplay::SwapAllPlayers(void)
{
//	{
//		class CBasePlayer *player;                           //  1501
//		class CBaseEntity *pPlayer;                          //  1502
//		int iTemp;                                            //  1516
//		edict(CBaseEntity *const this);  //  1505
//		FNullEnt(const edict_t *pent);  //  1505
//		UpdateTeamScores(CHalfLifeMultiplay *const this);  //  1522
//	}
}

/* <1171eb> ../cstrike/dlls/multiplay_gamerules.cpp:1525 */
void CHalfLifeMultiplay::BalanceTeams(void)
{
//	{
//		int iTeamToSwap;                                      //  1527
//		int iNumToSwap;                                       //  1528
//		class CBasePlayer *player;                           //  1573
//		class CBasePlayer *toSwap;                           //  1574
//		class CBaseEntity *pPlayer;                          //  1575
//		int iHighestUserID;                                   //  1578
//		{
//			int iDesiredNumCT;                            //  1532
//			int iDesiredNumTerrorist;                     //  1532
//		}
//		{
//			int i;                                        //  1580
//			edict(CBaseEntity *const this);  //  1586
//			FNullEnt(const edict_t *pent);  //  1586
//			edict(CBaseEntity *const this);  //  1591
//			edict(CBaseEntity *const this);  //  1593
//		}
//	}
}

/* <11706f> ../cstrike/dlls/multiplay_gamerules.cpp:2335 */
void CHalfLifeMultiplay::PickNextVIP(void)
{
//	{
//		int i;                                                //  2343
//		StackVIPQueue(CHalfLifeMultiplay *const this);  //  2351
//	}
//	{
//		int iCount;                                           //  2365
//		class CBaseEntity *pPlayer;                          //  2367
//		class CBasePlayer *player;                           //  2368
//		class CBasePlayer *pLastPlayer;                      //  2369
//		edict(CBaseEntity *const this);  //  2372
//		FNullEnt(const edict_t *pent);  //  2372
//	}
//	{
//		class CBaseEntity *pPlayer;                          //  2404
//		class CBasePlayer *player;                           //  2405
//		edict(CBaseEntity *const this);  //  2408
//		FNullEnt(const edict_t *pent);  //  2408
//	}
}

/* <116cbd> ../cstrike/dlls/multiplay_gamerules.cpp:3627 */
void CHalfLifeMultiplay::PlayerKilled(CBasePlayer *pVictim, entvars_t *pKiller, entvars_t *pInflictor)
{
//	{
//		class CBasePlayer *peKiller;                         //  3644
//		class CBaseEntity *ktmp;                             //  3645
//		class CBaseEntity *ep;                               //  3751
//		edict(CBaseEntity *const this);  //  3642
//		Instance(entvars_t *pev);  //  3645
//		{
//			class CBasePlayer *pDriver;                  //  3650
//		}
//		{
//			class CBasePlayer *killer;                   //  3667
//			{
//				int iUserID;                          //  3685
//				edict(CBaseEntity *const this);  //  3685
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3708
//			edict(CBaseEntity *const this);  //  3711
//			ENTINDEX(edict_t *pEdict);  //  3711
//			ENTINDEX(edict_t *pEdict);  //  3712
//			edict(CBaseEntity *const this);  //  3720
//			edict(CBaseEntity *const this);  //  3720
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3742
//		edict(CBaseEntity *const this);  //  3743
//		ENTINDEX(edict_t *pEdict);  //  3743
//		Instance(entvars_t *pev);  //  3751
//		{
//			class CBasePlayer *PK;                       //  3754
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3756
//			edict(CBaseEntity *const this);  //  3757
//			ENTINDEX(edict_t *pEdict);  //  3757
//		}
//	}
}

/* <116c24> ../cstrike/dlls/multiplay_gamerules.cpp:4110 */
void CHalfLifeMultiplay::PlayerRelationship(CBasePlayer *pPlayer, CBaseEntity *pTarget)
{
//	{
//		class CBasePlayer *player;                           //  4118
//		class CBasePlayer *target;                           //  4119
//	}
//	PlayerRelationship(CHalfLifeMultiplay *const this,
//				class CBasePlayer *pPlayer,
//				class CBaseEntity *pTarget);  //  4110
}

/* <116b93> ../cstrike/dlls/multiplay_gamerules.cpp:4582 */
void CHalfLifeMultiplay::ResetAllMapVotes(void)
{
//	{
//		int j;                                                //  4584
//		class CBaseEntity *pTempEntity;                      //  4585
//		class CBasePlayer *pTempPlayer;                      //  4586
//		edict(CBaseEntity *const this);  //  4590
//		FNullEnt(const edict_t *pent);  //  4590
//	}
}

/* <116b52> ../cstrike/dlls/multiplay_gamerules.cpp:4582 */
void CHalfLifeMultiplay::ResetAllMapVotes(void)
{
//	{
//		int j;                                                //  4584
//		class CBaseEntity *pTempEntity;                      //  4585
//		class CBasePlayer *pTempPlayer;                      //  4586
//	}
}

/* <11642b> ../cstrike/dlls/multiplay_gamerules.cpp:3163 */
void CHalfLifeMultiplay::InitHUD(CBasePlayer *pl)
{
//	{
//		int i;                                                //  3207
//		edict(CBaseEntity *const this);  //  3168
//		edict(CBaseEntity *const this);  //  3168
//		edict(CBaseEntity *const this);  //  3181
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3181
//		edict(CBaseEntity *const this);  //  3182
//		ENTINDEX(edict_t *pEdict);  //  3182
//		edict(CBaseEntity *const this);  //  3189
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3189
//		IsCareer(CHalfLifeMultiplay *const this);  //  3193
//		edict(CBaseEntity *const this);  //  3196
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3196
//		{
//			class CBasePlayer *plr;                      //  3211
//			edict(CBaseEntity *const this);  //  3215
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3215
//		}
//		edict(CBaseEntity *const this);  //  3226
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3226
//		edict(CBaseEntity *const this);  //  3231
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3231
//		edict(CBaseEntity *const this);  //  3236
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3236
//		edict(CBaseEntity *const this);  //  3240
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3240
//		{
//			class CBasePlayer *plr;                      //  3255
//			entindex(CBaseEntity *const this);  //  3283
//			edict(CBaseEntity *const this);  //  3259
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3259
//			entindex(CBaseEntity *const this);  //  3260
//			edict(CBaseEntity *const this);  //  3287
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3287
//			entindex(CBaseEntity *const this);  //  3288
//		}
//		{
//			class CBaseEntity *pWeaponC4;                //  3301
//			edict(CBaseEntity *const this);  //  3306
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3306
//		}
//		edict(CBaseEntity *const this);  //  3175
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3175
//		edict(CBaseEntity *const this);  //  3248
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3248
//	}
}

/* <116317> ../cstrike/dlls/multiplay_gamerules.cpp:4903 */
void CHalfLifeMultiplay::SendMOTDToClient(edict_t *client)
{
//	{
//		int length;                                           //  4906
//		int char_count;                                       //  4906
//		char *pFileList;                                     //  4907
//		char *aFileList;                                     //  4908
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  4911
//		{
//			char chunk;                                   //  4920
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  4938
//		}
//	}
}

/* <11624e> ../cstrike/dlls/multiplay_gamerules.cpp:4608 */
/* linkage=_Z11GetMapCountv */
int GetMapCount(void)
{
//	{
//		mapcycle_t mapcycle2;                                 //  4610
//		char *mapcfile;                                      //  4611
//		class mapcycle_item_s *item;                         //  4612
//		int iCount;                                           //  4613
//		int iDone;                                            //  4613
//		DestroyMapCycle(mapcycle_t *cycle);  //  4615
//	}
}

/* <116089> ../cstrike/dlls/multiplay_gamerules.cpp:4773 */
void CHalfLifeMultiplay::ChangeLevel(void)
{
//	{
//		char szPreviousMapCycleFile;                          //  4775
//		mapcycle_t mapcycle;                                  //  4776
//		char szNextMap;                                       //  4778
//		char szFirstMapInList;                                //  4779
//		char szCommands;                                      //  4780
//		char szRules;                                         //  4781
//		int minplayers;                                       //  4782
//		int maxplayers;                                       //  4782
//		int curplayers;                                       //  4785
//		BOOL do_cycle;                                        //  4786
//		char *mapcfile;                                      //  4789
//		CountPlayers(void);  //  4795
//		{
//			BOOL keeplooking;                             //  4813
//			BOOL found;                                   //  4814
//			class mapcycle_item_s *item;                 //  4815
//		}
//		DestroyMapCycle(mapcycle_t *cycle);  //  4802
//	}
}

/* <116002> ../cstrike/dlls/multiplay_gamerules.cpp:4535 */
/* linkage=_Z20ExtractCommandStringPcS_ */
void ExtractCommandString(char *s, char *szCommand)
{
//	{
//		char pkey;                                            //  4538
//		char value;                                           //  4539
//		char *o;                                             //  4541
//	}
}

/* <115f76> ../cstrike/dlls/multiplay_gamerules.cpp:4510 */
int CountPlayers(void)
{
//	{
//		int num;                                              //  4512
//		{
//			int i;                                        //  4514
//			{
//				class CBaseEntity *pEnt;             //  4516
//			}
//		}
//	}
}

/* <115e11> ../cstrike/dlls/multiplay_gamerules.cpp:4384 */
/* linkage=_Z18ReloadMapCycleFilePcP10mapcycle_s */
int ReloadMapCycleFile(char *filename, mapcycle_t *cycle)
{
//	{
//		char szBuffer;                                        //  4386
//		char szMap;                                           //  4387
//		int length;                                           //  4388
//		char *pFileList;                                     //  4389
//		char *aFileList;                                     //  4390
//		int hasbuffer;                                        //  4391
//		class mapcycle_item_s *item;                         //  4392
//		class mapcycle_item_s *newlist;                      //  4392
//		class mapcycle_item_s *next;                         //  4392
//		MP_COM_TokenWaiting(char *buffer);  //  4410
//		{
//			char *s;                                     //  4424
//			atoi(const char *__nptr);  //  4440
//			atoi(const char *__nptr);  //  4447
//		}
//	}
}

/* <115db1> ../cstrike/dlls/multiplay_gamerules.cpp:4360 */
int MP_COM_TokenWaiting(char *buffer)
{
//	{
//		char *p;                                             //  4362
//	}
}

/* <115d4d> ../cstrike/dlls/multiplay_gamerules.cpp:4283 */
/* linkage=_Z12MP_COM_ParsePc */
char *MP_COM_Parse(char *data)
{
//	
//skipwhite:                                                            //  4295
//	{
//		int c;                                                //  4285
//		int len;                                              //  4286
//	}
}

/* <115d30> ../cstrike/dlls/multiplay_gamerules.cpp:4271 */
/* linkage=_Z15MP_COM_GetTokenv */
char *MP_COM_GetToken(void)
{
}

/* <115c98> ../cstrike/dlls/multiplay_gamerules.cpp:4241 */
void DestroyMapCycle(mapcycle_t *cycle)
{
//	{
//		mapcycle_item_t *p;                                  //  4243
//		mapcycle_item_t *n;                                  //  4243
//		mapcycle_item_t *start;                              //  4243
//	}
}

/* <115458> ../cstrike/dlls/multiplay_gamerules.cpp:2435 */
void CHalfLifeMultiplay::Think(void)
{
//	{
//		int time_remaining;                                   //  2437
//		float fTimeLimit;                                     //  2495
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2456
//		{
//			int time;                                     //  2472
//			IsCareer(CHalfLifeMultiplay *const this);  //  2481
//		}
//		IsCareer(CHalfLifeMultiplay *const this);  //  2504
//		IsBotSpeaking(void);  //  2511
//		TimeRemaining(CHalfLifeMultiplay *const this);  //  2594
//		{
//			char CT_sentence;                             //  2602
//			char T_sentence;                              //  2603
//			bool bCTPlayed;                               //  2649
//			bool bTPlayed;                                //  2650
//			{
//				int i;                                //  2652
//				{
//					class CBasePlayer *plr;      //  2654
//				}
//			}
//		}
//		{
//			class CGrenade *C4;                          //  2691
//			float flEndRoundTime;                         //  2692
//			Broadcast(const char *sentence);  //  2710
//			TerminateRound(float tmDelay,
//					int iWinStatus);  //  2715
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  2716
//			Broadcast(const char *sentence);  //  2721
//			TerminateRound(float tmDelay,
//					int iWinStatus);  //  2726
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  2727
//			TerminateRound(float tmDelay,
//					int iWinStatus);  //  2747
//			Broadcast(const char *sentence);  //  2732
//			TerminateRound(float tmDelay,
//					int iWinStatus);  //  2736
//			UpdateTeamScores(CHalfLifeMultiplay *const this);  //  2737
//		}
//		IsCareer(CHalfLifeMultiplay *const this);  //  2758
//		{
//			bool isBotSpeaking;                           //  2760
//			{
//				bool canCTsWin;                       //  2771
//				bool canTsWin;                        //  2773
//			}
//			{
//				int i;                                //  2801
//				{
//					class CBasePlayer *pPlayer;  //  2803
//					MESSAGE_BEGIN(int msg_dest,
//							int msg_type,
//							const float *pOrigin,
//							entvars_t *ent);  //  2807
//				}
//			}
//			IsBotSpeaking(void);  //  2763
//		}
//		{
//			class CBaseEntity *ent;                      //  2840
//		}
//		{
//			int iRestartDelay;                            //  2860
//			{
//				class CHalfLifeMultiplay *mp;        //  2872
//			}
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2587
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2520
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2527
//	}
}

/* <11541f> ../cstrike/dlls/multiplay_gamerules.cpp:981 */
inline void TerminateRound(float tmDelay, int iWinStatus)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   983
//	}
}

/* <1153e2> ../cstrike/dlls/multiplay_gamerules.cpp:92 */
bool IsBotSpeaking(void)
{
//	{
//		int i;                                                //    94
//		{
//			class CBasePlayer *pPlayer;                  //    96
//			{
//				class CCSBot *pBot;                  //    99
//			}
//		}
//	}
}

/* <11538f> ../cstrike/dlls/multiplay_gamerules.cpp:139 */
/* linkage=_Z19SV_Career_Restart_fv */
void SV_Career_Restart_f(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   141
//		IsCareer(CHalfLifeMultiplay *const this);  //   142
//	}
}

/* <1152e2> ../cstrike/dlls/multiplay_gamerules.cpp:2987 */
void CHalfLifeMultiplay::CareerRestart(void)
{
//	{
//		int i;                                                //  3004
//		{
//			class CBasePlayer *player;                   //  3006
//			FNullEnt(entvars_t *pev);  //  3008
//		}
//	}
}

/* <115229> ../cstrike/dlls/multiplay_gamerules.cpp:2971 */
void CHalfLifeMultiplay::MarkLivingPlayersOnTeamAsNotReceivingMoneyNextRound(int iTeam)
{
//	{
//		int i;                                                //  2973
//		{
//			class CBasePlayer *player;                   //  2975
//			FNullEnt(entvars_t *pev);  //  2977
//		}
//	}
}

/* <1151f4> ../cstrike/dlls/multiplay_gamerules.cpp:2945 */
void CHalfLifeMultiplay::IsBombPlanted(void)
{
//	{
//		class CGrenade *bomb;                                //  2950
//	}
}

/* <115189> ../cstrike/dlls/multiplay_gamerules.cpp:2922 */
void CHalfLifeMultiplay::HasRoundTimeExpired(void)
{
//	TimeRemaining(CHalfLifeMultiplay *const this);  //  2925
//	IsBombPlanted(CHalfLifeMultiplay *const this);  //  2929
}

/* <115160> ../cstrike/dlls/multiplay_gamerules.cpp:2945 */
void CHalfLifeMultiplay::IsBombPlanted(void)
{
//	{
//		class CGrenade *bomb;                                //  2950
//	}
}

/* <114f80> ../cstrike/dlls/multiplay_gamerules.cpp:2290 */
void CHalfLifeMultiplay::ResetCurrentVIP(void)
{
//	{
//		char *infobuffer;                                    //  2292
//		int numSkins;                                         //  2294
//		edict(CBaseEntity *const this);  //  2292
//		entindex(CBaseEntity *const this);  //  2327
//		entindex(CBaseEntity *const this);  //  2316
//		entindex(CBaseEntity *const this);  //  2308
//		entindex(CBaseEntity *const this);  //  2312
//		entindex(CBaseEntity *const this);  //  2322
//	}
}

/* <114eea> ../cstrike/dlls/multiplay_gamerules.cpp:2257 */
void CHalfLifeMultiplay::AddToVIPQueue(CBasePlayer *toAdd)
{
//	{
//		int i;                                                //  2265
//	}
//	{
//		int j;                                                //  2274
//		StackVIPQueue(CHalfLifeMultiplay *const this);  //  2279
//	}
}

/* <114e63> ../cstrike/dlls/multiplay_gamerules.cpp:2232 */
void CHalfLifeMultiplay::IsVIPQueueEmpty(void)
{
//	{
//		class CBasePlayer *toCheck;                          //  2234
//		{
//			int i;                                        //  2238
//		}
//		StackVIPQueue(CHalfLifeMultiplay *const this);  //  2249
//	}
}

/* <114e2b> ../cstrike/dlls/multiplay_gamerules.cpp:2214 */
void CHalfLifeMultiplay::StackVIPQueue(void)
{
//	{
//		int i;                                                //  2216
//	}
}

/* <114e04> ../cstrike/dlls/multiplay_gamerules.cpp:2214 */
void CHalfLifeMultiplay::StackVIPQueue(void)
{
//	{
//		int i;                                                //  2216
//	}
}

/* <114dbb> ../cstrike/dlls/multiplay_gamerules.cpp:2144 */
void CHalfLifeMultiplay::TeamStacked(int newTeam_id, int curTeam_id)
{
}

/* <114d83> ../cstrike/dlls/multiplay_gamerules.cpp:2129 */
void CHalfLifeMultiplay::TeamFull(int team_id)
{
}

/* <114d20> ../cstrike/dlls/multiplay_gamerules.cpp:2097 */
void CHalfLifeMultiplay::IsThereABomb(void)
{
//	{
//		class CGrenade *pC4;                                 //  2099
//		class CBaseEntity *pWeaponC4;                        //  2100
//		BOOL bFoundBomb;                                      //  2101
//	}
}

/* <114ca3> ../cstrike/dlls/multiplay_gamerules.cpp:2073 */
void CHalfLifeMultiplay::IsThereABomber(void)
{
//	{
//		class CBasePlayer *pPlayer;                          //  2075
//		edict(CBaseEntity *const this);  //  2079
//		FNullEnt(const edict_t *pent);  //  2079
//	}
}

/* <114c7a> ../cstrike/dlls/multiplay_gamerules.cpp:2073 */
void CHalfLifeMultiplay::IsThereABomber(void)
{
//	{
//		class CBasePlayer *pPlayer;                          //  2075
//	}
}

/* <114a6a> ../cstrike/dlls/multiplay_gamerules.cpp:995 */
void CHalfLifeMultiplay::QueueCareerRoundEndMenu(float tmDelay, int iWinStatus)
{
//	{
//		bool humansAreCTs;                                    //  1000
//		{
//			class CBaseEntity *hostage;                  //  1005
//			int numHostagesInMap;                         //  1006
//			int numHostagesFollowingHumans;               //  1007
//			int numHostagesAlive;                         //  1008
//			{
//				class CHostage *pHostage;            //  1014
//				{
//					class CBasePlayer *pLeader;  //  1017
//					GetLeader(CHostage *const this);  //  1017
//					IsFollowingSomeone(CHostage *const this);  //  1018
//				}
//			}
//		}
//		{
//			bool canCTsWin;                               //  1060
//			bool canTsWin;                                //  1062
//		}
//	}
}

/* <1149e8> ../cstrike/dlls/multiplay_gamerules.cpp:733 */
void CHalfLifeMultiplay::UpdateTeamScores(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   735
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   740
}

/* <1149cf> ../cstrike/dlls/multiplay_gamerules.cpp:733 */
void CHalfLifeMultiplay::UpdateTeamScores(void)
{
}

/* <11492c> ../cstrike/dlls/multiplay_gamerules.cpp:479 */
void CHalfLifeMultiplay::CHalfLifeMultiplay(void)
{
//	{
//		float flAutoKickIdle;                                 //   570
//		bool installedCommands;                               //   633
//		RefreshSkillData(CHalfLifeMultiplay *const this);  //   483
//		{
//			int j;                                        //   541
//		}
//		{
//			char *lservercfgfile;                        //   612
//			{
//				char szCommand;                       //   616
//			}
//		}
//		{
//		}
//	}
}

/* <114891> ../cstrike/dlls/multiplay_gamerules.cpp:479 */
void CHalfLifeMultiplay::CHalfLifeMultiplay(void)
{
//	{
//		float flAutoKickIdle;                                 //   570
//		bool installedCommands;                               //   633
//		{
//			int j;                                        //   541
//		}
//		{
//			char *lservercfgfile;                        //   612
//			{
//				char szCommand;                       //   616
//			}
//		}
//		{
//		}
//	}
}

/* <114805> ../cstrike/dlls/multiplay_gamerules.cpp:364 */
/* linkage=_Z15EndRoundMessagePKci */
void EndRoundMessage(const char *sentence, int event)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   366
//		char *team;                                          //   368
//		const char *message;                                //   369
//		int teamTriggered;                                    //   370
//	}
}

/* <11474f> ../cstrike/dlls/multiplay_gamerules.cpp:331 */
void Broadcast(const char *sentence)
{
//	{
//		char text;                                            //   333
//	}
}

/* <114673> ../cstrike/dlls/multiplay_gamerules.cpp:288 */
void info_map_parameters(entvars_t *pev)
{
//	GetClassPtr<CMapInfo>(CMapInfo *a);  //   288
}

/* <114650> ../cstrike/dlls/multiplay_gamerules.cpp:238 */
void CHalfLifeMultiplay::IsCareer(void)
{
}

/* <114600> ../cstrike/dlls/multiplay_gamerules.cpp:227 */
void CHalfLifeMultiplay::SetCareerMatchLimit(int minWins, int winDifference)
{
//	IsCareer(CHalfLifeMultiplay *const this);  //   229
}

/* <1145dd> ../cstrike/dlls/multiplay_gamerules.cpp:173 */
void CHalfLifeMultiplay::IsInCareerRound(void)
{
}

/* <114155> ../cstrike/dlls/multiplay_gamerules.cpp:4156 */
void CHalfLifeMultiplay::GoToIntermission(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  4161
//		int time;                                             //  4200
//	}
//	GoToIntermission(CHalfLifeMultiplay *const this);  //  4156
}

/* <1140bc> ../cstrike/dlls/multiplay_gamerules.cpp:295 */
void CCStrikeGameMgrHelper::CanPlayerHearPlayer(CBasePlayer *pListener, CBasePlayer *pSender)
{
//	CanPlayerHearPlayer(CCStrikeGameMgrHelper *const this,
//				class CBasePlayer *pListener,
//				class CBasePlayer *pSender);  //   295
}

/* <114058> ../cstrike/dlls/multiplay_gamerules.cpp:3938 */
void CHalfLifeMultiplay::FlWeaponTryRespawn(CBasePlayerItem *pWeapon)
{
//	iFlags(CBasePlayerItem *const this);  //  3940
//	FlWeaponTryRespawn(CHalfLifeMultiplay *const this,
//				class CBasePlayerItem *pWeapon);  //  3938
}

/* <113fcf> ../cstrike/dlls/multiplay_gamerules.cpp:3038 */
void CHalfLifeMultiplay::FShouldSwitchWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
//	FShouldSwitchWeapon(CHalfLifeMultiplay *const this,
//				class CBasePlayer *pPlayer,
//				class CBasePlayerItem *pWeapon);  //  3038
}

/* <113eec> ../cstrike/dlls/multiplay_gamerules.cpp:3071 */
void CHalfLifeMultiplay::GetNextBestWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pCurrentWeapon)
{
//	{
//		class CBasePlayerItem *pCheck;                       //  3074
//		class CBasePlayerItem *pBest;                        //  3075
//		int iBestWeight;                                      //  3076
//		int i;                                                //  3077
//	}
//	GetNextBestWeapon(CHalfLifeMultiplay *const this,
//				class CBasePlayer *pPlayer,
//				class CBasePlayerItem *pCurrentWeapon);  //  3071
}

/* <113e08> ../cstrike/dlls/multiplay_gamerules.cpp:263 */
void CMapInfo::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   265
//	FStrEq(const char *sz1,
//		const char *sz2);  //   270
//	atoi(const char *__nptr);  //   272
//	KeyValue(CMapInfo *const this,
//		KeyValueData *pkvd);  //   263
}

/* <113d74> ../cstrike/dlls/multiplay_gamerules.cpp:3553 */
void CHalfLifeMultiplay::FPlayerCanRespawn(CBasePlayer *pPlayer)
{
//	FPlayerCanRespawn(CHalfLifeMultiplay *const this,
//				class CBasePlayer *pPlayer);  //  3553
}

/* <113bcf> ../cstrike/dlls/multiplay_gamerules.cpp:3523 */
void CHalfLifeMultiplay::PlayerSpawn(CBasePlayer *pPlayer)
{
//	{
//		BOOL addDefault;                                      //  3525
//		class CBaseEntity *pWeaponEntity;                    //  3526
//	}
//	PlayerSpawn(CHalfLifeMultiplay *const this,
//			class CBasePlayer *pPlayer);  //  3523
}

/* <113bab> ../cstrike/dlls/multiplay_gamerules.cpp:678 */
void CHalfLifeMultiplay::RefreshSkillData(void)
{
}

/* <113b92> ../cstrike/dlls/multiplay_gamerules.cpp:678 */
void CHalfLifeMultiplay::RefreshSkillData(void)
{
}

/* <113b51> ../cstrike/dlls/multiplay_gamerules.cpp:713 */
void CHalfLifeMultiplay::RemoveGuns(void)
{
//	{
//		class CBaseEntity *toremove;                         //   715
//	}
}

/* <113aee> ../cstrike/dlls/multiplay_gamerules.cpp:747 */
void CHalfLifeMultiplay::CleanUpMap(void)
{
//	{
//		class CBaseEntity *torestart;                        //   749
//		class CBaseEntity *toremove;                         //   750
//		int icount;                                           //   837
//	}
}

/* <113aa5> ../cstrike/dlls/multiplay_gamerules.cpp:3132 */
void CHalfLifeMultiplay::ClientCommand_DeadOrAlive(CBasePlayer *pPlayer, const char *pcmd)
{
}

/* <113a3c> ../cstrike/dlls/multiplay_gamerules.cpp:3145 */
void CHalfLifeMultiplay::ClientConnected(edict_t *pEntity, const char *pszName, const char *pszAddress, char *szRejectReason)
{
}

/* <1137c1> ../cstrike/dlls/multiplay_gamerules.cpp:3318 */
void CHalfLifeMultiplay::ClientDisconnected(edict_t *pClient)
{
//	{
//		class CBasePlayer *pPlayer;                          //  3322
//		Instance(edict_t *pent);  //  3322
//		{
//			char *team;                                  //  3389
//			class CBasePlayer *client;                   //  3403
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3365
//			ENTINDEX(edict_t *pEdict);  //  3366
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3373
//			ENTINDEX(edict_t *pEdict);  //  3374
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  3378
//			ENTINDEX(edict_t *pEdict);  //  3379
//			GetTeam(int teamNo);  //  3389
//			edict(CBaseEntity *const this);  //  3395
//			edict(CBaseEntity *const this);  //  3395
//			edict(CBaseEntity *const this);  //  3404
//			FNullEnt(const edict_t *pent);  //  3404
//			{
//				int iMode;                            //  3415
//			}
//		}
//	}
}

/* <11370c> ../cstrike/dlls/multiplay_gamerules.cpp:3454 */
void CHalfLifeMultiplay::PlayerThink(CBasePlayer *pPlayer)
{
//	{
//		class CBasePlayerWeapon *pWeapon;                    //  3476
//	}
//	{
//		int team;                                             //  3484
//		IsCareer(CHalfLifeMultiplay *const this);  //  3513
//	}
//	IsCareer(CHalfLifeMultiplay *const this);  //  3459
}

/* <113273> ../cstrike/dlls/multiplay_gamerules.cpp:3772 */
void CHalfLifeMultiplay::DeathNotice(CBasePlayer *pVictim, entvars_t *pKiller, entvars_t *pevInflictor)
{
//	{
//		class CBaseEntity *Killer;                           //  3775
//		const char *killer_weapon_name;                     //  3777
//		int killer_index;                                     //  3778
//		char *tau;                                           //  3781
//		char *gluon;                                         //  3782
//		int iGotHeadshot;                                     //  3819
//		Instance(entvars_t *pev);  //  3775
//		ENTINDEX(edict_t *pEdict);  //  3786
//		{
//			class CBasePlayer *pPlayer;                  //  3793
//			Instance(entvars_t *pev);  //  3793
//			pszName(CBasePlayerItem *const this);  //  3797
//		}
//		{
//			class CBasePlayer *pPlayer;                  //  3856
//			char *VictimTeam;                            //  3858
//			char *KillerTeam;                            //  3859
//			Instance(entvars_t *pev);  //  3856
//			GetTeam(int teamNo);  //  3858
//			edict(CBaseEntity *const this);  //  3872
//		}
//		{
//			char *team;                                  //  3877
//			GetTeam(int teamNo);  //  3877
//			edict(CBaseEntity *const this);  //  3884
//		}
//		{
//			char *team;                                  //  3845
//			GetTeam(int teamNo);  //  3845
//			edict(CBaseEntity *const this);  //  3852
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3890
//		edict(CBaseEntity *const this);  //  3893
//		ENTINDEX(edict_t *pEdict);  //  3893
//		ENTINDEX(edict_t *pEdict);  //  3895
//		ENTINDEX(edict_t *pEdict);  //  3897
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  3829
//		edict(CBaseEntity *const this);  //  3831
//		ENTINDEX(edict_t *pEdict);  //  3831
//	}
}

/* <11322b> ../cstrike/dlls/multiplay_gamerules.cpp:3979 */
void CHalfLifeMultiplay::CanHavePlayerItem(CBasePlayer *pPlayer, class CBasePlayerItem *pItem)
{
}

/* <1131d6> ../cstrike/dlls/multiplay_gamerules.cpp:4096 */
void CHalfLifeMultiplay::GetPlayerSpawnSpot(CBasePlayer *pPlayer)
{
//	{
//		edict_t *pentSpawnSpot;                              //  4098
//	}
}

/* <113181> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <113158> ../cstrike/dlls/multiplay_gamerules.cpp:1608 */
void CHalfLifeMultiplay::CheckMapConditions(void)
{
}

/* <1130d2> ../game_shared/voice_gamemgr.h:26 */
void IVoiceGameMgrHelper::~IVoiceGameMgrHelper(void)
{
//	~IVoiceGameMgrHelper(IVoiceGameMgrHelper::~IVoiceGameMgrHelper(//				int const __in_chrg);  //    26
}

/* <113079> ../cstrike/dlls/multiplay_gamerules.cpp:292 */
void CCStrikeGameMgrHelper::~CCStrikeGameMgrHelper(void)
{
//	~CCStrikeGameMgrHelper(CCStrikeGameMgrHelper::~CCStrikeGameMgrHelper(//				int const __in_chrg);  //   292
}

/* <113012> ../cstrike/dlls/multiplay_gamerules.cpp:4145 */
void CHalfLifeMultiplay::FAllowMonsters(void)
{
}

/* <112fcf> ../cstrike/dlls/multiplay_gamerules.cpp:4128 */
void CHalfLifeMultiplay::FAllowFlashlight(void)
{
//	{
//		cvar_t *mp_flashlight;                               //  4130
//	}
}

/* <112f97> ../cstrike/dlls/multiplay_gamerules.cpp:4091 */
void CHalfLifeMultiplay::DeadPlayerAmmo(CBasePlayer *pPlayer)
{
}

/* <112f5f> ../cstrike/dlls/multiplay_gamerules.cpp:4084 */
void CHalfLifeMultiplay::DeadPlayerWeapons(CBasePlayer *pPlayer)
{
}

/* <112f37> ../cstrike/dlls/multiplay_gamerules.cpp:4077 */
void CHalfLifeMultiplay::FlHEVChargerRechargeTime(void)
{
}

/* <112f0f> ../cstrike/dlls/multiplay_gamerules.cpp:4071 */
void CHalfLifeMultiplay::FlHealthChargerRechargeTime(void)
{
}

/* <112eac> ../cstrike/dlls/multiplay_gamerules.cpp:4064 */
void CHalfLifeMultiplay::VecAmmoRespawnSpot(CBasePlayerAmmo *pAmmo)
{
//	Vector(Vector *const this,
//		const Vector &v);  //  4066
}

/* <112e74> ../cstrike/dlls/multiplay_gamerules.cpp:4057 */
void CHalfLifeMultiplay::FlAmmoRespawnTime(CBasePlayerAmmo *pAmmo)
{
}

/* <112e3c> ../cstrike/dlls/multiplay_gamerules.cpp:4045 */
void CHalfLifeMultiplay::AmmoShouldRespawn(CBasePlayerAmmo *pAmmo)
{
}

/* <112e04> ../cstrike/dlls/multiplay_gamerules.cpp:4035 */
void CHalfLifeMultiplay::IsAllowedToSpawn(CBaseEntity *pEntity)
{
}

/* <112dac> ../cstrike/dlls/multiplay_gamerules.cpp:4029 */
void CHalfLifeMultiplay::PlayerGotAmmo(CBasePlayer *pPlayer, char *szName, int iCount)
{
}

/* <112d49> ../cstrike/dlls/multiplay_gamerules.cpp:4022 */
void CHalfLifeMultiplay::VecItemRespawnSpot(CItem *pItem)
{
//	Vector(Vector *const this,
//		const Vector &v);  //  4024
}

/* <112d11> ../cstrike/dlls/multiplay_gamerules.cpp:4013 */
void CHalfLifeMultiplay::FlItemRespawnTime(CItem *pItem)
{
}

/* <112cd9> ../cstrike/dlls/multiplay_gamerules.cpp:3999 */
void CHalfLifeMultiplay::ItemShouldRespawn(CItem *pItem)
{
}

/* <112c91> ../cstrike/dlls/multiplay_gamerules.cpp:3993 */
void CHalfLifeMultiplay::PlayerGotItem(CBasePlayer *pPlayer, class CItem *pItem)
{
}

/* <112c49> ../cstrike/dlls/multiplay_gamerules.cpp:3986 */
void CHalfLifeMultiplay::CanHaveItem(CBasePlayer *pPlayer, class CItem *pItem)
{
}

/* <112c11> ../cstrike/dlls/multiplay_gamerules.cpp:3965 */
void CHalfLifeMultiplay::WeaponShouldRespawn(CBasePlayerItem *pWeapon)
{
}

/* <112bae> ../cstrike/dlls/multiplay_gamerules.cpp:3956 */
void CHalfLifeMultiplay::VecWeaponRespawnSpot(CBasePlayerItem *pWeapon)
{
//	Vector(Vector *const this,
//		const Vector &v);  //  3958
}

/* <112b76> ../cstrike/dlls/multiplay_gamerules.cpp:3924 */
void CHalfLifeMultiplay::FlWeaponRespawnTime(CBasePlayerItem *pWeapon)
{
}

/* <112b2e> ../cstrike/dlls/multiplay_gamerules.cpp:3916 */
void CHalfLifeMultiplay::PlayerGotWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
}

/* <112ae6> ../cstrike/dlls/multiplay_gamerules.cpp:3619 */
void CHalfLifeMultiplay::IPointsForKill(CBasePlayer *pAttacker, CBasePlayer *pKilled)
{
}

/* <112abe> ../cstrike/dlls/multiplay_gamerules.cpp:3596 */
void CHalfLifeMultiplay::AllowAutoTargetCrosshair(void)
{
}

/* <112a86> ../cstrike/dlls/multiplay_gamerules.cpp:3591 */
void CHalfLifeMultiplay::FlPlayerSpawnTime(CBasePlayer *pPlayer)
{
}

/* <112a3d> ../cstrike/dlls/multiplay_gamerules.cpp:3436 */
void CHalfLifeMultiplay::FPlayerCanTakeDamage(CBasePlayer *pPlayer, CBaseEntity *pAttacker)
{
}

/* <112a05> ../cstrike/dlls/multiplay_gamerules.cpp:3428 */
void CHalfLifeMultiplay::FlPlayerFallDamage(CBasePlayer *pPlayer)
{
}

/* <11298b> ../cstrike/dlls/multiplay_gamerules.cpp:3156 */
void CHalfLifeMultiplay::UpdateGameMode(CBasePlayer *pPlayer)
{
//	edict(CBaseEntity *const this);  //  3158
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  3158
}

/* <11291b> ../cstrike/dlls/multiplay_gamerules.cpp:3031 */
void CHalfLifeMultiplay::IsCoOp(void)
{
}

/* <1128f3> ../cstrike/dlls/multiplay_gamerules.cpp:3024 */
void CHalfLifeMultiplay::IsDeathmatch(void)
{
}

/* <1128cb> ../cstrike/dlls/multiplay_gamerules.cpp:3017 */
void CHalfLifeMultiplay::IsMultiplayer(void)
{
}

/* <1128a1> ../cstrike/dlls/multiplay_gamerules.cpp:419 */
void ReadMultiplayCvars(CHalfLifeMultiplay *mp)
{
}

/* <112879> ../cstrike/dlls/multiplay_gamerules.cpp:280 */
void CMapInfo::Spawn(void)
{
}

/* <112860> ../cstrike/dlls/multiplay_gamerules.cpp:133 */
/* linkage=_Z17SV_Tutor_Toggle_fv */
void SV_Tutor_Toggle_f(void)
{
}

/* <112838> ../cstrike/dlls/gamerules.h:395 */
void CHalfLifeMultiplay::EndMultiplayerGame(void)
{
}

/* <112810> ../cstrike/dlls/gamerules.h:389 */
void CHalfLifeMultiplay::PlayTextureSounds(void)
{
}

/* <1127d8> ../cstrike/dlls/gamerules.h:386 */
void CHalfLifeMultiplay::GetTeamID(CBaseEntity *pEntity)
{
}

/* <1127b0> ../cstrike/dlls/gamerules.h:187 */
void CGameRules::IsFreezePeriod(void)
{
}

/* <112779> ../cstrike/dlls/gamerules.h:177 */
void CGameRules::SetDefaultPlayerTeam(CBasePlayer *pPlayer)
{
}

/* <112715> ../cstrike/dlls/gamerules.h:176 */
void CGameRules::ChangePlayerTeam(CBasePlayer *pPlayer, const char *pTeamName, BOOL bKill, BOOL bGib)
{
}

/* <1126de> ../cstrike/dlls/gamerules.h:175 */
void CGameRules::IsValidTeam(const char *pTeamName)
{
}

/* <1126a7> ../cstrike/dlls/gamerules.h:174 */
void CGameRules::GetIndexedTeamName(int teamIndex)
{
}

/* <112670> ../cstrike/dlls/gamerules.h:173 */
void CGameRules::GetTeamIndex(const char *pTeamName)
{
}

/* <11262a> ../cstrike/dlls/gamerules.h:113 */
void CGameRules::ShouldAutoAim(CBasePlayer *pPlayer, edict_t *target)
{
}

/* <1125da> ../cstrike/dlls/gamerules.h:100 */
void CGameRules::IsTeamplay(void)
{
}

/* <1125b7> ../game_shared/voice_gamemgr.h:26 */
void IVoiceGameMgrHelper::~IVoiceGameMgrHelper(void)
{
}

/* <112594> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <11256c> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <11252e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <112331> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <112309> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1122e1> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1122a9> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <112244> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <11220c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1121e4> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <1121bc> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <112194> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <11216c> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <112143> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <11211b> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <1120f3> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1120cb> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <112094> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <11206c> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <112044> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <11200d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <111fe5> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <111f47> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <111ef2> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <111ebb> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <111e84> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <111e3e> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <111df8> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <111dd0> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <111da8> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <111d74> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <111d3d> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <111d15> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <111cde> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <111cb6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <111c8e> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <111c66> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <111c3e> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <111c19> ../cstrike/dlls/hostage/hostage_improv.h:163 */
inline void CHostageImprov::IsFollowing(const class CBaseEntity *leader)
{
}

/* <111be7> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <111bd2> ../cstrike/dlls/bot/cs_bot_manager.h:266 */
inline class CCSBotManager *TheCSBots(void)
{
}

/* <111b73> ../cstrike/dlls/multiplay_gamerules.cpp:4110 */
void CHalfLifeMultiplay::PlayerRelationship(CBasePlayer *pPlayer, CBaseEntity *pTarget)
{
//	{
//		class CBasePlayer *player;                           //  4118
//		class CBasePlayer *target;                           //  4119
//	}
}

/* <111b57> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <111b37> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <111b16> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <111af5> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <111aa0> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <111a6a> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <111a4c> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <111a2b> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <1119e6> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <1119a1> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <111947> ../cstrike/dlls/cbase.h:800 */
CMapInfo *GetClassPtr<CMapInfo>(CMapInfo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <11192b> ../cstrike/dlls/multiplay_gamerules.cpp:257 */
inline void CMapInfo::CMapInfo(void)
{
}

/* <1118cc> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <1118b0> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <111858> ../cstrike/dlls/hostage/hostage.h:86 */
inline void CHostage::GetLeader(void)
{
}

/* <11183a> ../cstrike/dlls/hostage/hostage_improv.h:202 */
inline void CHostageImprov::GetFollowLeader(void)
{
}

/* <111816> ../cstrike/dlls/hostage/hostage.h:72 */
inline void CHostage::IsFollowingSomeone(void)
{
}

/* <1117f8> ../cstrike/dlls/hostage/hostage_states.h:162 */
inline void HostageFollowState::GetLeader(void)
{
}

/* <1117c3> ../game_shared/bot/simple_state_machine.h:68 */
inline void SimpleStateMachine<CHostageImprov*, HostageState>::IsState(const class HostageState *state)
{
}

/* <1117a7> ../cstrike/dlls/gamerules.h:86 */
inline void CGameRules::CGameRules(void)
{
}

/* <111767> ../cstrike/dlls/multiplay_gamerules.cpp:348 */
char *GetTeam(int teamNo)
{
}

/* <11174e> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <111732> ../cstrike/dlls/multiplay_gamerules.cpp:292 */
inline void CCStrikeGameMgrHelper::CCStrikeGameMgrHelper(void)
{
}

/* <111716> ../game_shared/voice_gamemgr.h:23 */
inline void IVoiceGameMgrHelper::IVoiceGameMgrHelper(void)
{
}

/* <1116dd> ../cstrike/dlls/multiplay_gamerules.cpp:111 */
void SV_Continue_f(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   113
//		{
//			int i;                                        //   121
//			{
//				class CBasePlayer *pPlayer;          //   123
//			}
//		}
//	}
}

/* <111695> ../cstrike/dlls/multiplay_gamerules.cpp:149 */
void SV_Career_EndRound_f(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   151
//		{
//			class CBasePlayer *localPlayer;              //   154
//			{
//				int i;                                //   160
//				{
//					class CBasePlayer *player;   //   162
//				}
//			}
//		}
//	}
}

/* <11165d> ../cstrike/dlls/multiplay_gamerules.cpp:173 */
void CHalfLifeMultiplay::IsInCareerRound(void)
{
}

/* <111640> ../cstrike/dlls/multiplay_gamerules.cpp:213 */
void SV_CareerMatchLimit_f(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   219
//	}
}

/* <11160f> ../cstrike/dlls/multiplay_gamerules.cpp:227 */
void CHalfLifeMultiplay::SetCareerMatchLimit(int minWins, int winDifference)
{
}

/* <1115bb> ../cstrike/dlls/multiplay_gamerules.cpp:4156 */
void CHalfLifeMultiplay::GoToIntermission(void)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  4161
//		int time;                                             //  4200
//	}
}

/* <1115a2> ../cstrike/dlls/multiplay_gamerules.cpp:238 */
void CHalfLifeMultiplay::IsCareer(void)
{
}

/* <111584> ../cstrike/dlls/hostage/hostage.h:118 */
inline void CHostage::IsValid(void)
{
}

/* <111566> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <111541> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <111517> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <1114ef> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <1114c4> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <111493> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <111418> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <1113be> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <111364> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <111323> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <1112f8> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <11129e> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <111256> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <111238> ../cstrike/dlls/bot/cs_bot.h:508 */
inline void CCSBot::IsUsingVoice(void)
{
}

/* <11120f> ../cstrike/dlls/bot/cs_bot_manager.h:159 */
inline void CCSBotManager::IsBombPlanted(void)
{
}

/* <1111dc> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <1111b4> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <11119b> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <11117d> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <11115f> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <111146> ../cstrike/dlls/gamerules.h:411 */
inline void CHalfLifeMultiplay::TimeRemaining(void)
{
}

/* <1110df> ../cstrike/dlls/gamerules.h:123 */
inline void CGameRules::ClientCommand_DeadOrAlive(CBasePlayer *pPlayer, const char *pcmd)
{
}

/* <111089> ../cstrike/dlls/multiplay_gamerules.cpp:295 */
inline void CCStrikeGameMgrHelper::CanPlayerHearPlayer(CBasePlayer *pListener, CBasePlayer *pSender)
{
//	{
//		BOOL bListenerAlive;                                  //   304
//		BOOL bSenderAlive;                                    //   305
//	}
}

/* <11106b> ../cstrike/dlls/player.h:272 */
inline void CBasePlayer::IsObserver(void)
{
}

/* <111045> ../cstrike/dlls/multiplay_gamerules.cpp:3938 */
void CHalfLifeMultiplay::FlWeaponTryRespawn(CBasePlayerItem *pWeapon)
{
}

/* <11102c> ../cstrike/dlls/weapons.h:299 */
inline void CBasePlayerItem::iFlags(void)
{
}

/* <110ff9> ../cstrike/dlls/multiplay_gamerules.cpp:3038 */
void CHalfLifeMultiplay::FShouldSwitchWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
}

/* <110f91> ../cstrike/dlls/multiplay_gamerules.cpp:3071 */
void CHalfLifeMultiplay::GetNextBestWeapon(CBasePlayer *pPlayer, class CBasePlayerItem *pCurrentWeapon)
{
//	{
//		class CBasePlayerItem *pCheck;                       //  3074
//		class CBasePlayerItem *pBest;                        //  3075
//		int iBestWeight;                                      //  3076
//		int i;                                                //  3077
//	}
}

/* <110f78> ../cstrike/dlls/weapons.h:298 */
inline void CBasePlayerItem::iWeight(void)
{
}

/* <110f5a> ../cstrike/dlls/weapons.h:296 */
inline void CBasePlayerItem::pszName(void)
{
}

/* <110f3c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <110ec0> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <110e97> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <110e35> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <110e0a> ../cstrike/dlls/multiplay_gamerules.cpp:263 */
inline void CMapInfo::KeyValue( KeyValueData *pkvd)
{
}

/* <110d3f> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <110cf3> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <110ccb> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <110c9e> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <110c76> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <110c50> ../cstrike/dlls/multiplay_gamerules.cpp:3553 */
void CHalfLifeMultiplay::FPlayerCanRespawn(CBasePlayer *pPlayer)
{
}

/* <110c19> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <110bfb> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <110ba1> ../cstrike/dlls/multiplay_gamerules.cpp:180 */
void SV_CareerAddTask_f(void)
{
//	{
//		const char *taskName;                               //   187
//		const char *weaponName;                             //   188
//		int reps;                                             //   189
//		bool mustLive;                                        //   190
//		bool crossRounds;                                     //   191
//		bool isComplete;                                      //   192
//	}
}

/* <110b38> ../cstrike/dlls/multiplay_gamerules.cpp:3523 */
void CHalfLifeMultiplay::PlayerSpawn(CBasePlayer *pPlayer)
{
//	{
//		BOOL addDefault;                                      //  3525
//		class CBaseEntity *pWeaponEntity;                    //  3526
//	}
}

/* <110b10> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <110ae5> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <110abd> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <110a92> ../cstrike/dlls/multiplay_gamerules.cpp:292 */
inline void CCStrikeGameMgrHelper::~CCStrikeGameMgrHelper( int const __in_chrg)
{
}

/* <110a6a> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <fc5cd> ../cstrike/dlls/mpstubb.cpp:94 */
void CBaseMonster::FCheckAITrigger(void)
{
}

/* <fc5a6> ../cstrike/dlls/mpstubb.cpp:49 */
void CBaseMonster::CorpseFallThink(void)
{
}

/* <fc571> ../cstrike/dlls/mpstubb.cpp:46 */
void CBaseMonster::MakeIdealYaw(Vector vecTarget)
{
}

/* <fc528> ../cstrike/dlls/mpstubb.cpp:38 */
void CGraph::FindNearestNode(Vector &vecOrigin, int afNodeTypes)
{
}

/* <fc4f2> ../cstrike/dlls/mpstubb.cpp:37 */
void CGraph::ShowNodeConnections(int iNode)
{
}

/* <fc4ca> ../cstrike/dlls/mpstubb.cpp:36 */
void CGraph::FSetGraphPointers(void)
{
}

/* <fc494> ../cstrike/dlls/mpstubb.cpp:35 */
void CGraph::CheckNODFile(char *szMapName)
{
}

/* <fc46c> ../cstrike/dlls/mpstubb.cpp:34 */
void CGraph::AllocNodes(void)
{
}

/* <fc436> ../cstrike/dlls/mpstubb.cpp:33 */
void CGraph::FLoadGraph(char *szMapName)
{
}

/* <fc409> ../cstrike/dlls/mpstubb.cpp:32 */
void CGraph::InitGraph(void)
{
}

/* <fc317> ../cstrike/dlls/mpstubb.cpp:220 */
void CBaseMonster::BestVisibleEnemy(void)
{
//	{
//		class CBaseEntity *pReturn;                          //   222
//		class CBaseEntity *pNextEnt;                         //   223
//		int iNearest;                                         //   224
//		int iDist;                                            //   225
//		int iBestRelationship;                                //   226
//		operator-(const Vector *const this,
//				const Vector &v);  //   243
//		Length(const Vector *const this);  //   243
//		operator-(const Vector *const this,
//				const Vector &v);  //   251
//		Length(const Vector *const this);  //   251
//	}
}

/* <fc2c8> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <fc2a1> ../cstrike/dlls/mpstubb.cpp:62 */
void CBaseMonster::MonsterInitDead(void)
{
}

/* <fc26d> ../cstrike/dlls/mpstubb.cpp:99 */
void CBaseMonster::KeyValue(KeyValueData *pkvd)
{
}

/* <fc0e4> ../cstrike/dlls/mpstubb.cpp:140 */
void CBaseMonster::Look(int iDistance)
{
//	{
//		int iSighted;                                         //   142
//		class CBaseEntity *pSightEnt;                        //   149
//		class CBaseEntity *pList;                            //   151
//		Vector delta;                                   //   153
//		int count;                                            //   156
//		ClearConditions(CBaseMonster *const this,
//				int iConditions);  //   145
//		operator+(const Vector *const this,
//				const Vector &v);  //   156
//		operator-(const Vector *const this,
//				const Vector &v);  //   156
//		{
//			int i;                                        //   157
//		}
//		SetConditions(CBaseMonster *const this,
//				int iConditions);  //   207
//	}
}

/* <fc07d> ../cstrike/dlls/mpstubb.cpp:104 */
void CBaseMonster::IRelationship(CBaseEntity *pTarget)
{
//	{
//		int const iEnemy;                                      //   106
//	}
}

/* <fc057> ../cstrike/dlls/mpstubb.cpp:89 */
void CBaseMonster::ShouldFadeOnDeath(void)
{
}

/* <fc023> ../cstrike/dlls/mpstubb.cpp:45 */
void CBaseMonster::ChangeYaw(int speed)
{
}

/* <fbffd> ../cstrike/dlls/mpstubb.cpp:44 */
void CBaseMonster::ReportAIState(void)
{
}

/* <fbfd7> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <fbfb1> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <fbf8b> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <fbf65> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <fbf3f> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <fbf14> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <fbed4> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <fbe71> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <fbe36> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <fbc5c> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <fbc36> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <fbc10> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <fbbdb> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <fbb7c> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <fbb47> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <fbb21> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <fbafb> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <fbad5> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <fbaaf> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <fba88> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <fba62> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <fba3c> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <fba08> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <fb9e2> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <fb9bc> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <fb988> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <fb962> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <fb8a4> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <fb870> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <fb83c> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <fb7ee> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <fb7ac> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <fb786> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <fb754> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <fb720> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <fb6ec> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <fb6c6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <fb6a0> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <fb67f> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <fb659> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <fb633> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <fb60d> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <fb5f4> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <fb5d0> ../cstrike/dlls/basemonster.h:68 */
inline void CBaseMonster::ClearConditions( int iConditions)
{
}

/* <fb5a7> ../cstrike/dlls/basemonster.h:67 */
inline void CBaseMonster::SetConditions( int iConditions)
{
}

/* <fb589> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <fb535> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <fb4be> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <fb474> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <fb43b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <fb414> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <fb3e8> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <f6fb1> ../cstrike/dlls/mortar.cpp:203 */
void monster_mortar(entvars_t *pev)
{
//	GetClassPtr<CMortar>(CMortar *a);  //   203
}

/* <f6ee7> ../cstrike/dlls/mortar.cpp:56 */
void func_mortar_field(entvars_t *pev)
{
//	GetClassPtr<CFuncMortarField>(CFuncMortarField *a);  //    56
}

/* <f6d87> ../cstrike/dlls/mortar.cpp:71 */
void CFuncMortarField::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    73
//	FStrEq(const char *sz1,
//		const char *sz2);  //    78
//	KeyValue(CFuncMortarField *const this,
//		KeyValueData *pkvd);  //    71
}

/* <f6d3b> ../cstrike/dlls/mortar.cpp:68 */
void CFuncMortarField::Save(CSave &save)
{
//	Save(CFuncMortarField *const this,
//		class CSave &save);  //    68
}

/* <f6cef> ../cstrike/dlls/mortar.cpp:68 */
void CFuncMortarField::Restore(CRestore &restore)
{
//	Restore(CFuncMortarField *const this,
//		class CRestore &restore);  //    68
}

/* <f6ca0> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <f6ae4> ../cstrike/dlls/mortar.cpp:122 */
void CFuncMortarField::FieldUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		Vector vecStart;                                //   124
//		int pitch;                                            //   165
//		float t;                                              //   169
//		{
//			class CBaseEntity *pController;              //   143
//		}
//		{
//			int i;                                        //   170
//			{
//				Vector vecSpot;                 //   172
//				TraceResult tr;                       //   176
//				edict_t *pentOwner;                  //   179
//				class CBaseEntity *pMortar;          //   182
//				Vector(Vector *const this,
//					const Vector &v);  //   172
//				operator+(const Vector *const this,
//						const Vector &v);  //   177
//				edict(CBaseEntity *const this);  //   180
//				Vector(Vector *const this,
//					float X,
//					float Y,
//					float Z);  //   182
//			}
//		}
//	}
}

/* <f69e5> ../cstrike/dlls/mortar.cpp:226 */
void CMortar::MortarExplode(void)
{
//	{
//		TraceResult tr;                                       //   250
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   229
//		operator-(const Vector *const this,
//				const Vector &v);  //   251
//		operator+(const Vector *const this,
//				const Vector &v);  //   251
//	}
}

/* <f69be> ../cstrike/dlls/mortar.cpp:221 */
void CMortar::Precache(void)
{
}

/* <f6998> ../cstrike/dlls/mortar.cpp:205 */
void CMortar::Spawn(void)
{
}

/* <f6971> ../cstrike/dlls/mortar.cpp:113 */
void CFuncMortarField::Precache(void)
{
}

/* <f694a> ../cstrike/dlls/mortar.cpp:102 */
void CFuncMortarField::Spawn(void)
{
}

/* <f6924> ../cstrike/dlls/mortar.cpp:39 */
void CFuncMortarField::ObjectCaps(void)
{
}

/* <f68fe> ../cstrike/dlls/weapons.h:101 */
void CGrenade::ObjectCaps(void)
{
}

/* <f68d8> ../cstrike/dlls/weapons.h:99 */
void CGrenade::BloodColor(void)
{
}

/* <f68b2> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <f688c> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <f6866> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <f6840> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <f681a> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <f67e5> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <f67b9> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <f677e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <f65a4> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <f657e> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <f6558> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <f6523> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <f64c4> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <f648f> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <f6469> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <f6443> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <f641d> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <f63f7> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <f63d0> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <f63aa> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <f6384> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <f635e> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <f632a> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <f6304> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <f62de> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <f62aa> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <f6284> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <f61c6> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <f6192> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <f615e> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <f60fd> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <f60bb> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <f6095> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <f6063> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <f602f> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <f6009> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <f5fd5> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <f5faf> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <f5f89> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <f5f63> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <f5f31> ../cstrike/dlls/cbase.h:800 */
CMortar *GetClassPtr<CMortar>(CMortar *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <f5f11> ../cstrike/dlls/mortar.cpp:192 */
inline void CMortar::CMortar(void)
{
}

/* <f5ef1> ../cstrike/dlls/weapons.h:56 */
inline void CGrenade::CGrenade(void)
{
}

/* <f5ecb> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <f5e05> ../cstrike/dlls/cbase.h:800 */
CFuncMortarField *GetClassPtr<CFuncMortarField>(CFuncMortarField *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <f5dea> ../cstrike/dlls/mortar.cpp:31 */
inline void CFuncMortarField::CFuncMortarField(void)
{
}

/* <f5d6e> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <f5d47> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <f5cd8> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <f5c99> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <f5c7b> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <f5c1e> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <f5be8> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <f5bca> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <f5ba6> ../cstrike/dlls/mortar.cpp:71 */
void CFuncMortarField::KeyValue(KeyValueData *pkvd)
{
}

/* <f5b19> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <f5a6e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <f5a3a> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <f5a13> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <f59e7> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <f59c7> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <f59a9> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <f5980> ../cstrike/dlls/mortar.cpp:68 */
void CFuncMortarField::Save(CSave &save)
{
}

/* <f5952> ../cstrike/dlls/mortar.cpp:68 */
void CFuncMortarField::Restore(CRestore &restore)
{
}

/* <f1337> ../cstrike/dlls/maprules.cpp:884 */
void CGamePlayerTeam::TargetTeamName(const char *pszTargetName)
{
//	{
//		class CBaseEntity *pTeamEntity;                      //   886
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   890
//	}
}

/* <f1268> ../cstrike/dlls/maprules.cpp:881 */
void game_player_team(entvars_t *pev)
{
//	GetClassPtr<CGamePlayerTeam>(CGamePlayerTeam *a);  //   881
}

/* <f1208> ../cstrike/dlls/maprules.cpp:827 */
void CGamePlayerEquip::EquipPlayer(CBaseEntity *pEntity)
{
//	{
//		class CBasePlayer *pPlayer;                          //   829
//		{
//			int i;                                        //   839
//			{
//				int j;                                //   843
//			}
//		}
//	}
}

/* <f1139> ../cstrike/dlls/maprules.cpp:788 */
void game_player_equip(entvars_t *pev)
{
//	GetClassPtr<CGamePlayerEquip>(CGamePlayerEquip *a);  //   788
}

/* <f106a> ../cstrike/dlls/maprules.cpp:747 */
void game_counter_set(entvars_t *pev)
{
//	GetClassPtr<CGameCounterSet>(CGameCounterSet *a);  //   747
}

/* <f0f9b> ../cstrike/dlls/maprules.cpp:684 */
void game_counter(entvars_t *pev)
{
//	GetClassPtr<CGameCounter>(CGameCounter *a);  //   684
}

/* <f0ecc> ../cstrike/dlls/maprules.cpp:628 */
void game_player_hurt(entvars_t *pev)
{
//	GetClassPtr<CGamePlayerHurt>(CGamePlayerHurt *a);  //   628
}

/* <f0dfd> ../cstrike/dlls/maprules.cpp:519 */
void game_zone_player(entvars_t *pev)
{
//	GetClassPtr<CGamePlayerZone>(CGamePlayerZone *a);  //   519
}

/* <f0d2e> ../cstrike/dlls/maprules.cpp:474 */
void game_team_set(entvars_t *pev)
{
//	GetClassPtr<CGameTeamSet>(CGameTeamSet *a);  //   474
}

/* <f0ccd> ../cstrike/dlls/maprules.cpp:444 */
void CGameTeamMaster::TeamMatch(CBaseEntity *pActivator)
{
//	TeamMatch(CGameTeamMaster *const this,
//			class CBaseEntity *pActivator);  //   444
//	AnyTeam(CGameTeamMaster *const this);  //   446
}

/* <f0bfe> ../cstrike/dlls/maprules.cpp:371 */
void game_team_master(entvars_t *pev)
{
//	GetClassPtr<CGameTeamMaster>(CGameTeamMaster *a);  //   371
}

/* <f0b33> ../cstrike/dlls/maprules.cpp:242 */
void game_text(entvars_t *pev)
{
//	GetClassPtr<CGameText>(CGameText *a);  //   242
}

/* <f0a68> ../cstrike/dlls/maprules.cpp:202 */
void game_end(entvars_t *pev)
{
//	GetClassPtr<CGameEnd>(CGameEnd *a);  //   202
}

/* <f099d> ../cstrike/dlls/maprules.cpp:151 */
void game_score(entvars_t *pev)
{
//	GetClassPtr<CGameScore>(CGameScore *a);  //   151
}

/* <f0955> ../cstrike/dlls/maprules.cpp:79 */
void CRuleEntity::CanFireForActivator(CBaseEntity *pActivator)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //    79
}

/* <f07df> ../cstrike/dlls/maprules.cpp:898 */
void CGamePlayerTeam::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   900
//	Use(CGamePlayerTeam *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   898
}

/* <f07ac> ../cstrike/dlls/maprules.cpp:884 */
void CGamePlayerTeam::TargetTeamName(const char *pszTargetName)
{
//	{
//		class CBaseEntity *pTeamEntity;                      //   886
//	}
}

/* <f06ad> ../cstrike/dlls/maprules.cpp:816 */
void CGamePlayerEquip::Touch(CBaseEntity *pOther)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   818
//	Touch(CGamePlayerEquip *const this,
//		class CBaseEntity *pOther);  //   816
}

/* <f05f3> ../cstrike/dlls/maprules.cpp:851 */
void CGamePlayerEquip::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	EquipPlayer(CGamePlayerEquip *const this,
//			class CBaseEntity *pEntity);  //   853
}

/* <f05a8> ../cstrike/dlls/maprules.cpp:827 */
void CGamePlayerEquip::EquipPlayer(CBaseEntity *pEntity)
{
//	{
//		class CBasePlayer *pPlayer;                          //   829
//		{
//			int i;                                        //   839
//			{
//				int j;                                //   843
//			}
//		}
//	}
}

/* <f0474> ../cstrike/dlls/maprules.cpp:402 */
void CGameTeamMaster::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   404
//	TeamMatch(CGameTeamMaster *const this,
//			class CBaseEntity *pActivator);  //   420
//	Use(CGameTeamMaster *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   402
}

/* <f00dd> ../cstrike/dlls/maprules.cpp:254 */
void CGameText::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   256
//	FStrEq(const char *sz1,
//		const char *sz2);  //   261
//	atof(const char *__nptr);  //   263
//	atoi(const char *__nptr);  //   258
//	KeyValue(CGameText *const this,
//		KeyValueData *pkvd);  //   254
}

/* <eff4f> ../cstrike/dlls/maprules.cpp:373 */
void CGameTeamMaster::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   375
//	FStrEq(const char *sz1,
//		const char *sz2);  //   380
//	KeyValue(CRuleEntity *const this,
//		KeyValueData *pkvd);  //   398
//	{
//		int type;                                             //   382
//		atoi(const char *__nptr);  //   382
//	}
//	KeyValue(CGameTeamMaster *const this,
//		KeyValueData *pkvd);  //   373
}

/* <efdbc> ../cstrike/dlls/maprules.cpp:530 */
void CGamePlayerZone::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   532
//	FStrEq(const char *sz1,
//		const char *sz2);  //   537
//	KeyValue(CGamePlayerZone *const this,
//		KeyValueData *pkvd);  //   530
}

/* <efc68> ../cstrike/dlls/maprules.cpp:160 */
void CGameScore::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   162
//	KeyValue(CRuleEntity *const this,
//		KeyValueData *pkvd);  //   168
//	KeyValue(CGameScore *const this,
//		KeyValueData *pkvd);  //   160
}

/* <efb37> ../cstrike/dlls/maprules.cpp:791 */
void CGamePlayerEquip::KeyValue(KeyValueData *pkvd)
{
//	KeyValue(CRuleEntity *const this,
//		KeyValueData *pkvd);  //   793
//	KeyValue(CGamePlayerEquip *const this,
//		KeyValueData *pkvd);  //   791
}

/* <efa65> ../cstrike/dlls/maprules.cpp:750 */
void CGameCounterSet::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   752
//	Use(CGameCounterSet *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   750
}

/* <ef8ef> ../cstrike/dlls/maprules.cpp:694 */
void CGameCounter::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   696
//	Use(CGameCounter *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   694
}

/* <ef815> ../cstrike/dlls/maprules.cpp:631 */
void CGamePlayerHurt::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   633
//	Use(CGamePlayerHurt *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   631
}

/* <ef735> ../cstrike/dlls/maprules.cpp:477 */
void CGameTeamSet::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   479
//	Use(CGameTeamSet *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   477
}

/* <ef655> ../cstrike/dlls/maprules.cpp:321 */
void CGameText::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   323
//	MessageGet(CGameText *const this);  //   328
//	Use(CGameText *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   321
}

/* <ef54c> ../cstrike/dlls/maprules.cpp:173 */
void CGameScore::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   175
//	Use(CGameScore *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   173
//	AwardToTeam(CGameScore *const this);  //   181
//	AllowNegativeScore(CGameScore *const this);  //   187
//	Points(CGameScore *const this);  //   187
}

/* <ef497> ../cstrike/dlls/maprules.cpp:205 */
void CGameEnd::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	CanFireForActivator(CRuleEntity *const this,
//				class CBaseEntity *pActivator);  //   207
//	Use(CGameEnd *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   205
}

/* <ef36e> ../cstrike/dlls/maprules.cpp:556 */
void CGamePlayerZone::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int playersInCount;                                   //   558
//		int playersOutCount;                                  //   559
//		class CBaseEntity *pPlayer;                          //   564
//		CanFireForActivator(CRuleEntity *const this,
//					class CBaseEntity *pActivator);  //   561
//	}
//	Use(CGamePlayerZone *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   556
}

/* <ef2e0> ../cstrike/dlls/maprules.cpp:429 */
void CGameTeamMaster::IsTriggered(CBaseEntity *pActivator)
{
//	TeamMatch(CGameTeamMaster *const this,
//			class CBaseEntity *pActivator);  //   431
}

/* <ef252> ../cstrike/dlls/maprules.cpp:251 */
void CGameText::Restore(CRestore &restore)
{
//	Restore(CRuleEntity *const this,
//		class CRestore &restore);  //   251
//	Restore(CGameText *const this,
//		class CRestore &restore);  //   251
}

/* <ef1c1> ../cstrike/dlls/maprules.cpp:528 */
void CGamePlayerZone::Restore(CRestore &restore)
{
//	Restore(CRuleEntity *const this,
//		class CRestore &restore);  //   528
//	Restore(CGamePlayerZone *const this,
//		class CRestore &restore);  //   528
}

/* <ef133> ../cstrike/dlls/maprules.cpp:251 */
void CGameText::Save(CSave &save)
{
//	Save(CRuleEntity *const this,
//		class CSave &save);  //   251
//	Save(CGameText *const this,
//		class CSave &save);  //   251
}

/* <ef0a2> ../cstrike/dlls/maprules.cpp:528 */
void CGamePlayerZone::Save(CSave &save)
{
//	Save(CRuleEntity *const this,
//		class CSave &save);  //   528
//	Save(CGamePlayerZone *const this,
//		class CSave &save);  //   528
}

/* <eeff6> ../cstrike/dlls/maprules.cpp:68 */
void CRuleEntity::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    70
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    76
//	KeyValue(CRuleEntity *const this,
//		KeyValueData *pkvd);  //    68
}

/* <eefa7> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <eef33> ../cstrike/dlls/maprules.cpp:57 */
void CRuleEntity::Save(CSave &save)
{
//	Save(CRuleEntity *const this,
//		class CSave &save);  //    57
}

/* <eeee7> ../cstrike/dlls/maprules.cpp:57 */
void CRuleEntity::Restore(CRestore &restore)
{
//	Restore(CRuleEntity *const this,
//		class CRestore &restore);  //    57
}

/* <eeeaf> ../cstrike/dlls/maprules.cpp:435 */
void CGameTeamMaster::TeamID(void)
{
//	TeamID(CGameTeamMaster *const this);  //   435
}

/* <eee2d> ../cstrike/dlls/maprules.cpp:686 */
void CGameCounter::Spawn(void)
{
//	CountValue(CGameCounter *const this);  //   689
//	SetInitialValue(CGameCounter *const this,
//			int value);  //   689
//	Spawn(CRulePointEntity *const this);  //   690
}

/* <eee07> ../cstrike/dlls/maprules.cpp:357 */
void CGameTeamMaster::ObjectCaps(void)
{
}

/* <eedb1> ../cstrike/dlls/maprules.cpp:154 */
void CGameScore::Spawn(void)
{
//	Spawn(CRulePointEntity *const this);  //   156
}

/* <eed72> ../cstrike/dlls/maprules.cpp:120 */
void CRuleBrushEntity::Spawn(void)
{
//	Spawn(CRuleEntity *const this);  //   123
}

/* <eed39> ../cstrike/dlls/maprules.cpp:101 */
void CRulePointEntity::Spawn(void)
{
//	Spawn(CRuleEntity *const this);  //   103
}

/* <eed18> ../cstrike/dlls/maprules.cpp:60 */
void CRuleEntity::Spawn(void)
{
}

/* <eecf2> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <eecb7> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <eeadd> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <eeab7> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <eea91> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <eea5c> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <ee9fd> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <ee9c8> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <ee9a2> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <ee97c> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <ee956> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <ee930> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <ee909> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <ee8e3> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <ee8bd> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <ee897> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <ee863> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <ee83d> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <ee817> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <ee7e3> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <ee7bd> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <ee729> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <ee6d9> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <ee6a5> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <ee671> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <ee610> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <ee5ce> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <ee5a8> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <ee582> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <ee550> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <ee510> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <ee4ea> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <ee4b6> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <ee490> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <ee46a> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <ee449> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <ee423> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <ee3fd> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <ee3cb> ../cstrike/dlls/cbase.h:800 */
CGamePlayerTeam *GetClassPtr<CGamePlayerTeam>(CGamePlayerTeam *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee3af> ../cstrike/dlls/maprules.cpp:867 */
inline void CGamePlayerTeam::CGamePlayerTeam(void)
{
}

/* <ee37d> ../cstrike/dlls/cbase.h:800 */
CGamePlayerEquip *GetClassPtr<CGamePlayerEquip>(CGamePlayerEquip *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee361> ../cstrike/dlls/maprules.cpp:771 */
inline void CGamePlayerEquip::CGamePlayerEquip(void)
{
}

/* <ee32f> ../cstrike/dlls/cbase.h:800 */
CGameCounterSet *GetClassPtr<CGameCounterSet>(CGameCounterSet *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee313> ../cstrike/dlls/maprules.cpp:738 */
inline void CGameCounterSet::CGameCounterSet(void)
{
}

/* <ee2e1> ../cstrike/dlls/cbase.h:800 */
CGameCounter *GetClassPtr<CGameCounter>(CGameCounter *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee2c5> ../cstrike/dlls/maprules.cpp:662 */
inline void CGameCounter::CGameCounter(void)
{
}

/* <ee293> ../cstrike/dlls/cbase.h:800 */
CGamePlayerHurt *GetClassPtr<CGamePlayerHurt>(CGamePlayerHurt *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee277> ../cstrike/dlls/maprules.cpp:619 */
inline void CGamePlayerHurt::CGamePlayerHurt(void)
{
}

/* <ee245> ../cstrike/dlls/cbase.h:800 */
CGamePlayerZone *GetClassPtr<CGamePlayerZone>(CGamePlayerZone *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee229> ../cstrike/dlls/maprules.cpp:502 */
inline void CGamePlayerZone::CGamePlayerZone(void)
{
}

/* <ee209> ../cstrike/dlls/maprules.cpp:112 */
inline void CRuleBrushEntity::CRuleBrushEntity(void)
{
}

/* <ee1d7> ../cstrike/dlls/cbase.h:800 */
CGameTeamSet *GetClassPtr<CGameTeamSet>(CGameTeamSet *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee1bb> ../cstrike/dlls/maprules.cpp:464 */
inline void CGameTeamSet::CGameTeamSet(void)
{
}

/* <ee189> ../cstrike/dlls/cbase.h:800 */
CGameTeamMaster *GetClassPtr<CGameTeamMaster>(CGameTeamMaster *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee16d> ../cstrike/dlls/maprules.cpp:352 */
inline void CGameTeamMaster::CGameTeamMaster(void)
{
}

/* <ee13b> ../cstrike/dlls/cbase.h:800 */
CGameText *GetClassPtr<CGameText>(CGameText *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee120> ../cstrike/dlls/maprules.cpp:223 */
inline void CGameText::CGameText(void)
{
}

/* <ee0ee> ../cstrike/dlls/cbase.h:800 */
CGameEnd *GetClassPtr<CGameEnd>(CGameEnd *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee0d3> ../cstrike/dlls/maprules.cpp:195 */
inline void CGameEnd::CGameEnd(void)
{
}

/* <ee0a1> ../cstrike/dlls/cbase.h:800 */
CGameScore *GetClassPtr<CGameScore>(CGameScore *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <ee086> ../cstrike/dlls/maprules.cpp:135 */
inline void CGameScore::CGameScore(void)
{
}

/* <ee010> ../cstrike/dlls/maprules.cpp:95 */
inline void CRulePointEntity::CRulePointEntity(void)
{
}

/* <edff5> ../cstrike/dlls/maprules.cpp:34 */
inline void CRuleEntity::CRuleEntity(void)
{
}

/* <edfda> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <edf75> ../cstrike/dlls/maprules.cpp:898 */
void CGamePlayerTeam::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		const char *pszTargetTeam;                          //   905
//		{
//			class CBasePlayer *pPlayer;                  //   908
//		}
//	}
}

/* <edf5c> ../cstrike/dlls/maprules.cpp:876 */
inline void CGamePlayerTeam::ShouldGibPlayer(void)
{
}

/* <edf43> ../cstrike/dlls/maprules.cpp:875 */
inline void CGamePlayerTeam::ShouldKillPlayer(void)
{
}

/* <edf25> ../cstrike/dlls/maprules.cpp:874 */
inline void CGamePlayerTeam::RemoveOnFire(void)
{
}

/* <edf00> ../cstrike/dlls/maprules.cpp:816 */
void CGamePlayerEquip::Touch(CBaseEntity *pOther)
{
}

/* <edee7> ../cstrike/dlls/maprules.cpp:778 */
inline void CGamePlayerEquip::UseOnly(void)
{
}

/* <ede9e> ../cstrike/dlls/maprules.cpp:750 */
void CGameCounterSet::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <ede80> ../cstrike/dlls/maprules.cpp:742 */
inline void CGameCounterSet::RemoveOnFire(void)
{
}

/* <ede5b> ../cstrike/dlls/maprules.cpp:681 */
inline void CGameCounter::SetInitialValue( int value)
{
}

/* <ede12> ../cstrike/dlls/maprules.cpp:694 */
void CGameCounter::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <eddf9> ../cstrike/dlls/maprules.cpp:676 */
inline void CGameCounter::HitLimit(void)
{
}

/* <eddd4> ../cstrike/dlls/maprules.cpp:680 */
inline void CGameCounter::SetCountValue( int value)
{
}

/* <eddbb> ../cstrike/dlls/maprules.cpp:674 */
inline void CGameCounter::LimitValue(void)
{
}

/* <edda2> ../cstrike/dlls/maprules.cpp:673 */
inline void CGameCounter::CountValue(void)
{
}

/* <edd89> ../cstrike/dlls/maprules.cpp:672 */
inline void CGameCounter::ResetCount(void)
{
}

/* <edd70> ../cstrike/dlls/maprules.cpp:671 */
inline void CGameCounter::CountDown(void)
{
}

/* <edd57> ../cstrike/dlls/maprules.cpp:670 */
inline void CGameCounter::CountUp(void)
{
}

/* <edd3e> ../cstrike/dlls/maprules.cpp:668 */
inline void CGameCounter::ResetOnFire(void)
{
}

/* <edd20> ../cstrike/dlls/maprules.cpp:667 */
inline void CGameCounter::RemoveOnFire(void)
{
}

/* <edcd7> ../cstrike/dlls/maprules.cpp:631 */
void CGamePlayerHurt::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <edcb9> ../cstrike/dlls/maprules.cpp:623 */
inline void CGamePlayerHurt::RemoveOnFire(void)
{
}

/* <edc70> ../cstrike/dlls/maprules.cpp:477 */
void CGameTeamSet::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <edc57> ../cstrike/dlls/maprules.cpp:469 */
inline void CGameTeamSet::ShouldClearTeam(void)
{
}

/* <edc39> ../cstrike/dlls/maprules.cpp:468 */
inline void CGameTeamSet::RemoveOnFire(void)
{
}

/* <edbf0> ../cstrike/dlls/maprules.cpp:402 */
void CGameTeamMaster::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <edbcb> ../cstrike/dlls/maprules.cpp:444 */
void CGameTeamMaster::TeamMatch(CBaseEntity *pActivator)
{
}

/* <edbb2> ../cstrike/dlls/maprules.cpp:362 */
inline void CGameTeamMaster::AnyTeam(void)
{
}

/* <edb99> ../cstrike/dlls/maprules.cpp:361 */
inline void CGameTeamMaster::RemoveOnFire(void)
{
}

/* <edb50> ../cstrike/dlls/maprules.cpp:321 */
void CGameText::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <edb37> ../cstrike/dlls/maprules.cpp:235 */
inline void CGameText::MessageGet(void)
{
}

/* <edb1e> ../cstrike/dlls/maprules.cpp:233 */
inline void CGameText::MessageToAll(void)
{
}

/* <edafa> ../cstrike/dlls/maprules.cpp:160 */
void CGameScore::KeyValue(KeyValueData *pkvd)
{
}

/* <edad6> ../cstrike/dlls/maprules.cpp:146 */
inline void CGameScore::SetPoints( int points)
{
}

/* <eda91> ../cstrike/dlls/maprules.cpp:173 */
void CGameScore::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <eda78> ../cstrike/dlls/maprules.cpp:144 */
inline void CGameScore::AwardToTeam(void)
{
}

/* <eda5f> ../cstrike/dlls/maprules.cpp:143 */
inline void CGameScore::AllowNegativeScore(void)
{
}

/* <eda41> ../cstrike/dlls/maprules.cpp:142 */
inline void CGameScore::Points(void)
{
}

/* <ed9f7> ../cstrike/dlls/maprules.cpp:205 */
void CGameEnd::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <ed962> ../cstrike/dlls/maprules.cpp:556 */
void CGamePlayerZone::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int playersInCount;                                   //   558
//		int playersOutCount;                                  //   559
//		class CBaseEntity *pPlayer;                          //   564
//		{
//			int i;                                        //   566
//			{
//				TraceResult trace;                    //   571
//				int hullNumber;                       //   572
//			}
//		}
//	}
}

/* <ed93e> ../cstrike/dlls/maprules.cpp:79 */
void CRuleEntity::CanFireForActivator(CBaseEntity *pActivator)
{
}

/* <ed8ea> ../cstrike/dlls/maprules.cpp:254 */
void CGameText::KeyValue(KeyValueData *pkvd)
{
//	{
//		int color;                                            //   278
//	}
//	{
//		int color;                                            //   288
//	}
}

/* <ed898> ../cstrike/dlls/maprules.cpp:373 */
void CGameTeamMaster::KeyValue(KeyValueData *pkvd)
{
//	{
//		int type;                                             //   382
//	}
}

/* <ed873> ../cstrike/dlls/maprules.cpp:530 */
void CGamePlayerZone::KeyValue(KeyValueData *pkvd)
{
}

/* <ed81f> ../cstrike/dlls/maprules.cpp:791 */
void CGamePlayerEquip::KeyValue(KeyValueData *pkvd)
{
//	{
//		int i;                                                //   797
//		{
//			char tmp;                                     //   801
//		}
//	}
}

/* <ed7dc> ../cstrike/dlls/maprules.cpp:68 */
void CRuleEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <ed7b8> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <ed794> ../cstrike/dlls/maprules.cpp:43 */
inline void CRuleEntity::SetMaster( int iszMaster)
{
}

/* <ed776> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <ed727> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <ed68d> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <ed659> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <ed632> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <ed606> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <ed5e6> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <ed5c8> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <ed5a0> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <ed577> ../cstrike/dlls/maprules.cpp:251 */
void CGameText::Save(CSave &save)
{
}

/* <ed54d> ../cstrike/dlls/maprules.cpp:528 */
void CGamePlayerZone::Save(CSave &save)
{
}

/* <ed524> ../cstrike/dlls/maprules.cpp:57 */
void CRuleEntity::Save(CSave &save)
{
}

/* <ed4f6> ../cstrike/dlls/maprules.cpp:251 */
void CGameText::Restore(CRestore &restore)
{
}

/* <ed4c7> ../cstrike/dlls/maprules.cpp:528 */
void CGamePlayerZone::Restore(CRestore &restore)
{
}

/* <ed49e> ../cstrike/dlls/maprules.cpp:57 */
void CRuleEntity::Restore(CRestore &restore)
{
}

/* <ed480> ../cstrike/dlls/maprules.cpp:435 */
void CGameTeamMaster::TeamID(void)
{
}

/* <ed462> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <ed444> ../cstrike/dlls/maprules.cpp:101 */
void CRulePointEntity::Spawn(void)
{
}

/* <ed426> ../cstrike/dlls/maprules.cpp:60 */
void CRuleEntity::Spawn(void)
{
}

/* <e7f81> ../cstrike/dlls/lights.cpp:175 */
void light_environment(entvars_t *pev)
{
//	GetClassPtr<CEnvLight>(CEnvLight *a);  //   175
}

/* <e7eb7> ../cstrike/dlls/lights.cpp:165 */
void light_spot(entvars_t *pev)
{
//	GetClassPtr<CLight>(CLight *a);  //   165
}

/* <e7ded> ../cstrike/dlls/lights.cpp:48 */
void light(entvars_t *pev)
{
//	GetClassPtr<CLight>(CLight *a);  //    48
}

/* <e7dbb> ../cstrike/dlls/cbase.h:800 */
CLight *GetClassPtr<CLight>(CLight *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e7d08> ../cstrike/dlls/lights.cpp:177 */
void CEnvLight::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   179
//	KeyValue(CEnvLight *const this,
//		KeyValueData *pkvd);  //   177
}

/* <e7bef> ../cstrike/dlls/lights.cpp:62 */
void CLight::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    64
//	FStrEq(const char *sz1,
//		const char *sz2);  //    69
//	KeyValue(CLight *const this,
//		KeyValueData *pkvd);  //    62
//	atoi(const char *__nptr);  //    66
//	atof(const char *__nptr);  //    71
}

/* <e7bb3> ../cstrike/dlls/lights.cpp:215 */
void CEnvLight::Spawn(void)
{
//	{
//		char szVector;                                        //   217
//	}
}

/* <e7b78> ../cstrike/dlls/lights.cpp:92 */
void CLight::Spawn(void)
{
//	Spawn(CLight *const this);  //    92
}

/* <e7b2c> ../cstrike/dlls/lights.cpp:56 */
void CLight::Save(CSave &save)
{
//	Save(CLight *const this,
//		class CSave &save);  //    56
}

/* <e7ae0> ../cstrike/dlls/lights.cpp:56 */
void CLight::Restore(CRestore &restore)
{
//	Restore(CLight *const this,
//		class CRestore &restore);  //    56
}

/* <e7a6b> ../cstrike/dlls/lights.cpp:139 */
void CLight::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CLight *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   139
}

/* <e7a30> ../cstrike/dlls/lights.cpp:117 */
void CLight::Restart(void)
{
//	Restart(CLight *const this);  //   117
}

/* <e79e1> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <e79c0> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <e799a> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <e795f> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <e7785> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <e775f> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <e7739> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <e7704> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <e76cf> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <e76a9> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <e7683> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <e765d> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <e7637> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <e7610> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <e75ea> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <e75c4> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <e759e> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <e756a> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <e7544> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <e751e> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <e74ea> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <e74c4> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <e7430> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <e73e0> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <e73ac> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <e7378> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <e732a> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <e72e8> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <e72c2> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <e729c> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <e726a> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <e722a> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <e7204> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <e71d0> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <e71aa> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <e7184> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <e715e> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <e712c> ../cstrike/dlls/cbase.h:800 */
CEnvLight *GetClassPtr<CEnvLight>(CEnvLight *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e7111> ../cstrike/dlls/lights.cpp:168 */
inline void CEnvLight::CEnvLight(void)
{
}

/* <e70f6> ../cstrike/dlls/lights.cpp:29 */
inline void CLight::CLight(void)
{
}

/* <e707f> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <e7064> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <e7046> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <e7027> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <e6fc4> ../cstrike/dlls/lights.cpp:177 */
void CEnvLight::KeyValue(KeyValueData *pkvd)
{
//	{
//		int r;                                                //   181
//		int g;                                                //   181
//		int b;                                                //   181
//		int v;                                                //   181
//		int j;                                                //   181
//		char szColor;                                         //   182
//	}
}

/* <e6fa0> ../cstrike/dlls/lights.cpp:62 */
void CLight::KeyValue(KeyValueData *pkvd)
{
}

/* <e6f77> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <e6ef8> ../cstrike/dlls/lights.cpp:92 */
void CLight::Spawn(void)
{
}

/* <e6e69> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <e6e30> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <e6e09> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <e6ddd> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <e6db4> ../cstrike/dlls/lights.cpp:56 */
void CLight::Save(CSave &save)
{
}

/* <e6d8b> ../cstrike/dlls/lights.cpp:56 */
void CLight::Restore(CRestore &restore)
{
}

/* <e6d46> ../cstrike/dlls/lights.cpp:139 */
void CLight::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <e6d28> ../cstrike/dlls/lights.cpp:117 */
void CLight::Restart(void)
{
}

/* <e286b> ../cstrike/dlls/items.cpp:474 */
void item_thighpack(entvars_t *pev)
{
//	GetClassPtr<CItemThighPack>(CItemThighPack *a);  //   474
}

/* <e279e> ../cstrike/dlls/items.cpp:429 */
void item_assaultsuit(entvars_t *pev)
{
//	GetClassPtr<CItemAssaultSuit>(CItemAssaultSuit *a);  //   429
}

/* <e26d1> ../cstrike/dlls/items.cpp:390 */
void item_kevlar(entvars_t *pev)
{
//	GetClassPtr<CItemKevlar>(CItemKevlar *a);  //   390
}

/* <e2604> ../cstrike/dlls/items.cpp:350 */
void item_longjump(entvars_t *pev)
{
//	GetClassPtr<CItemLongJump>(CItemLongJump *a);  //   350
}

/* <e2537> ../cstrike/dlls/items.cpp:312 */
void item_security(entvars_t *pev)
{
//	GetClassPtr<CItemSecurity>(CItemSecurity *a);  //   312
}

/* <e246a> ../cstrike/dlls/items.cpp:290 */
void item_antidote(entvars_t *pev)
{
//	GetClassPtr<CItemAntidote>(CItemAntidote *a);  //   290
}

/* <e239d> ../cstrike/dlls/items.cpp:266 */
void item_battery(entvars_t *pev)
{
//	GetClassPtr<CItemBattery>(CItemBattery *a);  //   266
}

/* <e22d3> ../cstrike/dlls/items.cpp:216 */
void item_suit(entvars_t *pev)
{
//	GetClassPtr<CItemSuit>(CItemSuit *a);  //   216
}

/* <e2209> ../cstrike/dlls/items.cpp:46 */
void world_items(entvars_t *pev)
{
//	GetClassPtr<CWorldItem>(CWorldItem *a);  //    46
}

/* <e2158> ../cstrike/dlls/items.cpp:190 */
void CItemSuit::Spawn(void)
{
//	Spawn(CItem *const this);  //   194
}

/* <e20a7> ../cstrike/dlls/items.cpp:221 */
void CItemBattery::Spawn(void)
{
//	Spawn(CItem *const this);  //   225
}

/* <e1ff5> ../cstrike/dlls/items.cpp:271 */
void CItemAntidote::Spawn(void)
{
//	Spawn(CItem *const this);  //   275
}

/* <e1f43> ../cstrike/dlls/items.cpp:295 */
void CItemSecurity::Spawn(void)
{
//	Spawn(CItem *const this);  //   299
}

/* <e1e91> ../cstrike/dlls/items.cpp:316 */
void CItemLongJump::Spawn(void)
{
//	Spawn(CItem *const this);  //   320
}

/* <e1ddf> ../cstrike/dlls/items.cpp:354 */
void CItemKevlar::Spawn(void)
{
//	Spawn(CItem *const this);  //   358
}

/* <e1d2d> ../cstrike/dlls/items.cpp:395 */
void CItemAssaultSuit::Spawn(void)
{
//	Spawn(CItem *const this);  //   399
}

/* <e1c7b> ../cstrike/dlls/items.cpp:434 */
void CItemThighPack::Spawn(void)
{
//	Spawn(CItem *const this);  //   438
}

/* <e1b9d> ../cstrike/dlls/items.cpp:364 */
void CItemKevlar::MyTouch(CBasePlayer *pPlayer)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   371
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   373
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   378
}

/* <e1b04> ../cstrike/dlls/items.cpp:201 */
void CItemSuit::MyTouch(CBasePlayer *pPlayer)
{
//	MyTouch(CItemSuit *const this,
//		class CBasePlayer *pPlayer);  //   201
}

/* <e1a20> ../cstrike/dlls/items.cpp:232 */
void CItemBattery::MyTouch(CBasePlayer *pPlayer)
{
//	MyTouch(CItemBattery *const this,
//		class CBasePlayer *pPlayer);  //   232
}

/* <e1942> ../cstrike/dlls/items.cpp:405 */
void CItemAssaultSuit::MyTouch(CBasePlayer *pPlayer)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   410
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   412
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   417
}

/* <e1873> ../cstrike/dlls/items.cpp:444 */
void CItemThighPack::MyTouch(CBasePlayer *pPlayer)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			entvars_t *ent);  //   453
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   462
//	MyTouch(CItemThighPack *const this,
//		class CBasePlayer *pPlayer);  //   444
}

/* <e17e9> ../cstrike/dlls/items.cpp:326 */
void CItemLongJump::MyTouch(CBasePlayer *pPlayer)
{
//	MyTouch(CItemLongJump *const this,
//		class CBasePlayer *pPlayer);  //   326
}

/* <e173b> ../cstrike/dlls/items.cpp:48 */
void CWorldItem::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    50
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //    56
//	KeyValue(CWorldItem *const this,
//		KeyValueData *pkvd);  //    48
}

/* <e16d4> ../cstrike/dlls/items.cpp:112 */
void CItem::ItemTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   123
//	}
//	ItemTouch(CItem *const this,
//			class CBaseEntity *pOther);  //   112
}

/* <e1685> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <e163a> ../cstrike/dlls/items.cpp:59 */
void CWorldItem::Spawn(void)
{
//	{
//		class CBaseEntity *pEntity;                          //    61
//		edict(CBaseEntity *const this);  //    90
//	}
}

/* <e15a6> ../cstrike/dlls/items.cpp:94 */
void CItem::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //    99
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    99
}

/* <e158d> ../cstrike/dlls/items.cpp:94 */
void CItem::Spawn(void)
{
}

/* <e1566> ../cstrike/dlls/items.cpp:154 */
void CItem::Respawn(void)
{
}

/* <e1530> ../cstrike/dlls/items.cpp:281 */
void CItemAntidote::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e1509> ../cstrike/dlls/items.cpp:166 */
void CItem::Materialize(void)
{
}

/* <e14e3> ../cstrike/dlls/items.cpp:440 */
void CItemThighPack::Precache(void)
{
}

/* <e14bd> ../cstrike/dlls/items.cpp:401 */
void CItemAssaultSuit::Precache(void)
{
}

/* <e1497> ../cstrike/dlls/items.cpp:360 */
void CItemKevlar::Precache(void)
{
}

/* <e1471> ../cstrike/dlls/items.cpp:322 */
void CItemLongJump::Precache(void)
{
}

/* <e143c> ../cstrike/dlls/items.cpp:305 */
void CItemSecurity::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e1416> ../cstrike/dlls/items.cpp:301 */
void CItemSecurity::Precache(void)
{
}

/* <e13f0> ../cstrike/dlls/items.cpp:277 */
void CItemAntidote::Precache(void)
{
}

/* <e13c9> ../cstrike/dlls/items.cpp:227 */
void CItemBattery::Precache(void)
{
}

/* <e13a2> ../cstrike/dlls/items.cpp:196 */
void CItemSuit::Precache(void)
{
}

/* <e136e> ../cstrike/dlls/items.h:26 */
void CItem::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e1348> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <e130d> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <e1133> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <e110d> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <e10e7> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <e10b2> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <e1053> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <e101e> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <e0ff8> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <e0fd2> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <e0fac> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <e0f86> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <e0f5f> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <e0f39> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <e0f13> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <e0eed> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <e0eb9> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <e0e93> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <e0e6d> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <e0e39> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <e0e13> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <e0d7f> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <e0d2f> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <e0cfb> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <e0cc7> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <e0c66> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <e0c24> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <e0bfe> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <e0bd8> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <e0ba6> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <e0b66> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <e0b40> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <e0b0c> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <e0ae6> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <e0ac0> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <e0a9f> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <e0a76> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <e0a50> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <e0a2a> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <e09ad> ../cstrike/dlls/cbase.h:800 */
CItemThighPack *GetClassPtr<CItemThighPack>(CItemThighPack *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e0991> ../cstrike/dlls/items.cpp:432 */
inline void CItemThighPack::CItemThighPack(void)
{
}

/* <e095f> ../cstrike/dlls/cbase.h:800 */
CItemAssaultSuit *GetClassPtr<CItemAssaultSuit>(CItemAssaultSuit *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e093e> ../cstrike/dlls/items.cpp:393 */
inline void CItemAssaultSuit::CItemAssaultSuit(void)
{
}

/* <e090c> ../cstrike/dlls/cbase.h:800 */
CItemKevlar *GetClassPtr<CItemKevlar>(CItemKevlar *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e08eb> ../cstrike/dlls/items.cpp:352 */
inline void CItemKevlar::CItemKevlar(void)
{
}

/* <e08b9> ../cstrike/dlls/cbase.h:800 */
CItemLongJump *GetClassPtr<CItemLongJump>(CItemLongJump *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e089d> ../cstrike/dlls/items.cpp:314 */
inline void CItemLongJump::CItemLongJump(void)
{
}

/* <e086b> ../cstrike/dlls/cbase.h:800 */
CItemSecurity *GetClassPtr<CItemSecurity>(CItemSecurity *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e084a> ../cstrike/dlls/items.cpp:293 */
inline void CItemSecurity::CItemSecurity(void)
{
}

/* <e0818> ../cstrike/dlls/cbase.h:800 */
CItemAntidote *GetClassPtr<CItemAntidote>(CItemAntidote *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e07f7> ../cstrike/dlls/items.cpp:269 */
inline void CItemAntidote::CItemAntidote(void)
{
}

/* <e07c5> ../cstrike/dlls/cbase.h:800 */
CItemBattery *GetClassPtr<CItemBattery>(CItemBattery *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e07aa> ../cstrike/dlls/items.cpp:219 */
inline void CItemBattery::CItemBattery(void)
{
}

/* <e0778> ../cstrike/dlls/cbase.h:800 */
CItemSuit *GetClassPtr<CItemSuit>(CItemSuit *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e075d> ../cstrike/dlls/items.cpp:188 */
inline void CItemSuit::CItemSuit(void)
{
}

/* <e0742> ../cstrike/dlls/items.h:19 */
inline void CItem::CItem(void)
{
}

/* <e0710> ../cstrike/dlls/cbase.h:800 */
CWorldItem *GetClassPtr<CWorldItem>(CWorldItem *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <e06f5> ../cstrike/dlls/items.cpp:38 */
inline void CWorldItem::CWorldItem(void)
{
}

/* <e067f> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <e0661> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <e0612> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <e05d1> ../cstrike/dlls/items.cpp:232 */
inline void CItemBattery::MyTouch(CBasePlayer *pPlayer)
{
//	{
//		int pct;                                              //   237
//		char szcharge;                                        //   238
//	}
}

/* <e05a7> ../cstrike/dlls/items.cpp:326 */
inline void CItemLongJump::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e058e> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <e0565> ../cstrike/dlls/items.cpp:201 */
inline void CItemSuit::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e053b> ../cstrike/dlls/items.cpp:444 */
inline void CItemThighPack::MyTouch(CBasePlayer *pPlayer)
{
}

/* <e04d8> ../cstrike/dlls/items.cpp:48 */
void CWorldItem::KeyValue(KeyValueData *pkvd)
{
}

/* <e04af> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <e03f6> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <e03bd> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <e0396> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <e036a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <e0342> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <e030c> ../cstrike/dlls/items.cpp:112 */
void CItem::ItemTouch(CBaseEntity *pOther)
{
//	{
//		class CBasePlayer *pPlayer;                          //   123
//	}
}

/* <dbec2> ../cstrike/dlls/hintmessage.cpp:70 */
void CHintMessageQueue::AddMessage(const char *message, float duration, bool isHint, class CUtlVector<const char*> *args)
{
//	{
//		class CHintMessage *msg;                             //    73
//		AddToTail(CUtlVector<CHintMessage*> *const this,
//				const class CHintMessage * &src);  //    74
//	}
}

/* <dbd77> ../public/UtlVector.h:365 */
void CUtlVector<CHintMessage*>::InsertBefore(int elem, const CHintMessage * &src)
{
//	GrowVector(CUtlVector<CHintMessage*> *const this,
//			int num);  //   370
//	ShiftElementsRight(CUtlVector<CHintMessage*> *const this,
//				int elem,
//				int num);  //   371
//	CopyConstruct<CHintMessage*>(CHintMessage ** pMemory,
//					const class CHintMessage * &src);  //   372
}

/* <dbd2d> ../public/UtlMemory.h:227 */
void CUtlMemory<CHintMessage*>::Grow(int num)
{
//	{
//		int growSize;                                         //   237
//	}
}

/* <dbc23> ../cstrike/dlls/hintmessage.cpp:11 */
void CHintMessage::CHintMessage(const char *hintString, bool isHint, class CUtlVector<const char*> *args, float duration)
{
//	CUtlVector(CUtlVector<char*> *const this,
//			int growSize,
//			int initSize);  //    11
//	{
//		int i;                                                //    19
//		CloneString(const char *str);  //    21
//		AddToTail(CUtlVector<char*> *const this,
//				const char * &src);  //    21
//	}
}

/* <dbbd1> ../cstrike/dlls/hintmessage.cpp:11 */
void CHintMessage::CHintMessage(const char *hintString, bool isHint, class CUtlVector<const char*> *args, float duration)
{
//	{
//		int i;                                                //    19
//	}
}

/* <dba86> ../public/UtlVector.h:365 */
void CUtlVector<char*>::InsertBefore(int elem, const char * &src)
{
//	GrowVector(CUtlVector<char*> *const this,
//			int num);  //   370
//	ShiftElementsRight(CUtlVector<char*> *const this,
//				int elem,
//				int num);  //   371
//	CopyConstruct<char*>(char ** pMemory,
//				const char * &src);  //   372
}

/* <dba3c> ../public/UtlMemory.h:227 */
void CUtlMemory<char*>::Grow(int num)
{
//	{
//		int growSize;                                         //   237
//	}
}

/* <db866> ../cstrike/dlls/hintmessage.cpp:54 */
void CHintMessageQueue::Update(CBaseEntity &client)
{
//	{
//		class CHintMessage *msg;                             //    60
//		Send(CHintMessage *const this,
//			class CBaseEntity &client);  //    62
//		~CHintMessage(CHintMessage *const this,
//				int const __in_chrg);  //    63
//		Remove(CUtlVector<CHintMessage*> *const this,
//			int elem);  //    64
//	}
}

/* <db74d> ../cstrike/dlls/hintmessage.cpp:43 */
void CHintMessageQueue::Reset(void)
{
//	{
//		int i;                                                //    46
//		~CHintMessage(CHintMessage *const this,
//				int const __in_chrg);  //    48
//	}
//	RemoveAll(CUtlVector<CHintMessage*> *const this);  //    50
}

/* <db723> ../cstrike/dlls/hintmessage.cpp:37 */
void CHintMessage::Send(CBaseEntity &client)
{
}

/* <db6f8> ../cstrike/dlls/hintmessage.cpp:37 */
void CHintMessage::Send(CBaseEntity &client)
{
}

/* <db621> ../cstrike/dlls/hintmessage.cpp:27 */
void CHintMessage::~CHintMessage(void)
{
//	{
//		int i;                                                //    29
//	}
//	~CUtlVector(CUtlVector<char*> *const this,
//			int const __in_chrg);  //    27
//	RemoveAll(CUtlVector<char*> *const this);  //    33
}

/* <db608> ../public/UtlMemory.h:270 */
void CUtlMemory<char*>::Purge(void)
{
}

/* <db5d8> ../cstrike/dlls/hintmessage.cpp:27 */
void CHintMessage::~CHintMessage(int const __in_chrg)
{
//	{
//		int i;                                                //    29
//	}
}

/* <db5ae> ../public/UtlVector.h:353 */
inline void CUtlVector<CHintMessage*>::AddToTail(CHintMessage * &src)
{
}

/* <db57e> ../public/UtlMemory.h:52 */
inline void CopyConstruct<CHintMessage*>(CHintMessage ** pMemory, const CHintMessage * &src)
{
}

/* <db53f> ../public/UtlVector.h:284 */
void CUtlVector<CHintMessage*>::ShiftElementsRight(int elem, int num)
{
//	{
//		int numToMove;                                        //   287
//	}
}

/* <db51a> ../public/UtlVector.h:256 */
void CUtlVector<CHintMessage*>::GrowVector(int num)
{
}

/* <db501> ../public/UtlMemory.h:171 */
void CUtlMemory<CHintMessage*>::IsExternallyAllocated(void)
{
}

/* <db4e8> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <db4ca> ../public/UtlMemory.h:206 */
inline void CUtlMemory<CHintMessage*>::NumAllocated(void)
{
}

/* <db4a0> ../public/UtlVector.h:353 */
inline void CUtlVector<char*>::AddToTail(const char * &src)
{
}

/* <db469> ../game_shared/shared_util.h:46 */
inline char *CloneString(const char *str)
{
//	{
//		char *cloneStr;                                      //    54
//		{
//			char *cloneStr;                              //    50
//		}
//	}
}

/* <db442> ../public/UtlVector.h:180 */
inline void CUtlVector<const char*>::operator[]( int i)
{
}

/* <db413> ../public/UtlVector.h:155 */
inline void CUtlVector<char*>::CUtlVector( int growSize, int initSize)
{
}

/* <db3e3> ../public/UtlMemory.h:52 */
inline void CopyConstruct<char*>(char ** pMemory, const char * &src)
{
}

/* <db3a4> ../public/UtlVector.h:284 */
void CUtlVector<char*>::ShiftElementsRight(int elem, int num)
{
//	{
//		int numToMove;                                        //   287
//	}
}

/* <db37f> ../public/UtlVector.h:256 */
void CUtlVector<char*>::GrowVector(int num)
{
}

/* <db366> ../public/UtlMemory.h:206 */
inline void CUtlMemory<char*>::NumAllocated(void)
{
}

/* <db341> ../public/UtlVector.h:487 */
void CUtlVector<CHintMessage*>::Remove(int elem)
{
}

/* <db31f> ../public/UtlVector.h:180 */
inline void CUtlVector<CHintMessage*>::operator[]( int i)
{
}

/* <db2fc> ../public/UtlVector.h:169 */
inline void CUtlVector<char*>::~CUtlVector( int const __in_chrg)
{
}

/* <db2da> ../public/UtlVector.h:180 */
inline void CUtlVector<char*>::operator[]( int i)
{
}

/* <db2b7> ../public/UtlMemory.h:141 */
void CUtlMemory<char*>::~CUtlMemory(int const __in_chrg)
{
}

/* <db29e> ../public/UtlVector.h:532 */
void CUtlVector<char*>::Purge(void)
{
}

/* <db280> ../public/UtlMemory.h:171 */
void CUtlMemory<char*>::IsExternallyAllocated(void)
{
}

/* <db241> ../public/UtlVector.h:293 */
void CUtlVector<CHintMessage*>::ShiftElementsLeft(int elem, int num)
{
//	{
//		int numToMove;                                        //   296
//	}
}

/* <db228> ../public/UtlVector.h:518 */
void CUtlVector<CHintMessage*>::RemoveAll(void)
{
}

/* <db201> ../public/UtlVector.h:194 */
inline void CUtlVector<CHintMessage*>::Element( int i)
{
}

/* <db1e1> ../public/UtlMemory.h:58 */
inline void Destruct<CHintMessage*>(CHintMessage ** pMemory)
{
}

/* <db1ba> ../public/UtlMemory.h:152 */
inline void CUtlMemory<CHintMessage*>::operator[]( int i)
{
}

/* <db1a1> ../public/UtlVector.h:518 */
void CUtlVector<char*>::RemoveAll(void)
{
}

/* <db17f> ../public/UtlVector.h:194 */
inline void CUtlVector<char*>::Element( int i)
{
}

/* <db15f> ../public/UtlMemory.h:58 */
inline void Destruct<char*>(char ** pMemory)
{
}

/* <db13d> ../public/UtlMemory.h:152 */
inline void CUtlMemory<char*>::operator[]( int i)
{
}

/* <db116> ../public/UtlMemory.h:152 */
inline void CUtlMemory<const char*>::operator[]( int i)
{
}

/* <db0e2> ../public/UtlMemory.h:125 */
void CUtlMemory<char*>::CUtlMemory(int growSize, int initSize)
{
}

/* <db0c4> ../public/UtlVector.h:143 */
inline void CUtlVector<char*>::ResetDbgInfo(void)
{
}

/* <db0a6> ../public/UtlVector.h:235 */
inline void CUtlVector<char*>::Count(void)
{
}

/* <db088> ../public/UtlVector.h:235 */
inline void CUtlVector<const char*>::Count(void)
{
}

/* <db06a> ../public/UtlVector.h:235 */
inline void CUtlVector<CHintMessage*>::Count(void)
{
}

/* <db04c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <daff8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <dafae> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <daf5f> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <daf41> ../cstrike/dlls/hintmessage.h:20 */
inline void CHintMessage::GetDuration(void)
{
}

/* <daebe> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <dae92> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <d6444> ../cstrike/dlls/healthkit.cpp:132 */
void func_healthcharger(entvars_t *pev)
{
//	GetClassPtr<CWallHealth>(CWallHealth *a);  //   132
}

/* <d637a> ../cstrike/dlls/healthkit.cpp:43 */
void item_healthkit(entvars_t *pev)
{
//	GetClassPtr<CHealthKit>(CHealthKit *a);  //    43
}

/* <d622e> ../cstrike/dlls/healthkit.cpp:177 */
void CWallHealth::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CWallHealth *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   177
}

/* <d60ed> ../cstrike/dlls/healthkit.cpp:135 */
void CWallHealth::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   137
//	FStrEq(const char *sz1,
//		const char *sz2);  //   138
//	FStrEq(const char *sz1,
//		const char *sz2);  //   139
//	FStrEq(const char *sz1,
//		const char *sz2);  //   140
//	FStrEq(const char *sz1,
//		const char *sz2);  //   141
//	FStrEq(const char *sz1,
//		const char *sz2);  //   145
//	atoi(const char *__nptr);  //   147
}

/* <d609e> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <d5fb9> ../cstrike/dlls/healthkit.cpp:69 */
void CHealthKit::MyTouch(CBasePlayer *pPlayer)
{
//	MyTouch(CHealthKit *const this,
//		class CBasePlayer *pPlayer);  //    69
}

/* <d5f4d> ../cstrike/dlls/healthkit.cpp:236 */
void CWallHealth::Recharge(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   238
}

/* <d5ee4> ../cstrike/dlls/healthkit.cpp:244 */
void CWallHealth::Off(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   248
//	Off(CWallHealth *const this);  //   244
}

/* <d5e98> ../cstrike/dlls/healthkit.cpp:130 */
void CWallHealth::Save(CSave &save)
{
//	Save(CWallHealth *const this,
//		class CSave &save);  //   130
}

/* <d5e4c> ../cstrike/dlls/healthkit.cpp:130 */
void CWallHealth::Restore(CRestore &restore)
{
//	Restore(CWallHealth *const this,
//		class CRestore &restore);  //   130
}

/* <d5e25> ../cstrike/dlls/healthkit.cpp:55 */
void CHealthKit::Spawn(void)
{
}

/* <d5dfe> ../cstrike/dlls/healthkit.cpp:154 */
void CWallHealth::Spawn(void)
{
}

/* <d5dd7> ../cstrike/dlls/healthkit.cpp:169 */
void CWallHealth::Precache(void)
{
}

/* <d5db1> ../cstrike/dlls/healthkit.cpp:108 */
void CWallHealth::ObjectCaps(void)
{
}

/* <d5d8a> ../cstrike/dlls/healthkit.cpp:63 */
void CHealthKit::Precache(void)
{
}

/* <d5d64> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <d5d3e> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <d5d09> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <d5cdd> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <d5ca2> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <d5ac8> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <d5aa2> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <d5a7c> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <d5a47> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <d59e8> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <d59b3> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <d598d> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <d5967> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <d5941> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <d591b> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <d58f4> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <d58ce> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <d58a8> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <d5882> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <d584e> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <d5828> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <d5802> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <d57ce> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <d57a8> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <d5714> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <d56c4> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <d5690> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <d565c> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <d55fb> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <d55b9> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <d5593> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <d556d> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <d553b> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <d54fb> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <d54d5> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <d54a1> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <d547b> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <d5455> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <d5434> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <d5400> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <d53da> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <d535d> ../cstrike/dlls/cbase.h:800 */
CWallHealth *GetClassPtr<CWallHealth>(CWallHealth *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <d5342> ../cstrike/dlls/healthkit.cpp:99 */
inline void CWallHealth::CWallHealth(void)
{
}

/* <d5321> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <d52fa> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <d528b> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <d5235> ../cstrike/dlls/cbase.h:800 */
CHealthKit *GetClassPtr<CHealthKit>(CHealthKit *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <d521a> ../cstrike/dlls/healthkit.cpp:27 */
inline void CHealthKit::CHealthKit(void)
{
}

/* <d519f> ../cstrike/dlls/items.h:19 */
inline void CItem::CItem(void)
{
}

/* <d517e> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <d5160> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <d50e5> ../cstrike/dlls/healthkit.cpp:177 */
void CWallHealth::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <d50cc> ../cstrike/dlls/healthkit.cpp:244 */
void CWallHealth::Off(void)
{
}

/* <d5070> ../cstrike/dlls/healthkit.cpp:69 */
void CHealthKit::MyTouch(CBasePlayer *pPlayer)
{
}

/* <d4fa5> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <d4f71> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <d4f4a> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <d4f1e> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <d4f00> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <d4ed8> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <d4eaf> ../cstrike/dlls/healthkit.cpp:130 */
void CWallHealth::Save(CSave &save)
{
}

/* <d4e81> ../cstrike/dlls/healthkit.cpp:130 */
void CWallHealth::Restore(CRestore &restore)
{
}

/* <d4e63> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <d0737> ../cstrike/dlls/h_export.cpp:58 */
void GiveFnptrsToDll(enginefuncs_t *pengfuncsFromEngine, globalvars_t *pGlobals)
{
}

/* <d0719> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <d06c5> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <d067b> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <d062c> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <d05cb> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <d059f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <cd6dd> ../cstrike/dlls/h_cycler.cpp:446 */
void cycler_wreckage(entvars_t *pev)
{
//	GetClassPtr<CWreckage>(CWreckage *a);  //   446
}

/* <cd610> ../cstrike/dlls/h_cycler.cpp:358 */
void cycler_weapon(entvars_t *pev)
{
//	GetClassPtr<CWeaponCycler>(CWeaponCycler *a);  //   358
}

/* <cd5c2> ../cstrike/dlls/h_cycler.cpp:331 */
void CCyclerSprite::Animate(float frames)
{
//	Animate(CCyclerSprite *const this,
//		float frames);  //   331
}

/* <cd4f8> ../cstrike/dlls/h_cycler.cpp:246 */
void cycler_sprite(entvars_t *pev)
{
//	GetClassPtr<CCyclerSprite>(CCyclerSprite *a);  //   246
}

/* <cd466> ../cstrike/dlls/h_cycler.cpp:96 */
void CCycler::GenericCyclerSpawn(char *szModel, Vector vecMin, Vector vecMax)
{
//	GenericCyclerSpawn(CCycler *const this,
//				char *szModel,
//				Vector vecMin,
//				Vector vecMax);  //    96
}

/* <cd39c> ../cstrike/dlls/h_cycler.cpp:85 */
void cycler_prdroid(entvars_t *pev)
{
//	GetClassPtr<CCyclerProbe>(CCyclerProbe *a);  //    85
}

/* <cd2d2> ../cstrike/dlls/h_cycler.cpp:72 */
void cycler(entvars_t *pev)
{
//	GetClassPtr<CGenericCycler>(CGenericCycler *a);  //    72
}

/* <cd228> ../cstrike/dlls/h_cycler.cpp:322 */
void CCyclerSprite::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	Animate(CCyclerSprite *const this,
//		float frames);  //   326
}

/* <cd16d> ../cstrike/dlls/h_cycler.cpp:86 */
void CCyclerProbe::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //    89
//	operator+(const Vector *const this,
//			const Vector &v);  //    88
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    89
}

/* <cd0ef> ../cstrike/dlls/h_cycler.cpp:305 */
void CCyclerSprite::Think(void)
{
//	ShouldAnimate(CCyclerSprite *const this);  //   307
//	Animate(CCyclerSprite *const this,
//		float frames);  //   308
}

/* <cd01f> ../cstrike/dlls/h_cycler.cpp:70 */
void CGenericCycler::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //    70
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    70
//	GenericCyclerSpawn(CCycler *const this,
//				char *szModel,
//				Vector vecMin,
//				Vector vecMax);  //    70
}

/* <ccfbc> ../cstrike/dlls/h_cycler.cpp:96 */
void CCycler::GenericCyclerSpawn(char *szModel, Vector vecMin, Vector vecMax)
{
//	MAKE_STRING_CLASS(const char *str,
//				entvars_t *pev);  //   105
}

/* <ccf43> ../cstrike/dlls/h_cycler.cpp:189 */
void CCycler::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	TakeDamage(CCycler *const this,
//			entvars_t *pevInflictor,
//			entvars_t *pevAttacker,
//			float flDamage,
//			int bitsDamageType);  //   189
}

/* <ccef7> ../cstrike/dlls/h_cycler.cpp:255 */
void CCyclerSprite::Save(CSave &save)
{
//	Save(CCyclerSprite *const this,
//		class CSave &save);  //   255
}

/* <cceab> ../cstrike/dlls/h_cycler.cpp:255 */
void CCyclerSprite::Restore(CRestore &restore)
{
//	Restore(CCyclerSprite *const this,
//		class CRestore &restore);  //   255
}

/* <cce5f> ../cstrike/dlls/h_cycler.cpp:61 */
void CCycler::Save(CSave &save)
{
//	Save(CCycler *const this,
//		class CSave &save);  //    61
}

/* <cce12> ../cstrike/dlls/h_cycler.cpp:443 */
void CWreckage::Save(CSave &save)
{
//	Save(CWreckage *const this,
//		class CSave &save);  //   443
}

/* <ccdc6> ../cstrike/dlls/h_cycler.cpp:61 */
void CCycler::Restore(CRestore &restore)
{
//	Restore(CCycler *const this,
//		class CRestore &restore);  //    61
}

/* <ccd79> ../cstrike/dlls/h_cycler.cpp:443 */
void CWreckage::Restore(CRestore &restore)
{
//	Restore(CWreckage *const this,
//		class CRestore &restore);  //   443
}

/* <ccd3e> ../cstrike/dlls/h_cycler.cpp:151 */
void CCycler::Think(void)
{
//	Think(CCycler *const this);  //   151
}

/* <ccd07> ../cstrike/dlls/h_cycler.cpp:468 */
void CWreckage::Precache(void)
{
//	Precache(CWreckage *const this);  //   468
}

/* <cccb8> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <ccc91> ../cstrike/dlls/h_cycler.cpp:115 */
void CCycler::Spawn(void)
{
}

/* <ccbf6> ../cstrike/dlls/h_cycler.cpp:361 */
void CWeaponCycler::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //   372
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   372
}

/* <ccb97> ../cstrike/dlls/h_cycler.cpp:403 */
void CWeaponCycler::SecondaryAttack(void)
{
//	{
//		float flFrameRate;                                    //   405
//		float flGroundSpeed;                                  //   405
//		void *pmodel;                                        //   410
//	}
}

/* <ccb26> ../cstrike/dlls/h_cycler.cpp:474 */
void CWreckage::Think(void)
{
//	{
//		Vector VecSrc;                                  //   492
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   498
//	}
}

/* <ccaff> ../cstrike/dlls/h_cycler.cpp:448 */
void CWreckage::Spawn(void)
{
}

/* <ccad8> ../cstrike/dlls/h_cycler.cpp:394 */
void CWeaponCycler::PrimaryAttack(void)
{
}

/* <ccaa3> ../cstrike/dlls/h_cycler.cpp:388 */
void CWeaponCycler::Holster(int skiplocal)
{
}

/* <cca7c> ../cstrike/dlls/h_cycler.cpp:378 */
void CWeaponCycler::Deploy(void)
{
}

/* <cca49> ../cstrike/dlls/h_cycler.cpp:349 */
void CWeaponCycler::GetItemInfo(ItemInfo *p)
{
}

/* <cca23> ../cstrike/dlls/h_cycler.cpp:348 */
void CWeaponCycler::iItemSlot(void)
{
}

/* <cc9c1> ../cstrike/dlls/h_cycler.cpp:315 */
void CCyclerSprite::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <cc982> ../cstrike/dlls/h_cycler.cpp:284 */
void CCyclerSprite::Restart(void)
{
//	{
//		int i;                                                //   300
//	}
}

/* <cc943> ../cstrike/dlls/h_cycler.cpp:258 */
void CCyclerSprite::Spawn(void)
{
//	{
//		int i;                                                //   279
//	}
}

/* <cc91d> ../cstrike/dlls/h_cycler.cpp:224 */
void CCyclerSprite::ObjectCaps(void)
{
}

/* <cc8bf> ../cstrike/dlls/h_cycler.cpp:176 */
void CCycler::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <cc899> ../cstrike/dlls/h_cycler.cpp:47 */
void CCycler::IsAlive(void)
{
}

/* <cc873> ../cstrike/dlls/h_cycler.cpp:39 */
void CCycler::ObjectCaps(void)
{
}

/* <cc84d> ../cstrike/dlls/weapons.h:361 */
void CBasePlayerWeapon::GetWeaponPtr(void)
{
}

/* <cc821> ../cstrike/dlls/weapons.h:354 */
void CBasePlayerWeapon::IsWeapon(void)
{
}

/* <cc7fb> ../cstrike/dlls/weapons.h:353 */
void CBasePlayerWeapon::UseDecrement(void)
{
}

/* <cc7d5> ../cstrike/dlls/weapons.h:351 */
void CBasePlayerWeapon::ShouldWeaponIdle(void)
{
}

/* <cc7af> ../cstrike/dlls/weapons.h:348 */
void CBasePlayerWeapon::WeaponIdle(void)
{
}

/* <cc789> ../cstrike/dlls/weapons.h:347 */
void CBasePlayerWeapon::Reload(void)
{
}

/* <cc763> ../cstrike/dlls/weapons.h:328 */
void CBasePlayerWeapon::UpdateItemInfo(void)
{
}

/* <cc73c> ../cstrike/dlls/weapons.h:322 */
void CBasePlayerWeapon::AddWeapon(void)
{
}

/* <cc716> ../cstrike/dlls/weapons.h:280 */
void CBasePlayerItem::GetMaxSpeed(void)
{
}

/* <cc6f0> ../cstrike/dlls/weapons.h:268 */
void CBasePlayerItem::ItemPreFrame(void)
{
}

/* <cc6ca> ../cstrike/dlls/weapons.h:264 */
void CBasePlayerItem::CanHolster(void)
{
}

/* <cc6a4> ../cstrike/dlls/weapons.h:260 */
void CBasePlayerItem::CanDrop(void)
{
}

/* <cc67e> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <cc658> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <cc632> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <cc60c> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <cc5e6> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <cc5c0> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <cc58b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <cc55f> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <cc524> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <cc34a> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <cc324> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <cc2fe> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <cc2c9> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <cc26a> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <cc235> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <cc20f> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <cc1e9> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <cc1c3> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <cc19d> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <cc176> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <cc150> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <cc12a> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <cc104> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <cc0d0> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <cc0aa> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <cc084> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <cc050> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <cc02a> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <cbf96> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <cbf46> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <cbf12> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <cbede> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <cbe9c> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <cbe5a> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <cbe34> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <cbe0e> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <cbddc> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <cbda8> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <cbd82> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <cbd4e> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <cbd28> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <cbd02> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <cbce1> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <cbcad> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <cbc87> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <cbc61> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <cbc2f> ../cstrike/dlls/cbase.h:800 */
CWreckage *GetClassPtr<CWreckage>(CWreckage *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <cbc13> ../cstrike/dlls/h_cycler.cpp:427 */
inline void CWreckage::CWreckage(void)
{
}

/* <cbbe1> ../cstrike/dlls/cbase.h:800 */
CWeaponCycler *GetClassPtr<CWeaponCycler>(CWeaponCycler *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <cbbc0> ../cstrike/dlls/h_cycler.cpp:344 */
inline void CWeaponCycler::CWeaponCycler(void)
{
}

/* <cbb9f> ../cstrike/dlls/weapons.h:307 */
inline void CBasePlayerWeapon::CBasePlayerWeapon(void)
{
}

/* <cbb79> ../cstrike/dlls/weapons.h:238 */
inline void CBasePlayerItem::CBasePlayerItem(void)
{
}

/* <cba71> ../cstrike/dlls/cbase.h:800 */
CCyclerSprite *GetClassPtr<CCyclerSprite>(CCyclerSprite *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <cba56> ../cstrike/dlls/h_cycler.cpp:218 */
inline void CCyclerSprite::CCyclerSprite(void)
{
}

/* <cba24> ../cstrike/dlls/cbase.h:800 */
CCyclerProbe *GetClassPtr<CCyclerProbe>(CCyclerProbe *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <cba04> ../cstrike/dlls/h_cycler.cpp:80 */
inline void CCyclerProbe::CCyclerProbe(void)
{
}

/* <cb9d2> ../cstrike/dlls/cbase.h:800 */
CGenericCycler *GetClassPtr<CGenericCycler>(CGenericCycler *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <cb9b2> ../cstrike/dlls/h_cycler.cpp:67 */
inline void CGenericCycler::CGenericCycler(void)
{
}

/* <cb93c> ../cstrike/dlls/h_cycler.cpp:35 */
inline void CCycler::CCycler(void)
{
}

/* <cb91c> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <cb8f5> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <cb85e> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <cb7ef> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <cb7b0> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <cb78b> ../cstrike/dlls/h_cycler.cpp:331 */
void CCyclerSprite::Animate(float frames)
{
}

/* <cb772> ../cstrike/dlls/h_cycler.cpp:233 */
inline void CCyclerSprite::ShouldAnimate(void)
{
}

/* <cb738> ../cstrike/dlls/h_cycler.cpp:96 */
void CCycler::GenericCyclerSpawn(char *szModel, Vector vecMin, Vector vecMax)
{
}

/* <cb6f6> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <cb61e> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <cb5d4> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <cb5a0> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <cb579> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <cb54d> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <cb52f> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <cb4ea> ../cstrike/dlls/h_cycler.cpp:189 */
void CCycler::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
}

/* <cb4c1> ../cstrike/dlls/h_cycler.cpp:255 */
void CCyclerSprite::Save(CSave &save)
{
}

/* <cb493> ../cstrike/dlls/h_cycler.cpp:255 */
void CCyclerSprite::Restore(CRestore &restore)
{
}

/* <cb46a> ../cstrike/dlls/h_cycler.cpp:61 */
void CCycler::Save(CSave &save)
{
}

/* <cb440> ../cstrike/dlls/h_cycler.cpp:443 */
void CWreckage::Save(CSave &save)
{
}

/* <cb417> ../cstrike/dlls/h_cycler.cpp:61 */
void CCycler::Restore(CRestore &restore)
{
}

/* <cb3ed> ../cstrike/dlls/h_cycler.cpp:443 */
void CWreckage::Restore(CRestore &restore)
{
}

/* <cb3cf> ../cstrike/dlls/h_cycler.cpp:151 */
void CCycler::Think(void)
{
}

/* <cb3b1> ../cstrike/dlls/h_cycler.cpp:468 */
void CWreckage::Precache(void)
{
}

/* <cb393> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <c65cc> ../cstrike/dlls/h_battery.cpp:63 */
void func_recharge(entvars_t *pev)
{
//	GetClassPtr<CRecharge>(CRecharge *a);  //    63
}

/* <c648b> ../cstrike/dlls/h_battery.cpp:66 */
void CRecharge::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    68
//	FStrEq(const char *sz1,
//		const char *sz2);  //    69
//	FStrEq(const char *sz1,
//		const char *sz2);  //    70
//	FStrEq(const char *sz1,
//		const char *sz2);  //    71
//	FStrEq(const char *sz1,
//		const char *sz2);  //    72
//	FStrEq(const char *sz1,
//		const char *sz2);  //    76
//	atoi(const char *__nptr);  //    78
}

/* <c630e> ../cstrike/dlls/h_battery.cpp:107 */
void CRecharge::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	FClassnameIs(entvars_t *pev,
//			const char *szClassname);  //   110
//	Use(CRecharge *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   107
}

/* <c62bf> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <c622e> ../cstrike/dlls/h_battery.cpp:185 */
void CRecharge::Off(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   189
//	Off(CRecharge *const this);  //   185
}

/* <c61e2> ../cstrike/dlls/h_battery.cpp:61 */
void CRecharge::Save(CSave &save)
{
//	Save(CRecharge *const this,
//		class CSave &save);  //    61
}

/* <c6196> ../cstrike/dlls/h_battery.cpp:61 */
void CRecharge::Restore(CRestore &restore)
{
//	Restore(CRecharge *const this,
//		class CRestore &restore);  //    61
}

/* <c616f> ../cstrike/dlls/h_battery.cpp:85 */
void CRecharge::Spawn(void)
{
}

/* <c6149> ../cstrike/dlls/h_battery.cpp:178 */
void CRecharge::Recharge(void)
{
}

/* <c6122> ../cstrike/dlls/h_battery.cpp:99 */
void CRecharge::Precache(void)
{
}

/* <c60fc> ../cstrike/dlls/h_battery.cpp:39 */
void CRecharge::ObjectCaps(void)
{
}

/* <c60d6> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <c60b0> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <c607b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <c604f> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <c6014> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <c5e3a> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <c5e14> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <c5dee> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <c5db9> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <c5d84> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <c5d5e> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <c5d38> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <c5d12> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <c5cec> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <c5cc5> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <c5c9f> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <c5c79> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <c5c53> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <c5c1f> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <c5bf9> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <c5bd3> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <c5b9f> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <c5b79> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <c5abb> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <c5a87> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <c5a53> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <c5a05> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <c59c3> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <c599d> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <c596b> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <c592b> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <c5905> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <c58d1> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <c58ab> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <c5885> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <c585f> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <c582d> ../cstrike/dlls/cbase.h:800 */
CRecharge *GetClassPtr<CRecharge>(CRecharge *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <c5812> ../cstrike/dlls/h_battery.cpp:30 */
inline void CRecharge::CRecharge(void)
{
}

/* <c5796> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <c576f> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <c5700> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <c56c1> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <c56a3> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <c564f> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <c560a> ../cstrike/dlls/h_battery.cpp:107 */
void CRecharge::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <c55a6> ../cstrike/dlls/h_battery.cpp:185 */
void CRecharge::Off(void)
{
}

/* <c54ba> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <c5486> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <c545f> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <c5433> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <c5415> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <c53ed> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <c53c4> ../cstrike/dlls/h_battery.cpp:61 */
void CRecharge::Save(CSave &save)
{
}

/* <c5396> ../cstrike/dlls/h_battery.cpp:61 */
void CRecharge::Restore(CRestore &restore)
{
}

/* <c0d21> ../cstrike/dlls/h_ai.cpp:164 */
/* linkage=_Z13VecCheckThrowP9entvars_sRK6VectorS1_ff */
Vector VecCheckThrow(entvars_t *pev, Vector &vecSpot1, Vector vecSpot2, float flSpeed, float flGravityAdj)
{
//	{
//		float flGravity;                                      //   166
//		Vector vecGrenadeVel;                           //   168
//		float time;                                           //   171
//		Vector vecApex;                                 //   177
//		TraceResult tr;                                       //   180
//		operator-(const Vector *const this,
//				const Vector &v);  //   168
//		Length(const Vector *const this);  //   171
//		operator-(const Vector *const this,
//				const Vector &v);  //   177
//		operator*(const Vector *const this,
//				float fl);  //   177
//		operator+(const Vector *const this,
//				const Vector &v);  //   177
//		Vector(Vector *const this,
//			const Vector &v);  //   192
//		operator*(const Vector *const this,
//				float fl);  //   172
//		Vector(Vector *const this,
//			const Vector &v);  //   195
//	}
}

/* <c0a19> ../cstrike/dlls/h_ai.cpp:78 */
/* linkage=_Z12VecCheckTossP9entvars_sRK6VectorS1_f */
Vector VecCheckToss(entvars_t *pev, Vector &vecSpot1, Vector vecSpot2, float flGravityAdj)
{
//	{
//		TraceResult tr;                                       //    80
//		Vector vecMidPoint;                             //    81
//		Vector vecApex;                                 //    82
//		Vector vecScale;                                //    83
//		Vector vecGrenadeVel;                           //    84
//		Vector vecTemp;                                 //    85
//		float flGravity;                                      //    86
//		float distance1;                                      //   119
//		float distance2;                                      //   120
//		float time1;                                          //   123
//		float time2;                                          //   124
//		Vector(Vector *const this,
//			const Vector &v);  //   153
//		operator*(const Vector *const this,
//				float fl);  //    97
//		operator+(const Vector *const this,
//				const Vector &v);  //    97
//		operator*(const Vector *const this,
//				float fl);  //    98
//		operator+(const Vector *const this,
//				const Vector &v);  //    98
//		operator-(const Vector *const this,
//				const Vector &v);  //   106
//		operator+(const Vector *const this,
//				const Vector &v);  //   106
//		operator*(const Vector *const this,
//				float fl);  //   106
//		operator+(const Vector *const this,
//				const Vector &v);  //   107
//		operator-(const Vector *const this,
//				const Vector &v);  //   133
//		operator/(const Vector *const this,
//				float fl);  //   133
//		operator*(const Vector *const this,
//				float fl);  //   138
//		operator+(const Vector *const this,
//				const Vector &v);  //   138
//		Vector(Vector *const this,
//			const Vector &v);  //   156
//	}
}

/* <c08f4> ../cstrike/dlls/h_ai.cpp:47 */
/* linkage=_Z11FBoxVisibleP9entvars_sS0_R6Vectorf */
BOOL FBoxVisible(entvars_t *pevLooker, entvars_t *pevTarget, Vector &vecTargetOrigin, float flSize)
{
//	{
//		TraceResult tr;                                       //    54
//		Vector vecLookerOrigin;                         //    55
//		operator+(const Vector *const this,
//				const Vector &v);  //    55
//		{
//			int i;                                        //    56
//			{
//				Vector vecTarget;               //    58
//				Vector(Vector *const this,
//					const Vector &v);  //    58
//			}
//		}
//	}
}

/* <c08db> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <c08b8> ../cstrike/dlls/vector.h:114 */
inline void Vector::operator/(float fl)
{
}

/* <c0891> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <c086a> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <c084c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <c07f8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <c07ae> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <c075f> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <c0703> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <c06d7> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <c06b7> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <c0699> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <bd790> (null):27581 */
void _GLOBAL__sub_I_g_ulFrameCount(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //    38
}

/* <bd76e> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <bd750> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <bd6fc> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <bd6b2> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <bd663> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <bd60f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <bd5db> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <bd5bd> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <ba5be> ../cstrike/dlls/ggrenade.cpp:1113 */
void CGrenade::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *player;                           //  1118
//	}
//	Use(CGrenade *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1113
}

/* <ba24f> ../cstrike/dlls/ggrenade.cpp:1528 */
void UseSatchelCharges(entvars_t *pevOwner, SATCHELCODE code)
{
//	{
//		edict_t *pentFind;                                   //  1530
//		edict_t *pentOwner;                                  //  1531
//		class CBaseEntity *pOwner;                           //  1536
//		Instance(entvars_t *pev);  //  1536
//		edict(CBaseEntity *const this);  //  1538
//		FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//					const char *pszName);  //  1540
//		FNullEnt(const edict_t *pent);  //  1541
//		{
//			class CBaseEntity *pEnt;                     //  1543
//			FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//						const char *pszName);  //  1554
//			Instance(edict_t *pent);  //  1543
//		}
//	}
}

/* <ba122> ../cstrike/dlls/ggrenade.cpp:1238 */
void ShootSmokeGrenade(entvars_t *pevOwner, Vector vecStart, Vector vecVelocity, float time, short unsigned int usEvent)
{
//	{
//		class CGrenade *pGrenade;                            //  1240
//		GetClassPtr<CGrenade>(CGrenade *a);  //  1240
//	}
}

/* <b9eed> ../cstrike/dlls/ggrenade.cpp:1178 */
void ShootSatchelCharge(entvars_t *pevOwner, Vector vecStart, Vector vecAngles)
{
//	{
//		class CGrenade *pGrenade;                            //  1180
//		class CBasePlayer *owner;                            //  1227
//		GetClassPtr<CGrenade>(CGrenade *a);  //  1180
//		MAKE_STRING_CLASS(const char *str,
//					entvars_t *pev);  //  1182
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  1190
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  1190
//		Instance(edict_t *pent);  //  1227
//	}
}

/* <b9dd0> ../cstrike/dlls/ggrenade.cpp:1069 */
void ShootTimed(entvars_t *pevOwner, Vector vecStart, Vector vecVelocity, float time)
{
//	{
//		class CGrenade *pGrenade;                            //  1071
//		GetClassPtr<CGrenade>(CGrenade *a);  //  1071
//	}
}

/* <b9c69> ../cstrike/dlls/ggrenade.cpp:1028 */
void ShootTimed2(entvars_t *pevOwner, Vector vecStart, Vector vecVelocity, float time, int iTeam, short unsigned int usEvent)
{
//	{
//		class CGrenade *pGrenade;                            //  1030
//		GetClassPtr<CGrenade>(CGrenade *a);  //  1030
//		operator*(const Vector *const this,
//				float fl);  //  1033
//	}
}

/* <b9b56> ../cstrike/dlls/ggrenade.cpp:1000 */
void ShootContact(entvars_t *pevOwner, Vector vecStart, Vector vecVelocity)
{
//	{
//		class CGrenade *pGrenade;                            //  1002
//		GetClassPtr<CGrenade>(CGrenade *a);  //  1002
//	}
}

/* <b9ae7> ../cstrike/dlls/ggrenade.cpp:880 */
void CGrenade::SlideTouch(CBaseEntity *pOther)
{
//	edict(CBaseEntity *const this);  //   883
//	operator*(const Vector *const this,
//			float fl);  //   891
}

/* <b9abf> ../cstrike/dlls/ggrenade.cpp:677 */
void CGrenade::PreDetonate(void)
{
}

/* <b9a59> ../cstrike/dlls/ggrenade.cpp:671 */
void CGrenade::DetonateUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <b995d> ../cstrike/dlls/ggrenade.cpp:497 */
void Smoke3_B(CGrenade *const this)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   506
//	operator+(const Vector *const this,
//			const Vector &v);  //   502
//	operator-(const Vector *const this,
//			const Vector &v);  //   502
}

/* <b97af> ../cstrike/dlls/ggrenade.cpp:420 */
void CGrenade::SG_Explode(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //   422
//		int iContents;                                        //   435
//		entvars_t *pevOwner;                                 //   438
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   458
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   460
//		{
//			int sparkCount;                               //   467
//			{
//				int i;                                //   468
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //   432
//		operator*(const Vector *const this,
//				float fl);  //   432
//		operator+(const Vector *const this,
//				const Vector &v);  //   432
//	}
}

/* <b94f3> ../cstrike/dlls/ggrenade.cpp:330 */
void CGrenade::Explode3(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //   332
//		entvars_t *pevOwner;                                 //   371
//		float damage;                                         //   382
//		int sparkCount;                                       //   415
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   345
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   358
//		VARS(edict_t *pent);  //   373
//		Instance(edict_t *pent);  //   378
//		{
//			int i;                                        //   416
//		}
//		operator*(const Vector *const this,
//				float fl);  //   342
//		operator*(const Vector *const this,
//				float fl);  //   342
//		operator+(const Vector *const this,
//				const Vector &v);  //   342
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   405
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   407
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   406
//	}
}

/* <b9159> ../cstrike/dlls/ggrenade.cpp:186 */
void CGrenade::Explode2(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //   188
//		class CHalfLifeMultiplay *mp;                        //   189
//		int iContents;                                        //   218
//		entvars_t *pevOwner;                                 //   273
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   233
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   221
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   245
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   257
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   269
//		VARS(edict_t *pent);  //   275
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   289
//		edict(CBaseEntity *const this);  //   292
//		ENTINDEX(edict_t *pEdict);  //   292
//		{
//			int sparkCount;                               //   322
//			{
//				int i;                                //   323
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //   215
//		operator*(const Vector *const this,
//				float fl);  //   215
//		operator+(const Vector *const this,
//				const Vector &v);  //   215
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   310
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   312
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   311
//	}
}

/* <b8f35> ../cstrike/dlls/ggrenade.cpp:69 */
void CGrenade::Explode(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //    71
//		int iContents;                                        //    84
//		entvars_t *pevOwner;                                 //   133
//		VARS(edict_t *pent);  //   135
//		Instance(edict_t *pent);  //   140
//		Vector(Vector *const this,
//			const Vector &v);  //   145
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   161
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   163
//		{
//			int sparkCount;                               //   179
//			{
//				int i;                                //   180
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //    81
//		operator*(const Vector *const this,
//				float fl);  //    81
//		operator+(const Vector *const this,
//				const Vector &v);  //    81
//	}
}

/* <b8e83> ../cstrike/dlls/ggrenade.cpp:60 */
void CGrenade::Explode(Vector vecSrc, Vector vecAim)
{
//	{
//		TraceResult tr;                                       //    62
//		operator+(const Vector *const this,
//				const Vector &v);  //    63
//	}
}

/* <b8dad> ../cstrike/dlls/ggrenade.cpp:52 */
void grenade(entvars_t *pev)
{
//	GetClassPtr<CGrenade>(CGrenade *a);  //    52
}

/* <b8d7a> ../cstrike/dlls/cbase.h:800 */
CGrenade *GetClassPtr<CGrenade>(CGrenade *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <b855a> ../cstrike/dlls/ggrenade.cpp:1300 */
void C4Think(CGrenade *const this)
{
//	{
//		class CBasePlayer *pBombOwner;                       //  1394
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1379
//		{
//			class CBaseEntity *pBombTarget;              //  1387
//			Instance(edict_t *pent);  //  1387
//			Instance(edict_t *pent);  //  1390
//		}
//		Instance(edict_t *pent);  //  1394
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  1401
//	}
//	GET_PRIVATE(edict_t *pent);  //  1417
//	{
//		int iOnGround;                                        //  1419
//		GET_PRIVATE(edict_t *pent);  //  1428
//		GET_PRIVATE(edict_t *pent);  //  1429
//		GET_PRIVATE(edict_t *pent);  //  1432
//	}
//	GET_PRIVATE(edict_t *pent);  //  1444
//	GET_PRIVATE(edict_t *pent);  //  1447
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1453
//	edict(CBaseEntity *const this);  //  1456
//	ENTINDEX(edict_t *pEdict);  //  1456
//	edict(CBaseEntity *const this);  //  1465
//	edict(CBaseEntity *const this);  //  1465
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1470
//	GET_PRIVATE(edict_t *pent);  //  1476
//	GET_PRIVATE(edict_t *pent);  //  1477
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1479
//	{
//		class CBasePlayer *pPlayer;                          //  1485
//		GET_PRIVATE(edict_t *pent);  //  1485
//	}
//	GET_PRIVATE(edict_t *pent);  //  1494
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1497
//	GET_PRIVATE(edict_t *pent);  //  1510
//	GET_PRIVATE(edict_t *pent);  //  1512
//	GET_PRIVATE(edict_t *pent);  //  1513
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1348
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  1358
//	AnnounceFlashInterval(float interval,
//				float offset);  //  1334
//	AnnounceFlashInterval(float interval,
//				float offset);  //  1339
//	AnnounceFlashInterval(float interval,
//				float offset);  //  1329
//	AnnounceFlashInterval(float interval,
//				float offset);  //  1324
//	AnnounceFlashInterval(float interval,
//				float offset);  //  1319
}

/* <b8467> ../cstrike/dlls/ggrenade.cpp:664 */
void CGrenade::Killed(entvars_t *pevAttacker, int iGib)
{
//	Detonate(CGrenade *const this);  //   666
}

/* <b8009> ../cstrike/dlls/ggrenade.cpp:752 */
void Detonate2(CGrenade *const this)
{
//	{
//		TraceResult tr;                                       //   754
//		Vector vecSpot;                                 //   755
//		Explode2(CGrenade *const this,
//			TraceResult *pTrace,
//			int bitsDamageType);  //   760
//		operator+(const Vector *const this,
//				const Vector &v);  //   757
//		operator+(const Vector *const this,
//				const Vector &v);  //   758
//	}
}

/* <b7c81> ../cstrike/dlls/ggrenade.cpp:764 */
void Detonate3(CGrenade *const this)
{
//	{
//		TraceResult tr;                                       //   766
//		Vector vecSpot;                                 //   767
//		operator+(const Vector *const this,
//				const Vector &v);  //   769
//		operator+(const Vector *const this,
//				const Vector &v);  //   770
//		Explode3(CGrenade *const this,
//			TraceResult *pTrace,
//			int bitsDamageType);  //   772
//	}
}

/* <b7b20> ../cstrike/dlls/ggrenade.cpp:904 */
void CGrenade::BounceSound(void)
{
//	BounceSound(CGrenade *const this);  //   904
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   907
}

/* <b7956> ../cstrike/dlls/ggrenade.cpp:780 */
void CGrenade::ExplodeTouch(CBaseEntity *pOther)
{
//	{
//		TraceResult tr;                                       //   782
//		Vector vecSpot;                                 //   783
//		edict(CBaseEntity *const this);  //   785
//		Normalize(const Vector *const this);  //   787
//		operator*(const Vector *const this,
//				float fl);  //   787
//		operator-(const Vector *const this,
//				const Vector &v);  //   787
//		Normalize(const Vector *const this);  //   788
//		operator*(const Vector *const this,
//				float fl);  //   788
//		operator+(const Vector *const this,
//				const Vector &v);  //   788
//	}
}

/* <b789e> ../cstrike/dlls/ggrenade.cpp:686 */
void CGrenade::Detonate(void)
{
//	{
//		TraceResult tr;                                       //   688
//		Vector vecSpot;                                 //   689
//		operator+(const Vector *const this,
//				const Vector &v);  //   691
//		operator+(const Vector *const this,
//				const Vector &v);  //   692
//	}
}

/* <b786c> ../cstrike/dlls/ggrenade.cpp:686 */
void CGrenade::Detonate(void)
{
//	{
//		TraceResult tr;                                       //   688
//		Vector vecSpot;                                 //   689
//	}
}

/* <b7645> ../cstrike/dlls/ggrenade.cpp:69 */
void CGrenade::Explode(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //    71
//		int iContents;                                        //    84
//		entvars_t *pevOwner;                                 //   133
//		VARS(edict_t *pent);  //   135
//		Instance(edict_t *pent);  //   140
//		Vector(Vector *const this,
//			const Vector &v);  //   145
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   161
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   163
//		{
//			int sparkCount;                               //   179
//			{
//				int i;                                //   180
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //    81
//		operator*(const Vector *const this,
//				float fl);  //    81
//		operator+(const Vector *const this,
//				const Vector &v);  //    81
//	}
}

/* <b7355> ../cstrike/dlls/ggrenade.cpp:698 */
void CGrenade::SG_Detonate(void)
{
//	{
//		TraceResult tr;                                       //   700
//		Vector vecSpot;                                 //   701
//		edict_t *pentFind;                                   //   713
//		operator+(const Vector *const this,
//				const Vector &v);  //   703
//		operator+(const Vector *const this,
//				const Vector &v);  //   704
//		Instance(edict_t *pent);  //   707
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   710
//		FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//					const char *pszName);  //   714
//		FNullEnt(const edict_t *pent);  //   715
//		{
//			class CBaseEntity *pEnt;                     //   717
//			Instance(edict_t *pent);  //   717
//			{
//				float fDistance;                      //   720
//				operator-(const Vector *const this,
//						const Vector &v);  //   722
//				Length(const Vector *const this);  //   722
//			}
//			FIND_ENTITY_BY_CLASSNAME(edict_t *entStart,
//						const char *pszName);  //   727
//		}
//	}
}

/* <b7209> ../cstrike/dlls/ggrenade.cpp:812 */
void CGrenade::BounceTouch(CBaseEntity *pOther)
{
//	{
//		Vector vecTestVelocity;                         //   824
//		Length(const Vector *const this);  //   871
//		operator*(const Vector *const this,
//				float fl);  //   820
//		operator*(const Vector *const this,
//				float fl);  //   848
//		Length(const Vector *const this);  //   833
//		ENT(EOFFSET eoffset);  //   865
//	}
}

/* <b7101> ../cstrike/dlls/ggrenade.cpp:794 */
void CGrenade::DangerSoundThink(void)
{
//	DangerSoundThink(CGrenade *const this);  //   794
}

/* <b70e8> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <b7010> ../cstrike/dlls/ggrenade.cpp:985 */
void CGrenade::Spawn(void)
{
//	MAKE_STRING_CLASS(const char *str,
//				entvars_t *pev);  //   989
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   994
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   994
}

/* <b6f28> ../cstrike/dlls/ggrenade.cpp:919 */
void CGrenade::TumbleThink(void)
{
//	TumbleThink(CGrenade *const this);  //   919
}

/* <b6ed7> ../cstrike/dlls/ggrenade.cpp:1579 */
void CGrenade::Save(CSave &save)
{
//	Save(CGrenade *const this,
//		class CSave &save);  //  1579
}

/* <b6e86> ../cstrike/dlls/ggrenade.cpp:1579 */
void CGrenade::Restore(CRestore &restore)
{
//	Restore(CGrenade *const this,
//		class CRestore &restore);  //  1579
}

/* <b6d22> ../cstrike/dlls/ggrenade.cpp:591 */
void CGrenade::SG_Smoke(void)
{
//	{
//		int iMaxSmokePuffs;                                   //   632
//		float flSmokeInterval;                                //   633
//		{
//			Vector origin;                          //   599
//			Vector angle;                           //   599
//			float x_old;                                  //   605
//			float y_old;                                  //   605
//			float R_angle;                                //   605
//			operator*(const Vector *const this,
//					float fl);  //   603
//		}
//		operator+(const Vector *const this,
//				const Vector &v);  //   595
//		operator-(const Vector *const this,
//				const Vector &v);  //   595
//	}
}

/* <b6c26> ../cstrike/dlls/ggrenade.cpp:475 */
void Smoke3_C(CGrenade *const this)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   484
//	operator+(const Vector *const this,
//			const Vector &v);  //   480
//	operator-(const Vector *const this,
//			const Vector &v);  //   480
}

/* <b6b2a> ../cstrike/dlls/ggrenade.cpp:520 */
void Smoke3_A(CGrenade *const this)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   529
//	operator+(const Vector *const this,
//			const Vector &v);  //   525
//	operator-(const Vector *const this,
//			const Vector &v);  //   525
}

/* <b6a2e> ../cstrike/dlls/ggrenade.cpp:544 */
void Smoke2(CGrenade *const this)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   553
//	operator+(const Vector *const this,
//			const Vector &v);  //   549
//	operator-(const Vector *const this,
//			const Vector &v);  //   549
}

/* <b6932> ../cstrike/dlls/ggrenade.cpp:567 */
void CGrenade::Smoke(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   575
//	operator+(const Vector *const this,
//			const Vector &v);  //   571
//	operator-(const Vector *const this,
//			const Vector &v);  //   571
}

/* <b68e2> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <b67e7> ../cstrike/dlls/ggrenade.cpp:949 */
void CGrenade::SG_TumbleThink(void)
{
//	operator*(const Vector ::SG_TumbleThink(//			float fl);  //   978
//	operator*(const Vector *const this,
//			float fl);  //   960
//	operator*(const Vector *const this,
//			float fl);  //   968
//	operator+(const Vector *const this,
//			const Vector &v);  //   968
}

/* <b67b1> ../cstrike/dlls/ggrenade.cpp:1523 */
void CGrenade::C4Touch(CBaseEntity *pOther)
{
}

/* <b678b> ../cstrike/dlls/weapons.h:101 */
void CGrenade::ObjectCaps(void)
{
}

/* <b6765> ../cstrike/dlls/weapons.h:99 */
void CGrenade::BloodColor(void)
{
}

/* <b673f> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <b6719> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <b66f3> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <b66cd> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <b66a7> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <b6671> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <b6645> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <b6608> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <b6422> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <b63fc> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <b63d6> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <b63a0> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <b636a> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <b6344> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <b631e> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <b62f8> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <b62d2> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <b62aa> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <b6284> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <b625e> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <b622a> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <b6204> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <b61de> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <b61aa> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <b6184> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <b60c6> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <b6092> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <b605e> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <b5ffd> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <b5fbb> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <b5f95> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <b5f63> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <b5f2f> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <b5efb> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <b5ed5> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <b5eaf> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <b5e89> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <b5e63> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <b5dd5> ../cstrike/dlls/ggrenade.cpp:69 */
void CGrenade::Explode(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //    71
//		int iContents;                                        //    84
//		entvars_t *pevOwner;                                 //   133
//		{
//			int sparkCount;                               //   179
//			{
//				int i;                                //   180
//			}
//		}
//	}
}

/* <b5d66> ../cstrike/dlls/ggrenade.cpp:330 */
void CGrenade::Explode3(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //   332
//		entvars_t *pevOwner;                                 //   371
//		float damage;                                         //   382
//		int sparkCount;                                       //   415
//		{
//			int i;                                        //   416
//		}
//	}
}

/* <b5ce3> ../cstrike/dlls/ggrenade.cpp:186 */
void CGrenade::Explode2(TraceResult *pTrace, int bitsDamageType)
{
//	{
//		float flRndSound;                                     //   188
//		class CHalfLifeMultiplay *mp;                        //   189
//		int iContents;                                        //   218
//		entvars_t *pevOwner;                                 //   273
//		{
//			int sparkCount;                               //   322
//			{
//				int i;                                //   323
//			}
//		}
//	}
}

/* <b5c8c> ../cstrike/dlls/ggrenade.cpp:1113 */
void CGrenade::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBasePlayer *player;                           //  1118
//	}
}

/* <b5c6c> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <b5c4d> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <b5c2d> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <b5bfe> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <b5bca> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <b5bac> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <b5b91> ../cstrike/dlls/weapons.h:56 */
inline void CGrenade::CGrenade(void)
{
}

/* <b5b50> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <b5b29> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <b5a92> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <b5a23> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <b59e4> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <b59cd> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <b59bf> ../game_shared/bot/bot_util.h:317 */
inline bool IsZombieGame(void)
{
}

/* <b5999> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <b5956> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <b592f> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <b5916> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <b58f8> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <b58a9> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <b586e> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <b5829> ../cstrike/dlls/util.h:80 */
inline edict_t *FIND_ENTITY_BY_CLASSNAME(edict_t *entStart, const char *pszName)
{
}

/* <b5804> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <b57b1> ../cstrike/dlls/ggrenade.cpp:904 */
void CGrenade::BounceSound(void)
{
}

/* <b5701> ../cstrike/dlls/ggrenade.cpp:1284 */
void AnnounceFlashInterval(float interval, float offset)
{
}

/* <b56af> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <b5688> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <b566f> ../cstrike/dlls/ggrenade.cpp:794 */
void CGrenade::DangerSoundThink(void)
{
}

/* <b5656> ../cstrike/dlls/ggrenade.cpp:919 */
void CGrenade::TumbleThink(void)
{
}

/* <b560c> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <b55d8> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <b55b1> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <b5585> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <b5565> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <b5547> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <b551f> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <b54f5> ../cstrike/dlls/ggrenade.cpp:1579 */
void CGrenade::Save(CSave &save)
{
}

/* <b54c6> ../cstrike/dlls/ggrenade.cpp:1579 */
void CGrenade::Restore(CRestore &restore)
{
}

/* <ada23> ../cstrike/dlls/gamerules.cpp:157 */
/* linkage=_Z16InstallGameRulesv */
CGameRules *InstallGameRules(void)
{
}

/* <ad9a3> ../cstrike/dlls/gamerules.cpp:75 */
void CGameRules::CanHavePlayerItem(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
//	{
//		class CCSBotManager *ctrl;                           //    85
//	}
//	CanHavePlayerItem(CGameRules *const this,
//				class CBasePlayer *pPlayer,
//				class CBasePlayerItem *pWeapon);  //    75
}

/* <ad93d> ../cstrike/dlls/gamerules.cpp:36 */
void CGameRules::CanHaveAmmo(CBasePlayer *pPlayer, const char *pszAmmoName, int iMaxCarry)
{
//	{
//		int iAmmoIndex;                                       //    38
//	}
}

/* <ad89d> ../cstrike/dlls/gamerules.cpp:59 */
void CGameRules::GetPlayerSpawnSpot(CBasePlayer *pPlayer)
{
//	{
//		edict_t *pentSpawnSpot;                              //    61
//		VARS(edict_t *pent);  //    66
//		VARS(edict_t *pent);  //    63
//		operator+(const Vector *const this,
//				const Vector &v);  //    63
//	}
}

/* <ad85d> ../cstrike/dlls/gamerules.cpp:119 */
void CGameRules::RefreshSkillData(void)
{
//	{
//		int iSkill;                                           //   121
//	}
}

/* <ad837> ../cstrike/dlls/gamerules.h:192 */
void CGameRules::CheckMapConditions(void)
{
}

/* <ad7eb> ../cstrike/dlls/gamerules.h:187 */
void CGameRules::IsFreezePeriod(void)
{
}

/* <ad7c5> ../cstrike/dlls/gamerules.h:186 */
void CGameRules::EndMultiplayerGame(void)
{
}

/* <ad79f> ../cstrike/dlls/gamerules.h:180 */
void CGameRules::PlayTextureSounds(void)
{
}

/* <ad76b> ../cstrike/dlls/gamerules.h:177 */
void CGameRules::SetDefaultPlayerTeam(CBasePlayer *pPlayer)
{
}

/* <ad70d> ../cstrike/dlls/gamerules.h:176 */
void CGameRules::ChangePlayerTeam(CBasePlayer *pPlayer, const char *pTeamName, BOOL bKill, BOOL bGib)
{
}

/* <ad6d9> ../cstrike/dlls/gamerules.h:175 */
void CGameRules::IsValidTeam(const char *pTeamName)
{
}

/* <ad6a5> ../cstrike/dlls/gamerules.h:174 */
void CGameRules::GetIndexedTeamName(int teamIndex)
{
}

/* <ad671> ../cstrike/dlls/gamerules.h:173 */
void CGameRules::GetTeamIndex(const char *pTeamName)
{
}

/* <ad64b> ../cstrike/dlls/gamerules.h:162 */
void CGameRules::FlHEVChargerRechargeTime(void)
{
}

/* <ad585> ../cstrike/dlls/gamerules.h:123 */
void CGameRules::ClientCommand_DeadOrAlive(CBasePlayer *pPlayer, const char *pcmd)
{
}

/* <ad55f> ../cstrike/dlls/gamerules.h:122 */
void CGameRules::AllowAutoTargetCrosshair(void)
{
}

/* <ad51d> ../cstrike/dlls/gamerules.h:113 */
void CGameRules::ShouldAutoAim(CBasePlayer *pPlayer, edict_t *target)
{
}

/* <ad4db> ../cstrike/dlls/gamerules.h:112 */
void CGameRules::FPlayerCanTakeDamage(CBasePlayer *pPlayer, CBaseEntity *pAttacker)
{
}

/* <ad4a7> ../cstrike/dlls/gamerules.h:108 */
void CGameRules::UpdateGameMode(CBasePlayer *pPlayer)
{
}

/* <ad45b> ../cstrike/dlls/gamerules.h:100 */
void CGameRules::IsTeamplay(void)
{
}

/* <ad43d> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <ad40c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <ad3e5> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <ad3be> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <ad3a5> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <ad35e> ../cstrike/dlls/gamerules.cpp:75 */
void CGameRules::CanHavePlayerItem(CBasePlayer *pPlayer, class CBasePlayerItem *pWeapon)
{
//	{
//		class CCSBotManager *ctrl;                           //    85
//	}
}

/* <ad345> ../cstrike/dlls/weapons.h:293 */
inline void CBasePlayerItem::iMaxAmmo1(void)
{
}

/* <ad327> ../cstrike/dlls/weapons.h:292 */
inline void CBasePlayerItem::pszAmmo1(void)
{
}

/* <ad309> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <ad2ba> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <ad25c> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <ad20d> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <ad1e6> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <ad188> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <ad14f> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <ad123> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <ad0fb> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <9c900> ../cstrike/dlls/game.cpp:500 */
/* linkage=_Z11GameDLLInitv */
void GameDLLInit(void)
{
}

/* <9c8e2> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <9c8be> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <9c895> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <9c86d> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <9c843> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <9c813> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <9c7ba> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <9c761> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <9c708> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <9c6c9> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <9c69f> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <9c646> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <9c5f1> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <9c5ca> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <9c5a3> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <9c58a> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <9c56c> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <9c54e> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <9c530> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <9c4e1> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <9c497> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <9c45c> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <9c40d> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <9c3cc> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <9c393> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <9c367> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <9c33f> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <9c315> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <9c2ed> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <8fe9c> (null):27581 */
void _GLOBAL__sub_I__ZN9CFuncTank10m_SaveDataE(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  1043
}

/* <8fdcd> ../cstrike/dlls/func_tank.cpp:988 */
void func_tankcontrols(entvars_t *pev)
{
//	GetClassPtr<CFuncTankControls>(CFuncTankControls *a);  //   988
}

/* <8fcfe> ../cstrike/dlls/func_tank.cpp:930 */
void func_tankmortar(entvars_t *pev)
{
//	GetClassPtr<CFuncTankMortar>(CFuncTankMortar *a);  //   930
}

/* <8fc2f> ../cstrike/dlls/func_tank.cpp:893 */
void func_tankrocket(entvars_t *pev)
{
//	GetClassPtr<CFuncTankRocket>(CFuncTankRocket *a);  //   893
}

/* <8fc03> ../cstrike/dlls/func_tank.cpp:821 */
void CFuncTankLaser::GetLaser(void)
{
//	{
//		edict_t *pentLaser;                                  //   826
//	}
}

/* <8fb34> ../cstrike/dlls/func_tank.cpp:785 */
void func_tanklaser(entvars_t *pev)
{
//	GetClassPtr<CFuncTankLaser>(CFuncTankLaser *a);  //   785
}

/* <8fa65> ../cstrike/dlls/func_tank.cpp:724 */
void func_tank(entvars_t *pev)
{
//	GetClassPtr<CFuncTankGun>(CFuncTankGun *a);  //   724
}

/* <8fa1b> ../cstrike/dlls/func_tank.cpp:712 */
void CFuncTank::StopRotSound(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   715
}

/* <8f9c0> ../cstrike/dlls/func_tank.cpp:703 */
void CFuncTank::StartRotSound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   708
}

/* <8f830> ../cstrike/dlls/func_tank.cpp:684 */
void CFuncTank::TankTrace(Vector &vecStart, Vector &vecForward, Vector &vecSpread, TraceResult &tr)
{
//	{
//		float x;                                              //   687
//		float y;                                              //   687
//		float z;                                              //   687
//		Vector vecDir;                                  //   693
//		Vector vecEnd;                                  //   696
//		operator*(float fl,
//				const Vector &v);  //   695
//		operator*(float fl,
//				const Vector &v);  //   695
//		operator+(const Vector *const this,
//				const Vector &v);  //   695
//		operator+(const Vector *const this,
//				const Vector &v);  //   695
//		operator*(const Vector *const this,
//				float fl);  //   698
//		operator+(const Vector *const this,
//				const Vector &v);  //   698
//		edict(CBaseEntity *const this);  //   699
//	}
}

/* <8f809> ../cstrike/dlls/func_tank.cpp:845 */
void CFuncTankLaser::Think(void)
{
}

/* <8f717> ../cstrike/dlls/func_tank.cpp:477 */
void CFuncTank::Think(void)
{
//	fabs(double __x);  //   482
//	fabs(double __x);  //   482
//	StartRotSound(CFuncTank *const this);  //   483
//	StopRotSound(CFuncTank *const this);  //   485
}

/* <8f6fe> ../cstrike/dlls/func_tank.cpp:703 */
void CFuncTank::StartRotSound(void)
{
}

/* <8efe4> ../cstrike/dlls/func_tank.cpp:488 */
void CFuncTank::TrackTarget(void)
{
//	{
//		TraceResult tr;                                       //   490
//		edict_t *pPlayer;                                    //   491
//		BOOL updateTime;                                      //   492
//		BOOL lineOfSight;                                     //   492
//		Vector angles;                                  //   493
//		Vector direction;                               //   493
//		Vector targetPosition;                          //   493
//		Vector barrelEnd;                               //   493
//		edict_t *pTarget;                                    //   494
//		float distY;                                          //   578
//		float distX;                                          //   592
//		edict(CBaseEntity *const this);  //   491
//		{
//			float range;                                  //   524
//			IsActive(CFuncTank *const this);  //   506
//			FNullEnt(const edict_t *pent);  //   511
//			BarrelPosition(CFuncTank *const this);  //   522
//			operator+(const Vector *const this,
//					const Vector &v);  //   523
//			operator-(const Vector *const this,
//					const Vector &v);  //   524
//			Length(const Vector *const this);  //   524
//			InRange(CFuncTank *const this,
//				float range);  //   526
//			edict(CBaseEntity *const this);  //   529
//			{
//				class CBaseEntity *pInstance;        //   537
//				InRange(CFuncTank *const this,
//					float range);  //   538
//				Instance(edict_t *pent);  //   537
//			}
//			operator-(const Vector *const this,
//					const Vector &v);  //   548
//			Length(const Vector *const this);  //   553
//			IsActive(CFuncTank *const this);  //   513
//		}
//		CanFire(CFuncTank *const this);  //   603
//		fabs(double __x);  //   603
//		fabs(double __x);  //   603
//		{
//			BOOL fire;                                    //   605
//			Vector forward;                         //   606
//			UTIL_MakeVectorsPrivate(Vector &vecAngles,
//						float *p_vForward,
//						float *p_vRight,
//						float *p_vUp);  //   607
//			{
//				float length;                         //   611
//				Length(const Vector *const this);  //   611
//				operator*(const Vector *const this,
//						float fl);  //   612
//				edict(CBaseEntity *const this);  //   612
//				operator+(const Vector *const this,
//						const Vector &v);  //   612
//			}
//			BarrelPosition(CFuncTank *const this);  //   621
//		}
//	}
}

/* <8ef79> ../cstrike/dlls/func_tank.cpp:632 */
void CFuncTank::AdjustAnglesForBarrel(Vector &angles, float distance)
{
//	{
//		float r2;                                             //   634
//		float d2;                                             //   634
//	}
}

/* <8ef2d> ../cstrike/dlls/func_tank.cpp:466 */
void CFuncTank::InRange(float range)
{
//	InRange(CFuncTank *const this,
//		float range);  //   466
}

/* <8ef04> ../cstrike/dlls/func_tank.cpp:459 */
void CFuncTank::FindTarget(edict_t *pPlayer)
{
}

/* <8ee12> ../cstrike/dlls/func_tank.cpp:424 */
void CFuncTank::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	IsActive(CFuncTank *const this);  //   448
//	IsActive(CFuncTank *const this);  //   451
//	TankDeactivate(CFuncTank *const this);  //   452
//	TankActivate(CFuncTank *const this);  //   454
}

/* <8edf9> ../cstrike/dlls/func_tank.cpp:712 */
void CFuncTank::StopRotSound(void)
{
}

/* <8ec15> ../cstrike/dlls/func_tank.cpp:398 */
void CFuncTank::ControllerPostFrame(void)
{
//	{
//		Vector vecForward;                              //   407
//		UTIL_MakeVectorsPrivate(Vector &vecAngles,
//					float *p_vForward,
//					float *p_vRight,
//					float *p_vUp);  //   408
//		BarrelPosition(CFuncTank *const this);  //   412
//	}
}

/* <8ebde> ../cstrike/dlls/func_tank.cpp:372 */
void CFuncTank::StopControl(void)
{
//	IsActive(CFuncTank *const this);  //   393
}

/* <8eba8> ../cstrike/dlls/func_tank.cpp:342 */
void CFuncTank::StartControl(CBasePlayer *pController)
{
}

/* <8ea25> ../cstrike/dlls/func_tank.cpp:177 */
void CFuncTank::Spawn(void)
{
//	IsActive(CFuncTank *const this);  //   188
//	BarrelPosition(CFuncTank *const this);  //   191
}

/* <8e9ea> ../cstrike/dlls/func_tank.cpp:79 */
inline void CFuncTank::BarrelPosition(void)
{
//	{
//		Vector forward;                                 //    81
//		Vector right;                                   //    81
//		Vector up;                                      //    81
//	}
}

/* <8e8ca> ../cstrike/dlls/func_tank.cpp:809 */
void CFuncTankLaser::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   811
//	KeyValue(CFuncTank *const this,
//		KeyValueData *pkvd);  //   817
//	KeyValue(CFuncTankLaser *const this,
//		KeyValueData *pkvd);  //   809
}

/* <8e790> ../cstrike/dlls/func_tank.cpp:933 */
void CFuncTankMortar::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   935
//	KeyValue(CFuncTank *const this,
//		KeyValueData *pkvd);  //   941
//	KeyValue(CFuncTankMortar *const this,
//		KeyValueData *pkvd);  //   933
}

/* <8e736> ../cstrike/dlls/func_tank.cpp:895 */
void CFuncTankRocket::Precache(void)
{
//	Precache(CFuncTank *const this);  //   898
}

/* <8e687> ../cstrike/dlls/func_tank.cpp:214 */
void CFuncTank::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   216
//	FStrEq(const char *sz1,
//		const char *sz2);  //   221
//	atof(const char *__nptr);  //   218
//	atof(const char *__nptr);  //   223
}

/* <8e19e> ../cstrike/dlls/func_tank.cpp:214 */
void CFuncTank::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   226
//	FStrEq(const char *sz1,
//		const char *sz2);  //   231
//	FStrEq(const char *sz1,
//		const char *sz2);  //   236
//	FStrEq(const char *sz1,
//		const char *sz2);  //   241
//	FStrEq(const char *sz1,
//		const char *sz2);  //   246
//	FStrEq(const char *sz1,
//		const char *sz2);  //   251
//	FStrEq(const char *sz1,
//		const char *sz2);  //   256
//	FStrEq(const char *sz1,
//		const char *sz2);  //   261
//	FStrEq(const char *sz1,
//		const char *sz2);  //   266
//	FStrEq(const char *sz1,
//		const char *sz2);  //   271
//	FStrEq(const char *sz1,
//		const char *sz2);  //   276
//	FStrEq(const char *sz1,
//		const char *sz2);  //   281
//	FStrEq(const char *sz1,
//		const char *sz2);  //   286
//	FStrEq(const char *sz1,
//		const char *sz2);  //   291
//	FStrEq(const char *sz1,
//		const char *sz2);  //   296
//	FStrEq(const char *sz1,
//		const char *sz2);  //   301
//	FStrEq(const char *sz1,
//		const char *sz2);  //   306
//	FStrEq(const char *sz1,
//		const char *sz2);  //   311
//	FStrEq(const char *sz1,
//		const char *sz2);  //   316
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   322
//	atof(const char *__nptr);  //   228
//	atof(const char *__nptr);  //   238
//	atof(const char *__nptr);  //   258
//	atof(const char *__nptr);  //   233
//	atof(const char *__nptr);  //   243
//	atof(const char *__nptr);  //   248
//	atof(const char *__nptr);  //   253
//	atof(const char *__nptr);  //   288
//	atof(const char *__nptr);  //   263
//	atof(const char *__nptr);  //   268
//	atoi(const char *__nptr);  //   293
//	atoi(const char *__nptr);  //   298
//	atoi(const char *__nptr);  //   303
//	atof(const char *__nptr);  //   308
//	atof(const char *__nptr);  //   313
}

/* <8e10d> ../cstrike/dlls/func_tank.cpp:793 */
void CFuncTankLaser::Restore(CRestore &restore)
{
//	Restore(CFuncTank *const this,
//		class CRestore &restore);  //   793
//	Restore(CFuncTankLaser *const this,
//		class CRestore &restore);  //   793
}

/* <8e07c> ../cstrike/dlls/func_tank.cpp:793 */
void CFuncTankLaser::Save(CSave &save)
{
//	Save(CFuncTank *const this,
//		class CSave &save);  //   793
//	Save(CFuncTankLaser *const this,
//		class CSave &save);  //   793
}

/* <8e02d> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <8df51> ../cstrike/dlls/func_tank.cpp:854 */
void CFuncTankLaser::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   856
//		TraceResult tr;                                       //   857
//		GetLaser(CFuncTankLaser *const this);  //   859
//	}
//	Fire(CFuncTankLaser *const this,
//		const Vector &barrelEnd,
//		const Vector &forward,
//		entvars_t *pevAttacker);  //   854
}

/* <8deed> ../cstrike/dlls/func_tank.cpp:795 */
void CFuncTankLaser::Activate(void)
{
//	GetLaser(CFuncTankLaser *const this);  //   797
//	Activate(CFuncTankLaser *const this);  //   795
}

/* <8dd79> ../cstrike/dlls/func_tank.cpp:821 */
void CFuncTankLaser::GetLaser(void)
{
//	{
//		edict_t *pentLaser;                                  //   826
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   828
//		FNullEnt(const edict_t *pent);  //   829
//		FClassnameIs(edict_t *pent,
//				const char *szClassname);  //   832
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   838
//		Instance(edict_t *pent);  //   834
//	}
}

/* <8dca8> ../cstrike/dlls/func_tank.cpp:329 */
void CFuncTank::OnControls(entvars_t *pevTest)
{
//	{
//		Vector offset;                                  //   334
//	}
//	OnControls(CFuncTank *const this,
//			entvars_t *pevTest);  //   329
}

/* <8dbfa> ../cstrike/dlls/func_tank.cpp:945 */
void CFuncTankMortar::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int bulletCount;                                      //   949
//	}
//	Fire(CFuncTankMortar *const this,
//		const Vector &barrelEnd,
//		const Vector &forward,
//		entvars_t *pevAttacker);  //   945
}

/* <8da65> ../cstrike/dlls/func_tank.cpp:684 */
void CFuncTank::TankTrace(Vector &vecStart, Vector &vecForward, Vector &vecSpread, TraceResult &tr)
{
//	{
//		float x;                                              //   687
//		float y;                                              //   687
//		float z;                                              //   687
//		Vector vecDir;                                  //   693
//		Vector vecEnd;                                  //   696
//		operator*(float fl,
//				const Vector &v);  //   695
//		operator*(float fl,
//				const Vector &v);  //   695
//		operator+(const Vector *const this,
//				const Vector &v);  //   695
//		operator+(const Vector *const this,
//				const Vector &v);  //   695
//		operator*(const Vector *const this,
//				float fl);  //   698
//		operator+(const Vector *const this,
//				const Vector &v);  //   698
//		edict(CBaseEntity *const this);  //   699
//	}
}

/* <8d867> ../cstrike/dlls/func_tank.cpp:726 */
void CFuncTankGun::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   728
//	}
//	Fire(CFuncTankGun *const this,
//		const Vector &barrelEnd,
//		const Vector &forward,
//		entvars_t *pevAttacker);  //   726
}

/* <8d7b6> ../cstrike/dlls/func_tank.cpp:903 */
void CFuncTankRocket::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   905
//		{
//			int bulletCount;                              //   909
//			{
//				class CBaseEntity *pRocket;          //   914
//			}
//		}
//	}
//	Fire(CFuncTankRocket *const this,
//		const Vector &barrelEnd,
//		const Vector &forward,
//		entvars_t *pevAttacker);  //   903
}

/* <8d76a> ../cstrike/dlls/func_tank.cpp:164 */
void CFuncTank::Save(CSave &save)
{
//	Save(CFuncTank *const this,
//		class CSave &save);  //   164
}

/* <8d71d> ../cstrike/dlls/func_tank.cpp:995 */
void CFuncTankControls::Save(CSave &save)
{
//	Save(CFuncTankControls *const this,
//		class CSave &save);  //   995
}

/* <8d6d1> ../cstrike/dlls/func_tank.cpp:164 */
void CFuncTank::Restore(CRestore &restore)
{
//	Restore(CFuncTank *const this,
//		class CRestore &restore);  //   164
}

/* <8d684> ../cstrike/dlls/func_tank.cpp:995 */
void CFuncTankControls::Restore(CRestore &restore)
{
//	Restore(CFuncTankControls *const this,
//		class CRestore &restore);  //   995
}

/* <8d64d> ../cstrike/dlls/func_tank.cpp:202 */
void CFuncTank::Precache(void)
{
//	Precache(CFuncTank *const this);  //   202
}

/* <8d4ad> ../cstrike/dlls/func_tank.cpp:656 */
void CFuncTank::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		class CSprite *pSprite;                              //   662
//		AnimateAndDie(CSprite *const this,
//				float framerate);  //   663
//		SetTransparency(CSprite *const this,
//				int rendermode,
//				int r,
//				int g,
//				int b,
//				int a,
//				int fx);  //   664
//		SetScale(CSprite *const this,
//			float scale);  //   666
//	}
//	{
//		class CSprite *pSprite;                              //   670
//		SetTransparency(CSprite *const this,
//				int rendermode,
//				int r,
//				int g,
//				int b,
//				int a,
//				int fx);  //   672
//		AnimateAndDie(CSprite *const this,
//				float framerate);  //   671
//		SetScale(CSprite *const this,
//			float scale);  //   673
//	}
}

/* <8d39a> ../cstrike/dlls/func_tank.cpp:1012 */
void CFuncTankControls::Think(void)
{
//	{
//		edict_t *pTarget;                                    //  1014
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //  1018
//		FNullEnt(const edict_t *pent);  //  1019
//		FNullEnt(const edict_t *pent);  //  1021
//		Instance(edict_t *pent);  //  1027
//	}
}

/* <8d373> ../cstrike/dlls/func_tank.cpp:1030 */
void CFuncTankControls::Spawn(void)
{
}

/* <8d310> ../cstrike/dlls/func_tank.cpp:1003 */
void CFuncTankControls::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <8d2ea> ../cstrike/dlls/func_tank.cpp:997 */
void CFuncTankControls::ObjectCaps(void)
{
}

/* <8d2c4> ../cstrike/dlls/func_tank.cpp:66 */
void CFuncTank::ObjectCaps(void)
{
}

/* <8d28f> ../cstrike/dlls/func_tank.cpp:57 */
void CFuncTank::UpdateTargetPosition(CBaseEntity *pTarget)
{
}

/* <8d269> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <8d22e> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <8d054> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <8d02e> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <8d008> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <8cfd3> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <8cf9e> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <8cf78> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <8cf52> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <8cf2c> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <8cf05> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <8cedf> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <8ceb9> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <8ce93> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <8ce5f> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <8ce39> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <8ce13> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <8cddf> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <8cdb9> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <8cd25> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <8ccd5> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <8cca1> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <8cc6d> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <8cc0c> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <8cbca> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <8cba4> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <8cb7e> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <8cb4c> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <8cb0c> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <8cae6> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <8cab2> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <8ca8c> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <8ca66> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <8ca3d> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <8ca17> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <8c9f1> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <8c95d> ../cstrike/dlls/func_tank.cpp:684 */
void CFuncTank::TankTrace(Vector &vecStart, Vector &vecForward, Vector &vecSpread, TraceResult &tr)
{
//	{
//		float x;                                              //   687
//		float y;                                              //   687
//		float z;                                              //   687
//		Vector vecDir;                                  //   693
//		Vector vecEnd;                                  //   696
//	}
}

/* <8c944> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <8c920> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <8c8ee> ../cstrike/dlls/cbase.h:800 */
CFuncTankControls *GetClassPtr<CFuncTankControls>(CFuncTankControls *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <8c8d2> ../cstrike/dlls/func_tank.cpp:974 */
inline void CFuncTankControls::CFuncTankControls(void)
{
}

/* <8c8a0> ../cstrike/dlls/cbase.h:800 */
CFuncTankMortar *GetClassPtr<CFuncTankMortar>(CFuncTankMortar *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <8c884> ../cstrike/dlls/func_tank.cpp:924 */
inline void CFuncTankMortar::CFuncTankMortar(void)
{
}

/* <8c852> ../cstrike/dlls/cbase.h:800 */
CFuncTankRocket *GetClassPtr<CFuncTankRocket>(CFuncTankRocket *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <8c836> ../cstrike/dlls/func_tank.cpp:887 */
inline void CFuncTankRocket::CFuncTankRocket(void)
{
}

/* <8c804> ../cstrike/dlls/cbase.h:800 */
CFuncTankLaser *GetClassPtr<CFuncTankLaser>(CFuncTankLaser *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <8c7e8> ../cstrike/dlls/func_tank.cpp:768 */
inline void CFuncTankLaser::CFuncTankLaser(void)
{
}

/* <8c7b6> ../cstrike/dlls/cbase.h:800 */
CFuncTankGun *GetClassPtr<CFuncTankGun>(CFuncTankGun *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <8c79a> ../cstrike/dlls/func_tank.cpp:719 */
inline void CFuncTankGun::CFuncTankGun(void)
{
}

/* <8c75e> ../cstrike/dlls/func_tank.cpp:46 */
inline void CFuncTank::CFuncTank(void)
{
}

/* <8c743> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <8c72a> ../cstrike/dlls/func_tank.cpp:795 */
void CFuncTankLaser::Activate(void)
{
}

/* <8c6be> ../cstrike/dlls/func_tank.cpp:854 */
void CFuncTankLaser::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   856
//		TraceResult tr;                                       //   857
//		{
//			int bulletCount;                              //   864
//		}
//	}
}

/* <8c697> ../cstrike/dlls/func_tank.cpp:821 */
void CFuncTankLaser::GetLaser(void)
{
//	{
//		edict_t *pentLaser;                                  //   826
//	}
}

/* <8c656> ../cstrike/dlls/func_tank.cpp:70 */
inline void CFuncTank::TankDeactivate(void)
{
}

/* <8c576> ../cstrike/dlls/func_tank.cpp:945 */
void CFuncTankMortar::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int bulletCount;                                      //   949
//		{
//			TraceResult tr;                               //   953
//		}
//	}
}

/* <8c508> ../cstrike/dlls/func_tank.cpp:459 */
void CFuncTank::FindTarget(edict_t *pPlayer)
{
}

/* <8c4e3> ../cstrike/dlls/func_tank.cpp:466 */
void CFuncTank::InRange(float range)
{
}

/* <8c49f> ../cstrike/dlls/util.h:282 */
inline void UTIL_MakeVectorsPrivate(Vector &vecAngles, float *p_vForward, float *p_vRight, float *p_vUp)
{
}

/* <8c486> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <8c46d> ../cstrike/dlls/func_tank.cpp:71 */
inline void CFuncTank::CanFire(void)
{
}

/* <8c454> ../cstrike/dlls/func_tank.cpp:69 */
inline void CFuncTank::TankActivate(void)
{
}

/* <8c43b> ../cstrike/dlls/func_tank.cpp:68 */
inline void CFuncTank::IsActive(void)
{
}

/* <8c3d5> ../cstrike/dlls/func_tank.cpp:726 */
void CFuncTankGun::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   728
//		{
//			int bulletCount;                              //   735
//		}
//	}
}

/* <8c3ae> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <8c33a> ../cstrike/dlls/func_tank.cpp:903 */
void CFuncTankRocket::Fire(Vector &barrelEnd, Vector &forward, entvars_t *pevAttacker)
{
//	{
//		int i;                                                //   905
//		{
//			int bulletCount;                              //   909
//			{
//				class CBaseEntity *pRocket;          //   914
//			}
//		}
//	}
}

/* <8c316> ../cstrike/dlls/effects.h:83 */
inline void CSprite::AnimateAndDie( float framerate)
{
}

/* <8c2f2> ../cstrike/dlls/effects.h:79 */
inline void CSprite::SetScale( float scale)
{
}

/* <8c29b> ../cstrike/dlls/effects.h:69 */
inline void CSprite::SetTransparency( int rendermode, int r, int g, int b, int a, int fx)
{
}

/* <8c1f4> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <8c1a5> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <8c180> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <8c0e8> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <8c0cf> ../cstrike/dlls/cbase.h:178 */
inline void CBaseEntity::Spawn(void)
{
}

/* <8c0b6> ../cstrike/dlls/vector.h:122 */
inline void Vector::operator const float*(void)
{
}

/* <8c074> ../cstrike/dlls/func_tank.cpp:809 */
void CFuncTankLaser::KeyValue(KeyValueData *pkvd)
{
}

/* <8c04a> ../cstrike/dlls/func_tank.cpp:933 */
void CFuncTankMortar::KeyValue(KeyValueData *pkvd)
{
}

/* <8c026> ../cstrike/dlls/func_tank.cpp:214 */
void CFuncTank::KeyValue(KeyValueData *pkvd)
{
}

/* <8bffd> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <8bf2a> ../cstrike/dlls/func_tank.cpp:329 */
void CFuncTank::OnControls(entvars_t *pevTest)
{
//	{
//		Vector offset;                                  //   334
//	}
}

/* <8bf03> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <8beb9> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <8be92> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <8be66> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <8be32> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <8be12> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <8bdf4> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <8bdca> ../cstrike/dlls/func_tank.cpp:793 */
void CFuncTankLaser::Save(CSave &save)
{
}

/* <8bda1> ../cstrike/dlls/func_tank.cpp:164 */
void CFuncTank::Save(CSave &save)
{
}

/* <8bd77> ../cstrike/dlls/func_tank.cpp:995 */
void CFuncTankControls::Save(CSave &save)
{
}

/* <8bd48> ../cstrike/dlls/func_tank.cpp:793 */
void CFuncTankLaser::Restore(CRestore &restore)
{
}

/* <8bd1f> ../cstrike/dlls/func_tank.cpp:164 */
void CFuncTank::Restore(CRestore &restore)
{
}

/* <8bcf0> ../cstrike/dlls/func_tank.cpp:995 */
void CFuncTankControls::Restore(CRestore &restore)
{
}

/* <8bcd2> ../cstrike/dlls/func_tank.cpp:202 */
void CFuncTank::Precache(void)
{
}

/* <86c0d> ../cstrike/dlls/func_break.cpp:969 */
void CPushable::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CPushable *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   969
//	operator!=(const Vector *const this,
//			const Vector &v);  //   978
}

/* <86b99> ../cstrike/dlls/func_break.cpp:983 */
void CPushable::Touch(CBaseEntity *pOther)
{
//	FClassnameIs(entvars_t *pev,
//			const char *szClassname);  //   985
}

/* <86a82> ../cstrike/dlls/func_break.cpp:992 */
void CPushable::Move(CBaseEntity *pOther, int push)
{
//	{
//		entvars_t *pevToucher;                               //   994
//		int playerTouch;                                      //   995
//		float factor;                                         //  1015
//		float length;                                         //  1035
//		VARS(edict_t *pent);  //   998
//		STOP_SOUND(edict_t *entity,
//				int channel,
//				const char *sample);  //  1056
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  1051
//	}
}

/* <869b4> ../cstrike/dlls/func_break.cpp:888 */
void func_pushable(entvars_t *pev)
{
//	GetClassPtr<CPushable>(CPushable *a);  //   888
}

/* <86992> ../cstrike/dlls/func_break.cpp:833 */
void CBreakable::IsBreakable(void)
{
}

/* <8691c> ../cstrike/dlls/func_break.cpp:475 */
void CBreakable::BreakTouch(CBaseEntity *pOther)
{
//	{
//		float flDamage;                                       //   477
//		entvars_t *pevToucher;                               //   478
//		Length(const Vector *const this);  //   500
//	}
}

/* <868b0> ../cstrike/dlls/func_break.cpp:1061 */
void CPushable::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	TakeDamage(CPushable *const this,
//			entvars_t *pevInflictor,
//			entvars_t *pevAttacker,
//			float flDamage,
//			int bitsDamageType);  //  1061
}

/* <86719> ../cstrike/dlls/func_break.cpp:588 */
void CBreakable::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		Vector vecTemp;                                 //   590
//		operator*(const Vector *const this,
//				float fl);  //   606
//		operator+(const Vector *const this,
//				const Vector &v);  //   606
//		operator-(const Vector *const this,
//				const Vector &v);  //   606
//		Normalize(const Vector *const this);  //   621
//		operator*(const Vector *const this,
//				float fl);  //   596
//		operator+(const Vector *const this,
//				const Vector &v);  //   596
//		operator-(const Vector *const this,
//				const Vector &v);  //   596
//	}
}

/* <86700> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <86676> ../cstrike/dlls/func_break.cpp:401 */
void CBreakable::DamageSound(void)
{
//	{
//		int pitch;                                            //   403
//		float fvol;                                           //   404
//		char *rgpsz;                                         //   405
//		int i;                                                //   406
//		int material;                                         //   407
//	}
}

/* <86598> ../cstrike/dlls/func_break.cpp:316 */
void MaterialSoundRandom(edict_t *pEdict, Materials soundMaterial, float volume)
{
//	{
//		const char ** pSoundList;                           //   318
//		int soundCount;                                       //   319
//		MaterialSoundList(Materials precacheMaterial,
//					int &soundCount);  //   321
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   324
//	}
}

/* <86526> ../cstrike/dlls/func_break.cpp:303 */
void MaterialSoundPrecache(Materials precacheMaterial)
{
//	{
//		const char ** pSoundList;                           //   305
//		int i;                                                //   306
//		int soundCount;                                       //   306
//		MaterialSoundList(Materials precacheMaterial,
//					int &soundCount);  //   308
//	}
}

/* <864f1> ../cstrike/dlls/func_break.cpp:260 */
void MaterialSoundList(Materials precacheMaterial, int &soundCount)
{
//	{
//		const char ** pSoundList;                           //   262
//	}
}

/* <86426> ../cstrike/dlls/func_break.cpp:139 */
void func_breakable(entvars_t *pev)
{
//	GetClassPtr<CBreakable>(CBreakable *a);  //   139
}

/* <863eb> ../cstrike/dlls/func_break.cpp:920 */
void CPushable::Precache(void)
{
//	{
//		int i;                                                //   922
//	}
}

/* <8634b> ../cstrike/dlls/func_break.cpp:328 */
void CBreakable::Precache(void)
{
//	{
//		const char *pGibName;                               //   330
//		MaterialSoundPrecache(Materials precacheMaterial);  //   386
//	}
}

/* <86315> ../cstrike/dlls/func_break.cpp:260 */
void MaterialSoundList(Materials precacheMaterial, int &soundCount)
{
//	{
//		const char ** pSoundList;                           //   262
//	}
}

/* <862da> ../cstrike/dlls/func_break.cpp:303 */
void MaterialSoundPrecache(Materials precacheMaterial)
{
//	{
//		const char ** pSoundList;                           //   305
//		int i;                                                //   306
//		int soundCount;                                       //   306
//	}
}

/* <85fa3> ../cstrike/dlls/func_break.cpp:930 */
void CPushable::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   932
//	FStrEq(const char *sz1,
//		const char *sz2);  //   958
//	KeyValue(CBreakable *const this,
//		KeyValueData *pkvd);  //   964
//	atof(const char *__nptr);  //   960
//	KeyValue(CPushable *const this,
//		KeyValueData *pkvd);  //   930
}

/* <85f2d> ../cstrike/dlls/func_break.cpp:538 */
void CBreakable::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CBreakable *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   538
}

/* <85e9c> ../cstrike/dlls/func_break.cpp:886 */
void CPushable::Restore(CRestore &restore)
{
//	Restore(CBreakable *const this,
//		class CRestore &restore);  //   886
//	Restore(CPushable *const this,
//		class CRestore &restore);  //   886
}

/* <85e0b> ../cstrike/dlls/func_break.cpp:886 */
void CPushable::Save(CSave &save)
{
//	Save(CBreakable *const this,
//		class CSave &save);  //   886
//	Save(CPushable *const this,
//		class CSave &save);  //   886
}

/* <85dbc> ../cstrike/dlls/func_break.cpp:76 */
void CBreakable::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    79
}

/* <85bf3> ../cstrike/dlls/func_break.cpp:76 */
void CBreakable::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    90
//	FStrEq(const char *sz1,
//		const char *sz2);  //   103
//	FStrEq(const char *sz1,
//		const char *sz2);  //   107
//	FStrEq(const char *sz1,
//		const char *sz2);  //   112
//	FStrEq(const char *sz1,
//		const char *sz2);  //   117
//	FStrEq(const char *sz1,
//		const char *sz2);  //   124
//	FStrEq(const char *sz1,
//		const char *sz2);  //   129
//	{
//		int object;                                           //   119
//		atoi(const char *__nptr);  //   119
//	}
//	atoi(const char *__nptr);  //   126
//	ExplosionSetMagnitude(CBreakable *const this,
//				int magnitude);  //   126
//	{
//		int i;                                                //    92
//		atoi(const char *__nptr);  //    92
//	}
}

/* <85ba4> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <85b30> ../cstrike/dlls/func_break.cpp:155 */
void CBreakable::Save(CSave &save)
{
//	Save(CBreakable *const this,
//		class CSave &save);  //   155
}

/* <85ae4> ../cstrike/dlls/func_break.cpp:155 */
void CBreakable::Restore(CRestore &restore)
{
//	Restore(CBreakable *const this,
//		class CRestore &restore);  //   155
}

/* <85a99> ../cstrike/dlls/func_break.cpp:839 */
void CBreakable::DamageDecal(int bitsDamageType)
{
//	DamageDecal(CBreakable *const this,
//			int bitsDamageType);  //   839
}

/* <85964> ../cstrike/dlls/func_break.cpp:554 */
void CBreakable::TraceAttack(entvars_t *pevAttacker, float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		float flVolume;                                       //   565
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   568
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   569
//	}
//	Vector(Vector *const this,
//		const Vector &v);  //   580
}

/* <856fe> ../cstrike/dlls/func_break.cpp:653 */
void CBreakable::Die(void)
{
//	{
//		Vector vecSpot;                                 //   655
//		Vector vecVelocity;                             //   656
//		class CBaseEntity *pEntity;                          //   657
//		char cFlag;                                           //   658
//		int pitch;                                            //   659
//		float fvol;                                           //   660
//		float size;                                           //   790
//		Vector mins;                                    //   798
//		Vector maxs;                                    //   799
//		class CBaseEntity *pList;                            //   804
//		int count;                                            //   805
//		operator+(const Vector *const this,
//				const Vector &v);  //   755
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   756
//		operator*(const Vector *const this,
//				float fl);  //   755
//		operator+(const Vector *const this,
//				const Vector &v);  //   755
//		Vector(Vector *const this,
//			const Vector &v);  //   798
//		Vector(Vector *const this,
//			const Vector &v);  //   799
//		{
//			int i;                                        //   808
//		}
//		Explodable(CBreakable *const this);  //   825
//		edict(CBaseEntity *const this);  //   827
//		operator*(const Vector *const this,
//				float fl);  //   747
//		edict(CBaseEntity *const this);  //   822
//	}
}

/* <856d7> ../cstrike/dlls/func_break.cpp:893 */
void CPushable::Spawn(void)
{
}

/* <856b1> ../cstrike/dlls/func_break.cpp:863 */
void CPushable::ObjectCaps(void)
{
}

/* <8568a> ../cstrike/dlls/func_break.cpp:191 */
void CBreakable::Restart(void)
{
}

/* <85663> ../cstrike/dlls/func_break.cpp:157 */
void CBreakable::Spawn(void)
{
}

/* <8563d> ../cstrike/dlls/func_break.h:47 */
void CBreakable::ObjectCaps(void)
{
}

/* <85617> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <855dc> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <85402> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <853dc> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <853b6> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <85381> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <8534c> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <85326> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <85300> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <852da> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <852b4> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <8528d> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <85267> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <85241> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <8521b> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <851e7> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <851c1> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <8519b> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <85167> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <85141> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <850ad> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <8505d> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <85029> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <84ff5> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <84f94> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <84f52> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <84f2c> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <84f06> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <84ed4> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <84e94> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <84e6e> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <84e3a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <84e14> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <84dee> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <84dbc> ../cstrike/dlls/cbase.h:800 */
CPushable *GetClassPtr<CPushable>(CPushable *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <84da0> ../cstrike/dlls/func_break.cpp:851 */
inline void CPushable::CPushable(void)
{
}

/* <84d6e> ../cstrike/dlls/cbase.h:800 */
CBreakable *GetClassPtr<CBreakable>(CBreakable *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <84d53> ../cstrike/dlls/func_break.h:23 */
inline void CBreakable::CBreakable(void)
{
}

/* <84cf4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <84cd3> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <84c8a> ../cstrike/dlls/func_break.cpp:969 */
void CPushable::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <84c21> ../cstrike/dlls/func_break.cpp:867 */
inline void CPushable::MaxSpeed(void)
{
}

/* <84bd8> ../cstrike/dlls/func_break.cpp:538 */
void CBreakable::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <84b8f> ../cstrike/dlls/func_break.cpp:1061 */
void CPushable::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
}

/* <84b69> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <84b50> ../cstrike/dlls/func_break.cpp:833 */
void CBreakable::IsBreakable(void)
{
}

/* <84b2a> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <84b03> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <84aea> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <84ab7> ../cstrike/dlls/func_break.cpp:930 */
void CPushable::KeyValue(KeyValueData *pkvd)
{
//	{
//		int bbox;                                             //   934
//	}
}

/* <84a58> ../cstrike/dlls/func_break.cpp:76 */
void CBreakable::KeyValue(KeyValueData *pkvd)
{
//	{
//		int i;                                                //    92
//	}
//	{
//		int object;                                           //   119
//	}
}

/* <84a15> ../cstrike/dlls/func_break.h:53 */
inline void CBreakable::ExplosionSetMagnitude( int magnitude)
{
}

/* <849fc> ../cstrike/dlls/func_break.h:51 */
inline void CBreakable::Explodable(void)
{
}

/* <849aa> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <84991> ../cstrike/dlls/func_break.h:52 */
inline void CBreakable::ExplosionMagnitude(void)
{
}

/* <84973> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <84907> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <848e9> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <848c2> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <847dd> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <847a9> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <84782> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <84756> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <84738> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <8470e> ../cstrike/dlls/func_break.cpp:886 */
void CPushable::Save(CSave &save)
{
}

/* <846e5> ../cstrike/dlls/func_break.cpp:155 */
void CBreakable::Save(CSave &save)
{
}

/* <846b6> ../cstrike/dlls/func_break.cpp:886 */
void CPushable::Restore(CRestore &restore)
{
}

/* <8468d> ../cstrike/dlls/func_break.cpp:155 */
void CBreakable::Restore(CRestore &restore)
{
}

/* <84663> ../cstrike/dlls/func_break.cpp:839 */
void CBreakable::DamageDecal(int bitsDamageType)
{
}

/* <7f7f4> ../cstrike/dlls/explode.cpp:258 */
/* linkage=_Z15ExplosionCreateRK6VectorS1_P7edict_sii */
void ExplosionCreate(Vector &center, Vector &angles, edict_t *pOwner, int magnitude, BOOL doDamage)
{
//	{
//		KeyValueData kvd;                                     //   260
//		char buf;                                             //   261
//		class CBaseEntity *pExplosion;                       //   263
//	}
}

/* <7f72a> ../cstrike/dlls/explode.cpp:107 */
void env_explosion(entvars_t *pev)
{
//	GetClassPtr<CEnvExplosion>(CEnvExplosion *a);  //   107
}

/* <7f660> ../cstrike/dlls/explode.cpp:37 */
void spark_shower(entvars_t *pev)
{
//	GetClassPtr<CShower>(CShower *a);  //    37
}

/* <7f5b2> ../cstrike/dlls/explode.cpp:109 */
void CEnvExplosion::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   111
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   117
//	KeyValue(CEnvExplosion *const this,
//		KeyValueData *pkvd);  //   109
}

/* <7f566> ../cstrike/dlls/explode.cpp:106 */
void CEnvExplosion::Save(CSave &save)
{
//	Save(CEnvExplosion *const this,
//		class CSave &save);  //   106
}

/* <7f51a> ../cstrike/dlls/explode.cpp:106 */
void CEnvExplosion::Restore(CRestore &restore)
{
//	Restore(CEnvExplosion *const this,
//		class CRestore &restore);  //   106
}

/* <7f49c> ../cstrike/dlls/explode.cpp:39 */
void CShower::Spawn(void)
{
//	operator*(float fl,
//			const Vector &v);  //    41
//	edict(CBaseEntity *const this);  //    52
}

/* <7f475> ../cstrike/dlls/explode.cpp:61 */
void CShower::Think(void)
{
}

/* <7f426> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <7f233> ../cstrike/dlls/explode.cpp:150 */
void CEnvExplosion::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		TraceResult tr;                                       //   152
//		Vector vecSpot;                                 //   157
//		operator+(const Vector *const this,
//				const Vector &v);  //   159
//		operator+(const Vector *const this,
//				const Vector &v);  //   161
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   189
//		{
//			int sparkCount;                               //   226
//			{
//				int i;                                //   228
//			}
//		}
//		operator*(const Vector *const this,
//				float fl);  //   166
//		operator*(const Vector *const this,
//				float fl);  //   166
//		operator+(const Vector *const this,
//				const Vector &v);  //   166
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   202
//	}
}

/* <7f1e1> ../cstrike/dlls/explode.cpp:235 */
void CEnvExplosion::Smoke(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   239
}

/* <7f1a5> ../cstrike/dlls/explode.cpp:120 */
void CEnvExplosion::Spawn(void)
{
//	{
//		float flSpriteScale;                                  //   133
//	}
}

/* <7f122> ../cstrike/dlls/explode.cpp:73 */
void CShower::Touch(CBaseEntity *pOther)
{
//	operator*(const Vector *const this,
//			float fl);  //    76
//	operator*(const Vector *const this,
//			float fl);  //    78
}

/* <7f0fc> ../cstrike/dlls/explode.cpp:34 */
void CShower::ObjectCaps(void)
{
}

/* <7f0d6> ../cstrike/dlls/basemonster.h:92 */
void CBaseMonster::BloodColor(void)
{
}

/* <7f0b0> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <7f08a> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <7f064> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <7f03e> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <7f018> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <7efe3> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <7efb7> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <7ef7c> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <7eda2> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <7ed7c> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <7ed56> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <7ed21> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <7ecc2> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <7ec8d> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <7ec67> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <7ec41> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <7ec1b> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <7ebf5> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <7ebce> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <7eba8> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <7eb82> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <7eb5c> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <7eb28> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <7eb02> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <7eadc> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <7eaa8> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <7ea82> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <7e9ee> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <7e99e> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <7e96a> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <7e936> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <7e8e8> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <7e8a6> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <7e880> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <7e85a> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <7e828> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <7e7f4> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <7e7ce> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <7e79a> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <7e774> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <7e74e> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <7e72d> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <7e704> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <7e6de> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <7e6b8> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <7e686> ../cstrike/dlls/cbase.h:800 */
CEnvExplosion *GetClassPtr<CEnvExplosion>(CEnvExplosion *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7e66b> ../cstrike/dlls/explode.cpp:84 */
inline void CEnvExplosion::CEnvExplosion(void)
{
}

/* <7e64b> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <7e624> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <7e58d> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <7e51e> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <7e4c8> ../cstrike/dlls/cbase.h:800 */
CShower *GetClassPtr<CShower>(CShower *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7e4a8> ../cstrike/dlls/explode.cpp:29 */
inline void CShower::CShower(void)
{
}

/* <7e432> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <7e414> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <7e3c5> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <7e382> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <7e35e> ../cstrike/dlls/explode.cpp:109 */
void CEnvExplosion::KeyValue(KeyValueData *pkvd)
{
}

/* <7e335> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <7e274> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <7e22a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <7e1f6> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <7e1cf> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <7e1a3> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <7e183> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <7e165> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <7e13c> ../cstrike/dlls/explode.cpp:106 */
void CEnvExplosion::Save(CSave &save)
{
}

/* <7e10e> ../cstrike/dlls/explode.cpp:106 */
void CEnvExplosion::Restore(CRestore &restore)
{
}

/* <799a4> ../cstrike/dlls/effects.cpp:2271 */
void item_sodacan(entvars_t *pev)
{
//	GetClassPtr<CItemSoda>(CItemSoda *a);  //  2271
}

/* <798d4> ../cstrike/dlls/effects.cpp:2213 */
void env_beverage(entvars_t *pev)
{
//	GetClassPtr<CEnvBeverage>(CEnvBeverage *a);  //  2213
}

/* <79804> ../cstrike/dlls/effects.cpp:2160 */
void env_funnel(entvars_t *pev)
{
//	GetClassPtr<CEnvFunnel>(CEnvFunnel *a);  //  2160
}

/* <79734> ../cstrike/dlls/effects.cpp:2048 */
void env_message(entvars_t *pev)
{
//	GetClassPtr<CMessage>(CMessage *a);  //  2048
}

/* <79664> ../cstrike/dlls/effects.cpp:1979 */
void env_fade(entvars_t *pev)
{
//	GetClassPtr<CFade>(CFade *a);  //  1979
}

/* <79594> ../cstrike/dlls/effects.cpp:1905 */
void env_shake(entvars_t *pev)
{
//	GetClassPtr<CShake>(CShake *a);  //  1905
}

/* <79351> ../cstrike/dlls/effects.cpp:1863 */
void CBlood::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Color(CBlood *const this);  //  1866
//	Direction(CBlood *const this);  //  1866
//	{
//		Vector forward;                                 //  1872
//		Vector start;                                   //  1873
//		TraceResult tr;                                       //  1874
//		Direction(CBlood *const this);  //  1872
//		BloodAmount(CBlood *const this);  //  1876
//		operator*(const Vector *const this,
//				float fl);  //  1876
//		operator*(const Vector *const this,
//				float fl);  //  1876
//		operator+(const Vector *const this,
//				const Vector &v);  //  1876
//		Color(CBlood *const this);  //  1878
//	}
//	Direction(CBlood *const this);  //  1868
//	Color(CBlood *const this);  //  1868
}

/* <79256> ../cstrike/dlls/effects.cpp:1843 */
void CBlood::BloodPosition(CBaseEntity *pActivator)
{
//	{
//		edict_t *pPlayer;                                    //  1847
//		operator+(const Vector *const this,
//				const Vector &v);  //  1856
//		operator+(const Vector *const this,
//				const Vector &v);  //  1856
//		edict(CBaseEntity *const this);  //  1851
//	}
//	Vector(Vector *const this,
//		const Vector &v);  //  1859
}

/* <791f7> ../cstrike/dlls/effects.cpp:1834 */
void CBlood::Direction(void)
{
}

/* <79127> ../cstrike/dlls/effects.cpp:1788 */
void env_blood(entvars_t *pev)
{
//	GetClassPtr<CBlood>(CBlood *a);  //  1788
}

/* <79057> ../cstrike/dlls/effects.cpp:1696 */
void test_effect(entvars_t *pev)
{
//	GetClassPtr<CTestEffect>(CTestEffect *a);  //  1696
}

/* <78f87> ../cstrike/dlls/effects.cpp:1600 */
void env_shooter(entvars_t *pev)
{
//	GetClassPtr<CEnvShooter>(CEnvShooter *a);  //  1600
}

/* <78eb7> ../cstrike/dlls/effects.cpp:1449 */
void gibshooter(entvars_t *pev)
{
//	GetClassPtr<CGibShooter>(CGibShooter *a);  //  1449
}

/* <78e94> ../cstrike/dlls/effects.cpp:1383 */
void CSprite::TurnOn(void)
{
}

/* <78e73> ../cstrike/dlls/effects.cpp:1376 */
void CSprite::TurnOff(void)
{
}

/* <78e2e> ../cstrike/dlls/effects.cpp:1358 */
void CSprite::Animate(float frames)
{
//	TurnOff(CSprite *const this);  //  1365
}

/* <78de9> ../cstrike/dlls/effects.cpp:1329 */
void CSprite::Expand(float scaleSpeed, float fadeSpeed)
{
}

/* <78d6b> ../cstrike/dlls/effects.cpp:1318 */
void CSprite::AnimateUntilDead(void)
{
//	AnimateThink(CSprite *const this);  //  1324
}

/* <78c1d> ../cstrike/dlls/effects.cpp:1296 */
void SpriteCreate(const char *pSpriteName, Vector &origin, BOOL animate)
{
//	{
//		class CSprite *pSprite;                              //  1298
//		GetClassPtr<CSprite>(CSprite *a);  //  1298
//		SpriteInit(CSprite *const this,
//				const char *pSpriteName,
//				const Vector &origin);  //  1299
//		MAKE_STRING_CLASS(const char *str,
//					entvars_t *pev);  //  1300
//		TurnOn(CSprite *const this);  //  1304
//	}
}

/* <78bea> ../cstrike/dlls/effects.cpp:1289 */
void CSprite::SpriteInit(const char *pSpriteName, Vector &origin)
{
}

/* <78b1a> ../cstrike/dlls/effects.cpp:1226 */
void env_sprite(entvars_t *pev)
{
//	GetClassPtr<CSprite>(CSprite *a);  //  1226
}

/* <78a4a> ../cstrike/dlls/effects.cpp:1157 */
void env_bombglow(entvars_t *pev)
{
//	GetClassPtr<CBombGlow>(CBombGlow *a);  //  1157
}

/* <78a1f> ../cstrike/dlls/effects.cpp:1136 */
void CGlow::Animate(float frames)
{
}

/* <7894f> ../cstrike/dlls/effects.cpp:1099 */
void env_glow(entvars_t *pev)
{
//	GetClassPtr<CGlow>(CGlow *a);  //  1099
}

/* <78841> ../cstrike/dlls/effects.cpp:1059 */
void CLaser::FireAtPoint(TraceResult &tr)
{
//	SetEndPos(CBeam *const this,
//			const Vector &pos);  //  1061
//	GetStartPos(CBeam *const this);  //  1066
//	DoSparks(CBeam *const this,
//		const Vector &start,
//		const Vector &end);  //  1066
}

/* <78804> ../cstrike/dlls/effects.cpp:1032 */
void CLaser::TurnOn(void)
{
//	TurnOn(CSprite *const this);  //  1036
}

/* <787c9> ../cstrike/dlls/effects.cpp:1023 */
void CLaser::TurnOff(void)
{
//	TurnOff(CSprite *const this);  //  1028
}

/* <787a8> ../cstrike/dlls/effects.cpp:1015 */
void CLaser::IsOn(void)
{
}

/* <786d8> ../cstrike/dlls/effects.cpp:920 */
void env_laser(entvars_t *pev)
{
//	GetClassPtr<CLaser>(CLaser *a);  //   920
}

/* <786a1> ../cstrike/dlls/effects.cpp:500 */
void CLightning::Activate(void)
{
//	ServerSide(CLightning *const this);  //   502
}

/* <78313> ../cstrike/dlls/effects.cpp:855 */
void CLightning::BeamUpdateVars(void)
{
//	{
//		int beamType;                                         //   857
//		int pointStart;                                       //   858
//		int pointEnd;                                         //   858
//		edict_t *pStart;                                     //   860
//		edict_t *pEnd;                                       //   861
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   860
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   861
//		Instance(edict_t *pent);  //   862
//		IsPointEntity(CBaseEntity *pEnt);  //   862
//		Instance(edict_t *pent);  //   863
//		IsPointEntity(CBaseEntity *pEnt);  //   863
//		SetTexture(CBeam *const this,
//				int spriteIndex);  //   870
//		SetType(CBeam *const this,
//			int type);  //   892
//		SetStartPos(CBeam *const this,
//				const Vector &pos);  //   895
//		ENTINDEX(edict_t *pEdict);  //   903
//		SetStartEntity(CBeam *const this,
//				int entityIndex);  //   903
//		ENTINDEX(edict_t *pEdict);  //   904
//		SetEndEntity(CBeam *const this,
//				int entityIndex);  //   904
//		SetWidth(CBeam *const this,
//			int width);  //   909
//		SetNoise(CBeam *const this,
//			int amplitude);  //   910
//		SetScrollRate(CBeam *const this,
//				int speed);  //   912
//		SetFrame(CBeam *const this,
//			float frame);  //   911
//		SetFlags(CBeam *const this,
//			int flags);  //   916
//		SetEndEntity(CBeam *const this,
//				int entityIndex);  //   899
//		SetEndPos(CBeam *const this,
//				const Vector &pos);  //   897
//		SetFlags(CBeam *const this,
//			int flags);  //   914
//	}
}

/* <77f64> ../cstrike/dlls/effects.cpp:625 */
void CLightning::StrikeThink(void)
{
//	{
//		class CBaseEntity *pStart;                           //   653
//		class CBaseEntity *pEnd;                             //   654
//		{
//			class CBaseEntity *pStart;                   //   644
//			RandomTargetname(CBeam *const this,
//					const char *szName);  //   644
//		}
//		RandomTargetname(CBeam *const this,
//				const char *szName);  //   653
//		RandomTargetname(CBeam *const this,
//				const char *szName);  //   654
//		IsPointEntity(CBaseEntity *pEnt);  //   658
//		IsPointEntity(CBaseEntity *pEnt);  //   658
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //   667
//		IsPointEntity(CBaseEntity *pEnt);  //   668
//		IsPointEntity(CBaseEntity *pEnt);  //   668
//		entindex(CBaseEntity *const this);  //   704
//		entindex(CBaseEntity *const this);  //   705
//		IsPointEntity(CBaseEntity *pEnt);  //   670
//		IsPointEntity(CBaseEntity *pEnt);  //   677
//		entindex(CBaseEntity *const this);  //   680
//		DoSparks(CBeam *const this,
//			const Vector &start,
//			const Vector &end);  //   720
//		{
//			TraceResult tr;                               //   723
//			BeamDamageInstant(CBeam *const this,
//						TraceResult *ptr,
//						float damage);  //   725
//		}
//	}
}

/* <77de8> ../cstrike/dlls/effects.cpp:831 */
void CLightning::RandomPoint(Vector &vecSrc)
{
//	{
//		int iLoops;                                           //   833
//		{
//			Vector vecDir1;                         //   837
//			TraceResult tr1;                              //   839
//			Normalize(const Vector *const this);  //   838
//			operator*(const Vector *const this,
//					float fl);  //   840
//			operator+(const Vector *const this,
//					const Vector &v);  //   840
//			operator-(const Vector *const this,
//					const Vector &v);  //   842
//			Length(const Vector *const this);  //   842
//		}
//	}
}

/* <77b45> ../cstrike/dlls/effects.cpp:789 */
void CLightning::RandomArea(void)
{
//	{
//		int iLoops;                                           //   791
//		{
//			Vector vecSrc;                          //   795
//			Vector vecDir1;                         //   797
//			TraceResult tr1;                              //   799
//			Vector vecDir2;                         //   805
//			TraceResult tr2;                              //   810
//			Vector(Vector *const this,
//				const Vector &v);  //   795
//			Normalize(const Vector *const this);  //   798
//			operator*(const Vector *const this,
//					float fl);  //   800
//			operator+(const Vector *const this,
//					const Vector &v);  //   800
//			DotProduct(Vector &a,
//					const Vector &b);  //   808
//			Normalize(const Vector *const this);  //   809
//			operator*(const Vector *const this,
//					float fl);  //   811
//			operator+(const Vector *const this,
//					const Vector &v);  //   811
//			operator-(const Vector *const this,
//					const Vector &v);  //   816
//			Length(const Vector *const this);  //   816
//		}
//	}
}

/* <77a90> ../cstrike/dlls/effects.cpp:763 */
void CLightning::Zap(Vector &vecSrc, Vector &vecDest)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   765
//	DoSparks(CBeam *const this,
//		const Vector &start,
//		const Vector &end);  //   786
}

/* <778f6> ../cstrike/dlls/effects.cpp:1069 */
void CLaser::StrikeThink(void)
{
//	{
//		class CBaseEntity *pEnd;                             //  1071
//		TraceResult tr;                                       //  1076
//		RandomTargetname(CBeam *const this,
//				const char *szName);  //  1071
//		FireAtPoint(CLaser *const this,
//				TraceResult &tr);  //  1079
//	}
}

/* <777dd> ../cstrike/dlls/effects.cpp:753 */
void CLightning::DamageThink(void)
{
//	{
//		TraceResult tr;                                       //   756
//		GetEndPos(CBeam *const this);  //   757
//		GetStartPos(CBeam *const this);  //   757
//	}
}

/* <77680> ../cstrike/dlls/effects.cpp:731 */
void CBeam::BeamDamage(TraceResult *ptr)
{
//	{
//		class CBaseEntity *pHit;                             //   736
//		Instance(edict_t *pent);  //   736
//		operator-(const Vector *const this,
//				const Vector &v);  //   740
//		Normalize(const Vector *const this);  //   740
//	}
}

/* <77592> ../cstrike/dlls/effects.cpp:403 */
void env_beam(entvars_t *pev)
{
//	GetClassPtr<CLightning>(CLightning *a);  //   403
}

/* <774c2> ../cstrike/dlls/effects.cpp:402 */
void env_lightning(entvars_t *pev)
{
//	GetClassPtr<CLightning>(CLightning *a);  //   402
}

/* <77490> ../cstrike/dlls/cbase.h:800 */
CLightning *GetClassPtr<CLightning>(CLightning *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <77431> ../cstrike/dlls/effects.cpp:341 */
void CBeam::DoSparks(Vector &start, Vector &end)
{
//	DoSparks(CBeam *const this,
//		const Vector &start,
//		const Vector &end);  //   341
}

/* <773e2> ../cstrike/dlls/effects.cpp:325 */
void CBeam::RandomTargetname(const char *szName)
{
//	{
//		int total;                                            //   327
//		class CBaseEntity *pEntity;                          //   329
//		class CBaseEntity *pNewEntity;                       //   330
//	}
}

/* <77397> ../cstrike/dlls/effects.cpp:325 */
void CBeam::RandomTargetname(const char *szName)
{
//	{
//		int total;                                            //   327
//		class CBaseEntity *pEntity;                          //   329
//		class CBaseEntity *pNewEntity;                       //   330
//	}
}

/* <77305> ../cstrike/dlls/effects.cpp:311 */
void CBeam::TriggerTouch(CBaseEntity *pOther)
{
//	{
//		class CBaseEntity *pOwner;                           //   317
//		Instance(edict_t *pent);  //   317
//	}
}

/* <76e39> ../cstrike/dlls/effects.cpp:1708 */
void CTestEffect::TestThink(void)
{
//	{
//		int i;                                                //  1710
//		float t;                                              //  1711
//		{
//			class CBeam *pbeam;                          //  1715
//			TraceResult tr;                               //  1717
//			Vector vecSrc;                          //  1719
//			Vector vecDir;                          //  1720
//			Normalize(const Vector *const this);  //  1721
//			BeamCreate(const char *pSpriteName,
//					int width);  //  1715
//			Vector(Vector *const this,
//				const Vector &v);  //  1719
//			operator*(const Vector *const this,
//					float fl);  //  1722
//			operator+(const Vector *const this,
//					const Vector &v);  //  1722
//			PointsInit(CBeam *const this,
//					const Vector &start,
//					const Vector &end);  //  1724
//			SetColor(CBeam *const this,
//				int r,
//				int g,
//				int b);  //  1726
//			SetWidth(CBeam *const this,
//				int width);  //  1727
//			SetScrollRate(CBeam *const this,
//					int speed);  //  1728
//		}
//		SetBrightness(CBeam *const this,
//				int brightness);  //  1740
//	}
}

/* <76b3f> ../cstrike/dlls/effects.cpp:931 */
void CLaser::Spawn(void)
{
//	Spawn(CLaser *const this);  //   931
}

/* <76b0d> ../cstrike/dlls/cbase.h:800 */
CSprite *GetClassPtr<CSprite>(CSprite *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <76a56> ../cstrike/dlls/effects.cpp:251 */
void CBeam::PointsInit(Vector &start, Vector &end)
{
//	SetType(CBeam *const this,
//		int type);  //   253
//	SetStartPos(CBeam *const this,
//			const Vector &pos);  //   254
//	SetEndPos(CBeam *const this,
//			const Vector &pos);  //   255
//	SetStartAttachment(CBeam *const this,
//				int attachment);  //   256
//	SetEndAttachment(CBeam *const this,
//			int attachment);  //   257
}

/* <76a27> ../cstrike/dlls/effects.cpp:251 */
void CBeam::PointsInit(Vector &start, Vector &end)
{
}

/* <7695b> ../cstrike/dlls/effects.cpp:262 */
void CBeam::HoseInit(Vector &start, Vector &direction)
{
//	SetType(CBeam *const this,
//		int type);  //   264
//	SetStartPos(CBeam *const this,
//			const Vector &pos);  //   265
//	SetEndPos(CBeam *const this,
//			const Vector &pos);  //   266
//	SetStartAttachment(CBeam *const this,
//				int attachment);  //   267
//	SetEndAttachment(CBeam *const this,
//			int attachment);  //   268
}

/* <76887> ../cstrike/dlls/effects.cpp:273 */
void CBeam::PointEntInit(Vector &start, int endIndex)
{
//	SetType(CBeam *const this,
//		int type);  //   275
//	SetStartPos(CBeam *const this,
//			const Vector &pos);  //   276
//	SetEndEntity(CBeam *const this,
//			int entityIndex);  //   277
//	SetStartAttachment(CBeam *const this,
//				int attachment);  //   278
//	SetEndAttachment(CBeam *const this,
//			int attachment);  //   279
}

/* <767ab> ../cstrike/dlls/effects.cpp:283 */
void CBeam::EntsInit(int startIndex, int endIndex)
{
//	SetType(CBeam *const this,
//		int type);  //   285
//	SetStartEntity(CBeam *const this,
//			int entityIndex);  //   286
//	SetEndEntity(CBeam *const this,
//			int entityIndex);  //   287
//	SetStartAttachment(CBeam *const this,
//				int attachment);  //   288
//	SetEndAttachment(CBeam *const this,
//			int attachment);  //   289
}

/* <7663a> ../cstrike/dlls/effects.cpp:294 */
void CBeam::RelinkBeam(void)
{
//	{
//		const Vector &startPos;                  //   296
//		const Vector &endPos;                    //   296
//		GetStartPos(CBeam *const this);  //   296
//		GetEndPos(CBeam *const this);  //   296
//		operator-(const Vector *const this,
//				const Vector &v);  //   304
//		operator-(const Vector *const this,
//				const Vector &v);  //   305
//	}
}

/* <76540> ../cstrike/dlls/effects.cpp:222 */
void BeamCreate(const char *pSpriteName, int width)
{
//	{
//		class CBeam *pBeam;                                  //   225
//		GetClassPtr<CBeam>(CBeam *a);  //   225
//		MAKE_STRING_CLASS(const char *str,
//					entvars_t *pev);  //   226
//	}
}

/* <76422> ../cstrike/dlls/effects.cpp:234 */
void CBeam::BeamInit(const char *pSpriteName, int width)
{
//	SetNoise(CBeam *const this,
//		int amplitude);  //   239
//	SetColor(CBeam *const this,
//		int r,
//		int g,
//		int b);  //   237
//	SetBrightness(CBeam *const this,
//			int brightness);  //   238
//	SetFrame(CBeam *const this,
//		float frame);  //   240
//	SetScrollRate(CBeam *const this,
//			int speed);  //   241
//	SetWidth(CBeam *const this,
//		int width);  //   244
//	SetTexture(CBeam *const this,
//			int spriteIndex);  //   243
}

/* <7639a> ../cstrike/dlls/effects.cpp:207 */
void CBeam::GetEndPos(void)
{
//	{
//		int type;                                             //   209
//		edict_t *pent;                                       //   215
//		GetType(CBeam *const this);  //   209
//	}
//	GetEndPos(CBeam *const this);  //   207
}

/* <7632e> ../cstrike/dlls/effects.cpp:196 */
void CBeam::GetStartPos(void)
{
//	GetType(CBeam *const this);  //   198
//	GetStartPos(CBeam *const this);  //   196
}

/* <76303> ../cstrike/dlls/effects.cpp:188 */
void CBeam::SetEndEntity(int entityIndex)
{
}

/* <762d8> ../cstrike/dlls/effects.cpp:182 */
void CBeam::SetStartEntity(int entityIndex)
{
}

/* <7620c> ../cstrike/dlls/effects.cpp:166 */
void beam(entvars_t *pev)
{
//	GetClassPtr<CBeam>(CBeam *a);  //   166
}

/* <761da> ../cstrike/dlls/cbase.h:800 */
CBeam *GetClassPtr<CBeam>(CBeam *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7610e> ../cstrike/dlls/effects.cpp:57 */
void env_bubbles(entvars_t *pev)
{
//	GetClassPtr<CBubbling>(CBubbling *a);  //    57
}

/* <76042> ../cstrike/dlls/effects.cpp:33 */
void info_target(entvars_t *pev)
{
//	GetClassPtr<CPointEntity>(CPointEntity *a);  //    33
}

/* <75f0a> ../cstrike/dlls/effects.cpp:1042 */
void CLaser::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int active;                                           //  1044
//		IsOn(CLaser *const this);  //  1044
//		TurnOff(CLaser *const this);  //  1050
//		TurnOn(CLaser *const this);  //  1054
//	}
//	Use(CLaser *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1042
}

/* <75ef1> ../cstrike/dlls/effects.cpp:1032 */
void CLaser::TurnOn(void)
{
}

/* <75e27> ../cstrike/dlls/effects.cpp:1396 */
void CSprite::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int on;                                               //  1398
//		TurnOn(CSprite *const this);  //  1407
//	}
//	Use(CSprite *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1396
}

/* <75dc8> ../cstrike/dlls/effects.cpp:1236 */
void CSprite::Spawn(void)
{
//	TurnOff(CSprite *const this);  //  1248
//	TurnOn(CSprite *const this);  //  1250
}

/* <75d55> ../cstrike/dlls/effects.cpp:1260 */
void CSprite::Restart(void)
{
//	TurnOn(CSprite *const this);  //  1270
//	Restart(CSprite *const this);  //  1260
}

/* <75d3c> ../cstrike/dlls/effects.cpp:1383 */
void CSprite::TurnOn(void)
{
}

/* <75c81> ../cstrike/dlls/effects.cpp:763 */
void CLightning::Zap(Vector &vecSrc, Vector &vecDest)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   765
//	DoSparks(CBeam *const this,
//		const Vector &start,
//		const Vector &end);  //   786
}

/* <75ad3> ../cstrike/dlls/effects.cpp:569 */
void CLightning::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	ToggleUse(CLightning *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //   569
}

/* <7596c> ../cstrike/dlls/effects.h:148 */
void CBeam::Center(void)
{
//	GetEndPos(CBeam *const this);  //   148
//	GetStartPos(CBeam *const this);  //   148
//	operator+(const Vector *const this,
//			const Vector &v);  //   148
//	operator*(const Vector *const this,
//			float fl);  //   148
}

/* <75751> ../cstrike/dlls/effects.cpp:1541 */
void CGibShooter::ShootThink(void)
{
//	{
//		Vector vecShootDir;                             //  1545
//		class CGib *pGib;                                    //  1554
//		operator*(const Vector *const this,
//				float fl);  //  1549
//		operator*(const Vector *const this,
//				float fl);  //  1549
//		operator+(const Vector *const this,
//				const Vector &v);  //  1549
//		operator*(const Vector *const this,
//				float fl);  //  1550
//		operator*(const Vector *const this,
//				float fl);  //  1550
//		operator+(const Vector *const this,
//				const Vector &v);  //  1550
//		operator*(const Vector *const this,
//				float fl);  //  1551
//		operator*(const Vector *const this,
//				float fl);  //  1551
//		operator+(const Vector *const this,
//				const Vector &v);  //  1551
//		Normalize(const Vector *const this);  //  1553
//		{
//			float thinkTime;                              //  1564
//			operator*(const Vector *const this,
//					float fl);  //  1559
//		}
//	}
}

/* <75738> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <75712> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <75692> ../cstrike/dlls/effects.cpp:1358 */
void CSprite::Animate(float frames)
{
}

/* <75679> ../cstrike/dlls/effects.cpp:1310 */
void CSprite::AnimateThink(void)
{
}

/* <7536c> ../cstrike/dlls/effects.cpp:507 */
void CLightning::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   509
//	FStrEq(const char *sz1,
//		const char *sz2);  //   514
//	KeyValue(CLightning *const this,
//		KeyValueData *pkvd);  //   507
}

/* <74ff2> ../cstrike/dlls/effects.cpp:968 */
void CLaser::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   970
//	FStrEq(const char *sz1,
//		const char *sz2);  //   975
//	KeyValue(CLaser *const this,
//		KeyValueData *pkvd);  //   968
//	atof(const char *__nptr);  //   977
//	SetWidth(CBeam *const this,
//		int width);  //   977
}

/* <74efa> ../cstrike/dlls/effects.cpp:1996 */
void CFade::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1998
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2003
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  2009
//	atof(const char *__nptr);  //  2000
//	KeyValue(CFade *const this,
//		KeyValueData *pkvd);  //  1996
}

/* <74d76> ../cstrike/dlls/effects.cpp:1931 */
void CShake::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1933
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1938
//	KeyValue(CShake *const this,
//		KeyValueData *pkvd);  //  1931
//	atof(const char *__nptr);  //  1935
//	atof(const char *__nptr);  //  1940
}

/* <74c34> ../cstrike/dlls/effects.cpp:1807 */
void CBlood::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1809
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1824
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  1830
//	{
//		int color;                                            //  1811
//		atoi(const char *__nptr);  //  1811
//		SetColor(CBlood *const this,
//			int color);  //  1818
//		SetColor(CBlood *const this,
//			int color);  //  1815
//	}
//	KeyValue(CBlood *const this,
//		KeyValueData *pkvd);  //  1807
}

/* <74be5> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <74aae> ../cstrike/dlls/effects.cpp:123 */
void CBubbling::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   125
//	FStrEq(const char *sz1,
//		const char *sz2);  //   130
//	KeyValue(CBubbling *const this,
//		KeyValueData *pkvd);  //   123
//	atoi(const char *__nptr);  //   127
//	atoi(const char *__nptr);  //   132
}

/* <749e7> ../cstrike/dlls/effects.cpp:1602 */
void CEnvShooter::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1604
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1609
//	KeyValue(CEnvShooter *const this,
//		KeyValueData *pkvd);  //  1602
}

/* <74886> ../cstrike/dlls/effects.cpp:1465 */
void CGibShooter::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1467
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1472
//	KeyValue(CGibShooter *const this,
//		KeyValueData *pkvd);  //  1465
//	atoi(const char *__nptr);  //  1469
//	atof(const char *__nptr);  //  1474
}

/* <74765> ../cstrike/dlls/effects.cpp:2091 */
void CMessage::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2093
//	FStrEq(const char *sz1,
//		const char *sz2);  //  2098
//	KeyValue(CMessage *const this,
//		KeyValueData *pkvd);  //  2091
//	atof(const char *__nptr);  //  2100
}

/* <7464b> ../cstrike/dlls/effects.cpp:1651 */
void CEnvShooter::CreateGib(void)
{
//	{
//		class CGib *pGib;                                    //  1653
//		int bodyPart;                                         //  1657
//		GetClassPtr<CGib>(CGib *a);  //  1653
//	}
}

/* <74606> ../cstrike/dlls/effects.cpp:1127 */
void CGlow::Think(void)
{
//	Animate(CGlow::Think(//		float frames);  //  1129
}

/* <745e1> ../cstrike/dlls/effects.cpp:1136 */
void CGlow::Animate(float frames)
{
}

/* <744ff> ../cstrike/dlls/effects.cpp:1521 */
void CGibShooter::CreateGib(void)
{
//	{
//		class CGib *pGib;                                    //  1526
//		GetClassPtr<CGib>(CGib *a);  //  1526
//	}
}

/* <744b2> ../cstrike/dlls/effects.cpp:444 */
void CLightning::Spawn(void)
{
//	Spawn(CLightning *const this);  //   444
}

/* <74436> ../cstrike/dlls/effects.cpp:1273 */
void CSprite::Precache(void)
{
//	SetAttachment(CSprite::Precache(//			edict_t *pEntity,
//			int attachment);  //  1279
//	Precache(CSprite *const this);  //  1273
}

/* <7439c> ../cstrike/dlls/effects.cpp:2215 */
void CEnvBeverage::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBaseEntity *pCan;                             //  2223
//	}
//	Use(CEnvBeverage *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  2215
}

/* <7431d> ../cstrike/dlls/effects.cpp:2296 */
void CItemSoda::CanTouch(CBaseEntity *pOther)
{
//	CanTouch(CItemSoda *const this,
//		class CBaseEntity *pOther);  //  2296
}

/* <742a4> ../cstrike/dlls/effects.cpp:105 */
void CBubbling::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CBubbling *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   105
}

/* <7422d> ../cstrike/dlls/effects.cpp:593 */
void CLightning::StrikeUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	StrikeUse(CLightning *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //   593
}

/* <741e0> ../cstrike/dlls/effects.cpp:68 */
void CBubbling::Save(CSave &save)
{
//	Save(CBubbling *const this,
//		class CSave &save);  //    68
}

/* <74192> ../cstrike/dlls/effects.cpp:441 */
void CLightning::Save(CSave &save)
{
//	Save(CLightning *const this,
//		class CSave &save);  //   441
}

/* <74144> ../cstrike/dlls/effects.cpp:929 */
void CLaser::Save(CSave &save)
{
//	Save(CLaser *const this,
//		class CSave &save);  //   929
}

/* <740f6> ../cstrike/dlls/effects.cpp:1107 */
void CGlow::Save(CSave &save)
{
//	Save(CGlow *const this,
//		class CSave &save);  //  1107
}

/* <740a8> ../cstrike/dlls/effects.cpp:1234 */
void CSprite::Save(CSave &save)
{
//	Save(CSprite *const this,
//		class CSave &save);  //  1234
}

/* <7405a> ../cstrike/dlls/effects.cpp:1448 */
void CGibShooter::Save(CSave &save)
{
//	Save(CGibShooter *const this,
//		class CSave &save);  //  1448
}

/* <7400d> ../cstrike/dlls/effects.cpp:68 */
void CBubbling::Restore(CRestore &restore)
{
//	Restore(CBubbling *const this,
//		class CRestore &restore);  //    68
}

/* <73fbf> ../cstrike/dlls/effects.cpp:441 */
void CLightning::Restore(CRestore &restore)
{
//	Restore(CLightning *const this,
//		class CRestore &restore);  //   441
}

/* <73f71> ../cstrike/dlls/effects.cpp:929 */
void CLaser::Restore(CRestore &restore)
{
//	Restore(CLaser *const this,
//		class CRestore &restore);  //   929
}

/* <73f23> ../cstrike/dlls/effects.cpp:1107 */
void CGlow::Restore(CRestore &restore)
{
//	Restore(CGlow *const this,
//		class CRestore &restore);  //  1107
}

/* <73ed5> ../cstrike/dlls/effects.cpp:1234 */
void CSprite::Restore(CRestore &restore)
{
//	Restore(CSprite *const this,
//		class CRestore &restore);  //  1234
}

/* <73e87> ../cstrike/dlls/effects.cpp:1448 */
void CGibShooter::Restore(CRestore &restore)
{
//	Restore(CGibShooter *const this,
//		class CRestore &restore);  //  1448
}

/* <73e2e> ../cstrike/dlls/effects.cpp:1340 */
void CSprite::ExpandThink(void)
{
//	{
//		float frametime;                                      //  1342
//	}
//	ExpandThink(CSprite *const this);  //  1340
}

/* <73df7> ../cstrike/dlls/effects.cpp:2085 */
void CMessage::Precache(void)
{
//	Precache(CMessage *const this);  //  2085
}

/* <73dbb> ../cstrike/dlls/effects.cpp:1452 */
void CGibShooter::Precache(void)
{
//	Precache(CGibShooter *const this);  //  1452
}

/* <73d82> ../cstrike/dlls/effects.cpp:960 */
void CLaser::Precache(void)
{
//	Precache(CLaser *const this);  //   960
}

/* <73d03> ../cstrike/dlls/effects.cpp:145 */
void CBubbling::FizzThink(void)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //   147
//	edict(CBaseEntity *const this);  //   149
//	ENTINDEX(edict_t *pEdict);  //   149
}

/* <73cdc> ../cstrike/dlls/effects.cpp:1644 */
void CEnvShooter::Precache(void)
{
}

/* <73cb5> ../cstrike/dlls/effects.cpp:1499 */
void CGibShooter::Spawn(void)
{
}

/* <73c8f> ../cstrike/dlls/effects.cpp:1797 */
void CBlood::Spawn(void)
{
}

/* <73c2d> ../cstrike/dlls/effects.cpp:1958 */
void CShake::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <73bb4> ../cstrike/dlls/effects.cpp:2013 */
void CFade::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int fadeFlags;                                        //  2015
//	}
}

/* <73aa5> ../cstrike/dlls/effects.cpp:2113 */
void CMessage::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBaseEntity *pPlayer;                          //  2115
//		Instance(edict_t *pent);  //  2125
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  2132
//	}
}

/* <73a40> ../cstrike/dlls/effects.cpp:1184 */
void CBombGlow::Think(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  1215
}

/* <73961> ../cstrike/dlls/effects.cpp:2286 */
void CItemSoda::CanThink(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //  2288
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //  2291
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //  2291
}

/* <738c6> ../cstrike/dlls/effects.cpp:2273 */
void CItemSoda::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //  2280
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //  2280
}

/* <738a0> ../cstrike/dlls/effects.cpp:2267 */
void CItemSoda::Precache(void)
{
}

/* <73879> ../cstrike/dlls/effects.cpp:2242 */
void CEnvBeverage::Spawn(void)
{
}

/* <73852> ../cstrike/dlls/effects.cpp:2207 */
void CEnvBeverage::Precache(void)
{
}

/* <7382b> ../cstrike/dlls/effects.cpp:2187 */
void CEnvFunnel::Spawn(void)
{
}

/* <7379f> ../cstrike/dlls/effects.cpp:2162 */
void CEnvFunnel::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  2164
}

/* <73778> ../cstrike/dlls/effects.cpp:2155 */
void CEnvFunnel::Precache(void)
{
}

/* <73751> ../cstrike/dlls/effects.cpp:2051 */
void CMessage::Spawn(void)
{
}

/* <7372b> ../cstrike/dlls/effects.cpp:1987 */
void CFade::Spawn(void)
{
}

/* <73705> ../cstrike/dlls/effects.cpp:1919 */
void CShake::Spawn(void)
{
}

/* <736a2> ../cstrike/dlls/effects.cpp:1759 */
void CTestEffect::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <7367c> ../cstrike/dlls/effects.cpp:1703 */
void CTestEffect::Precache(void)
{
}

/* <73656> ../cstrike/dlls/effects.cpp:1698 */
void CTestEffect::Spawn(void)
{
}

/* <735f4> ../cstrike/dlls/effects.cpp:1493 */
void CGibShooter::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <735cd> ../cstrike/dlls/effects.cpp:1161 */
void CBombGlow::Spawn(void)
{
}

/* <735a6> ../cstrike/dlls/effects.cpp:1109 */
void CGlow::Spawn(void)
{
}

/* <7357f> ../cstrike/dlls/effects.cpp:493 */
void CLightning::Precache(void)
{
}

/* <734d6> ../cstrike/dlls/effects.cpp:174 */
void CBeam::Precache(void)
{
//	ENTINDEX(edict_t *pEdict);  //   177
//	SetStartEntity(CBeam *const this,
//			int entityIndex);  //   177
//	ENTINDEX(edict_t *pEdict);  //   179
//	SetEndEntity(CBeam *const this,
//			int entityIndex);  //   179
}

/* <734b0> ../cstrike/dlls/effects.cpp:168 */
void CBeam::Spawn(void)
{
}

/* <73489> ../cstrike/dlls/effects.cpp:99 */
void CBubbling::Precache(void)
{
}

/* <7344d> ../cstrike/dlls/effects.cpp:73 */
void CBubbling::Spawn(void)
{
//	{
//		int speed;                                            //    81
//	}
}

/* <73427> ../cstrike/dlls/effects.cpp:48 */
void CBubbling::ObjectCaps(void)
{
}

/* <733e8> ../cstrike/dlls/effects.h:110 */
void CBeam::ObjectCaps(void)
{
//	{
//		int flags;                                            //   112
//	}
}

/* <733a9> ../cstrike/dlls/effects.h:39 */
void CSprite::ObjectCaps(void)
{
//	{
//		int flags;                                            //    41
//	}
}

/* <73383> ../cstrike/dlls/monsters.h:70 */
void CGib::ObjectCaps(void)
{
}

/* <73362> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <7333c> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <73301> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <73127> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <73101> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <730db> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <730a6> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <73047> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <73012> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <72fec> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <72fc6> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <72fa0> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <72f7a> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <72f53> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <72f2d> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <72f07> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <72ee1> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <72ead> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <72e87> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <72e61> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <72e2d> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <72e07> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <72d73> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <72d23> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <72cef> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <72cbb> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <72c5a> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <72c18> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <72bf2> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <72bcc> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <72b9a> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <72b5a> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <72b34> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <72b00> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <72ada> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <72ab4> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <72a93> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <72a6a> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <72a44> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <72a1e> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <729f8> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <7299d> ../cstrike/dlls/effects.cpp:1059 */
void CLaser::FireAtPoint(TraceResult &tr)
{
}

/* <72969> ../cstrike/dlls/effects.cpp:222 */
void BeamCreate(const char *pSpriteName, int width)
{
//	{
//		class CBeam *pBeam;                                  //   225
//	}
}

/* <7293a> ../cstrike/dlls/effects.cpp:234 */
void CBeam::BeamInit(const char *pSpriteName, int width)
{
}

/* <728ff> ../cstrike/dlls/effects.cpp:763 */
void CLightning::Zap(Vector &vecSrc, Vector &vecDest)
{
}

/* <728b7> ../cstrike/dlls/effects.cpp:1296 */
void SpriteCreate(const char *pSpriteName, Vector &origin, BOOL animate)
{
//	{
//		class CSprite *pSprite;                              //  1298
//	}
}

/* <72885> ../cstrike/dlls/cbase.h:800 */
CItemSoda *GetClassPtr<CItemSoda>(CItemSoda *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <72869> ../cstrike/dlls/effects.cpp:2258 */
inline void CItemSoda::CItemSoda(void)
{
}

/* <72837> ../cstrike/dlls/cbase.h:800 */
CEnvBeverage *GetClassPtr<CEnvBeverage>(CEnvBeverage *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7281b> ../cstrike/dlls/effects.cpp:2199 */
inline void CEnvBeverage::CEnvBeverage(void)
{
}

/* <727e9> ../cstrike/dlls/cbase.h:800 */
CEnvFunnel *GetClassPtr<CEnvFunnel>(CEnvFunnel *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <727c8> ../cstrike/dlls/effects.cpp:2145 */
inline void CEnvFunnel::CEnvFunnel(void)
{
}

/* <72796> ../cstrike/dlls/cbase.h:800 */
CMessage *GetClassPtr<CMessage>(CMessage *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7277a> ../cstrike/dlls/effects.cpp:2038 */
inline void CMessage::CMessage(void)
{
}

/* <72748> ../cstrike/dlls/cbase.h:800 */
CFade *GetClassPtr<CFade>(CFade *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7272c> ../cstrike/dlls/effects.cpp:1964 */
inline void CFade::CFade(void)
{
}

/* <726fa> ../cstrike/dlls/cbase.h:800 */
CShake *GetClassPtr<CShake>(CShake *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <726de> ../cstrike/dlls/effects.cpp:1886 */
inline void CShake::CShake(void)
{
}

/* <726ac> ../cstrike/dlls/cbase.h:800 */
CBlood *GetClassPtr<CBlood>(CBlood *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <72690> ../cstrike/dlls/effects.cpp:1769 */
inline void CBlood::CBlood(void)
{
}

/* <7265e> ../cstrike/dlls/cbase.h:800 */
CTestEffect *GetClassPtr<CTestEffect>(CTestEffect *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7263d> ../cstrike/dlls/effects.cpp:1679 */
inline void CTestEffect::CTestEffect(void)
{
}

/* <7260b> ../cstrike/dlls/cbase.h:800 */
CEnvShooter *GetClassPtr<CEnvShooter>(CEnvShooter *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <725ef> ../cstrike/dlls/effects.cpp:1592 */
inline void CEnvShooter::CEnvShooter(void)
{
}

/* <725cf> ../cstrike/dlls/monsters.h:61 */
inline void CGib::CGib(void)
{
}

/* <7259d> ../cstrike/dlls/cbase.h:800 */
CGibShooter *GetClassPtr<CGibShooter>(CGibShooter *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <72581> ../cstrike/dlls/effects.cpp:1413 */
inline void CGibShooter::CGibShooter(void)
{
}

/* <72560> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <72541> ../cstrike/dlls/effects.cpp:931 */
void CLaser::Spawn(void)
{
}

/* <7250b> ../cstrike/dlls/effects.cpp:1289 */
void CSprite::SpriteInit(const char *pSpriteName, Vector &origin)
{
}

/* <724d9> ../cstrike/dlls/cbase.h:800 */
CBombGlow *GetClassPtr<CBombGlow>(CBombGlow *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <724b8> ../cstrike/dlls/effects.cpp:1146 */
inline void CBombGlow::CBombGlow(void)
{
}

/* <7249d> ../cstrike/dlls/effects.h:33 */
inline void CSprite::CSprite(void)
{
}

/* <7246b> ../cstrike/dlls/cbase.h:800 */
CGlow *GetClassPtr<CGlow>(CGlow *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7244f> ../cstrike/dlls/effects.cpp:1085 */
inline void CGlow::CGlow(void)
{
}

/* <7241d> ../cstrike/dlls/cbase.h:800 */
CLaser *GetClassPtr<CLaser>(CLaser *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <72402> ../cstrike/dlls/effects.h:188 */
inline void CLaser::CLaser(void)
{
}

/* <723e6> ../cstrike/dlls/effects.cpp:357 */
inline void CLightning::CLightning(void)
{
}

/* <723cb> ../cstrike/dlls/effects.h:105 */
inline void CBeam::CBeam(void)
{
}

/* <72399> ../cstrike/dlls/cbase.h:800 */
CBubbling *GetClassPtr<CBubbling>(CBubbling *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <7237e> ../cstrike/dlls/effects.cpp:36 */
inline void CBubbling::CBubbling(void)
{
}

/* <7234c> ../cstrike/dlls/cbase.h:800 */
CPointEntity *GetClassPtr<CPointEntity>(CPointEntity *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <72330> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <722d7> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <722b2> ../cstrike/dlls/effects.cpp:1996 */
void CFade::KeyValue(KeyValueData *pkvd)
{
}

/* <7228d> ../cstrike/dlls/effects.cpp:1975 */
inline void CFade::SetHoldTime( float hold)
{
}

/* <72268> ../cstrike/dlls/effects.cpp:1974 */
inline void CFade::SetDuration( float duration)
{
}

/* <7224f> ../cstrike/dlls/effects.cpp:1972 */
inline void CFade::HoldTime(void)
{
}

/* <72231> ../cstrike/dlls/effects.cpp:1971 */
inline void CFade::Duration(void)
{
}

/* <7220c> ../cstrike/dlls/effects.cpp:1931 */
void CShake::KeyValue(KeyValueData *pkvd)
{
}

/* <721e7> ../cstrike/dlls/effects.cpp:1901 */
inline void CShake::SetRadius( float radius)
{
}

/* <721c2> ../cstrike/dlls/effects.cpp:1900 */
inline void CShake::SetDuration( float duration)
{
}

/* <7219d> ../cstrike/dlls/effects.cpp:1899 */
inline void CShake::SetFrequency( float frequency)
{
}

/* <72178> ../cstrike/dlls/effects.cpp:1898 */
inline void CShake::SetAmplitude( float amplitude)
{
}

/* <7215f> ../cstrike/dlls/effects.cpp:1896 */
inline void CShake::Radius(void)
{
}

/* <72146> ../cstrike/dlls/effects.cpp:1895 */
inline void CShake::Duration(void)
{
}

/* <7212d> ../cstrike/dlls/effects.cpp:1894 */
inline void CShake::Frequency(void)
{
}

/* <7210f> ../cstrike/dlls/effects.cpp:1893 */
inline void CShake::Amplitude(void)
{
}

/* <720dc> ../cstrike/dlls/effects.cpp:1807 */
void CBlood::KeyValue(KeyValueData *pkvd)
{
//	{
//		int color;                                            //  1811
//	}
}

/* <720b7> ../cstrike/dlls/effects.cpp:1780 */
inline void CBlood::SetBloodAmount( float amount)
{
}

/* <72092> ../cstrike/dlls/effects.cpp:1779 */
inline void CBlood::SetColor( int color)
{
}

/* <72079> ../cstrike/dlls/effects.cpp:1777 */
inline void CBlood::BloodAmount(void)
{
}

/* <7205b> ../cstrike/dlls/effects.cpp:1776 */
inline void CBlood::Color(void)
{
}

/* <72004> ../cstrike/dlls/effects.cpp:1042 */
void CLaser::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int active;                                           //  1044
//	}
}

/* <71feb> ../cstrike/dlls/effects.cpp:1023 */
void CLaser::TurnOff(void)
{
}

/* <71fd2> ../cstrike/dlls/effects.cpp:1015 */
void CLaser::IsOn(void)
{
}

/* <71fb9> ../cstrike/dlls/effects.cpp:1260 */
void CSprite::Restart(void)
{
}

/* <71f63> ../cstrike/dlls/effects.cpp:1396 */
void CSprite::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int on;                                               //  1398
//	}
}

/* <71f4a> ../cstrike/dlls/effects.cpp:1376 */
void CSprite::TurnOff(void)
{
}

/* <71ef3> ../cstrike/dlls/effects.h:175 */
inline void CBeam::BeamDamageInstant( TraceResult *ptr, float damage)
{
}

/* <71eda> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <71e85> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <71e66> ../cstrike/dlls/effects.cpp:614 */
int IsPointEntity(CBaseEntity *pEnt)
{
}

/* <71e4d> ../cstrike/dlls/effects.cpp:444 */
void CLightning::Spawn(void)
{
}

/* <71e17> ../cstrike/dlls/effects.cpp:373 */
inline void CLightning::ServerSide(void)
{
}

/* <71dce> ../cstrike/dlls/effects.cpp:569 */
void CLightning::ToggleUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <71d93> ../cstrike/dlls/effects.cpp:341 */
void CBeam::DoSparks(Vector &start, Vector &end)
{
}

/* <71d6c> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <71d3b> ../cstrike/dlls/effects.cpp:207 */
void CBeam::GetEndPos(void)
{
//	{
//		int type;                                             //   209
//		edict_t *pent;                                       //   215
//	}
}

/* <71d15> ../cstrike/dlls/effects.cpp:196 */
void CBeam::GetStartPos(void)
{
//	{
//		edict_t *pent;                                       //   200
//	}
}

/* <71cf1> ../cstrike/dlls/effects.cpp:188 */
void CBeam::SetEndEntity(int entityIndex)
{
}

/* <71ccd> ../cstrike/dlls/effects.cpp:182 */
void CBeam::SetStartEntity(int entityIndex)
{
}

/* <71cb4> ../cstrike/dlls/effects.h:143 */
inline void CBeam::GetEndEntity(void)
{
}

/* <71c9b> ../cstrike/dlls/effects.h:142 */
inline void CBeam::GetStartEntity(void)
{
}

/* <71c82> ../cstrike/dlls/effects.h:140 */
inline void CBeam::GetType(void)
{
}

/* <71c5d> ../cstrike/dlls/effects.cpp:968 */
void CLaser::KeyValue(KeyValueData *pkvd)
{
}

/* <71c39> ../cstrike/dlls/effects.h:138 */
inline void CBeam::SetScrollRate( int speed)
{
}

/* <71c15> ../cstrike/dlls/effects.h:137 */
inline void CBeam::SetFrame( float frame)
{
}

/* <71bf1> ../cstrike/dlls/effects.h:136 */
inline void CBeam::SetBrightness( int brightness)
{
}

/* <71bbd> ../cstrike/dlls/effects.h:135 */
inline void CBeam::SetColor( int r, int g, int b)
{
}

/* <71b99> ../cstrike/dlls/effects.h:134 */
inline void CBeam::SetNoise( int amplitude)
{
}

/* <71b75> ../cstrike/dlls/effects.h:133 */
inline void CBeam::SetWidth( int width)
{
}

/* <71b51> ../cstrike/dlls/effects.h:132 */
inline void CBeam::SetTexture( int spriteIndex)
{
}

/* <71b2d> ../cstrike/dlls/effects.h:130 */
inline void CBeam::SetEndAttachment( int attachment)
{
}

/* <71b09> ../cstrike/dlls/effects.h:129 */
inline void CBeam::SetStartAttachment( int attachment)
{
}

/* <71ae0> ../cstrike/dlls/effects.h:125 */
inline void CBeam::SetEndPos(Vector &pos)
{
}

/* <71ab7> ../cstrike/dlls/effects.h:124 */
inline void CBeam::SetStartPos(Vector &pos)
{
}

/* <71a93> ../cstrike/dlls/effects.h:123 */
inline void CBeam::SetFlags( int flags)
{
}

/* <71a6a> ../cstrike/dlls/effects.h:122 */
inline void CBeam::SetType( int type)
{
}

/* <71a18> ../cstrike/dlls/effects.h:69 */
inline void CSprite::SetTransparency( int rendermode, int r, int g, int b, int a, int fx)
{
}

/* <719ff> ../cstrike/dlls/effects.cpp:1273 */
void CSprite::Precache(void)
{
}

/* <719d0> ../cstrike/dlls/effects.h:53 */
inline void CSprite::SetAttachment( edict_t *pEntity, int attachment)
{
}

/* <719b2> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <71976> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <71951> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <718f5> ../cstrike/dlls/effects.cpp:2215 */
void CEnvBeverage::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		class CBaseEntity *pCan;                             //  2223
//	}
}

/* <718dc> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <7180b> ../cstrike/dlls/effects.cpp:123 */
void CBubbling::KeyValue(KeyValueData *pkvd)
{
}

/* <717e6> ../cstrike/dlls/effects.cpp:507 */
void CLightning::KeyValue(KeyValueData *pkvd)
{
}

/* <717ae> ../cstrike/dlls/effects.cpp:1602 */
void CEnvShooter::KeyValue(KeyValueData *pkvd)
{
//	{
//		int iNoise;                                           //  1611
//	}
}

/* <71789> ../cstrike/dlls/effects.cpp:1465 */
void CGibShooter::KeyValue(KeyValueData *pkvd)
{
}

/* <71764> ../cstrike/dlls/effects.cpp:2091 */
void CMessage::KeyValue(KeyValueData *pkvd)
{
}

/* <71740> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <716d8> ../cstrike/dlls/effects.cpp:2296 */
void CItemSoda::CanTouch(CBaseEntity *pOther)
{
}

/* <715d6> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <715a2> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <7157b> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <7154f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <7152f> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <71511> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <714cc> ../cstrike/dlls/effects.cpp:105 */
void CBubbling::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <71483> ../cstrike/dlls/effects.cpp:593 */
void CLightning::StrikeUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <7145a> ../cstrike/dlls/effects.cpp:68 */
void CBubbling::Save(CSave &save)
{
}

/* <71430> ../cstrike/dlls/effects.cpp:441 */
void CLightning::Save(CSave &save)
{
}

/* <71406> ../cstrike/dlls/effects.cpp:929 */
void CLaser::Save(CSave &save)
{
}

/* <713dc> ../cstrike/dlls/effects.cpp:1107 */
void CGlow::Save(CSave &save)
{
}

/* <713b2> ../cstrike/dlls/effects.cpp:1234 */
void CSprite::Save(CSave &save)
{
}

/* <71388> ../cstrike/dlls/effects.cpp:1448 */
void CGibShooter::Save(CSave &save)
{
}

/* <7135a> ../cstrike/dlls/effects.cpp:68 */
void CBubbling::Restore(CRestore &restore)
{
}

/* <7132b> ../cstrike/dlls/effects.cpp:441 */
void CLightning::Restore(CRestore &restore)
{
}

/* <71301> ../cstrike/dlls/effects.cpp:929 */
void CLaser::Restore(CRestore &restore)
{
}

/* <712d2> ../cstrike/dlls/effects.cpp:1107 */
void CGlow::Restore(CRestore &restore)
{
}

/* <712a8> ../cstrike/dlls/effects.cpp:1234 */
void CSprite::Restore(CRestore &restore)
{
}

/* <7127e> ../cstrike/dlls/effects.cpp:1448 */
void CGibShooter::Restore(CRestore &restore)
{
}

/* <71252> ../cstrike/dlls/effects.cpp:1340 */
void CSprite::ExpandThink(void)
{
//	{
//		float frametime;                                      //  1342
//	}
}

/* <71234> ../cstrike/dlls/effects.cpp:2085 */
void CMessage::Precache(void)
{
}

/* <71216> ../cstrike/dlls/effects.cpp:1452 */
void CGibShooter::Precache(void)
{
}

/* <711f8> ../cstrike/dlls/effects.cpp:960 */
void CLaser::Precache(void)
{
}

/* <711da> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <6a834> ../cstrike/dlls/doors.cpp:1056 */
void momentary_door(entvars_t *pev)
{
//	GetClassPtr<CMomentaryDoor>(CMomentaryDoor *a);  //  1056
}

/* <6a767> ../cstrike/dlls/doors.cpp:943 */
void func_door_rotating(entvars_t *pev)
{
//	GetClassPtr<CRotDoor>(CRotDoor *a);  //   943
}

/* <6a465> ../cstrike/dlls/doors.cpp:817 */
void CBaseDoor::Blocked(CBaseEntity *pOther)
{
//	{
//		edict_t *pentTarget;                                 //   819
//		class CBaseDoor *pDoor;                              //   820
//		float const checkBlockedInterval;                      //   827
//	}
//	Blocked(CBaseDoor *const this,
//		class CBaseEntity *pOther);  //   817
}

/* <6a3b8> ../cstrike/dlls/doors.cpp:508 */
void CBaseDoor::DoorTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //   510
//	}
//	DoorTouch(CBaseDoor *const this,
//			class CBaseEntity *pOther);  //   508
}

/* <6a33b> ../cstrike/dlls/doors.cpp:543 */
void CBaseDoor::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	DoorActivate(CBaseDoor *const this);  //   548
}

/* <6a319> ../cstrike/dlls/doors.cpp:554 */
void CBaseDoor::DoorActivate(void)
{
}

/* <6a2f6> ../cstrike/dlls/doors.cpp:554 */
void CBaseDoor::DoorActivate(void)
{
}

/* <6a125> ../cstrike/dlls/doors.cpp:588 */
void CBaseDoor::DoorGoUp(void)
{
//	{
//		entvars_t *pevActivator;                             //   590
//		bool isReversing;                                     //   596
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   604
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   613
//		{
//			float sign;                                   //   615
//			{
//				class Vector2D toActivator;           //   626
//				float loX;                            //   628
//				float loY;                            //   629
//				float hiX;                            //   630
//				float hiY;                            //   631
//				float momentArmX;                     //   633
//				float momentArmY;                     //   634
//			}
//			operator*(const Vector *const this,
//					float fl);  //   712
//		}
//		Vector(Vector *const this,
//			const Vector &v);  //   715
//	}
}

/* <6a058> ../cstrike/dlls/doors.cpp:282 */
void func_water(entvars_t *pev)
{
//	GetClassPtr<CBaseDoor>(CBaseDoor *a);  //   282
}

/* <69f8b> ../cstrike/dlls/doors.cpp:278 */
void func_door(entvars_t *pev)
{
//	GetClassPtr<CBaseDoor>(CBaseDoor *a);  //   278
}

/* <69f59> ../cstrike/dlls/cbase.h:800 */
CBaseDoor *GetClassPtr<CBaseDoor>(CBaseDoor *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <69a4f> ../cstrike/dlls/doors.cpp:201 */
void CBaseDoor::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   204
//	FStrEq(const char *sz1,
//		const char *sz2);  //   209
//	KeyValue(CBaseDoor *const this,
//		KeyValueData *pkvd);  //   201
//	atof(const char *__nptr);  //   206
//	atof(const char *__nptr);  //   211
}

/* <69970> ../cstrike/dlls/doors.cpp:1143 */
void CMomentaryDoor::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1146
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1151
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1156
//	KeyValue(CMomentaryDoor *const this,
//		KeyValueData *pkvd);  //  1143
}

/* <69949> ../cstrike/dlls/doors.cpp:334 */
void CBaseDoor::Restart(void)
{
}

/* <698be> ../cstrike/dlls/doors.cpp:946 */
void CRotDoor::Restart(void)
{
//	operator*(const Vector ::Restart(//			float fl);  //   953
//	{
//		Vector vecSav;                                  //   967
//		operator*(const Vector *const this,
//				float fl);  //   970
//	}
}

/* <697ad> ../cstrike/dlls/doors.cpp:762 */
void CBaseDoor::DoorGoDown(void)
{
//	{
//		bool isReversing;                                     //   765
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   770
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   782
//		Vector(Vector *const this,
//			const Vector &v);  //   785
//		Vector(Vector *const this,
//			const Vector &v);  //   783
//	}
}

/* <6975e> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <6953e> ../cstrike/dlls/doors.cpp:1165 */
void CMomentaryDoor::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		Vector move;                                    //  1172
//		Vector delta;                                   //  1174
//		float speed;                                          //  1175
//	}
//	Use(CMomentaryDoor *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1165
}

/* <694a5> ../cstrike/dlls/doors.cpp:791 */
void CBaseDoor::DoorHitBottom(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   795
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   796
}

/* <6940c> ../cstrike/dlls/doors.cpp:721 */
void CBaseDoor::DoorHitTop(void)
{
//	STOP_SOUND(edict_t *entity,
//			int channel,
//			const char *sample);  //   725
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   726
}

/* <693c0> ../cstrike/dlls/doors.cpp:98 */
void CBaseDoor::Save(CSave &save)
{
//	Save(CBaseDoor *const this,
//		class CSave &save);  //    98
}

/* <69373> ../cstrike/dlls/doors.cpp:1063 */
void CMomentaryDoor::Save(CSave &save)
{
//	Save(CMomentaryDoor *const this,
//		class CSave &save);  //  1063
}

/* <69327> ../cstrike/dlls/doors.cpp:98 */
void CBaseDoor::Restore(CRestore &restore)
{
//	Restore(CBaseDoor *const this,
//		class CRestore &restore);  //    98
}

/* <692da> ../cstrike/dlls/doors.cpp:1063 */
void CMomentaryDoor::Restore(CRestore &restore)
{
//	Restore(CMomentaryDoor *const this,
//		class CRestore &restore);  //  1063
}

/* <69289> ../cstrike/dlls/doors.cpp:350 */
void CBaseDoor::SetToggleState(int state)
{
//	SetToggleState(CBaseDoor *const this,
//			int state);  //   350
}

/* <6924c> ../cstrike/dlls/doors.cpp:359 */
void CBaseDoor::Precache(void)
{
//	{
//		char *pszSound;                                      //   361
//	}
}

/* <69177> ../cstrike/dlls/doors.cpp:978 */
void CRotDoor::Spawn(void)
{
//	operator*(const Vector ::Spawn(//			float fl);  //   986
//	operator*(const Vector *const this,
//			float fl);  //   990
//	operator+(const Vector *const this,
//			const Vector &v);  //   990
//	{
//		Vector vecSav;                                  //  1011
//		operator*(const Vector *const this,
//				float fl);  //  1014
//	}
}

/* <690bc> ../cstrike/dlls/doors.cpp:285 */
void CBaseDoor::Spawn(void)
{
//	fabs(double __x);  //   312
//	fabs(double __x);  //   312
//	fabs(double __x);  //   312
//	operator*(const Vector *const this,
//			float fl);  //   312
//	operator+(const Vector *const this,
//			const Vector &v);  //   312
}

/* <69001> ../cstrike/dlls/doors.cpp:1065 */
void CMomentaryDoor::Spawn(void)
{
//	fabs(double __x);  //  1082
//	fabs(double __x);  //  1082
//	fabs(double __x);  //  1082
//	operator*(const Vector *const this,
//			float fl);  //  1082
//	operator+(const Vector *const this,
//			const Vector &v);  //  1082
}

/* <68fcc> ../cstrike/dlls/doors.cpp:1028 */
void CRotDoor::SetToggleState(int state)
{
}

/* <68fa5> ../cstrike/dlls/doors.cpp:1096 */
void CMomentaryDoor::Precache(void)
{
}

/* <68f7f> ../cstrike/dlls/doors.cpp:1047 */
void CMomentaryDoor::ObjectCaps(void)
{
}

/* <68f59> ../cstrike/dlls/doors.cpp:45 */
void CBaseDoor::ObjectCaps(void)
{
}

/* <68f33> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <68f0d> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <68ed8> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <68eac> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <68e71> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <68c97> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <68c71> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <68c4b> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <68c16> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <68be1> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <68bbb> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <68b95> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <68b6f> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <68b49> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <68b22> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <68afc> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <68ad6> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <68ab0> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <68a7c> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <68a56> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <68a30> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <689fc> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <689d6> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <68918> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <688e4> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <688b0> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <6884f> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <6880d> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <687e7> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <687b5> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <68775> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <6874f> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <6871b> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <686f5> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <686cf> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <686a9> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <6862b> ../cstrike/dlls/util.h:575 */
inline void STOP_SOUND(edict_t *entity, int channel, const char *sample)
{
}

/* <68612> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <68561> ../cstrike/dlls/doors.cpp:112 */
void PlayLockSounds(entvars_t *pev, locksound_t *pls, int flocked, int fbutton)
{
//	{
//		float flsoundwait;                                    //   118
//		{
//			int fplaysound;                               //   127
//			int fplaysentence;                            //   128
//			float fvol;                                   //   129
//			{
//				int iprev;                            //   148
//			}
//		}
//		{
//			int fplaysound;                               //   164
//			int fplaysentence;                            //   165
//			float fvol;                                   //   166
//			{
//				int iprev;                            //   184
//			}
//		}
//	}
}

/* <6852f> ../cstrike/dlls/cbase.h:800 */
CMomentaryDoor *GetClassPtr<CMomentaryDoor>(CMomentaryDoor *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <68513> ../cstrike/dlls/doors.cpp:1039 */
inline void CMomentaryDoor::CMomentaryDoor(void)
{
}

/* <684e1> ../cstrike/dlls/cbase.h:800 */
CRotDoor *GetClassPtr<CRotDoor>(CRotDoor *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <684c0> ../cstrike/dlls/doors.cpp:935 */
inline void CRotDoor::CRotDoor(void)
{
}

/* <6846f> ../cstrike/dlls/doors.cpp:817 */
void CBaseDoor::Blocked(CBaseEntity *pOther)
{
//	{
//		edict_t *pentTarget;                                 //   819
//		class CBaseDoor *pDoor;                              //   820
//		float const checkBlockedInterval;                      //   827
//	}
}

/* <6840f> ../cstrike/dlls/doors.cpp:34 */
inline void CBaseDoor::CBaseDoor(void)
{
}

/* <683b0> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <68389> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <6831a> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <682db> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <682a8> ../cstrike/dlls/doors.cpp:508 */
void CBaseDoor::DoorTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevToucher;                               //   510
//	}
}

/* <68272> ../cstrike/dlls/doors.cpp:554 */
void CBaseDoor::DoorActivate(void)
{
}

/* <6824c> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <68233> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <68215> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <681a9> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <6818b> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <6811c> ../cstrike/dlls/doors.cpp:1165 */
void CMomentaryDoor::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		Vector move;                                    //  1172
//		Vector delta;                                   //  1174
//		float speed;                                          //  1175
//	}
}

/* <680cb> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <68062> ../cstrike/dlls/doors.cpp:201 */
void CBaseDoor::KeyValue(KeyValueData *pkvd)
{
}

/* <6803d> ../cstrike/dlls/doors.cpp:1143 */
void CMomentaryDoor::KeyValue(KeyValueData *pkvd)
{
}

/* <67fbd> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <67f50> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <67f06> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <67ed2> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <67eab> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <67e7f> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <67e61> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <67e43> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <67e1a> ../cstrike/dlls/doors.cpp:98 */
void CBaseDoor::Save(CSave &save)
{
}

/* <67df0> ../cstrike/dlls/doors.cpp:1063 */
void CMomentaryDoor::Save(CSave &save)
{
}

/* <67dc7> ../cstrike/dlls/doors.cpp:98 */
void CBaseDoor::Restore(CRestore &restore)
{
}

/* <67d98> ../cstrike/dlls/doors.cpp:1063 */
void CMomentaryDoor::Restore(CRestore &restore)
{
}

/* <67d6e> ../cstrike/dlls/doors.cpp:350 */
void CBaseDoor::SetToggleState(int state)
{
}

/* <62f3e> ../cstrike/dlls/combat.cpp:2197 */
void CBaseMonster::BloodSplat(Vector &vecSrc, Vector &vecDir, int HitLocation, int iVelocity)
{
//	MESSAGE_BEGIN(int msg_dest,
//			int msg_type,
//			const float *pOrigin,
//			edict_t *ed);  //  2201
}

/* <62e0e> ../cstrike/dlls/combat.cpp:2145 */
void CBaseMonster::MakeDamageBloodDecal(int cCount, float flNoise, TraceResult *ptr, Vector &vecDir)
{
//	{
//		TraceResult Bloodtr;                                  //  2148
//		Vector vecTraceDir;                             //  2149
//		int i;                                                //  2150
//		operator*(const Vector *const this,
//				float fl);  //  2174
//		operator+(const Vector *const this,
//				const Vector &v);  //  2174
//	}
}

/* <62709> ../cstrike/dlls/combat.cpp:1869 */
void CBaseEntity::FireBullets3(Vector vecSrc, Vector vecDirShooting, float vecSpread, float flDistance, int iPenetration, int iBulletType, int iDamage, float flRangeModifier, entvars_t *pevAttacker, bool bPistol, int shared_rand)
{
//	{
//		int iOriginalPenetration;                             //  1871
//		int iPenetrationPower;                                //  1872
//		float flPenetrationDistance;                          //  1873
//		int iCurrentDamage;                                   //  1874
//		float flCurrentDistance;                              //  1875
//		TraceResult tr;                                       //  1876
//		TraceResult tr2;                                      //  1876
//		Vector vecRight;                                //  1877
//		Vector vecUp;                                   //  1878
//		class CBaseEntity *pEntity;                          //  1879
//		bool bHitMetal;                                       //  1880
//		int iSparksAmount;                                    //  1881
//		float x;                                              //  1901
//		float y;                                              //  1901
//		float z;                                              //  1901
//		Vector vecDir;                                  //  1920
//		Vector vecEnd;                                  //  1925
//		Vector vecOldSrc;                               //  1926
//		Vector vecNewSrc;                               //  1927
//		float flDamageModifier;                               //  1931
//		Vector(Vector *const this,
//			const Vector &v);  //  1877
//		Vector(Vector *const this,
//			const Vector &v);  //  1878
//		operator*(float fl,
//				const Vector &v);  //  1922
//		operator*(float fl,
//				const Vector &v);  //  1922
//		operator+(const Vector *const this,
//				const Vector &v);  //  1922
//		operator+(const Vector *const this,
//				const Vector &v);  //  1922
//		operator*(const Vector *const this,
//				float fl);  //  1929
//		operator+(const Vector *const this,
//				const Vector &v);  //  1929
//		{
//			char cTextureType;                            //  1946
//			bool bSparks;                                 //  1947
//			Vector(Vector *const this,
//				const Vector &v);  //  1946
//			Vector(Vector *const this,
//				const Vector &v);  //  1946
//			Instance(edict_t *pent);  //  1984
//			VARS(edict_t *pent);  //  2023
//			operator*(const Vector *const this,
//					float fl);  //  2057
//			operator+(const Vector *const this,
//					const Vector &v);  //  2057
//			operator*(const Vector *const this,
//					float fl);  //  2059
//			operator+(const Vector *const this,
//					const Vector &v);  //  2059
//			Vector(Vector *const this,
//				const Vector &v);  //  2060
//			operator*(const Vector *const this,
//					float fl);  //  2037
//			operator+(const Vector *const this,
//					const Vector &v);  //  2037
//			operator*(const Vector *const this,
//					float fl);  //  2039
//			operator+(const Vector *const this,
//					const Vector &v);  //  2039
//			Vector(Vector *const this,
//				const Vector &v);  //  2040
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //  2002
//			EMIT_SOUND(edict_t *entity,
//					int channel,
//					const char *sample,
//					float volume,
//					float attenuation);  //  2004
//		}
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  2070
//	}
}

/* <62693> ../cstrike/dlls/combat.cpp:1856 */
/* linkage=_Z4vstrPf */
char *vstr(float *v)
{
//	{
//		int idx;                                              //  1858
//		char string;                                          //  1859
//	}
}

/* <61df9> ../cstrike/dlls/combat.cpp:1704 */
void CBaseEntity::FireBullets(ULONG cShots, Vector vecSrc, Vector vecDirShooting, Vector vecSpread, float flDistance, int iBulletType, int iTracerFreq, int iDamage, entvars_t *pevAttacker)
{
//	{
//		int tracerCount;                                      //  1706
//		int tracer;                                           //  1707
//		TraceResult tr;                                       //  1708
//		Vector vecRight;                                //  1709
//		Vector vecUp;                                   //  1710
//		bool m_bCreatedShotgunSpark;                          //  1711
//		Vector(Vector *const this,
//			const Vector &v);  //  1709
//		Vector(Vector *const this,
//			const Vector &v);  //  1710
//		{
//			ULONG iShot;                                  //  1722
//			{
//				int spark;                            //  1724
//				float x;                              //  1727
//				float y;                              //  1727
//				float z;                              //  1727
//				Vector vecDir;                  //  1734
//				Vector vecEnd;                  //  1737
//				operator*(float fl,
//						const Vector &v);  //  1736
//				operator*(float fl,
//						const Vector &v);  //  1736
//				operator+(const Vector *const this,
//						const Vector &v);  //  1736
//				operator+(const Vector *const this,
//						const Vector &v);  //  1736
//				operator*(const Vector *const this,
//						float fl);  //  1739
//				operator+(const Vector *const this,
//						const Vector &v);  //  1739
//				{
//					Vector vecTracerSrc;    //  1745
//					operator*(const Vector *const this,
//							float fl);  //  1749
//					operator*(const Vector *const this,
//							float fl);  //  1749
//					operator+(const Vector *const this,
//							const Vector &v);  //  1749
//					operator+(const Vector *const this,
//							const Vector &v);  //  1749
//					operator+(const Vector *const this,
//							const Vector &v);  //  1749
//					MESSAGE_BEGIN(int msg_dest,
//							int msg_type,
//							const float *pOrigin,
//							edict_t *ed);  //  1765
//				}
//				{
//					class CBaseEntity *pEntity;  //  1780
//					Instance(edict_t *pent);  //  1780
//					Vector(Vector *const this,
//						const Vector &v);  //  1784
//					Vector(Vector *const this,
//						const Vector &v);  //  1786
//					Vector(Vector *const this,
//						const Vector &v);  //  1786
//					{
//						float flDamage;       //  1802
//						Vector(Vector *const this,
//							const Vector &v);  //  1793
//						Vector(Vector *const this,
//							const Vector &v);  //  1830
//						Vector(Vector *const this,
//							const Vector &v);  //  1822
//						Vector(Vector *const this,
//							const Vector &v);  //  1824
//						Vector(Vector *const this,
//							const Vector &v);  //  1824
//						Vector(Vector *const this,
//							const Vector &v);  //  1814
//						Vector(Vector *const this,
//							const Vector &v);  //  1816
//						Vector(Vector *const this,
//							const Vector &v);  //  1816
//						Vector(Vector *const this,
//							const Vector &v);  //  1806
//						Vector(Vector *const this,
//							const Vector &v);  //  1810
//						Vector(Vector *const this,
//							const Vector &v);  //  1797
//						Vector(Vector *const this,
//							const Vector &v);  //  1839
//						Vector(Vector *const this,
//							const Vector &v);  //  1840
//						Vector(Vector *const this,
//							const Vector &v);  //  1840
//						FNullEnt(const edict_t *pent);  //  1842
//						VARS(edict_t *pent);  //  1842
//						Vector(Vector *const this,
//							const Vector &v);  //  1833
//						Vector(Vector *const this,
//							const Vector &v);  //  1833
//					}
//				}
//				Vector(Vector *const this,
//					const Vector &v);  //  1851
//				Vector(Vector *const this,
//					const Vector &v);  //  1851
//			}
//		}
//	}
}

/* <61ce5> ../cstrike/dlls/combat.cpp:1647 */
void CBaseMonster::TraceAttack(entvars_t *pevAttacker, float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		Vector vecOrigin;                               //  1684
//		int blood;                                            //  1687
//		operator*(const Vector *const this,
//				float fl);  //  1684
//		operator-(const Vector *const this,
//				const Vector &v);  //  1684
//		Vector(Vector *const this,
//			const Vector &v);  //  1691
//	}
}

/* <61be6> ../cstrike/dlls/combat.cpp:1517 */
void CBaseMonster::FInViewCone(Vector *pOrigin)
{
//	{
//		class Vector2D vec2LOS;                               //  1519
//		float flDot;                                          //  1520
//		operator-(const Vector *const this,
//				const Vector &v);  //  1524
//		Normalize(const class Vector2D *const this);  //  1525
//		DotProduct(const class Vector2D &a,
//				const class Vector2D &b);  //  1527
//	}
}

/* <61ae6> ../cstrike/dlls/combat.cpp:1490 */
void CBaseMonster::FInViewCone(CBaseEntity *pEntity)
{
//	{
//		class Vector2D vec2LOS;                               //  1492
//		float flDot;                                          //  1493
//		operator-(const Vector *const this,
//				const Vector &v);  //  1497
//		Normalize(const class Vector2D *const this);  //  1498
//		DotProduct(const class Vector2D &a,
//				const class Vector2D &b);  //  1500
//	}
}

/* <61949> ../cstrike/dlls/combat.cpp:1454 */
void CBaseMonster::CheckTraceHullAttack(float flDist, int iDamage, int iDmgType)
{
//	{
//		TraceResult tr;                                       //  1456
//		Vector vecStart;                                //  1463
//		Vector vecEnd;                                  //  1465
//		Vector(Vector *const this,
//			const Vector &v);  //  1463
//		operator*(const Vector *const this,
//				float fl);  //  1465
//		operator+(const Vector *const this,
//				const Vector &v);  //  1465
//		{
//			class CBaseEntity *pEntity;                  //  1471
//			Instance(edict_t *pent);  //  1471
//		}
//	}
}

/* <61174> ../cstrike/dlls/combat.cpp:1044 */
/* linkage=_Z11RadiusFlash6VectorP9entvars_sS1_fii */
void RadiusFlash(Vector vecSrc, entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int iClassIgnore, int bitsDamageType)
{
//	{
//		class CBaseEntity *pEntity;                          //  1046
//		TraceResult tr;                                       //  1047
//		float flAdjustedDamage;                               //  1048
//		float falloff;                                        //  1048
//		Vector vecSpot;                                 //  1049
//		float flRadius;                                       //  1050
//		int bInWater;                                         //  1058
//		edict(CBaseEntity *const this);  //  1085
//		{
//			TraceResult tr2;                              //  1088
//			Vector vecLOS;                          //  1110
//			float flDot;                                  //  1111
//			float fadeTime;                               //  1120
//			float fadeHold;                               //  1120
//			int alpha;                                    //  1121
//			class CBasePlayer *pPlayer;                  //  1137
//			float currentHoldTime;                        //  1140
//			operator-(const Vector *const this,
//					const Vector &v);  //  1102
//			Length(const Vector *const this);  //  1102
//			operator+(const Vector *const this,
//					const Vector &v);  //  1115
//			operator-(const Vector *const this,
//					const Vector &v);  //  1115
//			DotProduct(Vector &a,
//					const Vector &b);  //  1117
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //  1157
//			{
//				int i;                                //  1160
//				{
//					class CBasePlayer *pObserver;//  1162
//					Vector(Vector *const this,
//						float X,
//						float Y,
//						float Z);  //  1166
//				}
//			}
//		}
//	}
}

/* <61120> ../cstrike/dlls/combat.cpp:1027 */
void CBaseMonster::DamageForce(float damage)
{
//	{
//		float force;                                          //  1029
//	}
}

/* <60d7a> ../cstrike/dlls/combat.cpp:845 */
void CBaseMonster::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		float flTake;                                         //   847
//		Vector vecDir;                                  //   848
//		FNullEnt(entvars_t *pev);  //   872
//		{
//			class CBaseEntity *pInflictor;               //   874
//			Instance(entvars_t *pev);  //   874
//			operator-(const Vector *const this,
//					const Vector &v);  //   877
//			operator-(const Vector *const this,
//					const Vector &v);  //   877
//			Normalize(const Vector *const this);  //   877
//			Normalize(const Vector *const this);  //   878
//		}
//		FNullEnt(entvars_t *pev);  //   939
//		Vector(Vector *const this,
//			const Vector &v);  //   957
//		SetConditions(CBaseMonster *const this,
//				int iConditions);  //   964
//		SetConditions(CBaseMonster *const this,
//				int iConditions);  //   969
//		SetConditions(CBaseMonster *const this,
//				int iConditions);  //   912
//		operator*(const Vector *const this,
//				float fl);  //   954
//		operator+(const Vector *const this,
//				const Vector &v);  //   954
//		HasConditions(CBaseMonster *const this,
//				int iConditions);  //   947
//	}
}

/* <60b32> ../cstrike/dlls/combat.cpp:981 */
void CBaseMonster::DeadTakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		Vector vecDir;                                  //   983
//		FNullEnt(entvars_t *pev);  //   987
//		{
//			class CBaseEntity *pInflictor;               //   989
//			Instance(entvars_t *pev);  //   989
//			operator-(const Vector *const this,
//					const Vector &v);  //   992
//			operator-(const Vector *const this,
//					const Vector &v);  //   992
//			Normalize(const Vector *const this);  //   992
//			Normalize(const Vector *const this);  //   993
//		}
//	}
}

/* <60aea> ../cstrike/dlls/combat.cpp:815 */
void CBaseMonster::TakeHealth(float flHealth, int bitsDamageType)
{
}

/* <60a59> ../cstrike/dlls/combat.cpp:310 */
void CBaseMonster::GibMonster(void)
{
//	{
//		TraceResult tr;                                       //   312
//		BOOL gibbed;                                          //   313
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   315
//	}
}

/* <606c8> ../cstrike/dlls/combat.cpp:190 */
void SpawnRandomGibs(entvars_t *pevVictim, int human, int cGibs)
{
//	{
//		int cSplat;                                           //   192
//		{
//			class CGib *pGib;                            //   196
//			operator*(const Vector *const this,
//					float fl);  //   227
//			operator*(const Vector *const this,
//					float fl);  //   234
//			Instance(entvars_t *pev);  //   240
//			operator*(const Vector *const this,
//					float fl);  //   244
//			operator*(const Vector *const this,
//					float fl);  //   252
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   256
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   256
//			LimitVelocity(CGib *const this);  //   258
//			GetClassPtr<CGib>(CGib *a);  //   196
//			operator*(const Vector *const this,
//					float fl);  //   248
//		}
//	}
}

/* <60320> ../cstrike/dlls/combat.cpp:63 */
void SpawnStickyGibs(entvars_t *pevVictim, Vector vecOrigin, int cGibs)
{
//	{
//		int i;                                                //    65
//		{
//			class CGib *pGib;                            //    75
//			GetClassPtr<CGib>(CGib *a);  //    75
//			operator*(const Vector *const this,
//					float fl);  //    93
//			operator*(const Vector *const this,
//					float fl);  //   100
//			Instance(entvars_t *pev);  //   106
//			operator*(const Vector *const this,
//					float fl);  //   110
//			operator*(const Vector *const this,
//					float fl);  //   118
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   124
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   124
//			LimitVelocity(CGib *const this);  //   128
//			operator*(const Vector *const this,
//					float fl);  //   114
//		}
//	}
}

/* <5ff7f> ../cstrike/dlls/combat.cpp:132 */
void SpawnHeadGib(entvars_t *pevVictim)
{
//	{
//		class CGib *pGib;                                    //   134
//		GetClassPtr<CGib>(CGib *a);  //   134
//		{
//			edict_t *pentPlayer;                         //   151
//			operator+(const Vector *const this,
//					const Vector &v);  //   149
//			{
//				entvars_t *pevPlayer;                //   156
//				operator+(const Vector *const this,
//						const Vector &v);  //   159
//				operator-(const Vector *const this,
//						const Vector &v);  //   159
//				Normalize(const Vector *const this);  //   159
//			}
//			edict(CBaseEntity *const this);  //   151
//			Instance(entvars_t *pev);  //   172
//			operator*(const Vector *const this,
//					float fl);  //   184
//			operator*(const Vector *const this,
//					float fl);  //   176
//			operator*(const Vector *const this,
//					float fl);  //   180
//		}
//		LimitVelocity(CGib *const this);  //   187
//	}
}

/* <5fbee> ../cstrike/dlls/combat.cpp:190 */
void SpawnRandomGibs(entvars_t *pevVictim, int cGibs, int human)
{
//	{
//		int cSplat;                                           //   192
//		{
//			class CGib *pGib;                            //   196
//			operator*(const Vector *const this,
//					float fl);  //   227
//			operator*(const Vector *const this,
//					float fl);  //   234
//			Instance(entvars_t *pev);  //   240
//			operator*(const Vector *const this,
//					float fl);  //   244
//			operator*(const Vector *const this,
//					float fl);  //   252
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   256
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   256
//			LimitVelocity(CGib *const this);  //   258
//			GetClassPtr<CGib>(CGib *a);  //   196
//			operator*(const Vector *const this,
//					float fl);  //   248
//		}
//	}
}

/* <5fb0b> ../cstrike/dlls/combat.cpp:789 */
void CGib::Spawn(const char *szGibModel)
{
//	MAKE_STRING_CLASS(const char *str,
//				entvars_t *pev);  //   800
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   803
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //   803
}

/* <5f938> ../cstrike/dlls/combat.cpp:598 */
void CBaseMonster::Killed(entvars_t *pevAttacker, int iGib)
{
//	{
//		unsigned int cCount;                                  //   600
//		BOOL fDone;                                           //   601
//		class CBaseEntity *pOwner;                           //   619
//		HasMemory(CBaseMonster *const this,
//				int iMemory);  //   603
//		ShouldGibMonster(CBaseMonster *const this,
//				int iGib);  //   605
//		Remember(CBaseMonster *const this,
//			int iMemory);  //   610
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   613
//		SetConditions(CBaseMonster *const this,
//				int iConditions);  //   616
//		Instance(edict_t *pent);  //   619
//		ShouldGibMonster(CBaseMonster *const this,
//				int iGib);  //   625
//	}
}

/* <5f8f8> ../cstrike/dlls/combat.cpp:551 */
void CBaseMonster::CallGibMonster(void)
{
//	{
//		BOOL fade;                                            //   553
//	}
}

/* <5f8cc> ../cstrike/dlls/combat.cpp:542 */
void CBaseMonster::ShouldGibMonster(int iGib)
{
}

/* <5f8a6> ../cstrike/dlls/combat.cpp:525 */
void CBaseMonster::BecomeDead(void)
{
}

/* <5f848> ../cstrike/dlls/combat.cpp:476 */
void CBaseMonster::GetSmallFlinchActivity(void)
{
//	{
//		Activity flinchActivity;                              //   478
//		BOOL fTriedDirection;                                 //   479
//		float flDot;                                          //   480
//	}
}

/* <5f65e> ../cstrike/dlls/combat.cpp:355 */
void CBaseMonster::GetDeathActivity(void)
{
//	{
//		Activity deathActivity;                               //   357
//		BOOL fTriedDirection;                                 //   358
//		float flDot;                                          //   359
//		TraceResult tr;                                       //   360
//		Vector vecSrc;                                  //   361
//		operator*(const Vector *const this,
//				float fl);  //   375
//		DotProduct(Vector &a,
//				const Vector &b);  //   375
//		edict(CBaseEntity *const this);  //   461
//		operator*(const Vector *const this,
//				float fl);  //   461
//		operator-(const Vector *const this,
//				const Vector &v);  //   461
//		edict(CBaseEntity *const this);  //   450
//		operator*(const Vector *const this,
//				float fl);  //   450
//		operator+(const Vector *const this,
//				const Vector &v);  //   450
//	}
}

/* <5f60a> ../cstrike/dlls/combat.cpp:295 */
void CBaseMonster::FadeMonster(void)
{
//	StopAnimation(CBaseMonster *const this);  //   297
//	SUB_StartFadeOut(CBaseEntity *const this);  //   303
}

/* <5f5ca> ../cstrike/dlls/combat.cpp:278 */
void CBaseMonster::HasAlienGibs(void)
{
//	{
//		int myClass;                                          //   280
//	}
}

/* <5f58a> ../cstrike/dlls/combat.cpp:263 */
void CBaseMonster::HasHumanGibs(void)
{
//	{
//		int myClass;                                          //   265
//	}
}

/* <5f4cb> ../cstrike/dlls/combat.cpp:52 */
void CGib::LimitVelocity(void)
{
//	{
//		float length;                                         //    54
//		Length(const Vector *const this);  //    54
//	}
//	LimitVelocity(CGib *const this);  //    52
}

/* <5f2d3> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <5f152> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <5f042> ../cstrike/dlls/combat.cpp:1185 */
void GetAmountOfPlayerVisible(Vector vecSrc, CBaseEntity *entity)
{
//	{
//		float retval;                                         //  1187
//		TraceResult tr;                                       //  1189
//		float const topOfHead;                                 //  1204
//		Vector spot;                                    //  1216
//		class Vector2D dir;                                   //  1232
//		float const standFeet;                                 //  1205
//		float const crouchFeet;                                //  1206
//		class Vector2D perp;                                  //  1234
//		float const edgeOffset;                                //  1235
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  1216
//		NormalizeInPlace(Vector2D *const this);  //  1233
//	}
}

/* <5eee0> ../cstrike/dlls/combat.cpp:718 */
void CGib::BounceGibTouch(CBaseEntity *pOther)
{
//	{
//		Vector vecSpot;                                 //   720
//		TraceResult tr;                                       //   721
//		operator*(const Vector *const this,
//				float fl);  //   728
//	}
//	BounceGibTouch(CGib *const this,
//			class CBaseEntity *pOther);  //   718
}

/* <5ed6d> ../cstrike/dlls/combat.cpp:761 */
void CGib::StickyGibTouch(CBaseEntity *pOther)
{
//	{
//		Vector vecSpot;                                 //   763
//		TraceResult tr;                                       //   764
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   769
//	}
//	StickyGibTouch(CGib *const this,
//			class CBaseEntity *pOther);  //   761
}

/* <5ecb4> ../cstrike/dlls/combat.cpp:1543 */
void CBaseEntity::FVisible(CBaseEntity *pEntity)
{
//	{
//		TraceResult tr;                                       //  1545
//		Vector vecLookerOrigin;                         //  1546
//		Vector vecTargetOrigin;                         //  1547
//	}
//	FVisible(CBaseEntity *const this,
//		class CBaseEntity *pEntity);  //  1543
}

/* <5eb17> ../cstrike/dlls/combat.cpp:2075 */
void CBaseEntity::TraceBleed(float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		TraceResult Bloodtr;                                  //  2087
//		Vector vecTraceDir;                             //  2088
//		float flNoise;                                        //  2089
//		int cCount;                                           //  2090
//		int i;                                                //  2091
//	}
//	TraceBleed(CBaseEntity *const this,
//			float flDamage,
//			Vector vecDir,
//			TraceResult *ptr,
//			int bitsDamageType);  //  2075
}

/* <5eab1> ../cstrike/dlls/combat.cpp:688 */
void CGib::WaitTillLand(void)
{
//	operator==(const Vector ::WaitTillLand(//			const Vector &v);  //   696
//	WaitTillLand(CGib *const this);  //   688
}

/* <5ea72> ../cstrike/dlls/combat.cpp:667 */
void CBaseEntity::SUB_FadeOut(void)
{
//	SUB_FadeOut(CBaseEntity *const this);  //   667
}

/* <5ea1f> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <5e9bb> ../cstrike/dlls/combat.cpp:1576 */
void CBaseEntity::FVisible(Vector &vecOrigin)
{
//	{
//		TraceResult tr;                                       //  1578
//		Vector vecLookerOrigin;                         //  1579
//	}
}

/* <5e872> ../cstrike/dlls/combat.cpp:1600 */
void CBaseEntity::TraceAttack(entvars_t *pevAttacker, float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		Vector vecOrigin;                               //  1602
//		operator*(const Vector *const this,
//				float fl);  //  1602
//		{
//			int blood;                                    //  1608
//			Vector(Vector *const this,
//				const Vector &v);  //  1612
//			Vector(Vector *const this,
//				const Vector &v);  //  1613
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //  1602
//	}
}

/* <5e84e> ../cstrike/dlls/combat.cpp:652 */
void CBaseEntity::SUB_StartFadeOut(void)
{
}

/* <5e80f> ../cstrike/dlls/monsters.h:70 */
void CGib::ObjectCaps(void)
{
}

/* <5e7e9> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <5e7ac> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <5e5b7> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <5e591> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <5e56b> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <5e535> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <5e4d5> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <5e49f> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <5e479> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <5e453> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <5e42d> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <5e407> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <5e3df> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <5e3b9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <5e393> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <5e36d> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <5e338> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <5e312> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <5e2ec> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <5e2b8> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <5e292> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <5e1f8> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <5e1a8> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <5e174> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <5e140> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <5e0df> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <5e09d> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <5e077> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <5e051> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <5e01f> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <5dfeb> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <5dfc5> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <5df91> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <5df6b> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <5df45> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <5df11> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <5deeb> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <5dec5> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <5de9f> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <5de08> ../cstrike/dlls/combat.cpp:1185 */
float GetAmountOfPlayerVisible(Vector vecSrc, CBaseEntity *entity)
{
//	{
//		float retval;                                         //  1187
//		TraceResult tr;                                       //  1189
//		float const topOfHead;                                 //  1204
//		float const standFeet;                                 //  1205
//		float const crouchFeet;                                //  1206
//		Vector spot;                                    //  1216
//		class Vector2D dir;                                   //  1232
//		class Vector2D perp;                                  //  1234
//		float const edgeOffset;                                //  1235
//	}
}

/* <5ddd6> ../cstrike/dlls/cbase.h:800 */
CGib *GetClassPtr<CGib>(CGib *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <5dda5> ../cstrike/dlls/vector.h:35 */
inline void Normalize(const class Vector2D *const this)
{
//	{
//		class Vector2D vec2;                                  //    37
//		float flLen;                                          //    39
//	}
}

/* <5dcf9> ../cstrike/dlls/combat.cpp:1349 */
void RadiusDamage2(Vector vecSrc, entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, float flRadius, int iClassIgnore, int bitsDamageType)
{
//	{
//		class CBaseEntity *pEntity;                          //  1351
//		TraceResult tr;                                       //  1352
//		float flAdjustedDamage;                               //  1353
//		float falloff;                                        //  1353
//		Vector vecSpot;                                 //  1354
//		int bInWater;                                         //  1362
//	}
}

/* <5dc27> ../cstrike/dlls/combat.cpp:1262 */
void RadiusDamage(Vector vecSrc, entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, float flRadius, int iClassIgnore, int bitsDamageType)
{
//	{
//		class CBaseEntity *pEntity;                          //  1264
//		TraceResult tr;                                       //  1265
//		float flAdjustedDamage;                               //  1266
//		float falloff;                                        //  1266
//		Vector vecSpot;                                 //  1267
//		int bInWater;                                         //  1275
//		{
//			bool useLOS;                                  //  1300
//			float damageRatio;                            //  1305
//			float length;                                 //  1308
//		}
//	}
}

/* <5dbdb> ../cstrike/dlls/combat.cpp:190 */
void SpawnRandomGibs(entvars_t *pevVictim, int cGibs, int human)
{
//	{
//		int cSplat;                                           //   192
//		{
//			class CGib *pGib;                            //   196
//		}
//	}
}

/* <5dbc0> ../cstrike/dlls/monsters.h:61 */
inline void CGib::CGib(void)
{
}

/* <5db84> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <5daf8> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <5da83> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <5da42> ../cstrike/dlls/util.h:67 */
inline void MAKE_STRING_CLASS(const char *str, entvars_t *pev)
{
}

/* <5d9d2> ../cstrike/dlls/combat.cpp:542 */
void CBaseMonster::ShouldGibMonster(int iGib)
{
}

/* <5d9a4> ../cstrike/dlls/vector.h:185 */
inline float DotProduct(Vector &a, Vector &b)
{
}

/* <5d97e> ../cstrike/dlls/combat.cpp:52 */
void CGib::LimitVelocity(void)
{
//	{
//		float length;                                         //    54
//	}
}

/* <5d960> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <5d92f> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <5d916> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <5d8fd> ../cstrike/dlls/basemonster.h:78 */
inline void CBaseMonster::StopAnimation(void)
{
}

/* <5d8d9> ../cstrike/dlls/basemonster.h:74 */
inline void CBaseMonster::HasMemory( int iMemory)
{
}

/* <5d8b5> ../cstrike/dlls/basemonster.h:72 */
inline void CBaseMonster::Remember( int iMemory)
{
}

/* <5d891> ../cstrike/dlls/basemonster.h:69 */
inline void CBaseMonster::HasConditions( int iConditions)
{
}

/* <5d868> ../cstrike/dlls/basemonster.h:67 */
inline void CBaseMonster::SetConditions( int iConditions)
{
}

/* <5d3b0> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <5d305> ../cstrike/dlls/combat.cpp:718 */
void CGib::BounceGibTouch(CBaseEntity *pOther)
{
//	{
//		Vector vecSpot;                                 //   720
//		TraceResult tr;                                       //   721
//		{
//			float volume;                                 //   748
//			float zvel;                                   //   749
//		}
//	}
}

/* <5d2cd> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <5d2a8> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <5d255> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <5d217> ../cstrike/dlls/combat.cpp:761 */
void CGib::StickyGibTouch(CBaseEntity *pOther)
{
//	{
//		Vector vecSpot;                                 //   763
//		TraceResult tr;                                       //   764
//	}
}

/* <5d0a1> ../cstrike/dlls/combat.cpp:2075 */
void CBaseEntity::TraceBleed(float flDamage, Vector vecDir, TraceResult *ptr, int bitsDamageType)
{
//	{
//		TraceResult Bloodtr;                                  //  2087
//		Vector vecTraceDir;                             //  2088
//		float flNoise;                                        //  2089
//		int cCount;                                           //  2090
//		int i;                                                //  2091
//	}
}

/* <5d053> ../cstrike/dlls/vector.h:131 */
inline void Vector::Make2D(void)
{
//	{
//		class Vector2D Vec2;                                  //   133
//	}
}

/* <5d02c> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <5d005> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <5cfbb> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <5cf94> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <5cf4a> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <5cf24> ../cstrike/dlls/vector.h:64 */
inline void Vector2D::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //    66
//	}
}

/* <5cef0> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <5ced0> ../engine/eiface.h:87 */
inline void TraceResult::TraceResult(void)
{
}

/* <5ceb2> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <5ce87> ../cstrike/dlls/vector.h:26 */
inline void Vector2D::Vector2D(float X, float Y)
{
}

/* <5ce69> ../cstrike/dlls/vector.h:32 */
inline void Vector2D::Length(void)
{
}

/* <5ce4b> ../cstrike/dlls/vector.h:25 */
inline void Vector2D::Vector2D(void)
{
}

/* <5ce2d> ../cstrike/dlls/combat.cpp:667 */
void CBaseEntity::SUB_FadeOut(void)
{
}

/* <4c6c1> ../cstrike/dlls/client.cpp:3234 */
/* linkage=_Z13ClientCommandP7edict_s */
void ClientCommand(edict_t *pEntity)
{
//	{
//		const char *pcmd;                                   //  3236
//		const char *pstr;                                   //  3237
//		class CHalfLifeMultiplay *mp;                        //  3239
//		entvars_t *pev;                                      //  3245
//		class CBasePlayer *player;                           //  3246
//		CMD_ARGV(int i);  //  3236
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3248
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3256
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3264
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3273
//		{
//			int iVoteID;                                  //  3294
//			int iVoteFail;                                //  3295
//			int iNumArgs;                                 //  3296
//			const char *pszArg1;                        //  3297
//			int iVoteLength;                              //  3298
//			class CBaseEntity *pKickEntity;              //  3332
//			class CBasePlayer *pKickPlayer;              //  3342
//			CMD_ARGC(void);  //  3296
//			CMD_ARGV(int i);  //  3297
//			atoi(const char *__nptr);  //  3309
//			CountTeamPlayers(int iTeam);  //  3326
//		}
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3363
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3371
//		{
//			int iFailed;                                  //  3377
//			int iVote;                                    //  3406
//			CMD_ARGC(void);  //  3400
//			CMD_ARGV(int i);  //  3406
//			atoi(const char *__nptr);  //  3406
//		}
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3448
//		{
//			int iTimeRemaining;                           //  3454
//			int iMinutes;                                 //  3458
//			int iSeconds;                                 //  3458
//			char secs;                                    //  3462
//			char *temp;                                  //  3463
//		}
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3488
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3496
//		IsObserver(CBasePlayer *const this);  //  3930
//		atoi(const char *__nptr);  //  3932
//		IsObserver(CBasePlayer *const this);  //  3937
//		{
//			int slot;                                     //  3966
//			atoi(const char *__nptr);  //  3966
//		}
//		{
//			int i;                                        //  4037
//			{
//				class CBasePlayer *pObserver;        //  4039
//				EMIT_SOUND(edict_t *entity,
//						int channel,
//						const char *sample,
//						float volume,
//						float attenuation);  //  4042
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  4043
//			}
//		}
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  4030
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  4031
//		{
//			int i;                                        //  4059
//			{
//				class CBasePlayer *pObserver;        //  4061
//				EMIT_SOUND(edict_t *entity,
//						int channel,
//						const char *sample,
//						float volume,
//						float attenuation);  //  4064
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  4065
//			}
//		}
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //  4052
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  4053
//		strstr(const char *__haystack,
//			const char *__needle);  //  4114
//		{
//			bool oldval;                                  //  4234
//		}
//		{
//			bool oldval;                                  //  4246
//		}
//		{
//			char command;                                 //  4270
//		}
//		{
//			bool oldval;                                  //  4221
//		}
//		{
//			bool oldval;                                  //  4210
//			{
//				int arg;                              //  4205
//			}
//		}
//		{
//			int slot;                                     //  3996
//			atoi(const char *__nptr);  //  3996
//		}
//		{
//			float val;                                    //  3925
//			atof(const char *__nptr);  //  3925
//			SetObserverAutoDirector(CBasePlayer *const this,
//						bool val);  //  3926
//		}
//		{
//			int mode;                                     //  3901
//			atoi(const char *__nptr);  //  3901
//			IsObserver(CBasePlayer *const this);  //  3903
//			{
//				int gmsgADStop;                       //  3918
//				MESSAGE_BEGIN(int msg_dest,
//						int msg_type,
//						const float *pOrigin,
//						entvars_t *ent);  //  3919
//			}
//		}
//		{
//			int slot;                                     //  3523
//			atoi(const char *__nptr);  //  3523
//		}
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  3504
//	}
}

/* <4c4ef> ../cstrike/dlls/client.cpp:494 */
/* linkage=_Z15ProcessKickVoteP11CBasePlayerS0_ */
void ProcessKickVote(CBasePlayer *pVotingPlayer, CBasePlayer *pKickPlayer)
{
//	{
//		class CBaseEntity *pTempEntity;                      //   500
//		class CBasePlayer *pTempPlayer;                      //   501
//		int iValidVotes;                                      //   502
//		int iVoteID;                                          //   503
//		int iVotesNeeded;                                     //   504
//		float fKickPercent;                                   //   505
//		int iTeamCount;                                       //   507
//		CountTeamPlayers(int iTeam);  //   507
//		edict(CBaseEntity *const this);  //   560
//		FNullEnt(const edict_t *pent);  //   560
//		edict(CBaseEntity *const this);  //   517
//		FNullEnt(const edict_t *pent);  //   517
//	}
}

/* <4c477> ../cstrike/dlls/client.cpp:306 */
/* linkage=_Z7respawnP9entvars_si */
void respawn(entvars_t *pev, BOOL fCopyCorpse)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //   319
//		class CBasePlayer *pPlayer;                          //   322
//		MarkSpawnSkipped(CHalfLifeMultiplay *const this);  //   321
//	}
}

/* <4c3c5> ../cstrike/dlls/client.cpp:414 */
int CountTeams(void)
{
//	{
//		int iNumCT;                                           //   416
//		int iNumTerrorist;                                    //   416
//		class CBaseEntity *pPlayer;                          //   421
//		class CBasePlayer *player;                           //   422
//		edict(CBaseEntity *const this);  //   425
//		FNullEnt(const edict_t *pent);  //   425
//	}
}

/* <4c2be> ../cstrike/dlls/client.cpp:443 */
/* linkage=_Z11ListPlayersP11CBasePlayer */
void ListPlayers(CBasePlayer *current)
{
//	{
//		class CBaseEntity *pPlayer;                          //   445
//		class CBasePlayer *player;                           //   446
//		char message;                                         //   447
//		char cNumber;                                         //   448
//		int iUserID;                                          //   449
//		edict(CBaseEntity *const this);  //   454
//		FNullEnt(const edict_t *pent);  //   454
//		edict(CBaseEntity *const this);  //   460
//	}
}

/* <4c200> ../cstrike/dlls/client.cpp:475 */
int CountTeamPlayers(int iTeam)
{
//	{
//		class CBaseEntity *pPlayer;                          //   477
//		int i;                                                //   478
//	}
}

/* <4c084> ../cstrike/dlls/client.cpp:661 */
/* linkage=_Z17ClientPutInServerP7edict_s */
void ClientPutInServer(edict_t *pEntity)
{
//	{
//		class CBasePlayer *pPlayer;                          //   663
//		class CBaseEntity *Target;                           //   664
//		Vector CamAngles;                               //   665
//		class CHalfLifeMultiplay *mp;                        //   666
//		entvars_t *pev;                                      //   668
//		char sName;                                           //   777
//		CheckStartMoney(void);  //   696
//		{
//			char *pApersand;                             //   781
//		}
//		operator-(const Vector *const this,
//				const Vector &v);  //   761
//		Normalize(const Vector *const this);  //   762
//	}
}

/* <4bbff> ../cstrike/dlls/client.cpp:814 */
/* linkage=_Z8Host_SayP7edict_si */
void Host_Say(edict_t *pEntity, int teamonly)
{
//	{
//		class CBasePlayer *client;                           //   816
//		int j;                                                //   817
//		char *p;                                             //   818
//		char text;                                            //   819
//		char szTemp;                                          //   820
//		const char *cpSay;                                  //   821
//		const char *cpSayTeam;                              //   822
//		const char *pcmd;                                   //   823
//		bool bSenderDead;                                     //   824
//		entvars_t *pev;                                      //   827
//		class CBasePlayer *player;                           //   828
//		const char *placeName;                              //   913
//		char *pszFormat;                                     //   933
//		char *pszConsoleFormat;                              //   934
//		bool consoleUsesPlaceName;                            //   935
//		CMD_ARGV(int i);  //   823
//		CMD_ARGC(void);  //   846
//		CMD_ARGC(void);  //   853
//		Q_strlen(const char *str);  //   910
//		{
//			Place playerPlace;                            //   916
//			const BotPhraseList *placeList;             //   917
//			int i;                                        //   918
//			{
//				const_iterator iter;                  //   921
//				operator++(_List_const_iterator<BotPhrase*> *const this);  //   921
//			}
//		}
//		{
//			char *pAmpersand;                            //  1026
//		}
//		edict(CBaseEntity *const this);  //  1044
//		FNullEnt(const edict_t *pent);  //  1044
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1085
//		ENTINDEX(edict_t *pEdict);  //  1086
//		CMD_ARGC(void);  //   865
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  1101
//		ENTINDEX(edict_t *pEdict);  //  1102
//		{
//			char *fullText;                              //  1115
//		}
//		{
//			char *temp;                                  //  1129
//			char *szTeam;                                //  1130
//			char *deadText;                              //  1131
//			edict(CBaseEntity *const this);  //  1156
//			edict(CBaseEntity *const this);  //  1156
//		}
//	}
}

/* <4bb4a> ../cstrike/dlls/client.cpp:2933 */
/* linkage=_Z16EntityFromUserIDi */
CBaseEntity *EntityFromUserID(int userID)
{
//	{
//		class CBaseEntity *pTempEntity;                      //  2935
//		class CBasePlayer *pTempPlayer;                      //  2936
//		edict(CBaseEntity *const this);  //  2945
//		edict(CBaseEntity *const this);  //  2939
//		FNullEnt(const edict_t *pent);  //  2939
//	}
}

/* <4baa5> ../cstrike/dlls/client.cpp:2958 */
/* linkage=_Z20CountPlayersInServerv */
int CountPlayersInServer(void)
{
//	{
//		int count;                                            //  2960
//		class CBaseEntity *pTempEntity;                      //  2961
//		class CBasePlayer *pTempPlayer;                      //  2962
//		edict(CBaseEntity *const this);  //  2965
//		FNullEnt(const edict_t *pent);  //  2965
//	}
}

/* <4b959> ../cstrike/dlls/client.cpp:4282 */
/* linkage=_Z21ClientUserInfoChangedP7edict_sPc */
void ClientUserInfoChanged(edict_t *pEntity, char *infobuffer)
{
//	{
//		class CBasePlayer *pPlayer;                          //  4288
//		const char *szBufferName;                           //  4289
//		int iClientIndex;                                     //  4290
//		entindex(CBaseEntity *const this);  //  4290
//		FStrEq(const char *sz1,
//			const char *sz2);  //  4293
//		{
//			char szName;                                  //  4295
//			{
//				char *pPct;                          //  4300
//			}
//			MESSAGE_BEGIN(int msg_dest,
//					int msg_type,
//					const float *pOrigin,
//					edict_t *ed);  //  4331
//		}
//	}
}

/* <4b7ec> ../cstrike/dlls/cbase.h:800 */
/* linkage=_Z11GetClassPtrI11CBasePlayerEPT_S2_ */
CBasePlayer *GetClassPtr<CBasePlayer>(CBasePlayer *a)
{
//	{
//		entvars_t *pev;                                      //   802
//		VARS(edict_t *pent);  //   806
//		GET_PRIVATE(edict_t *pent);  //   809
//		operator new(size_t stAllocateBlock,
//				entvars_t *pev);  //   814
//		CBasePlayer(CBasePlayer *const this);  //   814
//	}
}

/* <4b7cf> ../cstrike/dlls/client.cpp:6204 */
/* linkage=_Z20AllowLagCompensationv */
int AllowLagCompensation(void)
{
}

/* <4b77c> ../cstrike/dlls/client.cpp:6179 */
/* linkage=_Z16InconsistentFilePK7edict_sPKcPc */
int InconsistentFile(const edict_t *player, const char *filename, char *disconnect_message)
{
}

/* <4b733> ../cstrike/dlls/client.cpp:6156 */
/* linkage=_Z24CreateInstancedBaselinesv */
void CreateInstancedBaselines(void)
{
//	{
//		int iret;                                             //  6158
//		entity_state_t state;                                 //  6159
//	}
}

/* <4b6c2> ../cstrike/dlls/client.cpp:6122 */
/* linkage=_Z13GetHullBoundsiPfS_ */
int GetHullBounds(int hullnumber, float *mins, float *maxs)
{
//	{
//		int iret;                                             //  6124
//	}
}

/* <4b644> ../cstrike/dlls/client.cpp:6101 */
/* linkage=_Z20ConnectionlessPacketPK8netadr_sPKcPcPi */
int ConnectionlessPacket(const class netadr_s *net_from, const char *args, char *response_buffer, int *response_buffer_size)
{
//	{
//		int max_buffer_size;                                  //  6104
//	}
}

/* <4b4eb> ../cstrike/dlls/client.cpp:6074 */
/* linkage=_Z6CmdEndPK7edict_s */
void CmdEnd(const edict_t *player)
{
//	{
//		entvars_t *pev;                                      //  6076
//		class CBasePlayer *pl;                               //  6077
//		Instance(entvars_t *pev);  //  6077
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6089
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  6089
//	}
}

/* <4b3ee> ../cstrike/dlls/client.cpp:6050 */
/* linkage=_Z8CmdStartPK7edict_sPK9usercmd_sj */
void CmdStart(const edict_t *player, const usercmd_s *cmd, unsigned int random_seed)
{
//	{
//		entvars_t *pev;                                      //  6052
//		class CBasePlayer *pl;                               //  6053
//		Instance(entvars_t *pev);  //  6053
//	}
}

/* <4b1fd> ../cstrike/dlls/client.cpp:5889 */
/* linkage=_Z16UpdateClientDataPK7edict_siP12clientdata_s */
void UpdateClientData(const class edict_s *ent, int sendweapons, class clientdata_s *cd)
{
//	{
//		entvars_t *pev;                                      //  5894
//		class CBasePlayer *pl;                               //  5895
//		entvars_t *pevOrg;                                   //  5896
//		Instance(entvars_t *pev);  //  5895
//		{
//			int iUser3;                                   //  5976
//			IsObserver(CBasePlayer *const this);  //  5998
//			{
//				class CBasePlayerWeapon *gun;        //  6003
//				{
//					ItemInfo II;                  //  6007
//				}
//			}
//		}
//		Instance(entvars_t *pev);  //  5905
//	}
}

/* <4b0a4> ../cstrike/dlls/client.cpp:5818 */
/* linkage=_Z13GetWeaponDataP7edict_sP13weapon_data_s */
int GetWeaponData(edict_s *player, class weapon_data_s *info)
{
//	{
//		int i;                                                //  5820
//		weapon_data_t *item;                                 //  5821
//		entvars_t *pev;                                      //  5822
//		class CBasePlayer *pl;                               //  5823
//		class CBasePlayerWeapon *gun;                        //  5824
//		ItemInfo II;                                          //  5826
//		Instance(entvars_t *pev);  //  5823
//		{
//			class CBasePlayerItem *pPlayerItem;          //  5839
//		}
//	}
}

/* <4b08a> ../cstrike/dlls/client.cpp:5811 */
/* linkage=_Z16RegisterEncodersv */
void RegisterEncoders(void)
{
}

/* <4aff3> ../cstrike/dlls/client.cpp:5759 */
/* linkage=_Z13Custom_EncodeP7delta_sPKhS2_ */
void Custom_Encode(delta_s *pFields, const unsigned char *from, const unsigned char *to)
{
//	{
//		entity_state_t *f;                                   //  5761
//		entity_state_t *t;                                   //  5761
//		int beamType;                                         //  5762
//		int initialized;                                      //  5763
//	}
}

/* <4afc4> ../cstrike/dlls/client.cpp:5738 */
/* linkage=_Z23Custom_Entity_FieldInitP7delta_s */
void Custom_Entity_FieldInit(delta_s *pFields)
{
}

/* <4aef3> ../cstrike/dlls/client.cpp:5516 */
/* linkage=_Z14CreateBaselineiiP14entity_state_sP7edict_si6VectorS3_ */
void CreateBaseline(int player, int eindex, class entity_state_s *baseline, class edict_s *entity, int playermodelindex, Vector player_mins, Vector player_maxs)
{
}

/* <4ac57> ../cstrike/dlls/client.cpp:5312 */
/* linkage=_Z13AddToFullPackP14entity_state_siP7edict_sS2_iiPh */
int AddToFullPack(entity_state_s *state, int e, edict_t *ent, edict_t *host, int hostflags, int player, unsigned char *pSet)
{
//	{
//		int i;                                                //  5314
//		int hostnum;                                          //  5331
//		ENTINDEX(edict_t *pEdict);  //  5331
//		CheckPlayerPVSLeafChanged(edict_t *client,
//						int clientnum);  //  5332
//		ResetPlayerPVS(edict_t *client,
//				int clientnum);  //  5334
//		CheckEntityRecentlyInPVS(int clientnum,
//					int entitynum,
//					float currenttime);  //  5342
//		MarkEntityInPVS(int clientnum,
//				int entitynum,
//				float time,
//				bool inpvs);  //  5351
//		ENTINDEX(edict_t *pEdict);  //  5462
//		{
//			int owner;                                    //  5468
//			ENTINDEX(edict_t *pEdict);  //  5468
//		}
//		MarkEntityInPVS(int clientnum,
//				int entitynum,
//				float time,
//				bool inpvs);  //  5347
//	}
}

/* <4aae8> ../cstrike/dlls/client.cpp:5240 */
bool CheckPlayerPVSLeafChanged(edict_t *client, int clientnum)
{
//	{
//		PLAYERPVSSTATUS *pvs;                                //  5244
//		{
//			int i;                                        //  5252
//		}
//	}
}

/* <4aa75> ../cstrike/dlls/client.cpp:5226 */
void ResetPlayerPVS(edict_t *client, int clientnum)
{
//	{
//		PLAYERPVSSTATUS *pvs;                                //  5230
//	}
}

/* <4a92d> ../cstrike/dlls/client.cpp:5160 */
/* linkage=_Z15SetupVisibilityP7edict_sS0_PPhS2_ */
void SetupVisibility(edict_t *pViewEntity, edict_t *pClient, unsigned char ** pvs, unsigned char ** pas)
{
//	{
//		Vector org;                                     //  5162
//		edict_t *pView;                                      //  5163
//		class CBasePlayer *pPlayer;                          //  5179
//		Instance(edict_t *pent);  //  5179
//		operator+(const Vector *const this,
//				const Vector &v);  //  5187
//		operator+(const Vector *const this,
//				const Vector &v);  //  5190
//		edict(CBaseEntity *const this);  //  5183
//	}
}

/* <4a8b5> ../cstrike/dlls/client.cpp:5111 */
/* linkage=_Z14SpectatorThinkP7edict_s */
void SpectatorThink(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //  5113
//		class CBaseSpectator *pPlayer;                       //  5114
//		GET_PRIVATE(edict_t *pent);  //  5114
//	}
}

/* <4a83d> ../cstrike/dlls/client.cpp:5095 */
/* linkage=_Z19SpectatorDisconnectP7edict_s */
void SpectatorDisconnect(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //  5097
//		class CBaseSpectator *pPlayer;                       //  5098
//		GET_PRIVATE(edict_t *pent);  //  5098
//	}
}

/* <4a7b9> ../cstrike/dlls/client.cpp:5079 */
/* linkage=_Z16SpectatorConnectP7edict_s */
void SpectatorConnect(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //  5081
//		class CBaseSpectator *pPlayer;                       //  5082
//		GET_PRIVATE(edict_t *pent);  //  5082
//	}
}

/* <4a731> ../cstrike/dlls/client.cpp:5039 */
/* linkage=_Z19PlayerCustomizationP7edict_sP15customization_s */
void PlayerCustomization(edict_t *pEntity, customization_t *pCust)
{
//	{
//		entvars_t *pev;                                      //  5041
//		class CBasePlayer *pPlayer;                          //  5042
//		GET_PRIVATE(edict_t *pent);  //  5042
//	}
}

/* <4a703> ../cstrike/dlls/client.cpp:5022 */
/* linkage=_Z9Sys_ErrorPKc */
void Sys_Error(const char *error_string)
{
}

/* <4a6e5> ../cstrike/dlls/client.cpp:4996 */
/* linkage=_Z18GetGameDescriptionv */
const char *GetGameDescription(void)
{
}

/* <4a581> ../cstrike/dlls/client.cpp:4534 */
/* linkage=_Z14ClientPrecachev */
void ClientPrecache(void)
{
//	{
//		int i;                                                //  4536
//		int numPlayerModels;                                  //  4678
//		Vector temp;                                    //  4760
//		Vector vMin;                                    //  4766
//		Vector vMax;                                    //  4767
//		bool isCZero;                                         //  4813
//		{
//			const char *fname;                          //  4690
//		}
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  4767
//		Vector(Vector *const this,
//			const Vector &v);  //  4760
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  4766
//		{
//			const char *fname;                          //  4785
//		}
//	}
}

/* <4a548> ../cstrike/dlls/client.cpp:4504 */
/* linkage=_Z10StartFramev */
void StartFrame(void)
{
//	{
//		cvar_t *skill;                                       //  4515
//	}
}

/* <4a50d> ../cstrike/dlls/client.cpp:4491 */
/* linkage=_Z16ParmsChangeLevelv */
void ParmsChangeLevel(void)
{
//	{
//		SAVERESTOREDATA *pSaveData;                          //  4494
//	}
}

/* <4a4f4> ../cstrike/dlls/client.cpp:4486 */
/* linkage=_Z13ParmsNewLevelv */
void ParmsNewLevel(void)
{
}

/* <4a47c> ../cstrike/dlls/client.cpp:4475 */
/* linkage=_Z15PlayerPostThinkP7edict_s */
void PlayerPostThink(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //  4477
//		class CBasePlayer *pPlayer;                          //  4478
//		GET_PRIVATE(edict_t *pent);  //  4478
//	}
}

/* <4a404> ../cstrike/dlls/client.cpp:4459 */
/* linkage=_Z14PlayerPreThinkP7edict_s */
void PlayerPreThink(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //  4461
//		class CBasePlayer *pPlayer;                          //  4462
//		GET_PRIVATE(edict_t *pent);  //  4462
//	}
}

/* <4a392> ../cstrike/dlls/client.cpp:4400 */
/* linkage=_Z14ServerActivateP7edict_sii */
void ServerActivate(edict_t *pEdictList, int edictCount, int clientMax)
{
//	{
//		int i;                                                //  4402
//		class CBaseEntity *pClass;                           //  4403
//	}
}

/* <4a378> ../cstrike/dlls/client.cpp:4362 */
/* linkage=_Z16ServerDeactivatev */
void ServerDeactivate(void)
{
}

/* <49c3e> ../cstrike/dlls/client.cpp:3113 */
/* linkage=_Z24HandleRadioAliasCommandsP11CBasePlayerPKc */
BOOL HandleRadioAliasCommands(CBasePlayer *pPlayer, const char *pszCommand)
{
//	{
//		BOOL bRetVal;                                         //  3115
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3118
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3123
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3128
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3133
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3138
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3143
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3149
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3154
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3159
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3164
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3169
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3174
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3180
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3185
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3190
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3195
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3200
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3205
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3210
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3215
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3220
//		Radio3(CBasePlayer *player,
//			int slot);  //  3223
//		Radio1(CBasePlayer *player,
//			int slot);  //  3121
//		Radio1(CBasePlayer *player,
//			int slot);  //  3131
//		Radio2(CBasePlayer *player,
//			int slot);  //  3152
//		Radio1(CBasePlayer *player,
//			int slot);  //  3126
//		Radio1(CBasePlayer *player,
//			int slot);  //  3136
//		Radio1(CBasePlayer *player,
//			int slot);  //  3141
//		Radio1(CBasePlayer *player,
//			int slot);  //  3146
//		Radio3(CBasePlayer *player,
//			int slot);  //  3183
//		Radio2(CBasePlayer *player,
//			int slot);  //  3157
//		Radio2(CBasePlayer *player,
//			int slot);  //  3162
//		Radio2(CBasePlayer *player,
//			int slot);  //  3167
//		Radio2(CBasePlayer *player,
//			int slot);  //  3172
//		Radio2(CBasePlayer *player,
//			int slot);  //  3177
//		Radio3(CBasePlayer *player,
//			int slot);  //  3188
//		Radio3(CBasePlayer *player,
//			int slot);  //  3193
//		Radio3(CBasePlayer *player,
//			int slot);  //  3198
//		Radio3(CBasePlayer *player,
//			int slot);  //  3203
//		Radio3(CBasePlayer *player,
//			int slot);  //  3208
//		Radio3(CBasePlayer *player,
//			int slot);  //  3213
//		Radio3(CBasePlayer *player,
//			int slot);  //  3218
//	}
}

/* <4958c> ../cstrike/dlls/client.cpp:2983 */
/* linkage=_Z22HandleBuyAliasCommandsP11CBasePlayerPKc */
BOOL HandleBuyAliasCommands(CBasePlayer *pPlayer, const char *pszCommand)
{
//	{
//		BOOL bRetVal;                                         //  2985
//		char *pszFailItem;                                   //  2986
//		enum WeaponIdType weaponID;                           //  2988
//		const char *weaponFailName;                         //  2989
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3014
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3030
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3046
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3051
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3056
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3061
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3066
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3071
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3076
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3081
//		{
//			class CHalfLifeMultiplay *mp;                //  2993
//		}
//		BuyAmmo(CBasePlayer *player,
//			int nSlot,
//			bool bBlinkMoney);  //  3020
//		BuyAmmo(CBasePlayer *player,
//			int nSlot,
//			bool bBlinkMoney);  //  3036
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3054
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3049
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3059
//		BuyAmmo(CBasePlayer *player,
//			int nSlot,
//			bool bBlinkMoney);  //  3022
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3074
//		BuyAmmo(CBasePlayer *player,
//			int nSlot,
//			bool bBlinkMoney);  //  3038
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3064
//		BuyItem(CBasePlayer *pPlayer,
//			int iSlot);  //  3069
//		FStrEq(const char *sz1,
//			const char *sz2);  //  3088
//	}
}

/* <49402> ../cstrike/dlls/client.cpp:2698 */
/* linkage=_Z10BuyGunAmmoR11CBasePlayerR15CBasePlayerItemb */
bool BuyGunAmmo(CBasePlayer &player, class CBasePlayerItem &weapon, bool bBlinkMoney)
{
//	{
//		int nAmmo;                                            //  2706
//		int cost;                                             //  2719
//		const char *classname;                              //  2720
//		iMaxAmmo1(CBasePlayerItem *const this);  //  2713
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  2873
//	}
}

/* <48e4b> ../cstrike/dlls/client.cpp:2214 */
/* linkage=_Z21HandleMenu_ChooseTeamP11CBasePlayeri */
BOOL HandleMenu_ChooseTeam(CBasePlayer *player, int slot)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  2216
//		enum TeamName team;                                   //  2217
//		edict_t *pentSpawnSpot;                              //  2218
//		int oldTeam;                                          //  2525
//		char *szOldTeam;                                     //  2540
//		char *szNewTeam;                                     //  2541
//		edict(CBaseEntity *const this);  //  2235
//		edict(CBaseEntity *const this);  //  2323
//		edict(CBaseEntity *const this);  //  2323
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				entvars_t *ent);  //  2331
//		TeamChangeUpdate(CBasePlayer *player,
//				int team_id);  //  2349
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2336
//		edict(CBaseEntity *const this);  //  2337
//		ENTINDEX(edict_t *pEdict);  //  2337
//		VARS(edict_t *pent);  //  2352
//		Vector(Vector *const this,
//			const Vector &v);  //  2352
//		VARS(edict_t *pent);  //  2352
//		Vector(Vector *const this,
//			const Vector &v);  //  2352
//		MESSAGE_BEGIN(int msg_dest,
//				int msg_type,
//				const float *pOrigin,
//				edict_t *ed);  //  2355
//		edict(CBaseEntity *const this);  //  2356
//		ENTINDEX(edict_t *pEdict);  //  2356
//		{
//			bool madeRoom;                                //  2402
//		}
//		edict(CBaseEntity *const this);  //  2378
//		{
//			cvar_t humans_join_team;                      //  2435
//			int humanTeam;                                //  2436
//		}
//		{
//			bool isCZero;                                 //  2494
//		}
//		TeamChangeUpdate(CBasePlayer *player,
//				int team_id);  //  2531
//		edict(CBaseEntity *const this);  //  2548
//		edict(CBaseEntity *const this);  //  2548
//		edict(CBaseEntity *const this);  //  2371
//		Vector(Vector *const this,
//			float X,
//			float Y,
//			float Z);  //  2363
//		CheckStartMoney(void);  //  2466
//	}
}

/* <48d40> ../cstrike/dlls/client.cpp:1998 */
/* linkage=_Z27HandleMenu_ChooseAppearanceP11CBasePlayeri */
void HandleMenu_ChooseAppearance(CBasePlayer *player, int slot)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  2000
//		class  appearance;                                    //  2007
//		int numSkins;                                         //  2009
//		edict(CBaseEntity *const this);  //  2183
//		entindex(CBaseEntity *const this);  //  2183
//	}
}

/* <48bf5> ../cstrike/dlls/client.cpp:1629 */
/* linkage=_Z13BuyMachineGunP11CBasePlayeri */
void BuyMachineGun(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iWeapon;                                          //  1631
//		int iWeaponPrice;                                     //  1632
//		const char *pszWeapon;                              //  1633
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1672
//		DropPrimary(CBasePlayer *pPlayer);  //  1658
//	}
}

/* <48adf> ../cstrike/dlls/client.cpp:1498 */
/* linkage=_Z8BuyRifleP11CBasePlayeri */
void BuyRifle(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iWeapon;                                          //  1500
//		int iWeaponPrice;                                     //  1501
//		bool bIsCT;                                           //  1502
//		const char *pszWeapon;                              //  1503
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1624
//		DropPrimary(CBasePlayer *pPlayer);  //  1610
//	}
}

/* <489bb> ../cstrike/dlls/client.cpp:1450 */
/* linkage=_Z19BuyWeaponByWeaponIDP11CBasePlayer12WeaponIdType */
void BuyWeaponByWeaponID(CBasePlayer *pPlayer, WeaponIdType weaponID)
{
//	{
//		const class WeaponInfoStruct *info;                 //  1463
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1493
//		DropPrimary(CBasePlayer *pPlayer);  //  1474
//		DropSecondary(CBasePlayer *pPlayer);  //  1478
//	}
}

/* <488b5> ../cstrike/dlls/client.cpp:1378 */
/* linkage=_Z16BuySubMachineGunP11CBasePlayeri */
void BuySubMachineGun(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iWeapon;                                          //  1380
//		int iWeaponPrice;                                     //  1381
//		const char *pszWeapon;                              //  1382
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1445
//		DropPrimary(CBasePlayer *pPlayer);  //  1431
//	}
}

/* <487b0> ../cstrike/dlls/client.cpp:1325 */
/* linkage=_Z10BuyShotgunP11CBasePlayeri */
void BuyShotgun(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iWeapon;                                          //  1327
//		int iWeaponPrice;                                     //  1328
//		const char *pszWeapon;                              //  1329
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1373
//		DropPrimary(CBasePlayer *pPlayer);  //  1359
//	}
}

/* <48696> ../cstrike/dlls/client.cpp:1247 */
/* linkage=_Z9BuyPistolP11CBasePlayeri */
void BuyPistol(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iWeapon;                                          //  1249
//		int iWeaponPrice;                                     //  1250
//		const char *pszWeapon;                              //  1251
//		BlinkAccount(CBasePlayer *player,
//				int numBlinks);  //  1320
//		DropSecondary(CBasePlayer *pPlayer);  //  1305
//	}
}

/* <4865e> ../cstrike/dlls/client.cpp:1160 */
inline void DropSecondary(CBasePlayer *pPlayer)
{
//	{
//		class CBasePlayerWeapon *pWeapon;                    //  1166
//	}
}

/* <483a2> ../cstrike/dlls/client.cpp:1197 */
/* linkage=_Z10CanBuyThisP11CBasePlayeri */
bool CanBuyThis(CBasePlayer *pPlayer, int iWeapon)
{
//	{
//		class CHalfLifeMultiplay *mp;                        //  1199
//	}
}

/* <48298> ../cstrike/dlls/client.cpp:580 */
/* linkage=_Z17SelectDefaultTeamv */
enum TeamName SelectDefaultTeam(void)
{
//	{
//		enum TeamName team;                                   //   582
//		class CHalfLifeMultiplay *mp;                        //   583
//	}
}

/* <48013> ../cstrike/dlls/client.cpp:347 */
/* linkage=_Z10ClientKillP7edict_s */
void ClientKill(edict_t *pEntity)
{
//	{
//		entvars_t *pev;                                      //   349
//		class CHalfLifeMultiplay *mp;                        //   350
//		class CBasePlayer *pl;                               //   352
//		Instance(entvars_t *pev);  //   352
//		IsObserver(CBasePlayer *const this);  //   354
//	}
}

/* <47f5b> ../cstrike/dlls/client.cpp:255 */
/* linkage=_Z16ClientDisconnectP7edict_s */
void ClientDisconnect(edict_t *pEntity)
{
//	{
//		class CBasePlayer *pPlayer;                          //   257
//		class CSound *pSound;                                //   276
//		Instance(edict_t *pent);  //   257
//	}
}

/* <47efd> ../cstrike/dlls/client.cpp:236 */
/* linkage=_Z13ClientConnectP7edict_sPKcS2_Pc */
BOOL ClientConnect(edict_t *pEntity, const char *pszName, const char *pszAddress, char *szRejectReason)
{
}

/* <47eac> ../cstrike/dlls/client.cpp:180 */
/* linkage=_Z17set_suicide_frameP9entvars_s */
void set_suicide_frame(entvars_t *pev)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   182
}

/* <47da7> ../cstrike/dlls/client.cpp:5604 */
/* linkage=_Z13Entity_EncodeP7delta_sPKhS2_ */
void Entity_Encode(delta_s *pFields, const unsigned char *from, const unsigned char *to)
{
//	{
//		entity_state_t *f;                                   //  5606
//		entity_state_t *t;                                   //  5606
//		int localplayer;                                      //  5608
//		int initialized;                                      //  5609
//		Entity_FieldInit(delta_s *pFields);  //  5613
//	}
}

/* <47d8a> ../cstrike/dlls/client.cpp:5586 */
void Entity_FieldInit(delta_s *pFields)
{
}

/* <47cd1> ../cstrike/dlls/client.cpp:5676 */
/* linkage=_Z13Player_EncodeP7delta_sPKhS2_ */
void Player_Encode(delta_s *pFields, const unsigned char *from, const unsigned char *to)
{
//	{
//		entity_state_t *f;                                   //  5678
//		entity_state_t *t;                                   //  5678
//		int localplayer;                                      //  5679
//		int initialized;                                      //  5680
//		Player_FieldInit(delta_s *pFields);  //  5684
//	}
}

/* <47cb4> ../cstrike/dlls/client.cpp:5662 */
void Player_FieldInit(delta_s *pFields)
{
}

/* <47b84> ../cstrike/dlls/client.cpp:90 */
void CMD_ARGV(int i)
{
//	CMD_ARGV(int i);  //    90
}

/* <47b45> ../cstrike/dlls/client.cpp:76 */
void CMD_ARGC(void)
{
//	{
//		int i;                                                //    80
//	}
//	CMD_ARGC(void);  //    76
}

/* <47adb> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <47a8a> ../cstrike/dlls/client.cpp:379 */
void ShowMenu(CBasePlayer *pPlayer, int bitsValidSlots, int nDisplayTime, BOOL fNeedMore, char *pszText)
{
}

/* <47a58> ../cstrike/dlls/client.cpp:192 */
inline void TeamChangeUpdate(CBasePlayer *player, int team_id)
{
//	{
//		int t;                                                //   194
//	}
}

/* <47a29> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/string.h:333 */
inline const char *strstr(const char *__haystack, const char *__needle)
{
}

/* <479c0> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <47995> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:266 */
inline void _List_const_iterator<BotPhrase*>::operator!=(const _Self &__x)
{
}

/* <4797c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:757 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::end(void)
{
}

/* <47963> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:232 */
inline void _List_const_iterator<BotPhrase*>::operator++(void)
{
}

/* <47927> ../cstrike/dlls/bot/cs_bot_chatter.h:279 */
inline void BotPhraseManager::GetPlaceList(void)
{
}

/* <478f7> ../cstrike/dlls/client.cpp:792 */
int Q_strlen(const char *str)
{
//	{
//		int count;                                            //   794
//	}
}

/* <478bd> ../cstrike/dlls/player.h:250 */
inline void CBasePlayer::CBasePlayer(void)
{
}

/* <4787f> ../cstrike/dlls/unisignals.h:36 */
inline void CUnifiedSignals::CUnifiedSignals(void)
{
}

/* <4785f> ../cstrike/dlls/hintmessage.h:32 */
inline void CHintMessageQueue::CHintMessageQueue(void)
{
}

/* <4783f> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <477ea> ../public/UtlVector.h:155 */
inline void CUtlVector<CHintMessage*>::CUtlVector( int growSize, int initSize)
{
}

/* <477b4> ../public/UtlMemory.h:125 */
void CUtlMemory<CHintMessage*>::CUtlMemory(int growSize, int initSize)
{
}

/* <47796> ../public/UtlVector.h:143 */
inline void CUtlVector<CHintMessage*>::ResetDbgInfo(void)
{
}

/* <47778> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:739 */
inline void list<BotPhrase*, std::allocator<BotPhrase*>>::begin(void)
{
}

/* <4774f> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/bits/stl_list.h:215 */
inline void _List_const_iterator<BotPhrase*>::_List_const_iterator(_List_node_base *__x)
{
}

/* <4772d> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <476e7> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <476a1> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <47662> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <47642> ../common/entity_state.h:15 */
inline void entity_state_s::entity_state_s(void)
{
}

/* <475e3> ../cstrike/dlls/client.cpp:5263 */
void MarkEntityInPVS(int clientnum, int entitynum, float time, bool inpvs)
{
//	{
//		PLAYERPVSSTATUS *pvs;                                //  5268
//		ENTITYPVSSTATUS *es;                                 //  5269
//	}
}

/* <47581> ../cstrike/dlls/client.cpp:5275 */
bool CheckEntityRecentlyInPVS(int clientnum, int entitynum, float currenttime)
{
//	{
//		PLAYERPVSSTATUS *pvs;                                //  5280
//		ENTITYPVSSTATUS *es;                                 //  5281
//	}
}

/* <47568> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <4751e> ../cstrike/dlls/client.cpp:2884 */
bool BuyAmmo(CBasePlayer *player, int nSlot, bool bBlinkMoney)
{
//	{
//		class CBasePlayerItem *pItem;                        //  2901
//	}
}

/* <474f4> ../cstrike/dlls/client.cpp:2639 */
void Radio3(CBasePlayer *player, int slot)
{
}

/* <474ca> ../cstrike/dlls/client.cpp:2596 */
void Radio2(CBasePlayer *player, int slot)
{
}

/* <474a0> ../cstrike/dlls/client.cpp:2553 */
void Radio1(CBasePlayer *player, int slot)
{
}

/* <473f8> ../cstrike/dlls/client.cpp:1677 */
void BuyItem(CBasePlayer *pPlayer, int iSlot)
{
//	{
//		int iItem;                                            //  1679
//		int iItemPrice;                                       //  1680
//		const char *pszItem;                                //  1681
//		{
//			int fullArmor;                                //  1743
//			int helmet;                                   //  1744
//			int price;                                    //  1746
//			int enoughMoney;                              //  1746
//		}
//	}
}

/* <473db> ../cstrike/dlls/client.cpp:1182 */
void DropPrimary(CBasePlayer *pPlayer)
{
}

/* <473c2> ../cstrike/dlls/player.h:660 */
inline void CBasePlayer::IsProtectedByShield(void)
{
}

/* <473a3> ../cstrike/dlls/client.cpp:638 */
void CheckStartMoney(void)
{
//	{
//		int money;                                            //   640
//	}
}

/* <4735f> ../cstrike/dlls/client.cpp:390 */
void ShowVGUIMenu(CBasePlayer *pPlayer, int MenuType, int BitMask, char *szOldMenu)
{
}

/* <47346> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <4731f> ../cstrike/dlls/client.cpp:222 */
inline void BlinkAccount(CBasePlayer *player, int numBlinks)
{
}

/* <472a4> ../cstrike/dlls/enginecallback.h:77 */
inline void MESSAGE_BEGIN(int msg_dest, int msg_type, const float *pOrigin, edict_t *ed)
{
}

/* <47286> ../cstrike/dlls/bot/cs_bot.h:543 */
inline void CCSBot::IsEnemyVisible(void)
{
}

/* <47262> ../cstrike/dlls/bot/cs_bot_chatter.h:207 */
inline void BotPhrase::GetID(void)
{
}

/* <47244> ../cstrike/dlls/bot/cs_bot_chatter.h:206 */
inline void BotPhrase::GetName(void)
{
}

/* <4721d> ../cstrike/dlls/vector.h:155 */
inline void Vector::NormalizeInPlace(void)
{
//	{
//		float flLen;                                          //   157
//	}
}

/* <471f6> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <471cf> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <471b6> ../cstrike/dlls/cbase.h:380 */
inline void CBaseEntity::entindex(void)
{
}

/* <47198> ../game_shared/bot/bot_util.h:141 */
inline void IntervalTimer::Start(void)
{
}

/* <47173> ../cstrike/dlls/hostage/hostage_states.h:31 */
inline void HostageStateMachine::OnInjury( float amount)
{
}

/* <47149> ../cstrike/dlls/hostage/hostage_states.h:29 */
inline void HostageStateMachine::OnMoveToSuccess(Vector &goal)
{
}

/* <47121> ../cstrike/dlls/hostage/hostage_improv.h:49 */
inline void CHostageImprov::~CHostageImprov( int const __in_chrg)
{
}

/* <470f7> ../cstrike/dlls/hostage/hostage_states.h:183 */
inline void HostageAnimateState::~HostageAnimateState( int const __in_chrg)
{
}

/* <470c7> ../cstrike/dlls/hostage/hostage_states.h:149 */
inline void HostageFollowState::~HostageFollowState( int const __in_chrg)
{
}

/* <4706e> ../cstrike/dlls/hostage/hostage_states.h:138 */
inline void HostageRetreatState::~HostageRetreatState( int const __in_chrg)
{
}

/* <47015> ../cstrike/dlls/hostage/hostage_states.h:106 */
inline void HostageEscapeState::~HostageEscapeState( int const __in_chrg)
{
}

/* <46fbc> ../cstrike/dlls/hostage/hostage_states.h:38 */
inline void HostageIdleState::~HostageIdleState( int const __in_chrg)
{
}

/* <46f7b> ../cstrike/dlls/hostage/hostage_states.h:30 */
inline void HostageStateMachine::OnMoveToFailure(Vector &goal, MoveToFailureType reason)
{
}

/* <46f51> ../cstrike/dlls/hostage/hostage_states.h:92 */
inline void HostageEscapeLookAroundState::~HostageEscapeLookAroundState( int const __in_chrg)
{
}

/* <46ef8> ../cstrike/dlls/hostage/hostage_states.h:71 */
inline void HostageEscapeToCoverState::~HostageEscapeToCoverState( int const __in_chrg)
{
}

/* <46eab> ../game_shared/bot/bot_util.h:210 */
inline void CountdownTimer::IsElapsed(void)
{
}

/* <46e8d> ../game_shared/bot/bot_util.h:200 */
inline void CountdownTimer::Invalidate(void)
{
}

/* <46e6f> ../cstrike/dlls/gamerules.h:318 */
inline void CHalfLifeMultiplay::MarkSpawnSkipped(void)
{
}

/* <46e4b> ../cstrike/dlls/gamerules.h:317 */
inline void CHalfLifeMultiplay::ShouldSkipSpawn(void)
{
}

/* <46ddc> ../cstrike/dlls/player.h:769 */
inline void CBasePlayer::CanSwitchObserverModes(void)
{
}

/* <46dab> ../cstrike/dlls/player.h:764 */
inline void CBasePlayer::SetObserverAutoDirector( bool val)
{
}

/* <46d8d> ../cstrike/dlls/player.h:272 */
inline void CBasePlayer::IsObserver(void)
{
}

/* <46d6f> ../cstrike/dlls/weapons.h:293 */
inline void CBasePlayerItem::iMaxAmmo1(void)
{
}

/* <46d0e> ../cstrike/dlls/unisignals.h:62 */
inline void CUnifiedSignals::GetState(void)
{
}

/* <46cf0> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <46ca0> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <46c56> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <46c19> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <46bf1> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <46b86> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <46aeb> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <46abf> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <46aa1> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <46a79> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <46a51> ../game_shared/bot/improv.h:43 */
inline void CImprov::~CImprov( int const __in_chrg)
{
}

/* <46a27> ../cstrike/dlls/hostage/hostage_states.h:16 */
inline void HostageState::~HostageState( int const __in_chrg)
{
}

/* <469ff> ../game_shared/bot/simple_state_machine.h:21 */
inline void SimpleState<CHostageImprov*>::~SimpleState( int const __in_chrg)
{
}

/* <469e5> ../cstrike/dlls/client.cpp:90 */
const char *CMD_ARGV(int i)
{
}

/* <469c9> ../cstrike/dlls/client.cpp:76 */
int CMD_ARGC(void)
{
//	{
//		int i;                                                //    80
//	}
}

/* <31e0a> (null):27581 */
void _GLOBAL__sub_I_gNewDLLFunctions(void)
{
//	__static_initialization_and_destruction_0(int __initialize_p,
//							int __priority);  //  1145
}

/* <31cd1> ../cstrike/dlls/cbase.cpp:1115 */
void Create(char *szName, Vector &vecOrigin, Vector &vecAngles, edict_t *pentOwner)
{
//	{
//		edict_t *pent;                                       //  1117
//		class CBaseEntity *pEntity;                          //  1118
//		CREATE_NAMED_ENTITY(string_t iClass);  //  1120
//		FNullEnt(const edict_t *pent);  //  1121
//		Instance(edict_t *pent);  //  1126
//		edict(CBaseEntity *const this);  //  1130
//	}
}

/* <31c8c> ../cstrike/dlls/cbase.cpp:1089 */
void CBaseEntity::ShouldToggle(USE_TYPE useType, BOOL currentState)
{
}

/* <31c66> ../cstrike/dlls/cbase.cpp:1064 */
void CBaseEntity::IsDormant(void)
{
}

/* <31c43> ../cstrike/dlls/cbase.cpp:1048 */
void CBaseEntity::MakeDormant(void)
{
}

/* <31c0e> ../cstrike/dlls/cbase.cpp:1036 */
void CBaseEntity::Intersects(CBaseEntity *pOther)
{
}

/* <31bac> ../cstrike/dlls/cbase.cpp:850 */
void EHANDLE::operator->(void)
{
//	Get(EHANDLE *const this);  //   852
//	GET_PRIVATE(edict_t *pent);  //   852
}

/* <31b69> ../cstrike/dlls/cbase.cpp:845 */
void EHANDLE::operator int(void)
{
//	Get(EHANDLE *const this);  //   847
}

/* <31b30> ../cstrike/dlls/cbase.cpp:829 */
void EHANDLE::operator=(CBaseEntity *pEntity)
{
}

/* <31ace> ../cstrike/dlls/cbase.cpp:823 */
void EHANDLE::operator CBaseEntity*(void)
{
//	Get(EHANDLE *const this);  //   825
//	GET_PRIVATE(edict_t *pent);  //   825
}

/* <31a95> ../cstrike/dlls/cbase.cpp:814 */
void EHANDLE::Set(edict_t *pent)
{
}

/* <31a74> ../cstrike/dlls/cbase.cpp:802 */
void EHANDLE::Get(void)
{
}

/* <3179c> ../cstrike/dlls/cbase.cpp:673 */
/* linkage=_Z15DispatchRestoreP7edict_sP13saverestore_si */
int DispatchRestore(edict_t *pent, SAVERESTOREDATA *pSaveData, int globalEntity)
{
//	{
//		class CBaseEntity *pEntity;                          //   675
//		GET_PRIVATE(edict_t *pent);  //   675
//		{
//			entvars_t tmpVars;                            //   679
//			Vector oldOffset;                       //   680
//			class CRestore restoreHelper;                 //   682
//			CRestore(CRestore *const this,
//				SAVERESTOREDATA *pdata);  //   682
//			{
//				class CRestore tmpRestore;            //   685
//				const globalentity_t *pGlobal;      //   695
//				class CBaseEntity *pNewEntity;       //   706
//				CRestore(CRestore *const this,
//					SAVERESTOREDATA *pdata);  //   685
//				PrecacheMode(CRestore *const this,
//						BOOL mode);  //   686
//				FStrEq(const char *sz1,
//					const char *sz2);  //   701
//				SetGlobalMode(CRestore *const this,
//						int global);  //   710
//				operator-(const Vector *const this,
//						const Vector &v);  //   711
//				operator+(const Vector *const this,
//						const Vector &v);  //   711
//				~CRestore(CRestore *const this,
//						int const __in_chrg);  //   685
//				~CRestore(CRestore *const this,
//						int const __in_chrg);  //   685
//			}
//			GET_PRIVATE(edict_t *pent);  //   738
//			{
//				const globalentity_t *pGlobal;      //   752
//				FStrEq(const char *sz1,
//					const char *sz2);  //   758
//				MakeDormant(CBaseEntity *const this);  //   760
//			}
//			~CRestore(CRestore *const this,
//					int const __in_chrg);  //   682
//			~CRestore(CRestore *const this,
//					int const __in_chrg);  //   682
//		}
//	}
}

/* <31697> ../cstrike/dlls/cbase.cpp:656 */
/* linkage=_Z16FindGlobalEntityjj */
CBaseEntity *FindGlobalEntity(string_t classname, string_t globalname)
{
//	{
//		edict_t *pent;                                       //   658
//		class CBaseEntity *pReturn;                          //   659
//		Instance(edict_t *pent);  //   659
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   662
//	}
}

/* <3165b> ../cstrike/dlls/cbase.cpp:485 */
int GetNewDLLFunctions(NEW_DLL_FUNCTIONS *pFunctionTable, int *interfaceVersion)
{
}

/* <3161a> ../cstrike/dlls/cbase.cpp:471 */
/* linkage=_Z13GetEntityAPI2P13DLL_FUNCTIONSPi */
int GetEntityAPI2(DLL_FUNCTIONS *pFunctionTable, int *interfaceVersion)
{
}

/* <313df> ../cstrike/dlls/cbase.cpp:451 */
int GetEntityAPI(DLL_FUNCTIONS *pFunctionTable, int interfaceVersion)
{
//	AddMultipleToTail(CUtlVector<hash_item_t> *const this,
//				int num);  //   461
//	{
//		int i;                                                //   462
//	}
//	EmptyEntityHashTable(void);  //   466
}

/* <31273> ../cstrike/dlls/cbase.cpp:386 */
/* linkage=_Z15loopPerformancev */
void loopPerformance(void)
{
//	{
//		class CPerformanceCounter loopCounter;                //   390
//		double start;                                         //   393
//		int i;                                                //   395
//		double end;                                           //   419
//		GetCurTime(CPerformanceCounter *const this);  //   393
//		{
//			class CBaseEntity *pSpot;                    //   398
//		}
//		GetCurTime(CPerformanceCounter *const this);  //   419
//		GetCurTime(CPerformanceCounter *const this);  //   422
//		{
//			class CBaseEntity *pSpot;                    //   426
//		}
//		GetCurTime(CPerformanceCounter *const this);  //   447
//	}
}

/* <31249> ../cstrike/dlls/cbase.cpp:366 */
/* linkage=_Z13REMOVE_ENTITYP7edict_s */
void REMOVE_ENTITY(edict_t *e)
{
}

/* <311e9> ../cstrike/dlls/cbase.cpp:354 */
edict_t *CREATE_NAMED_ENTITY(string_t iClass)
{
//	{
//		edict_t *named;                                      //   356
//	}
}

/* <31125> ../cstrike/dlls/cbase.cpp:337 */
/* linkage=_Z13printEntitiesv */
void printEntities(void)
{
//	{
//		int i;                                                //   339
//		{
//			class hash_item_t *item;                     //   345
//			operator[](CUtlVector<hash_item_t> *const this,
//					int i);  //   341
//			ENTINDEX(edict_t *pEdict);  //   343
//			ENTINDEX(edict_t *pEdict);  //   348
//		}
//	}
}

/* <30d81> ../cstrike/dlls/cbase.cpp:136 */
void EmptyEntityHashTable(void)
{
//	{
//		int i;                                                //   138
//		{
//			class hash_item_t *item;                     //   144
//			class hash_item_t *temp;                     //   146
//		}
//	}
}

/* <30ab0> ../cstrike/dlls/cbase.cpp:498 */
/* linkage=_Z13DispatchSpawnP7edict_s */
int DispatchSpawn(edict_t *pent)
{
//	{
//		class CBaseEntity *pEntity;                          //   500
//		GET_PRIVATE(edict_t *pent);  //   500
//		operator-(const Vector *const this,
//				const Vector &v);  //   505
//		operator+(const Vector *const this,
//				const Vector &v);  //   506
//		GET_PRIVATE(edict_t *pent);  //   513
//		{
//			const globalentity_t *pGlobal;              //   527
//			FStrEq(const char *sz1,
//				const char *sz2);  //   533
//			MakeDormant(CBaseEntity *const this);  //   534
//		}
//	}
}

/* <30a97> ../cstrike/dlls/cbase.cpp:1048 */
void CBaseEntity::MakeDormant(void)
{
}

/* <30885> ../cstrike/dlls/cbase.cpp:1134 */
/* linkage=_Z20OnFreeEntPrivateDataP7edict_s */
void OnFreeEntPrivateData(edict_t *pEnt)
{
//	{
//		class CBaseEntity *pEntity;                          //  1136
//		Instance(edict_t *pent);  //  1136
//		RemoveEntityHashValue(entvars_t *pev,
//					const char *value,
//					enum hash_types_e fieldType);  //  1141
//	}
}

/* <30850> ../cstrike/dlls/cbase.cpp:117 */
int CaseInsensitiveHash(const char *string, int iBounds)
{
//	{
//		unsigned int hash;                                    //   119
//	}
}

/* <305af> ../cstrike/dlls/cbase.cpp:876 */
void CBaseEntity::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		Vector vecTemp;                                 //   878
//	}
//	TakeDamage(CBaseEntity *const this,
//			entvars_t *pevInflictor,
//			entvars_t *pevAttacker,
//			float flDamage,
//			int bitsDamageType);  //   876
}

/* <3050f> ../public/UtlVector.h:169 */
void CUtlVector<hash_item_t>::~CUtlVector(void)
{
//	Purge(CUtlVector<hash_item_t> *const this);  //   171
//	~CUtlMemory(CUtlMemory<hash_item_t> *const this,
//			int const __in_chrg);  //   172
}

/* <304ec> ../public/UtlVector.h:169 */
inline void CUtlVector<hash_item_t>::~CUtlVector( int const __in_chrg)
{
}

/* <304d3> ../public/UtlMemory.h:270 */
void CUtlMemory<hash_item_t>::Purge(void)
{
}

/* <30440> ../cstrike/dlls/cbase.cpp:966 */
void CBaseEntity::Restore(CRestore &restore)
{
//	{
//		int status;                                           //   968
//	}
//	Restore(CBaseEntity *const this,
//		class CRestore &restore);  //   966
}

/* <302a6> ../cstrike/dlls/cbase.cpp:958 */
void CBaseEntity::Save(CSave &save)
{
//	Save(CBaseEntity *const this,
//		class CSave &save);  //   958
}

/* <30258> ../cstrike/dlls/cbase.cpp:1100 */
void CBaseEntity::DamageDecal(int bitsDamageType)
{
//	DamageDecal(CBaseEntity *const this,
//			int bitsDamageType);  //  1100
}

/* <30221> ../cstrike/dlls/cbase.cpp:1069 */
void CBaseEntity::IsInWorld(void)
{
//	IsInWorld(CBaseEntity *const this);  //  1069
}

/* <301be> ../cstrike/dlls/cbase.cpp:857 */
void CBaseEntity::TakeHealth(float flHealth, int bitsDamageType)
{
//	TakeHealth(CBaseEntity *const this,
//			float flHealth,
//			int bitsDamageType);  //   857
}

/* <30158> ../cstrike/dlls/cbase.cpp:375 */
void CONSOLE_ECHO(char *pszMsg, ...)
{
//	{
//		va_list argptr;                                       //   377
//		char szStr;                                           //   378
//	}
}

/* <30109> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <30047> ../cstrike/dlls/cbase.cpp:795 */
/* linkage=_Z14SaveReadFieldsP13saverestore_sPKcPvP15TYPEDESCRIPTIONi */
void SaveReadFields(SAVERESTOREDATA *pSaveData, const char *pname, void *pBaseData, TYPEDESCRIPTION *pFields, int fieldCount)
{
//	{
//		class CRestore restoreHelper;                         //   797
//		CRestore(CRestore *const this,
//			SAVERESTOREDATA *pdata);  //   797
//		~CRestore(CRestore *const this,
//				int const __in_chrg);  //   797
//	}
}

/* <2ff56> ../cstrike/dlls/cbase.cpp:621 */
/* linkage=_Z12DispatchSaveP7edict_sP13saverestore_s */
void DispatchSave(edict_t *pent, SAVERESTOREDATA *pSaveData)
{
//	{
//		class CBaseEntity *pEntity;                          //   623
//		GET_PRIVATE(edict_t *pent);  //   623
//		{
//			ENTITYTABLE *pTable;                         //   627
//			class CSave saveHelper;                       //   646
//			{
//				float delta;                          //   638
//			}
//			CSave(CSave *const this,
//				SAVERESTOREDATA *pdata);  //   646
//			~CSave(CSave *const this,
//				int const __in_chrg);  //   646
//		}
//	}
}

/* <2fe94> ../cstrike/dlls/cbase.cpp:788 */
/* linkage=_Z15SaveWriteFieldsP13saverestore_sPKcPvP15TYPEDESCRIPTIONi */
void SaveWriteFields(SAVERESTOREDATA *pSaveData, const char *pname, void *pBaseData, TYPEDESCRIPTION *pFields, int fieldCount)
{
//	{
//		class CSave saveHelper;                               //   790
//		CSave(CSave *const this,
//			SAVERESTOREDATA *pdata);  //   790
//		~CSave(CSave *const this,
//			int const __in_chrg);  //   790
//	}
}

/* <2fe50> ../cstrike/dlls/cbase.cpp:927 */
void CBaseEntity::Killed(entvars_t *pevAttacker, int iGib)
{
}

/* <2fe2a> ../cstrike/dlls/cbase.cpp:1030 */
void CBaseEntity::SetObjectCollisionBox(void)
{
}

/* <2fdcd> ../cstrike/dlls/cbase.cpp:776 */
/* linkage=_Z25DispatchObjectCollsionBoxP7edict_s */
void DispatchObjectCollsionBox(edict_t *pent)
{
//	{
//		class CBaseEntity *pEntity;                          //   778
//		GET_PRIVATE(edict_t *pent);  //   778
//	}
}

/* <2fcf6> ../cstrike/dlls/cbase.cpp:991 */
void SetObjectCollisionBox(entvars_t *pev)
{
//	operator+(const Vector *const this,
//			const Vector &v);  //  1017
//	operator+(const Vector *const this,
//			const Vector &v);  //  1018
//	{
//		float max;                                            //   996
//		float v;                                              //   996
//		int i;                                                //   997
//		fabs(double __x);  //  1002
//		fabs(double __x);  //  1005
//	}
}

/* <2fc1c> ../cstrike/dlls/cbase.cpp:935 */
void CBaseEntity::GetNextTarget(void)
{
//	{
//		edict_t *pTarget;                                    //   939
//		FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//						const char *pszName);  //   939
//		FNullEnt(const edict_t *pent);  //   940
//		Instance(edict_t *pent);  //   943
//	}
}

/* <2fb89> ../cstrike/dlls/cbase.cpp:612 */
/* linkage=_Z15DispatchBlockedP7edict_sS0_ */
void DispatchBlocked(edict_t *pentBlocked, edict_t *pentOther)
{
//	{
//		class CBaseEntity *pEntity;                          //   614
//		class CBaseEntity *pOther;                           //   615
//		GET_PRIVATE(edict_t *pent);  //   614
//		GET_PRIVATE(edict_t *pent);  //   615
//	}
}

/* <2fb2f> ../cstrike/dlls/cbase.cpp:596 */
/* linkage=_Z13DispatchThinkP7edict_s */
void DispatchThink(edict_t *pent)
{
//	{
//		class CBaseEntity *pEntity;                          //   598
//		GET_PRIVATE(edict_t *pent);  //   598
//	}
}

/* <2fa9b> ../cstrike/dlls/cbase.cpp:587 */
/* linkage=_Z11DispatchUseP7edict_sS0_ */
void DispatchUse(edict_t *pentUsed, edict_t *pentOther)
{
//	{
//		class CBaseEntity *pEntity;                          //   589
//		class CBaseEntity *pOther;                           //   590
//		GET_PRIVATE(edict_t *pent);  //   589
//		GET_PRIVATE(edict_t *pent);  //   590
//	}
}

/* <2fa75> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2fa3a> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <2f860> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2f83a> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <2f814> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <2f7df> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <2f780> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2f74b> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <2f725> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <2f6ff> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2f6d9> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <2f6b3> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <2f68c> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <2f666> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <2f640> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2f61a> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <2f5e6> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <2f5c0> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <2f59a> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <2f566> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <2f540> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <2f4ac> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <2f45c> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <2f428> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <2f3f4> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <2f3b2> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <2f370> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <2f34a> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <2f324> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <2f2fe> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <2f2ca> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <2f2a4> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <2f270> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <2f24a> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <2f224> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <2f203> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <2f1cf> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <2f1a9> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <2f183> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <2f15d> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <2f137> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <2f0c8> ../cstrike/dlls/cbase.cpp:255 */
void RemoveEntityHashValue(entvars_t *pev, const char *value, hash_types_e fieldType)
{
//	{
//		int hash;                                             //   257
//		class hash_item_t *item;                             //   258
//		class hash_item_t *last;                             //   258
//		int pevIndex;                                         //   259
//		{
//			int count;                                    //   268
//		}
//	}
}

/* <2f053> ../cstrike/dlls/cbase.cpp:156 */
void AddEntityHashValue(entvars_t *pev, const char *value, hash_types_e fieldType)
{
//	{
//		int count;                                            //   164
//		class hash_item_t *item;                             //   165
//		class hash_item_t *last;                             //   165
//		int hash;                                             //   166
//		int pevIndex;                                         //   167
//		{
//			entvars_t *pevtemp;                          //   221
//		}
//	}
}

/* <2f022> ../public/UtlMemory.h:227 */
void CUtlMemory<hash_item_t>::Grow(int num)
{
//	{
//		int growSize;                                         //   237
//	}
}

/* <2effe> (null):27581 */
void __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
}

/* <2efdb> ../public/UtlMemory.h:141 */
void CUtlMemory<hash_item_t>::~CUtlMemory(int const __in_chrg)
{
}

/* <2efc2> ../public/UtlVector.h:532 */
void CUtlVector<hash_item_t>::Purge(void)
{
}

/* <2ef9d> ../public/UtlVector.h:518 */
void CUtlVector<hash_item_t>::RemoveAll(void)
{
//	{
//		int i;                                                //   520
//	}
}

/* <2ef7d> ../public/UtlMemory.h:58 */
inline void Destruct<hash_item_t>(hash_item_t *pMemory)
{
}

/* <2ef53> ../cstrike/dlls/cbase.h:146 */
inline void hash_item_t::~hash_item_t( int const __in_chrg)
{
}

/* <2ef2e> ../public/UtlVector.h:388 */
inline void CUtlVector<hash_item_t>::AddMultipleToTail( int num)
{
}

/* <2eefd> ../public/UtlVector.h:430 */
inline void CUtlVector<hash_item_t>::InsertMultipleBefore( int elem, int num)
{
}

/* <2eebe> ../public/UtlVector.h:284 */
void CUtlVector<hash_item_t>::ShiftElementsRight(int elem, int num)
{
//	{
//		int numToMove;                                        //   287
//	}
}

/* <2ee99> ../public/UtlVector.h:256 */
void CUtlVector<hash_item_t>::GrowVector(int num)
{
}

/* <2ee80> ../public/UtlMemory.h:206 */
inline void CUtlMemory<hash_item_t>::NumAllocated(void)
{
}

/* <2ee62> ../public/UtlMemory.h:171 */
void CUtlMemory<hash_item_t>::IsExternallyAllocated(void)
{
}

/* <2ee42> ../public/UtlMemory.h:46 */
inline void Construct<hash_item_t>(hash_item_t *pMemory)
{
}

/* <2ee20> ../public/UtlVector.h:194 */
inline void CUtlVector<hash_item_t>::Element( int i)
{
}

/* <2ee03> ../cstrike/dlls/util.h:189 */
inline int ENTINDEX(edict_t *pEdict)
{
}

/* <2ede1> ../public/UtlVector.h:180 */
inline void CUtlVector<hash_item_t>::operator[]( int i)
{
}

/* <2edbf> ../public/UtlMemory.h:152 */
inline void CUtlMemory<hash_item_t>::operator[]( int i)
{
}

/* <2ed90> ../public/UtlVector.h:155 */
inline void CUtlVector<hash_item_t>::CUtlVector( int growSize, int initSize)
{
}

/* <2ed5c> ../public/UtlMemory.h:125 */
void CUtlMemory<hash_item_t>::CUtlMemory(int growSize, int initSize)
{
}

/* <2ed3e> ../public/UtlVector.h:143 */
inline void CUtlVector<hash_item_t>::ResetDbgInfo(void)
{
}

/* <2ed20> ../public/UtlVector.h:235 */
inline void CUtlVector<hash_item_t>::Count(void)
{
}

/* <2ecff> ../cstrike/dlls/cbase.cpp:802 */
void EHANDLE::Get(void)
{
}

/* <2ecda> ../cstrike/dlls/saverestore.h:82 */
inline void CRestore::~CRestore( int const __in_chrg)
{
}

/* <2ecb6> ../cstrike/dlls/saverestore.h:85 */
inline void CRestore::CRestore( SAVERESTOREDATA *pdata)
{
}

/* <2ec96> ../engine/progdefs.h:58 */
inline void entvars_s::entvars_s(void)
{
}

/* <2ec71> ../cstrike/dlls/saverestore.h:47 */
inline void CSave::~CSave( int const __in_chrg)
{
}

/* <2ec48> ../cstrike/dlls/saverestore.h:50 */
inline void CSave::CSave( SAVERESTOREDATA *pdata)
{
}

/* <2ec16> ../game_shared/perf_counter.h:97 */
inline void CPerformanceCounter::GetCurTime(void)
{
//	{
//		class timeval tp;                                     //   161
//		int secbase;                                          //   162
//	}
}

/* <2ebfc> ../game_shared/perf_counter.h:61 */
inline void CPerformanceCounter::CPerformanceCounter(void)
{
}

/* <2ebdd> ../game_shared/perf_counter.h:69 */
inline void CPerformanceCounter::InitializePerformanceCounter(void)
{
}

/* <2ebbf> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <2eb70> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <2eb57> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <2eb32> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <2eaac> ../cstrike/dlls/saverestore.h:96 */
inline void CRestore::PrecacheMode( BOOL mode)
{
}

/* <2ea83> ../cstrike/dlls/saverestore.h:95 */
inline void CRestore::SetGlobalMode( int global)
{
}

/* <2e9e1> ../cstrike/dlls/cbase.cpp:966 */
void CBaseEntity::Restore(CRestore &restore)
{
//	{
//		int status;                                           //   968
//		{
//			Vector mins;                            //   976
//			Vector maxs;                            //   976
//		}
//	}
}

/* <2e953> ../cstrike/dlls/cbase.cpp:876 */
void CBaseEntity::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		Vector vecTemp;                                 //   878
//		{
//			Vector vecDir;                          //   905
//			float flForce;                                //   908
//		}
//	}
}

/* <2e90f> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <2e8a0> ../cstrike/dlls/cbase.cpp:549 */
void DispatchKeyValue(edict_t *pentKeyvalue, KeyValueData *pkvd)
{
//	{
//		class CBaseEntity *pEntity;                          //   562
//	}
}

/* <2e81c> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/lib/gcc/i686-valve-linux-gnu/4.6.1/../../../../i686-valve-linux-gnu/include/c++/4.6.1/new:103 */
inline void *operator new(size_t, void *__p)
{
}

/* <2e7db> ../cstrike/dlls/cbase.cpp:574 */
void DispatchTouch(edict_t *pentTouched, edict_t *pentOther)
{
//	{
//		class CBaseEntity *pEntity;                          //   579
//		class CBaseEntity *pOther;                           //   580
//	}
}

/* <2e7a5> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <2e76d> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <2e723> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <2e6ef> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <2e6c8> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <2e69c> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <2e67e> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <2e656> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <2e62c> ../cstrike/dlls/cbase.cpp:958 */
void CBaseEntity::Save(CSave &save)
{
}

/* <2e607> ../cstrike/dlls/cbase.cpp:1100 */
void CBaseEntity::DamageDecal(int bitsDamageType)
{
}

/* <2e5ee> ../cstrike/dlls/cbase.cpp:1069 */
void CBaseEntity::IsInWorld(void)
{
}

/* <2e5b8> ../cstrike/dlls/cbase.cpp:857 */
void CBaseEntity::TakeHealth(float flHealth, int bitsDamageType)
{
}

/* <28011> ../cstrike/dlls/buttons.cpp:1233 */
void button_target(entvars_t *pev)
{
//	GetClassPtr<CButtonTarget>(CButtonTarget *a);  //  1233
}

/* <27f44> ../cstrike/dlls/buttons.cpp:1144 */
void env_debris(entvars_t *pev)
{
//	GetClassPtr<CEnvSpark>(CEnvSpark *a);  //  1144
}

/* <27e77> ../cstrike/dlls/buttons.cpp:1143 */
void env_spark(entvars_t *pev)
{
//	GetClassPtr<CEnvSpark>(CEnvSpark *a);  //  1143
}

/* <27e45> ../cstrike/dlls/cbase.h:800 */
CEnvSpark *GetClassPtr<CEnvSpark>(CEnvSpark *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <27dc0> ../cstrike/dlls/buttons.cpp:982 */
void CMomentaryRotButton::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	UpdateTarget(CMomentaryRotButton *const this,
//			float value);  //   987
}

/* <27d60> ../cstrike/dlls/buttons.cpp:1086 */
void CMomentaryRotButton::Return(void)
{
//	{
//		float value;                                          //  1088
//		UpdateTarget(CMomentaryRotButton *const this,
//				float value);  //  1092
//	}
}

/* <27c49> ../cstrike/dlls/buttons.cpp:990 */
void CMomentaryRotButton::UpdateAllButtons(float value, int start)
{
//	{
//		edict_t *pentTarget;                                 //   993
//		FNullEnt(const edict_t *pent);  //   998
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //  1001
//		{
//			class CMomentaryRotButton *pEntity;          //  1003
//			Instance(edict_t *pent);  //  1003
//		}
//	}
}

/* <27bce> ../cstrike/dlls/buttons.cpp:1096 */
void CMomentaryRotButton::UpdateSelfReturn(float value)
{
//	operator*(float fl,
//			const Vector &v);  //  1107
}

/* <27ba5> ../cstrike/dlls/buttons.cpp:1053 */
void CMomentaryRotButton::UpdateTarget(float value)
{
}

/* <27ab8> ../cstrike/dlls/buttons.cpp:1015 */
void CMomentaryRotButton::UpdateSelf(float value)
{
//	{
//		BOOL fplaysound;                                      //  1017
//		operator*(float fl,
//				const Vector &v);  //  1049
//		PlaySound(CMomentaryRotButton *const this);  //  1041
//	}
}

/* <27a57> ../cstrike/dlls/buttons.cpp:974 */
void CMomentaryRotButton::PlaySound(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   976
}

/* <27a3e> ../cstrike/dlls/buttons.cpp:974 */
void CMomentaryRotButton::PlaySound(void)
{
}

/* <27971> ../cstrike/dlls/buttons.cpp:920 */
void momentary_rot_button(entvars_t *pev)
{
//	GetClassPtr<CMomentaryRotButton>(CMomentaryRotButton *a);  //   920
}

/* <278a4> ../cstrike/dlls/buttons.cpp:806 */
void func_rot_button(entvars_t *pev)
{
//	GetClassPtr<CRotButton>(CRotButton *a);  //   806
}

/* <27843> ../cstrike/dlls/buttons.cpp:664 */
void CBaseButton::ButtonActivate(void)
{
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   666
}

/* <27821> ../cstrike/dlls/buttons.cpp:603 */
void CBaseButton::ButtonResponseToTouch(void)
{
}

/* <277fa> ../cstrike/dlls/buttons.cpp:568 */
void CBaseButton::ButtonSpark(void)
{
}

/* <277d3> ../cstrike/dlls/buttons.cpp:1201 */
void CEnvSpark::SparkThink(void)
{
}

/* <2752e> ../cstrike/dlls/buttons.cpp:551 */
/* linkage=_Z7DoSparkP9entvars_sRK6Vector */
void DoSpark(entvars_t *pev, Vector &location)
{
//	{
//		Vector tmp;                                     //   553
//		float flVolume;                                       //   556
//		operator*(const Vector *const this,
//				float fl);  //   553
//		operator+(const Vector *const this,
//				const Vector &v);  //   553
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   564
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   563
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   559
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   560
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   561
//		EMIT_SOUND(edict_t *entity,
//				int channel,
//				const char *sample,
//				float volume,
//				float attenuation);  //   562
//	}
}

/* <27443> ../cstrike/dlls/buttons.cpp:439 */
void func_button(entvars_t *pev)
{
//	GetClassPtr<CBaseButton>(CBaseButton *a);  //   439
}

/* <27379> ../cstrike/dlls/buttons.cpp:143 */
void multisource(entvars_t *pev)
{
//	GetClassPtr<CMultiSource>(CMultiSource *a);  //   143
}

/* <272af> ../cstrike/dlls/buttons.cpp:64 */
void env_global(entvars_t *pev)
{
//	GetClassPtr<CEnvGlobal>(CEnvGlobal *a);  //    64
}

/* <2719b> ../cstrike/dlls/buttons.cpp:580 */
void CBaseButton::ButtonUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	ButtonActivate(CBaseButton *const this);  //   599
//	ButtonUse(CBaseButton *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //   580
}

/* <27047> ../cstrike/dlls/buttons.cpp:628 */
void CBaseButton::ButtonTouch(CBaseEntity *pOther)
{
//	{
//		enum BUTTON_CODE code;                                //   636
//		FClassnameIs(entvars_t *pev,
//				const char *szClassname);  //   631
//	}
//	ButtonTouch(CBaseButton *const this,
//			class CBaseEntity *pOther);  //   628
}

/* <26e90> ../cstrike/dlls/buttons.cpp:394 */
void CBaseButton::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		enum BUTTON_CODE code;                                //   396
//		ButtonResponseToTouch(CBaseButton *const this);  //   396
//		Instance(entvars_t *pev);  //   403
//		ButtonActivate(CBaseButton *const this);  //   417
//	}
//	TakeDamage(CBaseButton *const this,
//			entvars_t *pevInflictor,
//			entvars_t *pevAttacker,
//			float flDamage,
//			int bitsDamageType);  //   394
}

/* <26d1e> ../cstrike/dlls/buttons.cpp:148 */
void CMultiSource::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   150
//	FStrEq(const char *sz1,
//		const char *sz2);  //   151
//	FStrEq(const char *sz1,
//		const char *sz2);  //   152
//	FStrEq(const char *sz1,
//		const char *sz2);  //   153
//	FStrEq(const char *sz1,
//		const char *sz2);  //   154
//	FStrEq(const char *sz1,
//		const char *sz2);  //   155
//	FStrEq(const char *sz1,
//		const char *sz2);  //   157
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   163
}

/* <26b97> ../cstrike/dlls/buttons.cpp:1183 */
void CEnvSpark::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1185
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1190
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1191
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1192
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1193
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1194
//	FStrEq(const char *sz1,
//		const char *sz2);  //  1195
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //  1198
//	atof(const char *__nptr);  //  1187
}

/* <269cb> ../cstrike/dlls/buttons.cpp:355 */
void CBaseButton::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   357
//	FStrEq(const char *sz1,
//		const char *sz2);  //   362
//	KeyValue(CBaseButton *const this,
//		KeyValueData *pkvd);  //   355
//	atof(const char *__nptr);  //   364
}

/* <2697c> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <26863> ../cstrike/dlls/buttons.cpp:66 */
void CEnvGlobal::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //    70
//	FStrEq(const char *sz1,
//		const char *sz2);  //    72
//	KeyValue(CEnvGlobal *const this,
//		KeyValueData *pkvd);  //    66
//	atoi(const char *__nptr);  //    73
}

/* <2678f> ../cstrike/dlls/buttons.cpp:958 */
void CMomentaryRotButton::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   960
//	FStrEq(const char *sz1,
//		const char *sz2);  //   965
//	atoi(const char *__nptr);  //   967
//	KeyValue(CMomentaryRotButton *const this,
//		KeyValueData *pkvd);  //   958
}

/* <26658> ../cstrike/dlls/buttons.cpp:748 */
void CBaseButton::ButtonBackHome(void)
{
//	{
//		edict_t *pentTarget;                                 //   761
//		{
//			class CBaseEntity *pTarget;                  //   771
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //   764
//			FNullEnt(const edict_t *pent);  //   766
//			FClassnameIs(edict_t *pent,
//					const char *szClassname);  //   769
//			Instance(edict_t *pent);  //   771
//		}
//	}
}

/* <26550> ../cstrike/dlls/buttons.cpp:1053 */
void CMomentaryRotButton::UpdateTarget(float value)
{
//	{
//		edict_t *pentTarget;                                 //  1057
//		{
//			class CBaseEntity *pEntity;                  //  1063
//			FIND_ENTITY_BY_TARGETNAME(edict_t *entStart,
//							const char *pszName);  //  1060
//			FNullEnt(const edict_t *pent);  //  1061
//			Instance(edict_t *pent);  //  1063
//		}
//	}
}

/* <264e3> ../cstrike/dlls/buttons.cpp:664 */
void CBaseButton::ButtonActivate(void)
{
//	Vector(Vector::ButtonActivate(//		const Vector &v);  //   687
//	Vector(Vector *const this,
//		const Vector &v);  //   685
}

/* <26486> ../cstrike/dlls/buttons.cpp:80 */
void CEnvGlobal::Spawn(void)
{
//	EntityInTable(CGlobalState::Spawn(//			string_t globalname);  //    89
//	Spawn(CEnvGlobal *const this);  //    80
}

/* <26419> ../cstrike/dlls/buttons.cpp:211 */
void CMultiSource::IsTriggered(CBaseEntity *)
{
//	{
//		int i;                                                //   214
//	}
//	IsTriggered(CMultiSource *const this,
//			class CBaseEntity *);  //   211
}

/* <263dd> ../cstrike/dlls/buttons.cpp:693 */
void CBaseButton::TriggerAndWait(void)
{
//	TriggerAndWait(CBaseButton *const this);  //   693
}

/* <2633b> ../cstrike/dlls/buttons.cpp:179 */
void CMultiSource::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int i;                                                //   181
//	}
//	Use(CMultiSource *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //   179
}

/* <262ee> ../cstrike/dlls/buttons.cpp:287 */
void CBaseButton::Save(CSave &save)
{
//	Save(CBaseButton *const this,
//		class CSave &save);  //   287
}

/* <262a1> ../cstrike/dlls/buttons.cpp:918 */
void CMomentaryRotButton::Save(CSave &save)
{
//	Save(CMomentaryRotButton *const this,
//		class CSave &save);  //   918
}

/* <26254> ../cstrike/dlls/buttons.cpp:287 */
void CBaseButton::Restore(CRestore &restore)
{
//	Restore(CBaseButton *const this,
//		class CRestore &restore);  //   287
}

/* <26207> ../cstrike/dlls/buttons.cpp:918 */
void CMomentaryRotButton::Restore(CRestore &restore)
{
//	Restore(CMomentaryRotButton *const this,
//		class CRestore &restore);  //   918
}

/* <261bb> ../cstrike/dlls/buttons.cpp:62 */
void CEnvGlobal::Save(CSave &save)
{
//	Save(CEnvGlobal *const this,
//		class CSave &save);  //    62
}

/* <2616f> ../cstrike/dlls/buttons.cpp:141 */
void CMultiSource::Save(CSave &save)
{
//	Save(CMultiSource *const this,
//		class CSave &save);  //   141
}

/* <26122> ../cstrike/dlls/buttons.cpp:1141 */
void CEnvSpark::Save(CSave &save)
{
//	Save(CEnvSpark *const this,
//		class CSave &save);  //  1141
}

/* <260d6> ../cstrike/dlls/buttons.cpp:62 */
void CEnvGlobal::Restore(CRestore &restore)
{
//	Restore(CEnvGlobal *const this,
//		class CRestore &restore);  //    62
}

/* <2608a> ../cstrike/dlls/buttons.cpp:141 */
void CMultiSource::Restore(CRestore &restore)
{
//	Restore(CMultiSource *const this,
//		class CRestore &restore);  //   141
}

/* <2603d> ../cstrike/dlls/buttons.cpp:1141 */
void CEnvSpark::Restore(CRestore &restore)
{
//	Restore(CEnvSpark *const this,
//		class CRestore &restore);  //  1141
}

/* <25fc3> ../cstrike/dlls/buttons.cpp:1246 */
void CButtonTarget::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CButtonTarget *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //  1246
}

/* <25f88> ../cstrike/dlls/buttons.cpp:1072 */
void CMomentaryRotButton::Off(void)
{
//	Off(CMomentaryRotButton *const this);  //  1072
}

/* <25ee7> ../cstrike/dlls/buttons.cpp:95 */
void CEnvGlobal::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		GLOBALESTATE oldState;                                //    97
//		GLOBALESTATE newState;                                //    98
//		EntityInTable(CGlobalState *const this,
//				string_t globalname);  //   124
//	}
}

/* <25d5a> ../cstrike/dlls/buttons.cpp:236 */
void CMultiSource::Register(void)
{
//	{
//		edict_t *pentTarget;                                 //   238
//		FNullEnt(const edict_t *pent);  //   249
//		FNullEnt(const edict_t *pent);  //   259
//		{
//			class CBaseEntity *pTarget;                  //   261
//			Instance(edict_t *pent);  //   261
//		}
//		{
//			class CBaseEntity *pTarget;                  //   251
//			Instance(edict_t *pent);  //   251
//		}
//	}
}

/* <25c2c> ../cstrike/dlls/buttons.cpp:442 */
void CBaseButton::Spawn(void)
{
//	{
//		char *pszSound;                                      //   444
//		ButtonSound(int sound);  //   450
//		fabs(double __x);  //   484
//		fabs(double __x);  //   484
//		fabs(double __x);  //   484
//		operator+(const Vector *const this,
//				const Vector &v);  //   484
//		operator*(const Vector *const this,
//				float fl);  //   484
//		operator-(const Vector *const this,
//				const Vector &v);  //   488
//		Length(const Vector *const this);  //   488
//	}
}

/* <25bb7> ../cstrike/dlls/buttons.cpp:730 */
void CBaseButton::ButtonReturn(void)
{
//	Vector(Vector::ButtonReturn(//		const Vector &v);  //   739
//	Vector(Vector *const this,
//		const Vector &v);  //   737
}

/* <25acc> ../cstrike/dlls/buttons.cpp:922 */
void CMomentaryRotButton::Spawn(void)
{
//	{
//		char *pszSound;                                      //   952
//		operator*(const Vector *const this,
//				float fl);  //   931
//		operator+(const Vector *const this,
//				const Vector &v);  //   931
//		ButtonSound(int sound);  //   952
//		operator*(const Vector *const this,
//				float fl);  //   939
//		operator+(const Vector *const this,
//				const Vector &v);  //   939
//	}
}

/* <25a06> ../cstrike/dlls/buttons.cpp:808 */
void CRotButton::Spawn(void)
{
//	{
//		char *pszSound;                                      //   810
//		ButtonSound(int sound);  //   815
//		operator*(const Vector *const this,
//				float fl);  //   824
//		operator*(const Vector *const this,
//				float fl);  //   848
//		operator+(const Vector *const this,
//				const Vector &v);  //   848
//	}
}

/* <2592e> ../cstrike/dlls/buttons.cpp:1269 */
void CButtonTarget::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	Instance(entvars_t *pev);  //  1271
}

/* <258f1> ../cstrike/dlls/buttons.cpp:1258 */
void CButtonTarget::ObjectCaps(void)
{
//	{
//		int caps;                                             //  1260
//	}
}

/* <258ca> ../cstrike/dlls/buttons.cpp:1235 */
void CButtonTarget::Spawn(void)
{
}

/* <25868> ../cstrike/dlls/buttons.cpp:1214 */
void CEnvSpark::SparkStop(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <25805> ../cstrike/dlls/buttons.cpp:1207 */
void CEnvSpark::SparkStart(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <257de> ../cstrike/dlls/buttons.cpp:1173 */
void CEnvSpark::Precache(void)
{
}

/* <257b7> ../cstrike/dlls/buttons.cpp:1146 */
void CEnvSpark::Spawn(void)
{
}

/* <2577a> ../cstrike/dlls/buttons.cpp:878 */
void CMomentaryRotButton::ObjectCaps(void)
{
//	{
//		int flags;                                            //   880
//	}
}

/* <25709> ../cstrike/dlls/buttons.cpp:289 */
void CBaseButton::Precache(void)
{
//	{
//		char *pszSound;                                      //   291
//		ButtonSound(int sound);  //   307
//		ButtonSound(int sound);  //   314
//	}
}

/* <256e2> ../cstrike/dlls/buttons.cpp:168 */
void CMultiSource::Spawn(void)
{
}

/* <256bc> ../cstrike/dlls/cbase.h:772 */
void CBaseButton::ObjectCaps(void)
{
}

/* <25696> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <25670> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <2563b> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <2560f> ../cstrike/dlls/cbase.h:490 */
void CMultiSource::ObjectCaps(void)
{
}

/* <255ee> ../cstrike/dlls/cbase.h:454 */
void CPointEntity::ObjectCaps(void)
{
}

/* <255c8> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <2558d> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <253b3> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <2538d> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <25367> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <25332> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <252d3> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <2529e> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <25278> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <25252> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <2522c> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <25206> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <251df> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <251b9> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <25193> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <2516d> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <25139> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <25113> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <250ed> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <250b9> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <25093> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <24fff> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <24faf> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <24f7b> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <24f47> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <24ef9> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <24eb7> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <24e91> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <24e6b> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <24e39> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <24df9> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <24dd3> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <24d9f> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <24d79> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <24d53> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <24d32> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <24d09> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <24ce3> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <24cbd> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <24c40> ../cstrike/dlls/cbase.h:800 */
CButtonTarget *GetClassPtr<CButtonTarget>(CButtonTarget *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <24c24> ../cstrike/dlls/buttons.cpp:1223 */
inline void CButtonTarget::CButtonTarget(void)
{
}

/* <24c08> ../cstrike/dlls/buttons.cpp:1117 */
inline void CEnvSpark::CEnvSpark(void)
{
}

/* <24bd6> ../cstrike/dlls/cbase.h:800 */
CMomentaryRotButton *GetClassPtr<CMomentaryRotButton>(CMomentaryRotButton *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <24bba> ../cstrike/dlls/buttons.cpp:873 */
inline void CMomentaryRotButton::CMomentaryRotButton(void)
{
}

/* <24b88> ../cstrike/dlls/cbase.h:800 */
CRotButton *GetClassPtr<CRotButton>(CRotButton *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <24b67> ../cstrike/dlls/buttons.cpp:800 */
inline void CRotButton::CRotButton(void)
{
}

/* <24b35> ../cstrike/dlls/cbase.h:800 */
CBaseButton *GetClassPtr<CBaseButton>(CBaseButton *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <24b19> ../cstrike/dlls/cbase.h:745 */
inline void CBaseButton::CBaseButton(void)
{
}

/* <24af8> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <24ad1> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <24a62> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <24a0c> ../cstrike/dlls/cbase.h:800 */
CMultiSource *GetClassPtr<CMultiSource>(CMultiSource *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <249f0> ../cstrike/dlls/cbase.h:484 */
inline void CMultiSource::CMultiSource(void)
{
}

/* <249be> ../cstrike/dlls/cbase.h:800 */
CEnvGlobal *GetClassPtr<CEnvGlobal>(CEnvGlobal *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <249a3> ../cstrike/dlls/buttons.cpp:38 */
inline void CEnvGlobal::CEnvGlobal(void)
{
}

/* <24982> ../cstrike/dlls/cbase.h:253 */
inline void operator new(size_t stAllocateBlock, entvars_t *pev)
{
}

/* <24966> ../cstrike/dlls/cbase.h:450 */
inline void CPointEntity::CPointEntity(void)
{
}

/* <2494b> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <24934> ../cstrike/dlls/buttons.cpp:895 */
inline void Instance(edict_t *pent)
{
}

/* <248f3> ../cstrike/dlls/buttons.cpp:1053 */
void CMomentaryRotButton::UpdateTarget(float value)
{
//	{
//		edict_t *pentTarget;                                 //  1057
//		{
//			class CBaseEntity *pEntity;                  //  1063
//		}
//	}
}

/* <24872> ../cstrike/dlls/buttons.cpp:394 */
void CBaseButton::TakeDamage(entvars_t *pevInflictor, entvars_t *pevAttacker, float flDamage, int bitsDamageType)
{
//	{
//		enum BUTTON_CODE code;                                //   396
//	}
}

/* <24829> ../cstrike/dlls/buttons.cpp:580 */
void CBaseButton::ButtonUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <247f6> ../cstrike/dlls/buttons.cpp:628 */
void CBaseButton::ButtonTouch(CBaseEntity *pOther)
{
//	{
//		enum BUTTON_CODE code;                                //   636
//	}
}

/* <247dd> ../cstrike/dlls/buttons.cpp:664 */
void CBaseButton::ButtonActivate(void)
{
}

/* <247c4> ../cstrike/dlls/buttons.cpp:603 */
void CBaseButton::ButtonResponseToTouch(void)
{
}

/* <247ab> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <24784> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <24738> ../cstrike/dlls/buttons.cpp:511 */
char *ButtonSound(int sound)
{
//	{
//		char *pszSound;                                      //   513
//	}
}

/* <24721> ../cstrike/dlls/cbase.h:311 */
inline void Instance(entvars_t *pev)
{
}

/* <246fc> ../cstrike/dlls/cbase.h:302 */
inline void Instance(edict_t *pent)
{
//	{
//		class CBaseEntity *pEnt;                             //   306
//	}
}

/* <2468f> ../cstrike/dlls/util.h:85 */
inline edict_t *FIND_ENTITY_BY_TARGETNAME(edict_t *entStart, const char *pszName)
{
}

/* <2461f> ../cstrike/dlls/buttons.cpp:80 */
void CEnvGlobal::Spawn(void)
{
}

/* <245f6> ../cstrike/dlls/saverestore.h:153 */
inline void CGlobalState::EntityInTable( string_t globalname)
{
}

/* <245ce> ../cstrike/dlls/util.h:250 */
inline BOOL FClassnameIs(entvars_t *pev, const char *szClassname)
{
}

/* <2458d> ../cstrike/dlls/buttons.cpp:66 */
void CEnvGlobal::KeyValue(KeyValueData *pkvd)
{
}

/* <24568> ../cstrike/dlls/buttons.cpp:355 */
void CBaseButton::KeyValue(KeyValueData *pkvd)
{
}

/* <24543> ../cstrike/dlls/buttons.cpp:958 */
void CMomentaryRotButton::KeyValue(KeyValueData *pkvd)
{
}

/* <24500> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <244c4> ../cstrike/dlls/util.h:197 */
inline BOOL FNullEnt(EOFFSET eoffset)
{
}

/* <244a7> ../cstrike/dlls/util.h:162 */
inline EOFFSET OFFSET(const edict_t *pent)
{
}

/* <24435> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <24401> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <243da> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <243ae> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <24387> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <24369> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <24340> ../cstrike/dlls/buttons.cpp:211 */
void CMultiSource::IsTriggered(CBaseEntity *)
{
//	{
//		int i;                                                //   214
//	}
}

/* <24327> ../cstrike/dlls/buttons.cpp:693 */
void CBaseButton::TriggerAndWait(void)
{
}

/* <242ca> ../cstrike/dlls/buttons.cpp:179 */
void CMultiSource::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int i;                                                //   181
//		{
//			USE_TYPE useType;                             //   203
//		}
//	}
}

/* <242a0> ../cstrike/dlls/buttons.cpp:287 */
void CBaseButton::Save(CSave &save)
{
}

/* <24276> ../cstrike/dlls/buttons.cpp:918 */
void CMomentaryRotButton::Save(CSave &save)
{
}

/* <24247> ../cstrike/dlls/buttons.cpp:287 */
void CBaseButton::Restore(CRestore &restore)
{
}

/* <2421d> ../cstrike/dlls/buttons.cpp:918 */
void CMomentaryRotButton::Restore(CRestore &restore)
{
}

/* <241f4> ../cstrike/dlls/buttons.cpp:62 */
void CEnvGlobal::Save(CSave &save)
{
}

/* <241cb> ../cstrike/dlls/buttons.cpp:141 */
void CMultiSource::Save(CSave &save)
{
}

/* <241a1> ../cstrike/dlls/buttons.cpp:1141 */
void CEnvSpark::Save(CSave &save)
{
}

/* <24173> ../cstrike/dlls/buttons.cpp:62 */
void CEnvGlobal::Restore(CRestore &restore)
{
}

/* <24145> ../cstrike/dlls/buttons.cpp:141 */
void CMultiSource::Restore(CRestore &restore)
{
}

/* <24116> ../cstrike/dlls/buttons.cpp:1141 */
void CEnvSpark::Restore(CRestore &restore)
{
}

/* <240c8> ../cstrike/dlls/buttons.cpp:1246 */
void CButtonTarget::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <240aa> ../cstrike/dlls/buttons.cpp:1072 */
void CMomentaryRotButton::Off(void)
{
}

/* <2408c> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <24068> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1eb14> ../cstrike/dlls/bmodels.cpp:747 */
void func_pendulum(entvars_t *pev)
{
//	GetClassPtr<CPendulum>(CPendulum *a);  //   747
}

/* <1ea74> ../cstrike/dlls/bmodels.cpp:585 */
void CFuncRotating::SpinUp(void)
{
//	{
//		Vector vecAVel;                                 //   587
//		operator*(const Vector *const this,
//				float fl);  //   590
//		operator+(const Vector *const this,
//				const Vector &v);  //   590
//		Rotate(CFuncRotating *const this);  //   604
//	}
}

/* <1e9c3> ../cstrike/dlls/bmodels.cpp:615 */
void CFuncRotating::SpinDown(void)
{
//	{
//		Vector vecAVel;                                 //   617
//		vec_t vecdir;                                         //   618
//		operator*(const Vector *const this,
//				float fl);  //   622
//		operator-(const Vector *const this,
//				const Vector &v);  //   622
//		Rotate(CFuncRotating *const this);  //   645
//	}
}

/* <1e8f9> ../cstrike/dlls/bmodels.cpp:540 */
void CFuncRotating::RampPitchVol(int fUp)
{
//	{
//		Vector vecAVel;                                 //   543
//		vec_t vecCur;                                         //   544
//		vec_t vecFinal;                                       //   545
//		float fpct;                                           //   546
//		float fvol;                                           //   547
//		float fpitch;                                         //   548
//		int pitch;                                            //   549
//		Vector(Vector *const this,
//			const Vector &v);  //   543
//	}
}

/* <1e82c> ../cstrike/dlls/bmodels.cpp:313 */
void func_rotating(entvars_t *pev)
{
//	GetClassPtr<CFuncRotating>(CFuncRotating *a);  //   313
}

/* <1e75f> ../cstrike/dlls/bmodels.cpp:262 */
void func_monsterclip(entvars_t *pev)
{
//	GetClassPtr<CFuncMonsterClip>(CFuncMonsterClip *a);  //   262
}

/* <1e695> ../cstrike/dlls/bmodels.cpp:217 */
void func_illusionary(entvars_t *pev)
{
//	GetClassPtr<CFuncIllusionary>(CFuncIllusionary *a);  //   217
}

/* <1e647> ../cstrike/dlls/bmodels.cpp:179 */
void CFuncConveyor::UpdateSpeed(float speed)
{
//	{
//		int speedCode;                                        //   182
//		fabs(double __x);  //   182
//	}
}

/* <1e57d> ../cstrike/dlls/bmodels.cpp:155 */
void func_conveyor(entvars_t *pev)
{
//	GetClassPtr<CFuncConveyor>(CFuncConveyor *a);  //   155
}

/* <1e55c> ../cstrike/dlls/bmodels.cpp:122 */
void CFuncWallToggle::IsOn(void)
{
}

/* <1e53a> ../cstrike/dlls/bmodels.cpp:114 */
void CFuncWallToggle::TurnOn(void)
{
}

/* <1e518> ../cstrike/dlls/bmodels.cpp:106 */
void CFuncWallToggle::TurnOff(void)
{
}

/* <1e44e> ../cstrike/dlls/bmodels.cpp:96 */
void func_wall_toggle(entvars_t *pev)
{
//	GetClassPtr<CFuncWallToggle>(CFuncWallToggle *a);  //    96
}

/* <1e384> ../cstrike/dlls/bmodels.cpp:63 */
void func_wall(entvars_t *pev)
{
//	GetClassPtr<CFuncWall>(CFuncWall *a);  //    63
}

/* <1e28f> ../cstrike/dlls/bmodels.cpp:98 */
void CFuncWallToggle::Spawn(void)
{
//	Spawn(CFuncWall *const this);  //   100
//	TurnOff(CFuncWallToggle *const this);  //   102
}

/* <1e24f> ../cstrike/dlls/bmodels.cpp:264 */
void CFuncMonsterClip::Spawn(void)
{
//	Spawn(CFuncWall *const this);  //   266
}

/* <1e1c3> ../cstrike/dlls/bmodels.cpp:156 */
void CFuncConveyor::Spawn(void)
{
//	Spawn(CFuncWall *const this);  //   159
//	UpdateSpeed(CFuncConveyor *const this,
//			float speed);  //   174
}

/* <1e101> ../cstrike/dlls/bmodels.cpp:130 */
void CFuncWallToggle::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		int status;                                           //   132
//		IsOn(CFuncWallToggle *const this);  //   132
//		TurnOff(CFuncWallToggle *const this);  //   137
//		TurnOn(CFuncWallToggle *const this);  //   139
//	}
}

/* <1e0e8> ../cstrike/dlls/bmodels.cpp:114 */
void CFuncWallToggle::TurnOn(void)
{
}

/* <1e0cf> ../cstrike/dlls/bmodels.cpp:106 */
void CFuncWallToggle::TurnOff(void)
{
}

/* <1e021> ../cstrike/dlls/bmodels.cpp:194 */
void CFuncConveyor::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	UpdateSpeed(CFuncConveyor *const this,
//			float speed);  //   197
}

/* <1dff0> ../cstrike/dlls/bmodels.cpp:179 */
void CFuncConveyor::UpdateSpeed(float speed)
{
//	{
//		int speedCode;                                        //   182
//	}
}

/* <1dea4> ../cstrike/dlls/bmodels.cpp:517 */
void CFuncRotating::HurtTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   519
//		Length(const Vector *const this);  //   526
//		VecBModelOrigin(entvars_t *pevBModel);  //   530
//		operator-(const Vector *const this,
//				const Vector &v);  //   530
//		Normalize(const Vector *const this);  //   530
//		operator*(const Vector *const this,
//				float fl);  //   530
//	}
}

/* <1de55> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <1ddc9> ../cstrike/dlls/bmodels.cpp:219 */
void CFuncIllusionary::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   221
//	KeyValue(CFuncIllusionary *const this,
//		KeyValueData *pkvd);  //   219
}

/* <1dc21> ../cstrike/dlls/bmodels.cpp:315 */
void CFuncRotating::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   317
//	FStrEq(const char *sz1,
//		const char *sz2);  //   322
//	FStrEq(const char *sz1,
//		const char *sz2);  //   332
//	FStrEq(const char *sz1,
//		const char *sz2);  //   339
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   345
//	{
//		Vector tmp;                                     //   334
//		operator!=(const Vector *const this,
//				const Vector &v);  //   336
//	}
//	atoi(const char *__nptr);  //   341
//	atof(const char *__nptr);  //   324
//	atof(const char *__nptr);  //   319
}

/* <1db2a> ../cstrike/dlls/bmodels.cpp:765 */
void CPendulum::KeyValue(KeyValueData *pkvd)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   767
//	FStrEq(const char *sz1,
//		const char *sz2);  //   772
//	KeyValue(CBaseEntity *const this,
//		KeyValueData *pkvd);  //   778
//	atof(const char *__nptr);  //   769
//	KeyValue(CPendulum *const this,
//		KeyValueData *pkvd);  //   765
}

/* <1da85> ../cstrike/dlls/bmodels.cpp:931 */
void CPendulum::RopeTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   933
//		edict(CBaseEntity *const this);  //   946
//	}
//	RopeTouch(CPendulum *const this,
//			class CBaseEntity *pOther);  //   931
}

/* <1d9c7> ../cstrike/dlls/bmodels.cpp:782 */
void CPendulum::Spawn(void)
{
//	Spawn(CPendulum *const this);  //   782
}

/* <1d8ec> ../cstrike/dlls/bmodels.cpp:821 */
void CPendulum::PendulumUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	PendulumUse(CPendulum *const this,
//			class CBaseEntity *pActivator,
//			class CBaseEntity *pCaller,
//			USE_TYPE useType,
//			float value);  //   821
}

/* <1d873> ../cstrike/dlls/bmodels.cpp:77 */
void CFuncWall::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	Use(CFuncWall *const this,
//		class CBaseEntity *pActivator,
//		class CBaseEntity *pCaller,
//		USE_TYPE useType,
//		float value);  //    77
}

/* <1d826> ../cstrike/dlls/bmodels.cpp:310 */
void CFuncRotating::Save(CSave &save)
{
//	Save(CFuncRotating *const this,
//		class CSave &save);  //   310
}

/* <1d7d9> ../cstrike/dlls/bmodels.cpp:761 */
void CPendulum::Save(CSave &save)
{
//	Save(CPendulum *const this,
//		class CSave &save);  //   761
}

/* <1d78c> ../cstrike/dlls/bmodels.cpp:310 */
void CFuncRotating::Restore(CRestore &restore)
{
//	Restore(CFuncRotating *const this,
//		class CRestore &restore);  //   310
}

/* <1d73f> ../cstrike/dlls/bmodels.cpp:761 */
void CPendulum::Restore(CRestore &restore)
{
//	Restore(CPendulum *const this,
//		class CRestore &restore);  //   761
}

/* <1d60e> ../cstrike/dlls/bmodels.cpp:661 */
void CFuncRotating::RotatingUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	operator!=(const Vector *const this,
//			const Vector &v);  //   667
//	operator!=(const Vector *const this,
//			const Vector &v);  //   683
//	operator*(const Vector *const this,
//			float fl);  //   694
//	Rotate(CFuncRotating *const this);  //   697
}

/* <1d5c4> ../cstrike/dlls/bmodels.cpp:362 */
void CFuncRotating::Spawn(void)
{
//	operator*(const Vector ::Spawn(//			float fl);  //   404
}

/* <1d533> ../cstrike/dlls/bmodels.cpp:867 */
void CPendulum::Swing(void)
{
//	{
//		float delta;                                          //   869
//		float dt;                                             //   869
//		operator*(float fl,
//				const Vector &v);  //   885
//	}
}

/* <1d3f5> ../cstrike/dlls/bmodels.cpp:909 */
void CPendulum::Touch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   911
//		float damage;                                         //   921
//		VecBModelOrigin(entvars_t *pevBModel);  //   928
//		operator-(const Vector *const this,
//				const Vector &v);  //   928
//		Normalize(const Vector *const this);  //   928
//		operator*(const Vector *const this,
//				float fl);  //   928
//	}
}

/* <1d3dc> ../cstrike/dlls/vector.h:118 */
inline void Vector::Length(void)
{
}

/* <1d3a7> ../cstrike/dlls/bmodels.cpp:861 */
void CPendulum::Blocked(CBaseEntity *pOther)
{
}

/* <1d381> ../cstrike/dlls/bmodels.cpp:852 */
void CPendulum::Stop(void)
{
}

/* <1d35b> ../cstrike/dlls/bmodels.cpp:730 */
void CPendulum::ObjectCaps(void)
{
}

/* <1d325> ../cstrike/dlls/bmodels.cpp:706 */
void CFuncRotating::Blocked(CBaseEntity *pOther)
{
}

/* <1d304> ../cstrike/dlls/bmodels.cpp:653 */
void CFuncRotating::Rotate(void)
{
}

/* <1d28a> ../cstrike/dlls/bmodels.cpp:447 */
void CFuncRotating::Precache(void)
{
//	{
//		char *szSoundFile;                                   //   449
//		operator!=(const Vector *const this,
//				const Vector &v);  //   502
//	}
}

/* <1d264> ../cstrike/dlls/bmodels.cpp:288 */
void CFuncRotating::ObjectCaps(void)
{
}

/* <1d202> ../cstrike/dlls/bmodels.cpp:259 */
void CFuncMonsterClip::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1d1db> ../cstrike/dlls/bmodels.cpp:230 */
void CFuncIllusionary::Spawn(void)
{
}

/* <1d1b5> ../cstrike/dlls/bmodels.cpp:214 */
void CFuncIllusionary::ObjectCaps(void)
{
}

/* <1d193> ../cstrike/dlls/bmodels.cpp:65 */
void CFuncWall::Spawn(void)
{
}

/* <1d17a> ../cstrike/dlls/bmodels.cpp:65 */
void CFuncWall::Spawn(void)
{
}

/* <1d154> ../cstrike/dlls/bmodels.cpp:60 */
void CFuncWall::ObjectCaps(void)
{
}

/* <1d12e> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <1d108> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <1d0d3> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <1d0a7> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <1d06c> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <1ce92> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <1ce6c> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1ce46> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <1ce1f> ../cstrike/dlls/cbase.h:273 */
void CBaseEntity::SUB_CallUseToggle(void)
{
}

/* <1cdea> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <1cd8b> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1cd56> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1cd30> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <1cd0a> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <1cce4> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <1ccbe> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <1cc97> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1cc71> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <1cc4b> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <1cc25> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <1cbf1> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <1cbcb> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <1cba5> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <1cb71> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <1cb4b> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <1cab7> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <1ca67> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <1ca33> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <1c9ff> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <1c9b1> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <1c96f> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <1c949> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <1c923> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <1c8f1> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <1c8b1> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <1c88b> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <1c857> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <1c831> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <1c80b> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <1c7e2> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <1c7bc> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <1c796> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <1c764> ../cstrike/dlls/cbase.h:800 */
CPendulum *GetClassPtr<CPendulum>(CPendulum *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c748> ../cstrike/dlls/bmodels.cpp:720 */
inline void CPendulum::CPendulum(void)
{
}

/* <1c716> ../cstrike/dlls/cbase.h:800 */
CFuncRotating *GetClassPtr<CFuncRotating>(CFuncRotating *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c6fa> ../cstrike/dlls/bmodels.cpp:274 */
inline void CFuncRotating::CFuncRotating(void)
{
}

/* <1c6c8> ../cstrike/dlls/cbase.h:800 */
CFuncMonsterClip *GetClassPtr<CFuncMonsterClip>(CFuncMonsterClip *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c6a8> ../cstrike/dlls/bmodels.cpp:255 */
inline void CFuncMonsterClip::CFuncMonsterClip(void)
{
}

/* <1c676> ../cstrike/dlls/cbase.h:800 */
CFuncIllusionary *GetClassPtr<CFuncIllusionary>(CFuncIllusionary *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c65b> ../cstrike/dlls/bmodels.cpp:208 */
inline void CFuncIllusionary::CFuncIllusionary(void)
{
}

/* <1c63a> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <1c613> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <1c5a4> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <1c54e> ../cstrike/dlls/cbase.h:800 */
CFuncConveyor *GetClassPtr<CFuncConveyor>(CFuncConveyor *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c52e> ../cstrike/dlls/bmodels.cpp:147 */
inline void CFuncConveyor::CFuncConveyor(void)
{
}

/* <1c4fc> ../cstrike/dlls/cbase.h:800 */
CFuncWallToggle *GetClassPtr<CFuncWallToggle>(CFuncWallToggle *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c4e1> ../cstrike/dlls/bmodels.cpp:86 */
inline void CFuncWallToggle::CFuncWallToggle(void)
{
}

/* <1c4af> ../cstrike/dlls/cbase.h:800 */
CFuncWall *GetClassPtr<CFuncWall>(CFuncWall *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <1c494> ../cstrike/dlls/bmodels.cpp:53 */
inline void CFuncWall::CFuncWall(void)
{
}

/* <1c473> ../cstrike/dlls/cbase.h:253 */
inline void operator new(size_t stAllocateBlock, entvars_t *pev)
{
}

/* <1c41e> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <1c3f7> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <1c3d9> ../cstrike/dlls/bmodels.cpp:122 */
void CFuncWallToggle::IsOn(void)
{
}

/* <1c3b3> ../cstrike/dlls/vector.h:123 */
inline void Vector::Normalize(void)
{
//	{
//		float flLen;                                          //   125
//	}
}

/* <1c38c> ../cstrike/dlls/vector.h:112 */
inline void Vector::operator-(Vector &v)
{
}

/* <1c36f> ../cstrike/dlls/bmodels.cpp:43 */
Vector VecBModelOrigin(entvars_t *pevBModel)
{
}

/* <1c351> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <1c2e8> ../cstrike/dlls/bmodels.cpp:931 */
void CPendulum::RopeTouch(CBaseEntity *pOther)
{
//	{
//		entvars_t *pevOther;                                 //   933
//	}
}

/* <1c2cf> ../cstrike/dlls/cbase.h:378 */
inline void CBaseEntity::edict(void)
{
}

/* <1c2b6> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <1c28d> ../cstrike/dlls/bmodels.cpp:219 */
void CFuncIllusionary::KeyValue(KeyValueData *pkvd)
{
}

/* <1c26e> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:284 */
inline int atoi(const char *__nptr)
{
}

/* <1c255> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <1c230> ../cstrike/dlls/bmodels.cpp:765 */
void CPendulum::KeyValue(KeyValueData *pkvd)
{
}

/* <1c207> ../cstrike/dlls/cbase.h:182 */
inline void CBaseEntity::KeyValue( KeyValueData *pkvd)
{
}

/* <1c1e8> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/stdlib.h:279 */
inline double atof(const char *__nptr)
{
}

/* <1c1cb> ../cstrike/dlls/util.h:203 */
inline BOOL FStringNull(int iString)
{
}

/* <1c1b2> ../cstrike/dlls/bmodels.cpp:653 */
void CFuncRotating::Rotate(void)
{
}

/* <1c199> ../cstrike/dlls/bmodels.cpp:782 */
void CPendulum::Spawn(void)
{
}

/* <1c17a> /valve/gcc-4.6.1-glibc-2.11.1/i686-valve-linux-gnu/i686-valve-linux-gnu/sysroot/usr/include/bits/mathinline.h:477 */
inline double fabs(double __x)
{
}

/* <1c0fb> ../cstrike/dlls/bmodels.cpp:821 */
void CPendulum::PendulumUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
//	{
//		float delta;                                          //   827
//	}
}

/* <1c0d1> ../cstrike/dlls/vector.h:184 */
inline Vector operator*(float fl, Vector &v)
{
}

/* <1c0ae> ../cstrike/dlls/vector.h:113 */
inline void Vector::operator*(float fl)
{
}

/* <1c087> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <1c053> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <1c02c> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <1c000> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <1bfe2> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <1bf98> ../cstrike/dlls/bmodels.cpp:77 */
void CFuncWall::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <1bf6e> ../cstrike/dlls/bmodels.cpp:310 */
void CFuncRotating::Save(CSave &save)
{
}

/* <1bf44> ../cstrike/dlls/bmodels.cpp:761 */
void CPendulum::Save(CSave &save)
{
}

/* <1bf15> ../cstrike/dlls/bmodels.cpp:310 */
void CFuncRotating::Restore(CRestore &restore)
{
}

/* <1bee6> ../cstrike/dlls/bmodels.cpp:761 */
void CPendulum::Restore(CRestore &restore)
{
}

/* <16247> ../cstrike/dlls/animation.cpp:1115 */
/* linkage=_Z19SV_StudioSetupBonesP7model_sfiPKfS2_PKhS4_iPK7edict_s */
void SV_StudioSetupBones(model_s *pModel, float frame, int sequence, const vec_t *angles, const vec_t *origin, const byte *pcontroller, const byte *pblending, int iBone, const edict_t *pEdict)
{
//	{
//		int i;                                                //  1117
//		int j;                                                //  1117
//		float f;                                              //  1118
//		float subframe;                                       //  1118
//		float adj;                                            //  1119
//		mstudiobone_t *pbones;                               //  1120
//		mstudioseqdesc_t *pseqdesc;                          //  1121
//		mstudioanim_t *panim;                                //  1122
//		float pos;                                            //  1124
//		float bonematrix;                                     //  1125
//		float q;                                              //  1126
//		float pos2;                                           //  1127
//		float q2;                                             //  1128
//		int chain;                                            //  1130
//		int chainlength;                                      //  1131
//		vec3_t temp_angles;                                   //  1354
//		StudioCalcBoneAdj(float dadt,
//					float *adj,
//					const byte *pcontroller1,
//					const byte *pcontroller2,
//					byte mouthopen);  //  1175
//		{
//			float b;                                      //  1295
//		}
//		{
//			float pos3;                                   //  1186
//			float q3;                                     //  1187
//			float pos4;                                   //  1188
//			float q4;                                     //  1189
//			float s;                                      //  1191
//			float t;                                      //  1192
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1236
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1237
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1238
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1239
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1240
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1241
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1242
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1243
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1257
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1258
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1259
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1260
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1261
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1262
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1263
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1264
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1272
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1273
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1274
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1275
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1276
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1277
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1278
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1279
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1222
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1223
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1224
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1225
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1226
//			LookupAnimation(studiohdr_t *pstudiohdr,
//					class model_s *model,
//					mstudioseqdesc_t *pseqdesc,
//					int index);  //  1227
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1228
//		}
//		{
//			int copy;                                     //  1323
//			int gaitsequence;                             //  1324
//			StudioCalcRotations(mstudiobone_t *pbones,
//						int *chain,
//						int chainlength,
//						float *adj,
//						float *pos,
//						vec4_t *q,
//						mstudioseqdesc_t *pseqdesc,
//						mstudioanim_t *panim,
//						float f,
//						float s);  //  1333
//		}
//	}
}

/* <161fd> ../cstrike/dlls/animation.cpp:1006 */
/* linkage=_Z16ConcatTransformsPA4_fS0_S0_ */
void ConcatTransforms(float *in1, float *in2, float *out)
{
}

/* <160de> ../cstrike/dlls/animation.cpp:994 */
void StudioCalcRotations(mstudiobone_t *pbones, int *chain, int chainlength, float *adj, float *pos, vec4_t *q, mstudioseqdesc_t *pseqdesc, mstudioanim_t *panim, float f, float s)
{
//	{
//		int i;                                                //   996
//		int j;                                                //   996
//	}
}

/* <1603c> ../cstrike/dlls/animation.cpp:970 */
/* linkage=_Z16StudioSlerpBonesPA4_fPA3_fS0_S2_f */
void StudioSlerpBones(vec4_t *q1, vec3_t *pos1, vec4_t *q2, vec3_t *pos2, float s)
{
//	{
//		int i;                                                //   972
//		vec4_t q3;                                            //   973
//		float s1;                                             //   974
//	}
}

/* <15f94> ../cstrike/dlls/animation.cpp:908 */
/* linkage=_Z22StudioCalcBonePositionifP13mstudiobone_tP13mstudioanim_tPfS3_ */
void StudioCalcBonePosition(int frame, float s, mstudiobone_t *pbone, mstudioanim_t *panim, float *adj, float *pos)
{
//	{
//		int j;                                                //   910
//		int k;                                                //   910
//		mstudioanimvalue_t *panimvalue;                      //   911
//	}
}

/* <15ea6> ../cstrike/dlls/animation.cpp:828 */
/* linkage=_Z23StudioCalcBoneQuaterionifP13mstudiobone_tP13mstudioanim_tPfS3_ */
void StudioCalcBoneQuaterion(int frame, float s, mstudiobone_t *pbone, mstudioanim_t *panim, float *adj, float *q)
{
//	{
//		int j;                                                //   830
//		int k;                                                //   830
//		vec4_t q1;                                            //   831
//		vec4_t q2;                                            //   831
//		vec3_t angle1;                                        //   832
//		vec3_t angle2;                                        //   832
//		mstudioanimvalue_t *panimvalue;                      //   833
//	}
}

/* <15d90> ../cstrike/dlls/animation.cpp:749 */
mstudioanim_t *LookupAnimation(studiohdr_t *pstudiohdr, class model_s *model, mstudioseqdesc_t *pseqdesc, int index)
{
//	{
//		mstudioanim_t *panim;                                //   751
//	}
}

/* <15d12> ../cstrike/dlls/animation.cpp:715 */
/* linkage=_Z13StudioGetAnimP7model_sP16mstudioseqdesc_t */
mstudioanim_t *StudioGetAnim(model_t *m_pSubModel, mstudioseqdesc_t *pseqdesc)
{
//	{
//		mstudioseqgroup_t *pseqgroup;                        //   717
//		cache_user_t *paSequences;                           //   718
//	}
}

/* <15cd0> ../cstrike/dlls/animation.cpp:700 */
/* linkage=_Z16QuaternionMatrixPfPA4_f */
void QuaternionMatrix(vec_t *quaternion, float *matrix)
{
}

/* <15c4d> ../cstrike/dlls/animation.cpp:653 */
/* linkage=_Z15QuaternionSlerpPfS_fS_ */
void QuaternionSlerp(vec_t *p, vec_t *q, float t, vec_t *qt)
{
//	{
//		int i;                                                //   655
//		float a;                                              //   658
//		float b;                                              //   659
//	}
}

/* <15ba5> ../cstrike/dlls/animation.cpp:630 */
/* linkage=_Z15AngleQuaternionPfS_ */
void AngleQuaternion(vec_t *angles, vec_t *quaternion)
{
//	{
//		float angle;                                          //   632
//		float sr;                                             //   633
//		float sp;                                             //   633
//		float sy;                                             //   633
//		float cr;                                             //   633
//		float cp;                                             //   633
//		float cy;                                             //   633
//	}
}

/* <15aed> ../cstrike/dlls/animation.cpp:605 */
int Server_GetBlendingInterface(int version, class sv_blending_interface_s ** ppinterface, class engine_studio_api_s *pstudio, float *rotationmatrix, float *bonetransform)
{
}

/* <15a6d> ../cstrike/dlls/animation.cpp:545 */
/* linkage=_Z12GetBodygroupPvP9entvars_si */
int GetBodygroup(void *pmodel, entvars_t *pev, int iGroup)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   547
//		mstudiobodyparts_t *pbodypart;                       //   556
//		int iCurrent;                                         //   561
//	}
}

/* <159d8> ../cstrike/dlls/animation.cpp:523 */
/* linkage=_Z12SetBodygroupPvP9entvars_sii */
void SetBodygroup(void *pmodel, entvars_t *pev, int iGroup, int iValue)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   525
//		mstudiobodyparts_t *pbodypart;                       //   534
//		int iCurrent;                                         //   539
//	}
}

/* <15917> ../cstrike/dlls/animation.cpp:458 */
/* linkage=_Z14FindTransitionPviiPi */
int FindTransition(void *pmodel, int iEndingAnim, int iGoalAnim, int *piDir)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   460
//		mstudioseqdesc_t *pseqdesc;                          //   466
//		int iEndNode;                                         //   475
//		byte *pTransition;                                   //   492
//		int iInternNode;                                      //   494
//		int i;                                                //   499
//	}
}

/* <15883> ../cstrike/dlls/animation.cpp:414 */
/* linkage=_Z11SetBlendingPvP9entvars_sif */
float SetBlending(void *pmodel, entvars_t *pev, int iBlender, float flValue)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   416
//		mstudioseqdesc_t *pseqdesc;                          //   422
//		int setting;                                          //   445
//	}
}

/* <157e1> ../cstrike/dlls/animation.cpp:359 */
/* linkage=_Z13SetControllerPvP9entvars_sif */
float SetController(void *pmodel, entvars_t *pev, int iController, float flValue)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   361
//		mstudiobonecontroller_t *pbonecontroller;            //   367
//		int i;                                                //   370
//		int setting;                                          //   404
//	}
}

/* <15717> ../cstrike/dlls/animation.cpp:312 */
/* linkage=_Z17GetAnimationEventPvP9entvars_sP14MonsterEvent_tffi */
int GetAnimationEvent(void *pmodel, entvars_t *pev, MonsterEvent_t *pMonsterEvent, float flStart, float flEnd, int index)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   314
//		int events;                                           //   320
//		mstudioseqdesc_t *pseqdesc;                          //   322
//		mstudioevent_t *pevent;                              //   323
//	}
}

/* <156b3> ../cstrike/dlls/animation.cpp:297 */
/* linkage=_Z16GetSequenceFlagsPvP9entvars_s */
int GetSequenceFlags(void *pmodel, entvars_t *pev)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   299
//		mstudioseqdesc_t *pseqdesc;                          //   305
//	}
}

/* <15634> ../cstrike/dlls/animation.cpp:263 */
/* linkage=_Z15GetSequenceInfoPvP9entvars_sPfS2_ */
void GetSequenceInfo(void *pmodel, entvars_t *pev, float *pflFrameRate, float *pflGroundSpeed)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   265
//		mstudioseqdesc_t *pseqdesc;                          //   271
//	}
}

/* <15539> ../cstrike/dlls/animation.cpp:223 */
/* linkage=_Z16SequencePrecachePvPKc */
void SequencePrecache(void *pmodel, const char *pSequenceName)
{
//	{
//		int index;                                            //   225
//		LookupSequence(void *pmodel,
//				const char *label);  //   225
//		{
//			studiohdr_t *pstudiohdr;                     //   228
//			mstudioseqdesc_t *pseqdesc;                  //   234
//			mstudioevent_t *pevent;                      //   235
//			{
//				int i;                                //   240
//				IsSoundEvent(int eventNumber);  //   248
//			}
//		}
//	}
}

/* <15485> ../cstrike/dlls/animation.cpp:193 */
int LookupSequence(void *pmodel, const char *label)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   195
//		mstudioseqdesc_t *pseqdesc;                          //   201
//		{
//			int i;                                        //   205
//		}
//	}
}

/* <15439> ../cstrike/dlls/animation.cpp:178 */
/* linkage=_Z14GetEyePositionPvPf */
void GetEyePosition(void *pmodel, float *vecEyePosition)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   180
//	}
}

/* <1539a> ../cstrike/dlls/animation.cpp:149 */
/* linkage=_Z22LookupActivityHeaviestPvP9entvars_si */
int LookupActivityHeaviest(void *pmodel, entvars_t *pev, int activity)
{
//	{
//		studiohdr_t *pstudiohdr;                             //   151
//		mstudioseqdesc_t *pseqdesc;                          //   157
//		int weight;                                           //   161
//		int seq;                                              //   162
//		{
//			int i;                                        //   163
//		}
//	}
}

/* <152c6> ../cstrike/dlls/animation.cpp:81 */
/* linkage=_Z14LookupActivityPvP9entvars_si */
int LookupActivity(void *pmodel, entvars_t *pev, int activity)
{
//	{
//		studiohdr_t *pstudiohdr;                             //    83
//		mstudioseqdesc_t *pseqdesc;                          //    89
//		int i;                                                //    98
//		int weightTotal;                                      //    99
//		int activitySequenceCount;                            //   100
//		int weight;                                           //   132
//		int select;                                           //   133
//		{
//			int which;                                    //   116
//		}
//	}
}

/* <1523e> ../cstrike/dlls/animation.cpp:57 */
/* linkage=_Z11ExtractBboxPviPfS0_ */
int ExtractBbox(void *pmodel, int sequence, float *mins, float *maxs)
{
//	{
//		studiohdr_t *pstudiohdr;                             //    59
//		mstudioseqdesc_t *pseqdesc;                          //    65
//	}
}

/* <151a9> ../cstrike/dlls/animation.cpp:770 */
void StudioCalcBoneAdj(float dadt, float *adj, const byte *pcontroller1, const byte *pcontroller2, byte mouthopen)
{
//	{
//		int i;                                                //   772
//		int j;                                                //   772
//		float value;                                          //   773
//		mstudiobonecontroller_t *pbonecontroller;            //   774
//		{
//			int a;                                        //   788
//			int b;                                        //   788
//		}
//	}
}

/* <1518c> ../cstrike/dlls/animation.cpp:215 */
int IsSoundEvent(int eventNumber)
{
}

/* <10b99> ../cstrike/dlls/animating.cpp:258 */
void CBaseAnimating::SetSequenceBox(void)
{
//	{
//		Vector mins;                                    //   260
//		Vector maxs;                                    //   260
//		ExtractBbox(CBaseAnimating *const this,
//				int sequence,
//				float *mins,
//				float *maxs);  //   263
//		{
//			float yaw;                                    //   267
//			Vector xvector;                         //   269
//			Vector yvector;                         //   269
//			Vector bounds;                          //   274
//			Vector rmin;                            //   279
//			Vector rmax;                            //   280
//			Vector base;                            //   281
//			Vector transformed;                     //   281
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   280
//			Vector(Vector *const this,
//				float X,
//				float Y,
//				float Z);  //   279
//			{
//				int i;                                //   283
//				{
//					int j;                        //   286
//					{
//						int k;                //   289
//						{
//							int l;        //   298
//						}
//					}
//				}
//			}
//		}
//	}
}

/* <10b5f> ../cstrike/dlls/animating.cpp:250 */
void CBaseAnimating::ExtractBbox(int sequence, float *mins, float *maxs)
{
}

/* <10af0> ../cstrike/dlls/animating.cpp:244 */
void CBaseAnimating::GetBodygroup(int iGroup)
{
}

/* <10aad> ../cstrike/dlls/animating.cpp:239 */
void CBaseAnimating::SetBodygroup(int iGroup, int iValue)
{
}

/* <10a5d> ../cstrike/dlls/animating.cpp:234 */
void CBaseAnimating::GetAutomovement(Vector &origin, Vector &angles, float flInterval)
{
}

/* <109d4> ../cstrike/dlls/animating.cpp:215 */
void CBaseAnimating::FindTransition(int iEndingSequence, int iGoalSequence, int *piDir)
{
//	{
//		void *pmodel;                                        //   217
//		{
//			int iDir;                                     //   221
//			int sequence;                                 //   222
//		}
//	}
}

/* <10984> ../cstrike/dlls/animating.cpp:208 */
void CBaseAnimating::GetAttachment(int iAttachment, Vector &origin, Vector &angles)
{
}

/* <1092f> ../cstrike/dlls/animating.cpp:201 */
void CBaseAnimating::GetBonePosition(int iBone, Vector &origin, Vector &angles)
{
}

/* <108d3> ../cstrike/dlls/animating.cpp:192 */
void CBaseAnimating::SetBlending(int iBlender, float flValue)
{
//	{
//		void *pmodel;                                        //   194
//	}
}

/* <10893> ../cstrike/dlls/animating.cpp:180 */
void CBaseAnimating::InitBoneControllers(void)
{
//	{
//		void *pmodel;                                        //   182
//	}
}

/* <10837> ../cstrike/dlls/animating.cpp:171 */
void CBaseAnimating::SetBoneController(int iController, float flValue)
{
//	{
//		void *pmodel;                                        //   173
//	}
}

/* <107b1> ../cstrike/dlls/animating.cpp:136 */
void CBaseAnimating::DispatchAnimEvents(float flInterval)
{
//	{
//		MonsterEvent_t event;                                 //   138
//		void *pmodel;                                        //   140
//		float flStart;                                        //   152
//		float flEnd;                                          //   153
//		int index;                                            //   160
//	}
}

/* <1077c> ../cstrike/dlls/animating.cpp:126 */
void CBaseAnimating::GetSequenceFlags(void)
{
//	{
//		void *pmodel;                                        //   128
//	}
}

/* <10711> ../cstrike/dlls/animating.cpp:110 */
void CBaseAnimating::ResetSequenceInfo(void)
{
//	{
//		void *pmodel;                                        //   112
//		GetSequenceFlags(CBaseAnimating *const this);  //   115
//	}
}

/* <106eb> ../cstrike/dlls/animating.cpp:126 */
void CBaseAnimating::GetSequenceFlags(void)
{
//	{
//		void *pmodel;                                        //   128
//	}
}

/* <106a1> ../cstrike/dlls/animating.cpp:100 */
void CBaseAnimating::LookupSequence(const char *label)
{
//	{
//		void *pmodel;                                        //   102
//	}
}

/* <10653> ../cstrike/dlls/animating.cpp:91 */
void CBaseAnimating::LookupActivityHeaviest(int activity)
{
//	{
//		void *pmodel;                                        //    93
//	}
}

/* <10605> ../cstrike/dlls/animating.cpp:77 */
void CBaseAnimating::LookupActivity(int activity)
{
//	{
//		void *pmodel;                                        //    80
//	}
}

/* <105cf> ../cstrike/dlls/animating.cpp:45 */
void CBaseAnimating::StudioFrameAdvance(float flInterval)
{
}

/* <10583> ../cstrike/dlls/animating.cpp:38 */
void CBaseAnimating::Save(CSave &save)
{
//	Save(CBaseAnimating *const this,
//		class CSave &save);  //    38
}

/* <10537> ../cstrike/dlls/animating.cpp:38 */
void CBaseAnimating::Restore(CRestore &restore)
{
//	Restore(CBaseAnimating *const this,
//		class CRestore &restore);  //    38
}

/* <104e8> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <104b3> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <1048d> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <10452> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <10278> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <10252> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <1022c> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <101f7> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <10198> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <10163> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <1013d> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <10117> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <100f1> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <100cb> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <100a4> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <1007e> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <10058> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <10032> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <fffe> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <ffd8> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <ffb2> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <ff7e> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <ff58> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <fec4> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <fe74> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <fe40> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <fe0c> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <fdbe> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <fd7c> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <fd56> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <fd30> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <fcfe> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <fcbe> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <fc92> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <fc5e> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <fc38> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <fc12> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <fbf1> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <fbcb> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <fba5> ../cstrike/dlls/cbase.h:179 */
void CBaseEntity::Precache(void)
{
}

/* <fb7f> ../cstrike/dlls/cbase.h:178 */
void CBaseEntity::Spawn(void)
{
}

/* <fb66> ../cstrike/dlls/vector.h:121 */
inline void Vector::operator float*(void)
{
}

/* <fb48> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <faf4> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <fa81> ../cstrike/dlls/vector.h:113 */
inline void Vector::operator*(float fl)
{
}

/* <fa5a> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <fa26> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <f9ff> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <f9d3> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <f9b5> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <f98c> ../cstrike/dlls/animating.cpp:38 */
void CBaseAnimating::Save(CSave &save)
{
}

/* <f95e> ../cstrike/dlls/animating.cpp:38 */
void CBaseAnimating::Restore(CRestore &restore)
{
}

/* <b403> ../cstrike/dlls/ammo.cpp:272 */
void ammo_357sig(entvars_t *pev)
{
//	GetClassPtr<C357SIGAmmo>(C357SIGAmmo *a);  //   272
}

/* <b339> ../cstrike/dlls/ammo.cpp:247 */
void ammo_57mm(entvars_t *pev)
{
//	GetClassPtr<C57MMAmmo>(C57MMAmmo *a);  //   247
}

/* <b26f> ../cstrike/dlls/ammo.cpp:220 */
void ammo_338magnum(entvars_t *pev)
{
//	GetClassPtr<C338MagnumAmmo>(C338MagnumAmmo *a);  //   220
}

/* <b1a5> ../cstrike/dlls/ammo.cpp:194 */
void ammo_50ae(entvars_t *pev)
{
//	GetClassPtr<C50AEAmmo>(C50AEAmmo *a);  //   194
}

/* <b0db> ../cstrike/dlls/ammo.cpp:168 */
void ammo_45acp(entvars_t *pev)
{
//	GetClassPtr<C45ACPAmmo>(C45ACPAmmo *a);  //   168
}

/* <b011> ../cstrike/dlls/ammo.cpp:142 */
void ammo_762nato(entvars_t *pev)
{
//	GetClassPtr<C762NatoAmmo>(C762NatoAmmo *a);  //   142
}

/* <af47> ../cstrike/dlls/ammo.cpp:116 */
void ammo_556natobox(entvars_t *pev)
{
//	GetClassPtr<C556NatoBoxAmmo>(C556NatoBoxAmmo *a);  //   116
}

/* <ae7d> ../cstrike/dlls/ammo.cpp:90 */
void ammo_556nato(entvars_t *pev)
{
//	GetClassPtr<C556NatoAmmo>(C556NatoAmmo *a);  //    90
}

/* <adb3> ../cstrike/dlls/ammo.cpp:63 */
void ammo_buckshot(entvars_t *pev)
{
//	GetClassPtr<CBuckShotAmmo>(CBuckShotAmmo *a);  //    63
}

/* <ace9> ../cstrike/dlls/ammo.cpp:37 */
void ammo_9mm(entvars_t *pev)
{
//	GetClassPtr<C9MMAmmo>(C9MMAmmo *a);  //    37
}

/* <ac58> ../cstrike/dlls/ammo.cpp:237 */
void C57MMAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C57MMAmmo *const this,
//		class CBaseEntity *pOther);  //   237
}

/* <abc7> ../cstrike/dlls/ammo.cpp:210 */
void C338MagnumAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C338MagnumAmmo *const this,
//		class CBaseEntity *pOther);  //   210
}

/* <ab36> ../cstrike/dlls/ammo.cpp:184 */
void C50AEAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C50AEAmmo *const this,
//		class CBaseEntity *pOther);  //   184
}

/* <aaa5> ../cstrike/dlls/ammo.cpp:158 */
void C45ACPAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C45ACPAmmo *const this,
//		class CBaseEntity *pOther);  //   158
}

/* <aa14> ../cstrike/dlls/ammo.cpp:132 */
void C762NatoAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C762NatoAmmo *const this,
//		class CBaseEntity *pOther);  //   132
}

/* <a983> ../cstrike/dlls/ammo.cpp:106 */
void C556NatoBoxAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C556NatoBoxAmmo *const this,
//		class CBaseEntity *pOther);  //   106
}

/* <a8f2> ../cstrike/dlls/ammo.cpp:80 */
void C556NatoAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C556NatoAmmo *const this,
//		class CBaseEntity *pOther);  //    80
}

/* <a861> ../cstrike/dlls/ammo.cpp:27 */
void C9MMAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C9MMAmmo *const this,
//		class CBaseEntity *pOther);  //    27
}

/* <a7d0> ../cstrike/dlls/ammo.cpp:53 */
void CBuckShotAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(CBuckShotAmmo *const this,
//		class CBaseEntity *pOther);  //    53
}

/* <a73d> ../cstrike/dlls/ammo.cpp:262 */
void C357SIGAmmo::AddAmmo(CBaseEntity *pOther)
{
//	AddAmmo(C357SIGAmmo *const this,
//		class CBaseEntity *pOther);  //   262
}

/* <a6ee> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <a6c7> ../cstrike/dlls/ammo.cpp:16 */
void C9MMAmmo::Spawn(void)
{
}

/* <a6a0> ../cstrike/dlls/ammo.cpp:42 */
void CBuckShotAmmo::Spawn(void)
{
}

/* <a679> ../cstrike/dlls/ammo.cpp:69 */
void C556NatoAmmo::Spawn(void)
{
}

/* <a652> ../cstrike/dlls/ammo.cpp:95 */
void C556NatoBoxAmmo::Spawn(void)
{
}

/* <a62b> ../cstrike/dlls/ammo.cpp:121 */
void C762NatoAmmo::Spawn(void)
{
}

/* <a604> ../cstrike/dlls/ammo.cpp:147 */
void C45ACPAmmo::Spawn(void)
{
}

/* <a5dd> ../cstrike/dlls/ammo.cpp:173 */
void C50AEAmmo::Spawn(void)
{
}

/* <a5b6> ../cstrike/dlls/ammo.cpp:199 */
void C338MagnumAmmo::Spawn(void)
{
}

/* <a58f> ../cstrike/dlls/ammo.cpp:226 */
void C57MMAmmo::Spawn(void)
{
}

/* <a568> ../cstrike/dlls/ammo.cpp:251 */
void C357SIGAmmo::Spawn(void)
{
}

/* <a541> ../cstrike/dlls/ammo.cpp:257 */
void C357SIGAmmo::Precache(void)
{
}

/* <a51a> ../cstrike/dlls/ammo.cpp:232 */
void C57MMAmmo::Precache(void)
{
}

/* <a4f3> ../cstrike/dlls/ammo.cpp:205 */
void C338MagnumAmmo::Precache(void)
{
}

/* <a4cc> ../cstrike/dlls/ammo.cpp:179 */
void C50AEAmmo::Precache(void)
{
}

/* <a4a5> ../cstrike/dlls/ammo.cpp:153 */
void C45ACPAmmo::Precache(void)
{
}

/* <a47e> ../cstrike/dlls/ammo.cpp:127 */
void C762NatoAmmo::Precache(void)
{
}

/* <a457> ../cstrike/dlls/ammo.cpp:101 */
void C556NatoBoxAmmo::Precache(void)
{
}

/* <a430> ../cstrike/dlls/ammo.cpp:75 */
void C556NatoAmmo::Precache(void)
{
}

/* <a409> ../cstrike/dlls/ammo.cpp:48 */
void CBuckShotAmmo::Precache(void)
{
}

/* <a3e2> ../cstrike/dlls/ammo.cpp:22 */
void C9MMAmmo::Precache(void)
{
}

/* <a3bc> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <a381> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <a1a7> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <a181> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <a14c> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <a0ed> ../cstrike/dlls/cbase.h:245 */
void CBaseEntity::Use(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value)
{
}

/* <a0b8> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <a092> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <a06c> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <a046> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <a020> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <9ff9> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <9fd3> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <9fad> ../cstrike/dlls/cbase.h:224 */
void CBaseEntity::IsAlive(void)
{
}

/* <9f87> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <9f53> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <9f2d> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <9f07> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <9ed3> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <9ead> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <9e19> ../cstrike/dlls/cbase.h:214 */
void CBaseEntity::GetDelay(void)
{
}

/* <9dc9> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <9d95> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <9d61> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <9d00> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <9cbe> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <9c98> ../cstrike/dlls/cbase.h:208 */
void CBaseEntity::GetToggleState(void)
{
}

/* <9c72> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <9c40> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <9c00> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <9bda> ../cstrike/dlls/cbase.h:203 */
void CBaseEntity::BloodColor(void)
{
}

/* <9ba6> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <9b80> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <9b5a> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <9b39> ../cstrike/dlls/cbase.h:185 */
void CBaseEntity::ObjectCaps(void)
{
}

/* <9b05> ../cstrike/dlls/cbase.h:182 */
void CBaseEntity::KeyValue(KeyValueData *pkvd)
{
}

/* <9adf> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <9a62> ../cstrike/dlls/cbase.h:800 */
C357SIGAmmo *GetClassPtr<C357SIGAmmo>(C357SIGAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <9a47> ../cstrike/dlls/ammo.cpp:249 */
inline void C357SIGAmmo::C357SIGAmmo(void)
{
}

/* <9a15> ../cstrike/dlls/cbase.h:800 */
C57MMAmmo *GetClassPtr<C57MMAmmo>(C57MMAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <99fa> ../cstrike/dlls/ammo.cpp:224 */
inline void C57MMAmmo::C57MMAmmo(void)
{
}

/* <99c8> ../cstrike/dlls/cbase.h:800 */
C338MagnumAmmo *GetClassPtr<C338MagnumAmmo>(C338MagnumAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <99ad> ../cstrike/dlls/ammo.cpp:197 */
inline void C338MagnumAmmo::C338MagnumAmmo(void)
{
}

/* <997b> ../cstrike/dlls/cbase.h:800 */
C50AEAmmo *GetClassPtr<C50AEAmmo>(C50AEAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <9960> ../cstrike/dlls/ammo.cpp:171 */
inline void C50AEAmmo::C50AEAmmo(void)
{
}

/* <992e> ../cstrike/dlls/cbase.h:800 */
C45ACPAmmo *GetClassPtr<C45ACPAmmo>(C45ACPAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <9913> ../cstrike/dlls/ammo.cpp:145 */
inline void C45ACPAmmo::C45ACPAmmo(void)
{
}

/* <98e1> ../cstrike/dlls/cbase.h:800 */
C762NatoAmmo *GetClassPtr<C762NatoAmmo>(C762NatoAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <98c6> ../cstrike/dlls/ammo.cpp:119 */
inline void C762NatoAmmo::C762NatoAmmo(void)
{
}

/* <9894> ../cstrike/dlls/cbase.h:800 */
C556NatoBoxAmmo *GetClassPtr<C556NatoBoxAmmo>(C556NatoBoxAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <9879> ../cstrike/dlls/ammo.cpp:93 */
inline void C556NatoBoxAmmo::C556NatoBoxAmmo(void)
{
}

/* <9847> ../cstrike/dlls/cbase.h:800 */
C556NatoAmmo *GetClassPtr<C556NatoAmmo>(C556NatoAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <982c> ../cstrike/dlls/ammo.cpp:67 */
inline void C556NatoAmmo::C556NatoAmmo(void)
{
}

/* <97fa> ../cstrike/dlls/cbase.h:800 */
CBuckShotAmmo *GetClassPtr<CBuckShotAmmo>(CBuckShotAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <97df> ../cstrike/dlls/ammo.cpp:40 */
inline void CBuckShotAmmo::CBuckShotAmmo(void)
{
}

/* <97ad> ../cstrike/dlls/cbase.h:800 */
C9MMAmmo *GetClassPtr<C9MMAmmo>(C9MMAmmo *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <9792> ../cstrike/dlls/ammo.cpp:14 */
inline void C9MMAmmo::C9MMAmmo(void)
{
}

/* <9771> ../cstrike/dlls/cbase.h:253 */
inline void operator new(size_t stAllocateBlock, entvars_t *pev)
{
}

/* <9716> ../cstrike/dlls/weapons.h:429 */
inline void CBasePlayerAmmo::CBasePlayerAmmo(void)
{
}

/* <96f5> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <96d7> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <9683> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <965a> ../cstrike/dlls/ammo.cpp:27 */
inline void C9MMAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <9631> ../cstrike/dlls/ammo.cpp:53 */
inline void CBuckShotAmmo::AddAmmo( CBaseEntity *pOther)
{
}

/* <9608> ../cstrike/dlls/ammo.cpp:80 */
inline void C556NatoAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <95df> ../cstrike/dlls/ammo.cpp:106 */
inline void C556NatoBoxAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <95b6> ../cstrike/dlls/ammo.cpp:132 */
inline void C762NatoAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <958d> ../cstrike/dlls/ammo.cpp:158 */
inline void C45ACPAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <9564> ../cstrike/dlls/ammo.cpp:184 */
inline void C50AEAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <953b> ../cstrike/dlls/ammo.cpp:210 */
inline void C338MagnumAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <9512> ../cstrike/dlls/ammo.cpp:237 */
inline void C57MMAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <94e8> ../cstrike/dlls/ammo.cpp:262 */
inline void C357SIGAmmo::AddAmmo(CBaseEntity *pOther)
{
}

/* <9475> ../cstrike/dlls/vector.h:113 */
inline void Vector::operator*(float fl)
{
}

/* <944e> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <9415> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <93ee> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <93c2> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <939a> ../game_shared/voice_gamemgr.h:26 */
inline void IVoiceGameMgrHelper::~IVoiceGameMgrHelper( int const __in_chrg)
{
}

/* <5329> ../cstrike/dlls/airtank.cpp:41 */
void item_airtank(entvars_t *pev)
{
//	GetClassPtr<CAirtank>(CAirtank *a);  //    41
}

/* <525d> ../cstrike/dlls/airtank.cpp:96 */
void CAirtank::TankTouch(CBaseEntity *pOther)
{
//	TankTouch(CAirtank *const this,
//			class CBaseEntity *pOther);  //    96
//	EMIT_SOUND(edict_t *entity,
//			int channel,
//			const char *sample,
//			float volume,
//			float attenuation);  //   104
}

/* <5211> ../cstrike/dlls/airtank.cpp:47 */
void CAirtank::Save(CSave &save)
{
//	Save(CAirtank *const this,
//		class CSave &save);  //    47
}

/* <51c5> ../cstrike/dlls/airtank.cpp:47 */
void CAirtank::Restore(CRestore &restore)
{
//	Restore(CAirtank *const this,
//		class CRestore &restore);  //    47
}

/* <5176> ../cstrike/dlls/cbase.h:227 */
void CBaseEntity::HasTarget(string_t targetname)
{
//	FStrEq(const char *sz1,
//		const char *sz2);  //   227
}

/* <50dd> ../cstrike/dlls/airtank.cpp:50 */
void CAirtank::Spawn(void)
{
//	Vector(Vector::Spawn(//		float X,
//		float Y,
//		float Z);  //    58
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    58
}

/* <503d> ../cstrike/dlls/airtank.cpp:78 */
void CAirtank::Killed(entvars_t *pevAttacker, int iGib)
{
//	Vector(Vector *const this,
//		float X,
//		float Y,
//		float Z);  //    84
//	Vector(Vector *const this,
//		const Vector &v);  //    84
}

/* <5016> ../cstrike/dlls/airtank.cpp:88 */
void CAirtank::TankThink(void)
{
}

/* <4fef> ../cstrike/dlls/airtank.cpp:71 */
void CAirtank::Precache(void)
{
}

/* <4fc9> ../cstrike/dlls/airtank.cpp:29 */
void CAirtank::BloodColor(void)
{
}

/* <4fa3> ../cstrike/dlls/weapons.h:101 */
void CGrenade::ObjectCaps(void)
{
}

/* <4f7d> ../cstrike/dlls/basemonster.h:91 */
void CBaseMonster::IsAlive(void)
{
}

/* <4f57> ../cstrike/dlls/basemonster.h:61 */
void CBaseMonster::ResetMaxSpeed(void)
{
}

/* <4f31> ../cstrike/dlls/basemonster.h:60 */
void CBaseMonster::PainSound(void)
{
}

/* <4f0b> ../cstrike/dlls/cbase.h:602 */
void CBaseToggle::GetDelay(void)
{
}

/* <4ee5> ../cstrike/dlls/cbase.h:601 */
void CBaseToggle::GetToggleState(void)
{
}

/* <4eb0> ../cstrike/dlls/cbase.h:542 */
void CBaseAnimating::HandleAnimEvent(MonsterEvent_t *pEvent)
{
}

/* <4e84> ../cstrike/dlls/cbase.h:387 */
void CBaseEntity::Illumination(void)
{
}

/* <4e49> ../cstrike/dlls/cbase.h:385 */
void CBaseEntity::BodyTarget(Vector &posSrc)
{
}

/* <4c6f> ../cstrike/dlls/cbase.h:377 */
void CBaseEntity::FBecomeProne(void)
{
}

/* <4c49> ../cstrike/dlls/cbase.h:371 */
void CBaseEntity::UpdateOwner(void)
{
}

/* <4c23> ../cstrike/dlls/cbase.h:277 */
void CBaseEntity::Respawn(void)
{
}

/* <4bee> ../cstrike/dlls/cbase.h:250 */
void CBaseEntity::Blocked(CBaseEntity *pOther)
{
}

/* <4bb9> ../cstrike/dlls/cbase.h:244 */
void CBaseEntity::Touch(CBaseEntity *pOther)
{
}

/* <4b93> ../cstrike/dlls/cbase.h:243 */
void CBaseEntity::Think(void)
{
}

/* <4b6d> ../cstrike/dlls/cbase.h:231 */
void CBaseEntity::TeamID(void)
{
}

/* <4b47> ../cstrike/dlls/cbase.h:230 */
void CBaseEntity::IsNetClient(void)
{
}

/* <4b21> ../cstrike/dlls/cbase.h:229 */
void CBaseEntity::IsPlayer(void)
{
}

/* <4afa> ../cstrike/dlls/cbase.h:226 */
void CBaseEntity::ReflectGauss(void)
{
}

/* <4ad4> ../cstrike/dlls/cbase.h:225 */
void CBaseEntity::IsBSPModel(void)
{
}

/* <4aae> ../cstrike/dlls/cbase.h:223 */
void CBaseEntity::IsSneaking(void)
{
}

/* <4a7a> ../cstrike/dlls/cbase.h:222 */
void CBaseEntity::OnControls(entvars_t *pev)
{
}

/* <4a54> ../cstrike/dlls/cbase.h:221 */
void CBaseEntity::StopSneaking(void)
{
}

/* <4a2e> ../cstrike/dlls/cbase.h:220 */
void CBaseEntity::StartSneaking(void)
{
}

/* <49fa> ../cstrike/dlls/cbase.h:219 */
void CBaseEntity::SetToggleState(int state)
{
}

/* <49d4> ../cstrike/dlls/cbase.h:216 */
void CBaseEntity::OverrideReset(void)
{
}

/* <4916> ../cstrike/dlls/cbase.h:213 */
void CBaseEntity::GiveAmmo(int iAmount, char *szName, int iMax)
{
}

/* <48e2> ../cstrike/dlls/cbase.h:212 */
void CBaseEntity::RemovePlayerItem(CBasePlayerItem *pItem)
{
}

/* <48ae> ../cstrike/dlls/cbase.h:211 */
void CBaseEntity::AddPlayerItem(CBasePlayerItem *pItem)
{
}

/* <484d> ../cstrike/dlls/cbase.h:210 */
void CBaseEntity::AddPointsToTeam(int score, BOOL bAllowNegativeScore)
{
}

/* <480b> ../cstrike/dlls/cbase.h:209 */
void CBaseEntity::AddPoints(int score, BOOL bAllowNegativeScore)
{
}

/* <47e5> ../cstrike/dlls/cbase.h:207 */
void CBaseEntity::MySquadMonsterPointer(void)
{
}

/* <47b3> ../cstrike/dlls/cbase.h:206 */
void CBaseEntity::MyMonsterPointer(void)
{
}

/* <477f> ../cstrike/dlls/cbase.h:205 */
void CBaseEntity::IsTriggered(CBaseEntity *pActivator)
{
}

/* <474b> ../cstrike/dlls/cbase.h:194 */
void CBaseEntity::DeathNotice(entvars_t *pevChild)
{
}

/* <4725> ../cstrike/dlls/cbase.h:193 */
void CBaseEntity::Classify(void)
{
}

/* <46ff> ../cstrike/dlls/cbase.h:186 */
void CBaseEntity::Activate(void)
{
}

/* <46d9> ../cstrike/dlls/cbase.h:181 */
void CBaseEntity::Restart(void)
{
}

/* <46a7> ../cstrike/dlls/cbase.h:800 */
CAirtank *GetClassPtr<CAirtank>(CAirtank *a)
{
//	{
//		entvars_t *pev;                                      //   802
//	}
}

/* <468c> ../cstrike/dlls/airtank.cpp:23 */
inline void CAirtank::CAirtank(void)
{
}

/* <466b> ../cstrike/dlls/cbase.h:253 */
inline void operator new(size_t stAllocateBlock, entvars_t *pev)
{
}

/* <464e> ../cstrike/dlls/enginecallback.h:97 */
inline void *GET_PRIVATE(edict_t *pent)
{
}

/* <4631> ../cstrike/dlls/util.h:180 */
inline entvars_t *VARS(edict_t *pent)
{
}

/* <4611> ../cstrike/dlls/weapons.h:56 */
inline void CGrenade::CGrenade(void)
{
}

/* <45eb> ../cstrike/dlls/basemonster.h:18 */
inline void CBaseMonster::CBaseMonster(void)
{
}

/* <4536> ../cstrike/dlls/cbase.h:569 */
inline void CBaseToggle::CBaseToggle(void)
{
}

/* <449f> ../cstrike/dlls/cbase.h:526 */
inline void CBaseAnimating::CBaseAnimating(void)
{
}

/* <4430> ../cstrike/dlls/cbase.h:509 */
inline void CBaseDelay::CBaseDelay(void)
{
}

/* <43f1> ../cstrike/dlls/cbase.h:166 */
inline void CBaseEntity::CBaseEntity(void)
{
}

/* <43d3> ../cstrike/dlls/cbase.h:454 */
inline void CPointEntity::ObjectCaps(void)
{
}

/* <437f> ../cstrike/dlls/cbase.h:185 */
inline void CBaseEntity::ObjectCaps(void)
{
}

/* <435b> ../cstrike/dlls/airtank.cpp:96 */
void CAirtank::TankTouch(CBaseEntity *pOther)
{
}

/* <4310> ../cstrike/dlls/util.h:570 */
inline void EMIT_SOUND(edict_t *entity, int channel, const char *sample, float volume, float attenuation)
{
}

/* <42e8> ../cstrike/dlls/util.h:246 */
inline BOOL FStrEq(const char *sz1, const char *sz2)
{
}

/* <42c1> ../cstrike/dlls/vector.h:104 */
inline void Vector::Vector(Vector &v)
{
}

/* <4299> ../cstrike/dlls/util.h:157 */
inline edict_t *ENT(const entvars_t *pev)
{
}

/* <4276> ../cstrike/dlls/vector.h:113 */
inline void Vector::operator*(float fl)
{
}

/* <424f> ../cstrike/dlls/vector.h:111 */
inline void Vector::operator+(Vector &v)
{
}

/* <421b> ../cstrike/dlls/vector.h:101 */
inline void Vector::Vector( float X, float Y, float Z)
{
}

/* <41f4> ../cstrike/dlls/vector.h:110 */
inline void Vector::operator!=(Vector &v)
{
}

/* <41c8> ../cstrike/dlls/vector.h:109 */
inline void Vector::operator==(Vector &v)
{
}

/* <41aa> ../cstrike/dlls/vector.h:100 */
inline void Vector::Vector(void)
{
}

/* <4181> ../cstrike/dlls/airtank.cpp:47 */
void CAirtank::Save(CSave &save)
{
}

/* <4153> ../cstrike/dlls/airtank.cpp:47 */
void CAirtank::Restore(CRestore &restore)
{
}

